<Type Name="WorksheetFunction" FullName="Microsoft.Office.Interop.Excel.WorksheetFunction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0e8779a13b1ae831ceba99e1523c885328838f42" />
    <Meta Name="ms.sourcegitcommit" Value="e7d3480b6ad64431c29c74a1b422c662de0b511d" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="09/17/2018" />
    <Meta Name="ms.locfileid" Value="20574613" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface WorksheetFunction" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract WorksheetFunction" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.WorksheetFunction" />
  <TypeSignature Language="VB.NET" Value="Public Interface WorksheetFunction" />
  <TypeSignature Language="C++ CLI" Value="public interface class WorksheetFunction" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00020845-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wird als Container für Excel-Arbeitsblattfunktionen, die aus Visual Basic aufgerufen werden können.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="_WSFunction">
      <MemberSignature Language="C#" Value="public object _WSFunction (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _WSFunction([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction._WSFunction(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _WSFunction (Optional Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(169)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrInt">
      <MemberSignature Language="C#" Value="public double AccrInt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrInt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrInt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrInt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16853)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Emissionsdatum - das Emissionsdatum des Wertpapiers</param>
        <param name="Arg2">Erster Zins - der erste Zinstermin des Wertpapiers</param>
        <param name="Arg3">Abrechnung - das Abrechnungsdatum des Wertpapiers</param>
        <param name="Arg4">Zins - der jährliche Kuponzinssatz des Wertpapiers</param>
        <param name="Arg5">Nennwert - der Nennwert des Wertpapiers</param>
        <param name="Arg6">Häufigkeit - die Anzahl der Zinszahlungen pro Jahr</param>
        <param name="Arg7">Basis - die Art der zu verwendenden Basis für die Zählung der Zinstage</param>
        <summary>Gibt die aufgelaufenen Zinsen für ein Wertpapier zurück, das regelmäßig Zinsen abwirft.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <para>In der folgenden Tabelle werden die Werte, die für verwendet werden können <paramref name="Arg5" />.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrIntM">
      <MemberSignature Language="C#" Value="public double AccrIntM (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrIntM([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrIntM(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrIntM (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16854)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Das Emissionsdatum des Wertpapiers.</param>
        <param name="Arg2">Das Fälligkeitsdatum für das Wertpapier.</param>
        <param name="Arg3">Der jährliche Kuponzinssatz des Wertpapiers.</param>
        <param name="Arg4">Der Nennwert des Wertpapiers. Wenn Sie dies nicht angeben, verwendet ACCRINTM 1.000$.</param>
        <param name="Arg5">Die Basis, auf der die Zinstage gezählt werden.</param>
        <summary>Gibt die aufgelaufenen Zinsen für ein Wertpapier zurück, das bei Fälligkeit Zinsen abwirft.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <para>In der folgenden Tabelle werden die Werte, die für verwendet werden können <paramref name="Arg5" />.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>Die folgende Liste enthält Informationen, die beim Arbeiten mit AUFGELZINSF beachten:</para>
          <list type="bullet">
            <item>
              <description>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt.</description>
            </item>
            <item>
              <description>issue, maturity und basis werden zu ganzen Zahlen gekürzt.</description>
            </item>
            <item>
              <description>Wenn für issue oder maturity kein gültiges Datum angegeben wird, generiert ACCRINTM einen Fehler.</description>
            </item>
            <item>
              <description>Wenn rate ≤ 0 oder par ≤ 0, generiert ACCRINTM einen Fehler.</description>
            </item>
            <item>
              <description>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4 ist, generiert ACCRINTM einen Fehler. </description>
            </item>
            <item>
              <description>Wenn issue ≥ maturity, generiert ACCRINTM einen Fehler.</description>
            </item>
            <item>
              <description>ACCRINTM wird wie folgt berechnet: 

 </description>
            </item>
          </list>
          <para>Dabei gilt Folgendes:</para>
          <para>A = Anzahl der aufgelaufenen monatlich gezählt. Für Zinsen bei Fälligkeit Elemente wird die Anzahl der Tage ab dem Datum der Emission zum Fälligkeitstermin verwendet.</para>
          <para>D = Jahresbasis.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public double Acos (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acos([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acos (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acos(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16483)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Kosinus des gesuchten Winkels; er muss zwischen -1 und 1 liegen.</param>
        <summary>Gibt den Arkuskosinus oder Arkuskosinus einer Zahl zurück. Der Arkuskosinus ist der Winkel, dessen Kosinus ist <paramref name="Arg1" />. Der zurückgegebene Winkel wird im Bogenmaß im Bereich von 0 (null) bis pi angegeben.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Sie das Ergebnis vom Bogenmaß in Grad umrechnen möchten, multiplizieren Sie es mit 180/PI(), oder verwenden Sie die Degrees-Methode.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public double Acosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16617)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine reelle Zahl größer oder gleich 1.</param>
        <summary>Gibt den umgekehrten hyperbolischen Kosinus einer Zahl zurück. Anzahl muss größer als oder gleich 1 sein. Der umgekehrte hyperbolische Kosinus ist der Wert, dessen hyperbolischer Kosinus ist <paramref name="Arg1" />, sodass Acosh(Cosh(number)) entspricht <paramref name="Arg1" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acot">
      <MemberSignature Language="C#" Value="public double Acot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16932)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Kotangens des gewünschten Winkels.</param>
        <summary>Gibt die Arccotangent einer Zahl im Bogenmaß im Bereich 0 bis Pi zurück.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acoth">
      <MemberSignature Language="C#" Value="public double Acoth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acoth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acoth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acoth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acoth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16933)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Kotangens des Winkels, die Sie möchten.</param>
        <summary>Gibt den hyperbolischen arkuskotangens einer Zahl zurück.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Aggregate">
      <MemberSignature Language="C#" Value="public double Aggregate (double Arg1, double Arg2, Microsoft.Office.Interop.Excel.Range Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Aggregate([in]float64 Arg1, [in]float64 Arg2, [in]class Microsoft.Office.Interop.Excel.Range Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Aggregate(System.Double,System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Aggregate (Arg1 As Double, Arg2 As Double, Arg3 As Range, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16869)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Funktionsnummer - Eine Nummer von 1 bis 19, welche die zu verwendende Funktion angibt.</param>
        <param name="Arg2">Option - Ein numerischer Wert, der bestimmt, welche Werte im Auswertungsbereich der Funktion ignoriert werden sollen.</param>
        <param name="Arg3">Bez1 - Das erste numerische Argument für Funktionen, die mehrere numerische Argumente unterstützen und deren Aggregatwert Sie bestimmen möchten.</param>
        <param name="Arg4">Bez2 - Bez30 - Numerische Argumente von 2 bis 30, deren Aggregatwert Sie wünschen.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt ein Aggregat in einer Liste oder Datenbank zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die folgenden Einschränkungen gelten für die bezugsargumente (Arg3 - Arg 30) basierend auf dem Wert von <b>Funktionsnummer</b> .</para>
          <list type="table">
            <item>
              <term>1 bis 13</term>
              <description>Gültige Typen: eine beliebige Zelle verweisen Unions Schnittpunkten definierte Namen strukturierte ReferencesInvalid Typen: tatsächlichen Datenarrays</description>
              <description>Gültige Typen: eine beliebige Zelle verweisen Unions Schnittpunkten definierte Namen strukturierte ReferencesInvalid Typen: tatsächlichen Datenarrays</description>
              <description>Gültige Typen: eine beliebige Zelle verweisen Unions Schnittpunkten definierte Namen strukturierte ReferencesInvalid Typen: tatsächlichen Datenarrays</description>
            </item>
            <item>
              <term>14 17</term>
              <description>Gültige Typen: beliebiger Zellbezug Unions Schnittpunkten definierten Namen strukturierte Verweise Istwert Datenarrays</description>
              <description>Gültige Typen: beliebiger Zellbezug Unions Schnittpunkten definierten Namen strukturierte Verweise Istwert Datenarrays</description>
              <description>Keine Bezüge erlaubt</description>
            </item>
          </list>
          <para>Wenn ein zweites "Bez"-Argument erforderlich, aber nicht angegeben ist, gibt die AGGREGATE-Methode den Fehlerwert #WERT! zurück.</para>
          <para>Wenn einer oder mehrere Bezüge 3D-Bezüge sind, gibt die AGGREGATE-Methode den Fehlerwert #WERT!-Fehler zurück.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorDegrc">
      <MemberSignature Language="C#" Value="public double AmorDegrc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorDegrc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorDegrc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorDegrc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16850)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Kosten des Vermögenswerts.</param>
        <param name="Arg2">Das Kaufdatum des Vermögenswerts.</param>
        <param name="Arg3">Das Enddatum des ersten Zinstermins.</param>
        <param name="Arg4">Restwert am Ende der Lebensdauer eines Vermögenswerts.</param>
        <param name="Arg5">Der Zeitraum.</param>
        <param name="Arg6">Der Abschreibungssatz.</param>
        <param name="Arg7">Die zu verwendende Jahresbasis.</param>
        <summary>Gibt die Abschreibung für einen Abrechnungszeitraum zurück. Diese Funktion wird für das französische Buchführungssystem bereitgestellt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Vermögenswert in der Mitte des Abrechnungszeitraums erworben wird, wird die anteilige Abschreibung berücksichtigt. Die Methode ähnelt <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, außer dass ein Abschreibungskoeffizient in der Berechnung je nach während der Lebensdauer der Anlagen angewendet wird. Die folgende Tabelle beschreibt die Werte, die in <paramref name="Arg7" />.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>360 Tage (NASD-Methode)</description>
            </item>
            <item>
              <term>1</term>
              <description>Tatsächlich</description>
            </item>
            <item>
              <term>3</term>
              <description>365 Tage in einem Jahr</description>
            </item>
            <item>
              <term>4</term>
              <description>360 Tage in einem Jahr (europäische Methode)</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Diese Funktion gibt die Abschreibung bis zum letzten Zinstermin in der Lebensdauer der Vermögenswerte oder bis zu dem Zeitpunkt zurück, zu dem der kumulierte Wert der Abschreibung größer als die Kosten der Vermögenswerte abzüglich des Restwerts ist.</para>
          <para>Die Abschreibungskoeffizienten lauten wie folgt: 

</para>
          <list type="table">
            <item>
              <term>Zwischen 3 und 4 Jahren</term>
              <description>1,5</description>
            </item>
            <item>
              <term>Zwischen 5 und 6 Jahren</term>
              <description>2</description>
            </item>
            <item>
              <term>Mehr als 6 Jahre</term>
              <description>2,5</description>
            </item>
          </list>
          <para>Der Abschreibungssatz steigt für den Zeitraum vor dem letzten Zeitraum auf 50 Prozent an und wird bis zum letzten Zeitraum auf 100 Prozent gesteigert.</para>
          <para>Wenn die Lebensdauer der Warengüter zwischen 0 (Null) und 1, 1 und 2, 2 und 3 oder 4 und 5 liegt, wird der Fehlerwert #NUM! zurückgegeben.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorLinc">
      <MemberSignature Language="C#" Value="public double AmorLinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorLinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorLinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16851)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Kosten des Vermögenswerts.</param>
        <param name="Arg2">Das Kaufdatum des Vermögenswerts.</param>
        <param name="Arg3">Das Enddatum des ersten Zinstermins.</param>
        <param name="Arg4">Restwert am Ende der Lebensdauer eines Vermögenswerts.</param>
        <param name="Arg5">Der Zeitraum.</param>
        <param name="Arg6">Der Abschreibungssatz.</param>
        <param name="Arg7">Die zu verwendende Jahresbasis.</param>
        <summary>Gibt die Abschreibung für einen Abrechnungszeitraum zurück. Diese Funktion wird für das französische Buchführungssystem bereitgestellt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Vermögenswert in der Mitte des Abrechnungszeitraums erworben wird, wird die anteilige Abschreibung berücksichtigt. Die folgende Tabelle beschreibt die für verwendeten Werte <paramref name="Arg7" />.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>360 Tage (NASD-Methode)</description>
            </item>
            <item>
              <term>1</term>
              <description>Tatsächlich</description>
            </item>
            <item>
              <term>3</term>
              <description>365 Tage in einem Jahr</description>
            </item>
            <item>
              <term>4</term>
              <description>360 Tage in einem Jahr (europäische Methode)</description>
            </item>
          </list>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public bool And (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool And([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.And(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function And (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16420)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 bis 30 Bedingungen, den, die Sie testen möchten, die <b>true</b> oder <b>false</b>sein können.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt <b>true,</b> Wenn alle Argumente <b>true</b>; sind Gibt <b>false</b> zurück, wenn mindestens ein Argument <b>false</b>ist.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Argumente müssen Wahrheitswerte wie <b>true</b> oder <b>false</b>ergeben, oder die Argumente müssen Arrays oder Bezüge, die Wahrheitswerte enthalten sein. </para>
          <para>Wenn ein Array- oder Bezugsargument Text oder leere Zellen enthält, werden diese Werte ignoriert.</para>
          <para>Wenn der angegebene Bereich keine Wahrheitswerte enthält, generiert diese Methode einen Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wenn ohne einen Objektbezeichner verwendet wird, gibt diese Eigenschaft ein <see cref="T:Microsoft.Office.Interop.Excel.Application" /> -Objekt, das die Anwendung Microsoft Excel darstellt. Wenn ohne einen Objektbezeichner verwendet wird, gibt diese Eigenschaft ein <see cref="T:Microsoft.Office.Interop.Excel.Application" /> -Objekt, das den Ersteller des angegebenen Objekts darstellt. Sie können diese Eigenschaft mit einem OLE-Automatisierungsobjekt verwenden, um die Anwendung dieses Objekts zurückzugeben. Schreibgeschützt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arabic">
      <MemberSignature Language="C#" Value="public double Arabic (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Arabic([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Arabic(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Arabic (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Arabic(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16967)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die römisches, den, die Sie konvertieren möchten.</param>
        <summary>Konvertiert eine arabische Ziffer ein römisches in.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public string Asc (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Asc([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Asc(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16598)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Text oder ein Bezug auf eine Zelle mit dem zu ändernden Text. Wenn der Text keine Doppelbytezeichen enthält, wird keine Konvertierung vorgenommen.</param>
        <summary>Double-Byte-Zeichensatz (DBCS) Sprachen, Änderungen voller Breite (Doppelbytezeichen) Zeichen halber Breite Zeichen (Einzelbyte)-Zeichen.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public double Asin (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asin([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asin (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asin(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16482)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Sinus des gesuchten Winkels, muss zwischen -1 und 1 liegen.</param>
        <summary>Gibt den Arkussinus oder Arkussinus einer Zahl zurück. Der Arkussinus ist der Winkel, dessen Sinus ist <paramref name="Arg1" />. Der zurückgegebene Winkel im Bogenmaß im Bereich erhält-Pi/2 und Pi/2.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Arkussinus in Grad ausgedrückt werden soll, Multiplizieren Sie das Ergebnis mit 180/PI (), oder verwenden Sie die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> Methode.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public double Asinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16616)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine beliebige reelle Zahl.</param>
        <summary>Gibt den umgekehrten hyperbolischen Sinus einer Zahl zurück. Der umgekehrte hyperbolische Sinus ist der Wert, dessen hyperbolischer Sinus ist <paramref name="Arg1" />, sodass Asinh(Sinh(number)) entspricht <paramref name="Arg1" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public double Atan2 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atan2([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atan2 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atan2(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16481)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die X-Koordinate des Punkts.</param>
        <param name="Arg2">Die Y-Koordinate des Punkts.</param>
        <summary>Gibt den Arkustangens oder den umgekehrten Tangens der angegebenen X- und Y-Koordinaten zurück. Der Arkustangens ist der Winkel zwischen der X-Achse und einer Geraden mit dem Ursprung (0, 0) und einem Punkt mit den Koordinaten (x_num, y_num). Der Winkel wird im Bogenmaß zwischen -Pi und Pi, ausschließlich Pi, angegeben.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Ein positives Ergebnis stellt einen Winkel gegen den Uhrzeigersinn ausgehend von der X-Achse dar; ein negatives Ergebnis stellt einen Winkel im Uhrzeigersinn dar.</para>
          <para>
            <b>ATAN2(a,b)</b> entspricht <b>Atan(b/a)</b>, es sei denn, die eine in <b>Atan2</b>den Wert 0. </para>
          <para>Wenn beide <paramref name="Arg1" /> und <paramref name="Arg2" /> sind 0, gibt Atan2 einen Fehlerwert zurück. </para>
          <para>Arkustangens in Grad ausgedrückt werden soll, Multiplizieren Sie das Ergebnis mit 180/PI (), oder verwenden Sie die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> Methode.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public double Atanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16618)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine beliebige reelle Zahl zwischen 1 und -1.</param>
        <summary>Gibt den umgekehrten hyperbolischen Tangens einer Zahl zurück. Die Zahl muss zwischen -1 und 1 (ausschließlich -1 und 1) liegen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Der umgekehrte hyperbolische Tangens ist der Wert, dessen hyperbolischer Tangens <b>Arg1</b>, ist gleich <b>Atanh(Tanh(Zahl)) gleich</b><paramref name="Arg1" />.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AveDev">
      <MemberSignature Language="C#" Value="public double AveDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AveDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AveDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AveDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16653)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 bis 30 Argumente, für die der Durchschnitt der absoluten Abweichung ermittelt werden soll. Sie können auch ein Array oder einen Bezug auf ein Array anstelle der durch Komma getrennten Argumente verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt die durchschnittliche absolute Abweichung von Datenpunkten von ihrem Mittelwert zurück. AveDev ist ein Maß für die Varianz in einem Datensatz.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>AveDev</b> wird durch die Maßeinheit in den Eingabedaten beeinflusst. </para>
          <para>Bei den Argumenten muss es sich um Zahlen oder Namen, Arrays oder Bezüge mit Zahlen handeln.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in der Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Die Formel für die durchschnittliche Abweichung lautet wie folgt: 

</para>
          <para>Abbildung 1: Gleichung für die durchschnittliche Abweichung</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public double Average (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Average([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Average(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Average (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16389)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 bis 30 numerische Argumente, für die der Mittelwert ermittelt werden soll.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den Mittelwert (arithmetisches Mittel) der Argumente zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht. Wenn Sie Wahrheitswerte und Textdarstellungen von Zahlen in einem Bezug als Bestandteil der Berechnung berücksichtigen möchten, verwenden Sie die AVERAGEA-Funktion. </para>
          <para>Die <b>durchschnittliche</b> -Methode Maßnahmen zentrale Tendenz der Speicherort des Mittelpunkts des einer Gruppe von Zahlen in einer statistischen Verteilung ist. Die drei sind die meisten gemeinsamen zentrale Tendenz:</para>
          <list type="bullet">
            <item>
              <description>Mittelwert. Dies ist das arithmetische Mittel, das berechnet wird, indem Zahlen addiert werden und die Summe dann durch die Anzahl der Summanden geteilt wird. Der Mittelwert von 2, 3, 3, 5, 7 und 10 beträgt beispielsweise 30 geteilt durch 6, also 5.</description>
            </item>
            <item>
              <description>Medianwert. Dies ist die mittlere Zahl in einer Gruppe von Zahlen. Dies bedeutet, dass die Hälfte der Zahlen größer als der Median und die Hälfte der Zahlen kleiner als der Median ist. Der Median von 2, 3, 3, 5, 7 und 10 ist beispielsweise 4.</description>
            </item>
            <item>
              <description>Modalwert. Dies ist die Zahl, die in einer Gruppe von Zahlen am häufigsten vorkommt. Der Modalwert von 2, 3, 3, 5, 7 und 10 ist beispielsweise 3.</description>
            </item>
          </list>
          <para>Bei einer symmetrischen Verteilung in einer Gruppe von Zahlen sind diese drei Arten der zentralen Tendenz gleich. Bei einer nicht symmetrischen Verteilung in einer Gruppe von Zahlen können die Werte unterschiedlich sein.</para>
          <para>Durchschnitts von Zellen, berücksichtigen Sie beim des Unterschieds zwischen leeren Zellen und Zellen mit dem Wert 0 (null), insbesondere dann, wenn Sie nicht NULL Werte das Kontrollkästchen auf der Registerkarte Ansicht (Befehl "Optionen", im Menü Extras) ausgewählt ist. Leere Zellen werden nicht gezählt, aber Nullwerte sind.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIf">
      <MemberSignature Language="C#" Value="public double AverageIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16867)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine oder mehrere Zellen, deren Mittelwert ermittelt werden soll.</param>
        <param name="Arg2">Die Kriterien in Form einer Zahl, Ausdruck, Zellbezug oder Text, der definiert, welche Zellen der Durchschnitt ermittelt werden. Kriterien können beispielsweise als 32, ausgedrückt werden "32", "&gt;32", "Äpfel" oder B4.</param>
        <param name="Arg3">Der tatsächliche Satz von Zellen, deren Mittelwert ermittelt werden soll. Wenn Length angegeben, wird der Bereich verwendet.</param>
        <summary>Gibt den Mittelwert (arithmetisches Mittel) aller Zellen in einem Bereich zurück, die ein bestimmtes Kriterium erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Zellen in Bereich, die <b>true</b> oder <b>false</b> enthalten, werden ignoriert. </para>
          <para>Wenn eine Zelle im Bereich oder Mittelwert_Bereich leer ist, wird Sie von <b>AverageIf</b> ignoriert. </para>
          <para>Wenn eine Zelle in Kriterien leer ist, wird Sie von <b>AverageIf</b> wie dem Wert 0 behandelt. </para>
          <para>Wenn keine Zellen in der Besprechung Bereich generiert die Kriterien <b>AverageIf</b> einen Fehlerwert. </para>
          <para>In Kriterien können Sie die Platzhalterzeichen Sternchen (*) und Fragezeichen (?) verwenden. Mit einem Fragezeichen erfolgt ein Abgleich mit jedem einzelnen Zeichen; mit einem Stern erfolgt ein Abgleich mit einer beliebigen Abfolge von Zeichen. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, geben Sie vor dem Zeichen eine Tilde (~) ein.</para>
          <para>Die Größe von Mittelwert_Bereich muss nicht der Größe von Bereich entsprechen. Die Zellen, aus denen der Mittelwert tatsächlich berechnet wird, werden ermittelt, indem die Zelle oben links in Mittelwert_Bereich als Anfangszelle herangezogen wird und dann alle Zellen eingeschlossen werden, deren Größe und Form Bereich entsprechen, wie im folgenden Beispiel dargestellt:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>Die <b>AverageIf</b> -Methode Maßnahmen zentrale Tendenz der Speicherort des Mittelpunkts des einer Gruppe von Zahlen in einer statistischen Verteilung ist. Die drei sind die meisten gemeinsamen zentrale Tendenz:</para>
          <list type="bullet">
            <item>
              <description>Mittelwert. Dies ist das arithmetische Mittel, das berechnet wird, indem Zahlen addiert werden und die Summe dann durch die Anzahl der Summanden geteilt wird. Der Mittelwert von 2, 3, 3, 5, 7 und 10 beträgt beispielsweise 30 geteilt durch 6, also 5.</description>
            </item>
            <item>
              <description>Medianwert. Dies ist die mittlere Zahl in einer Gruppe von Zahlen. Dies bedeutet, dass die Hälfte der Zahlen größer als der Median und die Hälfte der Zahlen kleiner als der Median ist. Der Median von 2, 3, 3, 5, 7 und 10 ist beispielsweise 4.</description>
            </item>
            <item>
              <description>Modalwert. Dies ist die Zahl, die in einer Gruppe von Zahlen am häufigsten vorkommt. Der Modalwert von 2, 3, 3, 5, 7 und 10 ist beispielsweise 3.</description>
            </item>
          </list>
          <para>Bei einer symmetrischen Verteilung in einer Gruppe von Zahlen sind diese drei Arten der zentralen Tendenz gleich. Bei einer nicht symmetrischen Verteilung in einer Gruppe von Zahlen können die Werte unterschiedlich sein.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIfs">
      <MemberSignature Language="C#" Value="public double AverageIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16868)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ein oder mehrere Bereiche, in denen die zugeordneten Kriterien ausgewertet werden sollen.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>Gibt den Mittelwert (arithmetisches Mittel) aller Zellen zurück, die mehrere Kriterien erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn eine Zelle in Mittelwert_Bereich leer ist, wird Sie von <b>AverageIfs</b> ignoriert. </para>
          <para>Wenn eine Zelle in einem Kriterienbereich leer ist, wird Sie von <b>AverageIfs</b> wie dem Wert 0 behandelt. </para>
          <para>Zellen in Bereich, die <b>true</b> enthalten, werden als 1 ausgewertet; Zellen in Bereich, die <b>false</b> enthalten, werden als 0 (null) ausgewertet. </para>
          <para>Die Zellen in Mittelwert_Bereich werden bei der Ermittlung des Mittelwerts nur berücksichtigt, wenn alle angegebenen Kriterien für diese Zelle wahr sind.</para>
          <para>Wenn Zellen in Mittelwert_Bereich leer sind oder Textwerte, die nicht in Zahlen umgewandelt werden können nicht enthalten, generiert <b>AverageIfs</b> einen Fehler. </para>
          <para>Wenn keine Zellen, die alle Kriterien erfüllt sind, generiert <b>AverageIfs</b> einen Fehlerwert. </para>
          <para>In Kriterien können Sie die Platzhalterzeichen Sternchen (*) und Fragezeichen (?) verwenden. Mit einem Fragezeichen erfolgt ein Abgleich mit jedem einzelnen Zeichen; mit einem Stern erfolgt ein Abgleich mit einer beliebigen Abfolge von Zeichen. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, geben Sie vor dem Zeichen eine Tilde (~) ein.</para>
          <para>Die Größe von Kriterien_Bereich muss nicht der Größe von Mittelwert_Bereich entsprechen. Die Zellen, aus denen der Mittelwert tatsächlich berechnet wird, werden ermittelt, indem die Zelle oben links in Kriterien_Bereich als Anfangszelle herangezogen wird und dann alle Zellen eingeschlossen werden, deren Größe und Form Bereich entsprechen, wie im folgenden Beispiel dargestellt:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>Die <b>AverageIfs</b> Funktion Maßnahmen zentrale Tendenz der Speicherort des Mittelpunkts des einer Gruppe von Zahlen in einer statistischen Verteilung ist. Die drei sind die meisten gemeinsamen zentrale Tendenz:</para>
          <list type="bullet">
            <item>
              <description>Mittelwert. Dies ist das arithmetische Mittel, das berechnet wird, indem Zahlen addiert werden und die Summe dann durch die Anzahl der Summanden geteilt wird. Der Mittelwert von 2, 3, 3, 5, 7 und 10 beträgt beispielsweise 30 geteilt durch 6, also 5.</description>
            </item>
            <item>
              <description>Medianwert. Dies ist die mittlere Zahl in einer Gruppe von Zahlen. Dies bedeutet, dass die Hälfte der Zahlen größer als der Median und die Hälfte der Zahlen kleiner als der Median ist. Der Median von 2, 3, 3, 5, 7 und 10 ist beispielsweise 4.</description>
            </item>
            <item>
              <description>Modalwert. Dies ist die Zahl, die in einer Gruppe von Zahlen am häufigsten vorkommt. Der Modalwert von 2, 3, 3, 5, 7 und 10 ist beispielsweise 3.</description>
            </item>
          </list>
          <para>Bei einer symmetrischen Verteilung in einer Gruppe von Zahlen sind diese drei Arten der zentralen Tendenz gleich. Bei einer nicht symmetrischen Verteilung in einer Gruppe von Zahlen können die Werte unterschiedlich sein.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BahtText">
      <MemberSignature Language="C#" Value="public string BahtText (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string BahtText([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BahtText(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function BahtText (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ BahtText(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16752)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine Zahl, die in Text umgewandelt werden soll, oder ein Bezug auf eine Zelle mit einer Zahl oder Formel, die eine Zahl ergibt.</param>
        <summary>Wandelt eine Zahl in Thai-Text um und fügt das Suffix "Baht" hinzu</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Base">
      <MemberSignature Language="C#" Value="public string Base (double Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Base([in]float64 Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Base(System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Base (Arg1 As Double, Arg2 As Double, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16955)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Zahl, die Sie konvertieren möchten.</param>
        <param name="Arg2">Die Basis, der Sie die Zahl in konvertieren möchten.</param>
        <param name="Arg3">Die minimale Länge der zurückgegebenen Zeichenfolge. Wenn führende Nullen weggelassene nicht hinzugefügt werden.</param>
        <summary>Wandelt eine Zahl in eine Textdarstellung mit der angegebenen Basis (Basis-).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselI">
      <MemberSignature Language="C#" Value="public double BesselI (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselI([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselI(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselI (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselI(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16812)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Die Ordnung der Besselfunktion. Wenn es sich bei n nicht um eine ganze Zahl handelt, wird die Zahl gekürzt.</param>
        <summary>Gibt die geänderte Besselfunktion zurück, die der Besselfunktion entspricht, die für imaginäre Argumente ausgewertet wird.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn x nicht numerisch ist, gibt BesselI den Fehlerwert #VALUE! zurück. </para>
          <para>Wenn n nicht numerisch ist, generiert BesselI einen Fehlerwert. </para>
          <para>Wenn n &lt; 0, gibt BesselI generiert einen Fehlerwert. </para>
          <para>Die geänderte Besselfunktion der n-ten Ordnung für die Variable x lautet wie folgt: 

</para>
          <para>Abbildung 1: Besselfunktion der Variablen x</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselJ">
      <MemberSignature Language="C#" Value="public double BesselJ (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselJ([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselJ(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselJ (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselJ(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16809)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Die Ordnung der Besselfunktion. Wenn es sich bei n nicht um eine ganze Zahl handelt, wird die Zahl gekürzt.</param>
        <summary>Gibt die Besselfunktion zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn x nicht numerisch ist, generiert <b>BesselJ</b> einen Fehlerwert. </para>
          <para>
            <b>Wenn n nicht numerisch ist, generiert BESSELJ</b> der generiert einen Fehlerwert. </para>
          <para>Wenn n &lt; 0, <b>gibt BesselJ</b> generiert einen Fehlerwert. </para>
          <para>Die Besselfunktion der n-ten Ordnung für die Variable x lautet wie folgt: 

 </para>
          <para>Abbildung 1: Besselfunktion der Variablen x</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>Abbildung 2: Gammafunktion</para>
          <para></para>
          <para></para>
          <para>ist die Gammafunktion.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselK">
      <MemberSignature Language="C#" Value="public double BesselK (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselK([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselK(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselK (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselK(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16810)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Die Ordnung der Funktion. Wenn es sich bei n nicht um eine ganze Zahl handelt, wird die Zahl gekürzt.</param>
        <summary>Gibt die geänderte Besselfunktion zurück, die den Besselfunktionen entspricht, die für imaginäre Argumente ausgewertet werden.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn x nicht numerisch ist, generiert <b>BesselK</b> einen Fehlerwert. </para>
          <para>Wenn n nicht numerisch ist, generiert <b>BesselK</b> einen Fehlerwert. </para>
          <para>Wenn n &lt; 0, <b>gibt BesselK</b> generiert einen Fehlerwert. </para>
          <para>Die geänderte Besselfunktion der n-ten Ordnung für die Variable x lautet wie folgt: 

 </para>
          <para>Abbildung 1: Besselfunktion der Variablen x</para>
          <para></para>
          <para></para>
          <para>Dabei handelt es sich bei Jn und Yn um die J- und die Y-Besselfunktion.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselY">
      <MemberSignature Language="C#" Value="public double BesselY (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselY([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselY(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselY (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselY(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16811)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Die Ordnung der Funktion. Wenn es sich bei n nicht um eine ganze Zahl handelt, wird die Zahl gekürzt.</param>
        <summary>Gibt die Besselfunktion zurück, die auch als Weberfunktion oder Neumannfunktion bezeichnet wird.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn x nicht numerisch ist, generiert <b>BesselY</b> einen Fehlerwert. </para>
          <para>Wenn n nicht numerisch ist, generiert <b>BesselY</b> einen Fehlerwert. </para>
          <para>Wenn n &lt; 0, <b>BesselY</b> generiert einen Fehlerwert. </para>
          <para>Die Besselfunktion der n-ten Ordnung für die Variable x lautet wie folgt: 

 </para>
          <para>Abbildung 1: Besselfunktion der Variablen x</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Dist">
      <MemberSignature Language="C#" Value="public double Beta_Dist (double Arg1, double Arg2, double Arg3, bool Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16909)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert zwischen A und B, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Der Parameter Alpha der Verteilung.</param>
        <param name="Arg3">Der Parameter Beta der Verteilung.</param>
        <param name="Arg4">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Kumuliert ist <b>true</b>, BETA. Verteiler gibt Werte die Verteilungsfunktion zurück. Wenn <b>false</b>, die Wahrscheinlichkeitswert der Funktion zurückgegeben.</param>
        <param name="Arg5">Eine optionale Untergrenze für das Intervall von x.</param>
        <param name="Arg6">Eine optionale Obergrenze für das Intervall von x.</param>
        <summary>Gibt die kumulierte Betaverteilungsfunktion zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Betaverteilung wird häufig zum Untersuchen der Streuung von Prozentsätzen eines Werts in Stichproben verwendet, beispielsweise der Anteil der Zeit, den jemand an einem Tag mit Fernsehen verbringt.</para>
          <list type="bullet">
            <item>
              <description>Wenn ein Argument nicht numerisch ist, gibt <b>Beta.dist</b> den #VALUE! Fehlerwert.</description>
            </item>
            <item>
              <description>Wenn Alpha ≤ 0 oder Beta ≤ 0, <b>Beta.dist</b> einen Fehlerwert generiert.</description>
            </item>
            <item>
              <description>Wenn x &lt; A, X &gt; B oder A = B, generiert <b>Beta.dist</b> einen Fehlerwert.</description>
            </item>
            <item>
              <description>Wenn Sie keine Werte für A und B (die unter- und Obergrenze), <b>Beta.dist</b> verwendet die kumulierte standardbetaverteilung, sodass A = 0 und B = 1.</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Inv">
      <MemberSignature Language="C#" Value="public double Beta_Inv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16910)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine der Betaverteilung zugeordnete Wahrscheinlichkeit.</param>
        <param name="Arg2">Der Parameter Alpha der Verteilung.</param>
        <param name="Arg3">Der Betaparameter der Verteilung.</param>
        <param name="Arg4">Eine optionale Untergrenze für das Intervall von x.</param>
        <param name="Arg5">Eine optionale Obergrenze für das Intervall von x.</param>
        <summary>Gibt die Umkehrung der kumulierten Verteilungsfunktion für eine angegebene Betaverteilung zurück. Wenn die Wahrscheinlichkeit BETA.DIST(x,...) entspricht, gilt BETA.INV(Wahrsch,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Mithilfe der Betaverteilung können bei der Projektplanung mögliche Fertigstellungszeitpunkte ermittelt werden, wenn ein erwarteter Fertigstellungstermin und eine Variabilität angegeben werden.</para>
          <list type="bullet">
            <item>
              <description>Wenn ein Argument nicht numerisch ist, generiert <b>Beta.Inv</b> einen Fehlerwert.</description>
            </item>
            <item>
              <description>Wenn Alpha ≤ 0 oder Beta ≤ 0, <b>Beta.Inv</b> einen Fehlerwert generiert.</description>
            </item>
            <item>
              <description>Wenn Wahrsch ≤ 0 oder Wahrsch &gt; 1, <b>Beta.Inv</b> generiert einen Fehlerwert.</description>
            </item>
            <item>
              <description>Wenn Sie keine Werte für A und B (die unter- und Obergrenze), <b>Beta.Inv</b> verwendet die kumulierte standardbetaverteilung, sodass A = 0 und B = 1.</description>
            </item>
          </list>
          <para>Für Wahrscheinlichkeit einen Wert angezeigt, sucht <b>Beta.Inv</b> den Wert dieser Beta.dist (X, Alpha, Beta, TRUE, A, B) = Wahrscheinlichkeit. Folglich Genauigkeit von <b>Beta.Inv</b> hängt von der Genauigkeit von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />. <b>Beta.Inv</b> verwendet eine iterative Suche.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaDist">
      <MemberSignature Language="C#" Value="public double BetaDist (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16654)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert zwischen A und B, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Ein Parameter der Verteilung.</param>
        <param name="Arg3">Ein Parameter der Verteilung.</param>
        <param name="Arg4">Eine optionale Untergrenze für das Intervall von x.</param>
        <param name="Arg5">Eine optionale Obergrenze für das Intervall von x.</param>
        <summary>Gibt die kumulierte Betaverteilungsfunktion zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" /> Methode.</para>
          <para>Die Betaverteilung wird häufig zum Untersuchen der Streuung von Prozentsätzen eines Werts in Stichproben verwendet, beispielsweise der Anteil der Zeit, den jemand an einem Tag mit Fernsehen verbringt.</para>
          <list type="bullet">
            <item>
              <description>Wenn ein Argument nicht numerisch ist, gibt <b>BETAVERT</b> den #VALUE! Fehlerwert.</description>
            </item>
            <item>
              <description>Wenn Alpha ≤ 0 oder Beta ≤ 0, <b>gibt BETAVERT</b> einen Fehlerwert generiert.</description>
            </item>
            <item>
              <description>Wenn x &lt; A, X &gt; B oder A = B, <b>BETAVERT einen Fehlerwert</b> .</description>
            </item>
            <item>
              <description>Wenn Sie keine Werte für A und B, <b>gibt BETAVERT</b> verwendet die kumulierte standardbetaverteilung, sodass A = 0 und B = 1.</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaInv">
      <MemberSignature Language="C#" Value="public double BetaInv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaInv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16656)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine der Betaverteilung zugeordnete Wahrscheinlichkeit.</param>
        <param name="Arg2">Der Parameter Alpha der Verteilung.</param>
        <param name="Arg3">Der Betaparameter der Verteilung.</param>
        <param name="Arg4">Eine optionale Untergrenze für das Intervall von x.</param>
        <param name="Arg5">Eine optionale Obergrenze für das Intervall von x.</param>
        <summary>Gibt die Umkehrung der kumulierten Verteilungsfunktion für eine angegebene Betaverteilung zurück. Wenn die Wahrscheinlichkeit BetaVert(x,...) entspricht, gilt BetaInv(Wahrsch,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> Methode.</para>
          <para>Mithilfe der Betaverteilung können bei der Projektplanung mögliche Fertigstellungszeitpunkte ermittelt werden, wenn ein erwarteter Fertigstellungstermin und eine Variabilität angegeben werden.</para>
          <list type="bullet">
            <item>
              <description>Wenn ein Argument nicht numerisch ist, generiert <b>BetaInv</b> einen Fehlerwert.</description>
            </item>
            <item>
              <description>Wenn Alpha ≤ 0 oder Beta ≤ 0, <b>gibt BetaInv</b> einen Fehlerwert generiert. </description>
            </item>
            <item>
              <description>Wenn Wahrsch ≤ 0 oder Wahrsch &gt; 1, <b>gibt BetaInv</b> generiert einen Fehlerwert. </description>
            </item>
            <item>
              <description>Wenn Sie keine Werte für A und B, <b>BetaInv</b> verwendet die kumulierte standardbetaverteilung, sodass A = 0 und B = 1.</description>
            </item>
          </list>
          <para>Einem bestimmten sucht <b>BetaInv</b> den Wert x, so dass BETAVERT (X, Alpha, Beta, A, B) = Wahrscheinlichkeit. Daher hängt die Genauigkeit von <b>BetaInv</b> von Genauigkeit von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" />. <b>BetaInv</b> verwendet eine iterative Suche. Wenn die Suche nach 100 Iterationen nicht zusammengeführt wurde, generiert die Funktion einen Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Dec">
      <MemberSignature Language="C#" Value="public string Bin2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Bin2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16777)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die zu konvertierende binäre Zahl. Die Zahl darf nicht mehr als 10 Zeichen (10 Bits) enthalten. Das wichtigste Bit der Zahl ist das Vorzeichenbit. Bei den verbleibenden 9 Bits handelt es sich um die Bits für den Absolutbetrag. Negative Zahlen werden in der Zweierkomplementschreibweise dargestellt.</param>
        <summary>Wandelt eine binäre Zahl in eine Dezimalzahl um.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn die Zahl keine gültige binäre Zahl ist oder mehr als 10 Zeichen (10 Bits) enthält, generiert Bin2Dec einen Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Hex">
      <MemberSignature Language="C#" Value="public string Bin2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16779)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die zu konvertierende binäre Zahl. Die Zahl darf nicht mehr als 10 Zeichen (10 Bits) enthalten. Das wichtigste Bit der Zahl ist das Vorzeichenbit. Bei den verbleibenden 9 Bits handelt es sich um die Bits für den Absolutbetrag. Negative Zahlen werden in der Zweierkomplementschreibweise dargestellt.</param>
        <param name="Arg2">Die Anzahl der Zeichen angezeigt werden sollen. Wenn dies nicht angegeben ist, verwendet <b>Bin2Hex</b> die Mindestanzahl der Zeichen erforderlich. Wert für stellen eignet sich für den Rückgabewert mit führenden 0 (Nullen).</param>
        <summary>Konvertiert eine binäre Zahl in eine Hexadezimalzahl.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Zahl keine gültige binäre Zahl ist oder mehr als 10 Zeichen (10 Bits) enthält, generiert <b>Bin2Hex</b> einen Fehler. </para>
          <para>Wenn Zahl negativ ist, <b>Bin2Hex</b> ignoriert und gibt eine hexadezimale Zahl mit 10 zurück. </para>
          <para>Wenn für <b>Bin2Hex</b> mehr als Stellen Zeichen erforderlich sind, wird ein Fehler generiert. </para>
          <para>Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn der Wert für stellen nicht numerisch ist, generiert <b>Bin2Hex</b> einen Fehler. </para>
          <para>Ist Stellen negativ, generiert <b>Bin2Hex</b> einen Fehler.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Oct">
      <MemberSignature Language="C#" Value="public string Bin2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16778)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die zu konvertierende binäre Zahl. Die Zahl darf nicht mehr als 10 Zeichen (10 Bits) enthalten. Das wichtigste Bit der Zahl ist das Vorzeichenbit. Bei den verbleibenden 9 Bits handelt es sich um die Bits für den Absolutbetrag. Negative Zahlen werden in der Zweierkomplementschreibweise dargestellt.</param>
        <param name="Arg2">Die Anzahl der Zeichen angezeigt werden sollen. Wenn dies nicht angegeben ist, verwendet <b>Bin2Oct</b> die Mindestanzahl der Zeichen erforderlich. Wert für stellen eignet sich für den Rückgabewert mit führenden 0 (Nullen).</param>
        <summary>Konvertiert eine binäre Zahl in eine oktale Zahl.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Zahl keine gültige binäre Zahl ist oder mehr als 10 Zeichen (10 Bits) enthält, generiert <b>Bin2Oct</b> einen Fehler. </para>
          <para>Ist Zahl negativ, ignoriert <b>Bin2Oct</b> , und gibt eine aus 10 Zeichen bestehende Oktalzahl zurück. </para>
          <para>Wenn für <b>Bin2Oct</b> mehr als Stellen Zeichen erforderlich sind, wird ein Fehler generiert. </para>
          <para>Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn der Wert für stellen nicht numerisch ist, generiert <b>Bin2Oct</b> einen Fehler. </para>
          <para>Ist Stellen negativ, generiert <b>Bin2Oct</b> einen Fehler.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist">
      <MemberSignature Language="C#" Value="public double Binom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16870)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl_Erfolge – die Anzahl der Erfolge in einer Versuchsreihe.</param>
        <param name="Arg2">Versuche – die Anzahl der voneinander unabhängigen Versuche.</param>
        <param name="Arg3">Erfolgswahrsch – die Wahrscheinlichkeit eines Erfolgs für jeden Versuch.</param>
        <param name="Arg4">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Kumuliert ist <b>True</b>, und klicken Sie dann die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> -Methode gibt die Verteilungsfunktion, also die Wahrscheinlichkeit, die es sich in den meisten Zahl_Erfolge Erfolge befinden; zurück. Wenn <b>False</b>, die Wahrscheinlichkeitsfunktion zurückgegeben wird also die Wahrscheinlichkeit, dass Erfolge_S Erfolge vorliegen.</param>
        <summary>Gibt Wahrscheinlichkeiten einer binomialverteilten Zufallsvariablen zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie die <b>Binom_Dist</b> -Methode bei Problemen mit einer festen Anzahl von Tests oder versuchen, wenn die Ergebnisse sind nur Erfolg oder Fehler, wenn Tests unabhängig sind und die Wahrscheinlichkeit eines Erfolgs des Experiments konstant ist. Beispielsweise kann die <b>Binom_Dist</b> -Methode die Wahrscheinlichkeit zu ermitteln, dass zwei von drei Neugeborenen männlich sind. </para>
          <list type="bullet">
            <item>
              <description>Zahl_Erfolge und Versuche werden auf ganze Zahlen abgerundet.</description>
            </item>
            <item>
              <description>Wenn Zahl_Erfolge, Versuche oder Erfolgswahrsch nicht numerisch ist, generiert die <b>Binom_Dist</b> -Methode einen Fehler. </description>
            </item>
            <item>
              <description>Wenn Zahl_Erfolge &lt; 0 oder Zahl_Erfolge &gt; Versuche, die <b>Binom_Dist</b> -Methode generiert einen Fehler. </description>
            </item>
            <item>
              <description>Wenn Erfolgswahrsch &lt; 0 oder Erfolgswahrsch &gt; 1, die <b>Binom_Dist</b> -Methode generiert einen Fehler. Die Dichtefunktion der Binomialverteilung lautet: 

 </description>
            </item>
          </list>
          <para>Dabei gilt Folgendes:</para>
          <para>Abbildung 2: Formel</para>
          <para></para>
          <para></para>
          <para>Kombinationen(n;x) ist.</para>
          <para>Das Verteilungsfunktion der Binomialverteilung lautet:</para>
          <para>Abbildung 3: Verteilungsfunktion der Binomialverteilung</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist_Range">
      <MemberSignature Language="C#" Value="public double Binom_Dist_Range (double Arg1, double Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist_Range([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist_Range(System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist_Range (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16958)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Anzahl der voneinander unabhängigen Versuche.</param>
        <param name="Arg2">Die Wahrscheinlichkeit eines Erfolgs für jeden Versuch.</param>
        <param name="Arg3">Die Anzahl der Erfolge in einer Versuchsreihe.</param>
        <param name="Arg4">Wenn angegeben, gibt diese Funktion die Wahrscheinlichkeit, dass die Anzahl der erfolgreichen Versuche zwischen Arg3 und Arg4 aufgeführt sind.</param>
        <summary>Gibt die Wahrscheinlichkeit ein Studien Ergebnis mithilfe einer einer binomialverteilten Zufallsvariablen zurück.</summary>
        <returns>Gleitkommawert mit doppelter Genauigkeit</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Inv">
      <MemberSignature Language="C#" Value="public double Binom_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16871)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Versuche – die Anzahl der Bernoulliexperimente.</param>
        <param name="Arg2">Erfolgswahrsch – die Wahrscheinlichkeit eines Erfolgs für jeden Versuch.</param>
        <param name="Arg3">Alpha – die grenzwahrscheinlichkeit.</param>
        <summary>Gibt die Umkehrung der Wahrscheinlichkeiten einer binomialverteilten Zufallsvariablen zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Versuche, Erfolgswahrsch oder Alpha nicht numerisch ist, generiert die <b>Binom_Inv</b> -Methode einen Fehler. </para>
          <para>Ist Versuche keine ganze Zahl, werden die Nachkommastellen abgeschnitten.</para>
          <para>Wenn Versuche &lt; 0, die <b>Binom_Inv</b> -Methode generiert einen Fehler. </para>
          <para>Wenn Erfolgswahrsch &lt; 0 oder Erfolgswahrsch &gt; 1, die <b>Binom_Inv</b> -Methode generiert einen Fehler. </para>
          <para>Wenn Alpha &lt; 0 oder Alpha &gt; 1, die <b>Binom_Inv</b> -Methode generiert einen Fehler.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BinomDist">
      <MemberSignature Language="C#" Value="public double BinomDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BinomDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BinomDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16657)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Anzahl der Erfolge in einer Versuchsreihe.</param>
        <param name="Arg2">Die Anzahl der voneinander unabhängigen Versuche.</param>
        <param name="Arg3">Die Wahrscheinlichkeit eines Erfolgs für jeden Versuch.</param>
        <param name="Arg4">Ein logischer Wert, der die Form der Funktion bestimmt. Kumuliert ist <b>true</b>, <b>gibt BINOMVERT</b> die Verteilungsfunktion zurück, also die Wahrscheinlichkeit, dass es höchstens Zahl_Erfolge Erfolge. Wenn <b>false</b>, die Wahrscheinlichkeitsfunktion zurückgegeben wird also die Wahrscheinlichkeit, dass Erfolge_S Erfolge vorliegen.</param>
        <summary>Gibt Wahrscheinlichkeiten einer binomialverteilten Zufallsvariablen zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <b>BINOMVERT</b> bei Problemen mit einer festen Anzahl von Tests oder versuchen, wenn die Ergebnisse sind nur Erfolg oder Fehler, wenn Tests unabhängig sind und die Wahrscheinlichkeit eines Erfolgs des Experiments konstant ist. Beispielsweise können <b>BINOMVERT</b> die Wahrscheinlichkeit zu ermitteln, dass zwei von drei Neugeborenen männlich sind. </para>
          <para>Zahl_Erfolge und Versuche werden auf ganze Zahlen abgerundet.</para>
          <para>Wenn Zahl_Erfolge, Versuche oder Erfolgswahrsch nicht numerisch ist, generiert <b>BinomDist</b> einen Fehler. </para>
          <para>Wenn Zahl_Erfolge &lt; 0 oder Zahl_Erfolge &gt; Versuche, <b>BinomDist</b> einen Fehler generiert. </para>
          <para>Wenn Erfolgswahrsch &lt; 0 oder Erfolgswahrsch &gt; 1 ist, generiert <b>BinomDist</b> einen Fehler. </para>
          <para>Die Dichtefunktion der Binomialverteilung lautet: 

 </para>
          <para>Abbildung 1: Binomialverteilung</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>Abbildung 2: Formel</para>
          <para></para>
          <para></para>
          <para>Kombinationen(n;x) ist.</para>
          <para>Das Verteilungsfunktion der Binomialverteilung lautet:</para>
          <para>Abbildung 3: Verteilungsfunktion der Binomialverteilung</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitand">
      <MemberSignature Language="C#" Value="public double Bitand (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitand([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitand(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitand (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitand(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16946)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die dezimale Darstellung des binäre Zahl ausgewertet werden soll.</param>
        <param name="Arg2">Die dezimale Darstellung des binäre Zahl ausgewertet werden soll.</param>
        <summary>Gibt eine "bitweise und" zweier Zahlen zurück.</summary>
        <returns>DOUBLE-WERT</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitlshift">
      <MemberSignature Language="C#" Value="public double Bitlshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitlshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitlshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitlshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitlshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16949)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die dezimale Darstellung des binäre Zahl ausgewertet werden soll.</param>
        <param name="Arg2">Die Anzahl von Bits an die gewünschten UMSCHALT Arg1 um nach links.</param>
        <summary>Gibt eine Zahl Wert durch Shift_amount Bits nach links verschoben.</summary>
        <returns>DOUBLE-WERT</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitor">
      <MemberSignature Language="C#" Value="public double Bitor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16947)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die dezimale Darstellung des binäre Zahl ausgewertet werden soll.</param>
        <param name="Arg2">Die dezimale Darstellung des binäre Zahl ausgewertet werden soll.</param>
        <summary>Gibt eine bitweise OR 2 Zahlen zurück.</summary>
        <returns>DOUBLE-WERT</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitrshift">
      <MemberSignature Language="C#" Value="public double Bitrshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitrshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitrshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitrshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitrshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16950)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die dezimale Darstellung des binäre Zahl ausgewertet werden soll.</param>
        <param name="Arg2">Die Anzahl von Bits an, denen Arg1 nach rechts verschoben werden soll.</param>
        <summary>Gibt eine Wert Zahl durch Shift_amount Bits nach rechts verschoben wurden.</summary>
        <returns>DOUBLE-WERT</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitxor">
      <MemberSignature Language="C#" Value="public double Bitxor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitxor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitxor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitxor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitxor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16948)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die dezimale Darstellung des binäre Zahl ausgewertet werden soll.</param>
        <param name="Arg2">Die dezimale Darstellung des binäre Zahl ausgewertet werden soll.</param>
        <summary>Gibt eine bitweise 'exklusive oder' zweier Zahlen.</summary>
        <returns>DOUBLE-WERT</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public double Ceiling (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ceiling(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16672)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – der Wert, den Sie runden möchten.</param>
        <param name="Arg2">Schritt – das Vielfache, auf das gerundet werden soll.</param>
        <summary>Gibt eine auf das nächste Vielfache von Schritt aufgerundete Zahl zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" /> Methode.</para>
          <para>Wenn Sie beispielsweise in Preisen keine Centbeträge angeben möchten und ein Produkt 4,42 $ kostet, verwenden Sie zum Aufrunden auf das nächste Vielfache von 5 Cent folgende Formel: Ceiling(4.42,0.05).</para>
          <para>Ist ein Argument nicht numerisch, generiert <b>Ceiling</b> einen Fehler.</para>
          <para>Unabhängig vom Vorzeichen der Zahl wird ein Wert aufgerundet. Wenn der Wert für Zahl bereits ein Vielfaches von Schritt darstellt, erfolgt keine Rundung.</para>
          <para>Wenn Zahl und Schritt unterschiedliche Vorzeichen aufweisen, generiert Ceiling einen Fehler.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Math">
      <MemberSignature Language="C#" Value="public double Ceiling_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16975)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, den Sie runden möchten.</param>
        <param name="Arg2">Das Vielfache, auf das gerundet werden sollen.</param>
        <param name="Arg3">Beim angegebenen und ungleich NULL ist, wird diese Funktion Weg von Null runden.</param>
        <summary>Rundet eine Zahl, oben, auf die nächste ganze Zahl oder auf das nächstliegende Vielfache von Schritt.</summary>
        <returns>DOUBLE-WERT</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Precise">
      <MemberSignature Language="C#" Value="public double Ceiling_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16930)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – der Wert, den Sie runden möchten.</param>
        <param name="Arg2">Schritt – das Vielfache, auf das gerundet werden soll.</param>
        <summary>Gibt die angegebene Zahl, gerundet auf das nächstliegende Vielfache von Schritt, zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Sie beispielsweise in Preisen keine Centbeträge angeben möchten und ein Produkt 4,42 $ kostet, verwenden Sie zum Aufrunden auf das nächste Vielfache von 5 Cent folgende Formel: Ceiling(4.42,0.05).</para>
          <para>Abhängig vom Vorzeichen der Zahl und der Schrittargumente, rundet die <b>Ceiling_Precise</b>-Methode entweder zu Null oder von Null.</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>Runden in Richtung Null</description>
            </item>
            <item>
              <term>+/+</term>
              <description>Aufrunden auf eine Stelle.</description>
            </item>
            <item>
              <term>-/+</term>
              <description>Runden in Richtung Null</description>
            </item>
            <item>
              <term>+/-</term>
              <description>Aufrunden auf eine Stelle.</description>
            </item>
          </list>
          <para>Ist ein Argument nicht numerisch, generiert <b>Ceiling_Precise</b> einen Fehler.</para>
          <para>Ist Zahl ein genaues Vielfaches von Schritt, erfolgt keine Rundung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiDist">
      <MemberSignature Language="C#" Value="public double ChiDist (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiDist([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiDist (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiDist(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16658)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, für den die Verteilung evaluiert werden soll.</param>
        <param name="Arg2">Die Anzahl der Freiheitsgrade.</param>
        <summary>Gibt Werte der Verteilungsfunktion (1-Alpha) einer Chi-Quadrat-verteilten Zufallsgröße zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu den neuen Funktionen finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" /> Methoden.</para>
          <para>Die Verteilung χ2 ist ein Test χ2 zugeordnet. Verwenden Sie den Test mit χ2-Test beobachtete und erwartete Werte.</para>
          <para>In einem Genexperiment kann beispielsweise die Hypothese aufgestellt werden, dass die nächste Pflanzengeneration bestimmte Farben aufweisen wird. Durch das Vergleichen der beobachteten Ergebnisse mit den erwarteten Ergebnissen können Sie entscheiden, ob die Ausgangshypothese wahr ist.</para>
          <para>Wenn ein Argument nicht numerisch ist, generiert <b>CHIVERT</b> einen Fehler. </para>
          <para>Wenn x negativ ist, generiert <b>CHIVERT</b> einen Fehler. </para>
          <para>Wenn der Wert für Freiheitsgrade keine ganze Zahl darstellt, wird die Zahl gekürzt.</para>
          <para>Wenn Freiheitsgrade &lt; 1 oder Freiheitsgrade &gt; 10 ^ 10 ist, generiert <b>CHIVERT</b> einen Fehler. </para>
          <para>
            <b>CHIVERT</b> wird berechnet als CHIVERT = P (X&gt;X), wobei X eine Zufallsvariable χ2 entspricht.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiInv">
      <MemberSignature Language="C#" Value="public double ChiInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16659)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die zur Chi-Quadrat-Verteilung gehörige Wahrscheinlichkeit.</param>
        <param name="Arg2">Die Anzahl der Freiheitsgrade.</param>
        <summary>Gibt Perzentile der Chi-Quadrat-Verteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu den neuen Funktionen finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" /> Methoden.</para>
          <para>Wenn Wahrsch = ChiVert(x,...) ist, gilt ChiInv(Wahrsch,...) = x. Vergleichen Sie mithilfe dieser Funktion beobachtete Ergebnisse mit erwarteten Ergebnissen, um zu bestimmen, ob die Ausgangshypothese wahr ist.</para>
          <para>Wenn ein Argument nicht numerisch ist, generiert <b>ChiInv</b> einen Fehler. </para>
          <para>Wenn Wahrsch &lt; 0 oder Wahrsch &gt; 1 ist, generiert <b>ChiInv</b> einen Fehler. </para>
          <para>Wenn der Wert für Freiheitsgrade keine ganze Zahl darstellt, wird die Zahl gekürzt.</para>
          <para>Wenn Freiheitsgrade &lt; 1 oder Freiheitsgrade ≥ 10 ^ 10 ist, generiert <b>ChiInv</b> einen Fehler.</para>
          <para>Einem bestimmten sucht <b>ChiInv</b> den Wert x, so dass CHIVERT (X, Freiheitsgrade) = Wahrscheinlichkeit. Daher hängt die Genauigkeit von <b>ChiInv</b> von Genauigkeit von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" />. <b>ChiInv</b> verwendet der Suche iterativ vor. Wenn die Suche nach 64 Iterationen nicht zusammengeführt wurde, generiert die Funktion einen Fehler.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16911)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, den für die Verteilung ausgewertet werden soll.</param>
        <param name="Arg2">Freiheitsgrade - die Anzahl der Freiheitsgrade.</param>
        <param name="Arg3">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn kumulative <b>true festgelegt</b>ist, gibt chisq.dist Wert der Verteilungsfunktion; Wenn <b>false</b>, die Wahrscheinlichkeitswert der Funktion zurückgegeben.</param>
        <summary>Gibt die Chi-Quadrat-Verteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Ist eines der Argumente nicht numerisch, gibt CHISQ.DIST den Fehlerwert #WERT! zurück. </para>
          <para>Wenn X negativ ist, gibt CHISQ.DIST den Fehlerwert #ZAHL! zurück. </para>
          <para>Wenn Freiheitsgrade keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16912)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, für den die Verteilung evaluiert werden soll.</param>
        <param name="Arg2">Die Anzahl der Freiheitsgrade.</param>
        <summary>Gibt Werte der Verteilungsfunktion (1-Alpha) einer Chi-Quadrat-verteilten Zufallsgröße zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Verteilung χ2 ist ein Test χ2 zugeordnet. Verwenden Sie den Test mit χ2-Test beobachtete und erwartete Werte.</para>
          <para>In einem Genexperiment kann beispielsweise die Hypothese aufgestellt werden, dass die nächste Pflanzengeneration bestimmte Farben aufweisen wird. Durch das Vergleichen der beobachteten Ergebnisse mit den erwarteten Ergebnissen können Sie entscheiden, ob die Ausgangshypothese wahr ist.</para>
          <para>Wenn ein Argument nicht numerisch ist, generiert <b>Chisq.dist.RT</b> einen Fehler. </para>
          <para>Wenn x negativ ist, generiert <b>Chisq.dist.RT</b> einen Fehler. </para>
          <para>Wenn der Wert für Freiheitsgrade keine ganze Zahl darstellt, wird die Zahl gekürzt.</para>
          <para>Wenn Freiheitsgrade &lt; 1 oder Freiheitsgrade &gt; 10 ^ 10 ist, generiert <b>Chisq.dist.RT</b> einen Fehler. <b>Chisq.dist.RT</b> wird als Chisq.dist.RT berechnet = P (X&gt;X), wobei X eine Zufallsvariable χ2 entspricht.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16913)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrsch – eine zur Chi-Quadrat-Verteilung gehörige Wahrscheinlichkeit.</param>
        <param name="Arg2">Freiheitsgrade - die Anzahl der Freiheitsgrade.</param>
        <summary>Gibt Perzentile der linksseitigen Chi-Quadrat-Verteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>Chisq.Inv</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Wahrsch &lt; 0 oder Wahrsch &gt; 1, <b>gibt Chisq.Inv</b> den #NUM zurückgibt! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16914)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die zur Chi-Quadrat-Verteilung gehörige Wahrscheinlichkeit.</param>
        <param name="Arg2">Die Anzahl der Freiheitsgrade.</param>
        <summary>Gibt Perzentile der rechtsseitigen Chi-Quadrat-Verteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Wahrsch = ChiSq_Dist_RT(x,...), dann ChiSq_Inv_RT(probability,...) = X. Verwenden Sie diese Funktion zum Vergleichen von eigenständigen beobachtete und erwartete Ergebnisse, um entscheiden, ob Ihre ursprüngliche Hypothese gültig ist.</para>
          <para>Wenn ein Argument nicht numerisch ist, generiert <b>Chisq.Inv.RT</b> einen Fehler. </para>
          <para>Wenn Wahrsch &lt; 0 oder Wahrsch &gt; 1 ist, generiert <b>Chisq.Inv.RT</b> einen Fehler. </para>
          <para>Wenn der Wert für Freiheitsgrade keine ganze Zahl darstellt, wird die Zahl gekürzt.</para>
          <para>Wenn Freiheitsgrade &lt; 1 oder Freiheitsgrade ≥ 10 ^ 10 ist, generiert <b>Chisq.Inv.RT</b> einen Fehler.</para>
          <para>Für Wahrscheinlichkeit einen Wert angezeigt, sucht <b>Chisq.Inv.RT</b> den Wert dieser Chisq.dist.RT (X, Freiheitsgrade) = Wahrscheinlichkeit. Folglich Genauigkeit von <b>Chisq.Inv.RT</b> hängt von der Genauigkeit von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />. <b>Chisq.Inv.RT</b> verwendet eine iterative Suche. Wenn die Suche nach 64 Iterationen nicht zusammengeführt wurde, generiert die Funktion einen Fehler.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Test">
      <MemberSignature Language="C#" Value="public double ChiSq_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16874)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Bereich der Daten, die mit der erwarteten Werte testen enthält.</param>
        <param name="Arg2">Der Bereich der Daten, die das Verhältnis des Produkts aus Zeilen- und Spalte-Summen zu der Gesamtsumme enthält.</param>
        <summary>Gibt den Unabhängigkeitstest zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Chisq.Test</b> gibt den Wert der (χ2) Chi-Quadrat-Verteilung für die Statistik und den entsprechenden Freiheitsgraden zurück. Χ2 Tests können Sie feststellen, ob Experimenten Ergebnisse von einem Versuch überprüft werden.</para>
          <para>Wenn Beob_Meßwerte und Erwart_Werte nicht dieselbe eine unterschiedliche Anzahl von Datenpunkten aufweisen, gibt <b>Chisq.Test</b> den Fehlerwert #n/a zurück. </para>
          <para>Der χ2-Test berechnet zunächst eine χ2 Statistik mit der Formel: </para>
          <para>Abbildung 1: Formel für x-Quadrat-test</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <list type="bullet">
            <item>
              <description>Aij = tatsächliche Häufigkeit in der i-ten Zeile, j-ten Spalte</description>
            </item>
            <item>
              <description>Eij = erwartete Häufigkeit in der i-ten Zeile, j-ten Spalte</description>
            </item>
            <item>
              <description>R = Anzahl der Zeilen</description>
            </item>
            <item>
              <description>c = Anzahl der Spalten</description>
            </item>
          </list>
          <para>Ein niedriger Wert von χ2 ist ein Indikator für Unabhängigkeit. Wie aus der Formel ersichtlich, χ2 ist immer positiv oder 0 und 0 nur, wenn Aij = Eij für jedes i, j.</para>
          <para>
            <b>Chisq.Test</b> gibt zurück, die die Wahrscheinlichkeit, dass die zu berechnende χ2 mindestens so hoch wie der Wert der Wert von der obigen Formel berechnet unter der Annahme von Unabhängigkeit zufällig erfolgt sein. Bei der Berechnung dieser Wahrscheinlichkeit verwendet <b>Chisq.Test</b> χ2 Verteilung mit einer angemessenen Anzahl der Freiheitsgrade, R2. Wenn r &gt; 1 und c &gt; 1, und klicken Sie dann auf R2 = (R - 1)(c-1). Wenn R = 1 und c &gt; 1, und klicken Sie dann auf R2 = c - 1 oder, wenn r &gt; 1 und c = 1 then R2 = R - 1. R = c = 1 ist nicht zulässig, und einen Fehler generiert.</para>
          <para>Verwendung der <b>Chisq.Test</b> ist am besten geeignet, wenn Eijs nicht zu klein sind. Einige Statistiker empfehlen, dass Eij größer als oder gleich 5 sein sollte.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiTest">
      <MemberSignature Language="C#" Value="public double ChiTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16690)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Bereich der Daten, die mit der erwarteten Werte testen enthält.</param>
        <param name="Arg2">ImportantThis-Funktion wurde, kann die Verbesserte Genauigkeit bereitstellen und besser widerzuspiegeln, deren Namen ihrer Verwendung, durch eine oder mehrere neue Funktionen ersetzt. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" /> Methode. Der Bereich der Daten, die das Verhältnis des Produkts aus Zeilen- und Spalte-Summen zu der Gesamtsumme enthält.</param>
        <summary>Gibt den Unabhängigkeitstest zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>ChiTest</b> gibt den Wert der (χ2) Chi-Quadrat-Verteilung für die Statistik und den entsprechenden Freiheitsgraden zurück. Χ2 Tests können Sie feststellen, ob Experimenten Ergebnisse von einem Versuch überprüft werden.</para>
          <para>Wenn Beob_Meßwerte und Erwart_Werte nicht dieselbe eine unterschiedliche Anzahl von Datenpunkten aufweisen, gibt <b>ChiTest</b> den Fehlerwert #n/a zurück. </para>
          <para>Der χ2-Test berechnet zunächst eine χ2 Statistik mit der Formel: </para>
          <para>Abbildung 1: Formel für x-Quadrat-test</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <list type="bullet">
            <item>
              <description>Aij = tatsächliche Häufigkeit in der i-ten Zeile, j-ten Spalte</description>
            </item>
            <item>
              <description>Eij = erwartete Häufigkeit in der i-ten Zeile, j-ten Spalte</description>
            </item>
            <item>
              <description>R = Anzahl der Zeilen</description>
            </item>
            <item>
              <description>c = Anzahl der Spalten</description>
            </item>
          </list>
          <para></para>
          <para>Ein niedriger Wert von χ2 ist ein Indikator für Unabhängigkeit. Wie aus der Formel ersichtlich, χ2 ist immer positiv oder 0 und 0 nur, wenn Aij = Eij für jedes i, j.</para>
          <para>
            <b>ChiTest</b> gibt zurück, die die Wahrscheinlichkeit, dass die zu berechnende χ2 mindestens so hoch wie der Wert der Wert von der obigen Formel berechnet unter der Annahme von Unabhängigkeit zufällig erfolgt sein. Bei der Berechnung dieser Wahrscheinlichkeit verwendet <b>ChiTest</b> χ2 Verteilung mit einer angemessenen Anzahl der Freiheitsgrade, R2. Wenn r &gt; 1 und c &gt; 1, und klicken Sie dann auf R2 = (R - 1)(c-1). Wenn R = 1 und c &gt; 1, und klicken Sie dann auf R2 = c - 1 oder, wenn r &gt; 1 und c = 1 then R2 = R - 1. R = c = 1 ist nicht zulässig, und einen Fehler generiert.</para>
          <para>Verwendung von <b>ChiTest</b> ist am besten geeignet, wenn Eijs nicht zu klein sind. Einige Statistiker empfehlen, dass Eij größer als oder gleich 5 sein sollte.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public object Choose (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Choose([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Choose(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16484)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Gibt an, welches Wertargument ausgewählt wird. Bei Arg1 muss es sich um eine Zahl zwischen 1 und 29 handeln oder um eine Formel oder einen Zellbezug mit einer Zahl zwischen 1 und 29.</param>
        <param name="Arg2">1 bis 29 Wertargumente, aus denen Choose einen Wert oder eine durchzuführende Aktion auf der Grundlage von Arg1 auswählt. Bei den Argumenten kann es sich um Zahlen, Zellbezüge, definierte Namen, Formeln, Funktionen oder Text handeln.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Verwendet <paramref name="Arg1" /> als Index zum Zurückgeben eines Werts aus der Liste der Wertargumente.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn <paramref name="Arg1" /> 1 ist, <b>gibt Wert1;</b> Wenn es 2 ist, gibt <b>Choose</b> value2 zurück. Und so weiter. </para>
          <para>Wenn <paramref name="Arg1" /> ist kleiner als 1 oder größer als die Nummer des letzten Werts in der Liste generiert <b>Choose</b> einen Fehler. </para>
          <para>Wenn <paramref name="Arg1" /> wird ein Bruchteil ist es, vor der Verwendung auf die kleinste ganze Zahl gekürzt. </para>
          <para>Wenn <paramref name="Arg1" /> ist ein Array jeder Wert wird ausgewertet, wenn <b>Wahl</b> ausgewertet wird. </para>
          <para>Die Werteargumente <b>auswählen</b> können Bereich Referenzen sowie einzelne Werte sein. Beispielsweise wird die Formel:</para>
          <para>= SUM (Wählen Sie (2, a1: a10, B1: B10 C1: C10))</para>
          <para>berechnet:</para>
          <para>=SUM(B1:B10)</para>
          <para>die gibt einen Wert auf der Grundlage der Werte im Bereich B1: B10 zurück.</para>
          <para>Die <b>Choose</b> -Funktion wird zuerst ausgewertet und gibt den Bezug B1: B10. Die SUM-Funktion wird mithilfe von B1: B10 das Ergebnis die <b>Choose</b> -Funktion als Argument ausgewertet.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clean">
      <MemberSignature Language="C#" Value="public string Clean (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Clean([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Clean (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Clean(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16546)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Arbeitsblattinformationen, aus denen nicht druckbare Zeichen entfernt werden sollen.</param>
        <summary>Entfernt alle nicht druckbaren Zeichen aus Text.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <b>Clean</b> auf aus anderen Programmen importiert Text, der Zeichen enthält, die nicht mit dem Betriebssystem drucken kann. <b>Bereinigen</b> können Sie beispielsweise um einfachen Code zu entfernen, der häufig am Anfang und Ende-Datendateien und kann nicht gedruckt werden.</para>
          <para>
            <b>Wichtig</b>: die <b>Clean</b> -Funktion dient zum Entfernen der ersten 32 nicht druckbaren Zeichen im 7-Bit-ASCII-Code (Werte 0 bis 31) aus Text. In den Unicode-Zeichensatz sind zusätzliche nicht druckbare Zeichen (Werte 127, 129, 141, 143, 144 und 157). Allein entfernt die <b>Clean</b> -Funktion nicht diese zusätzlichen nicht druckbaren Zeichen.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Combin">
      <MemberSignature Language="C#" Value="public double Combin (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combin([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combin(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combin (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combin(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16660)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Anzahl der Elemente.</param>
        <param name="Arg2">Die Anzahl der Elemente in jeder Kombination.</param>
        <summary>Gibt die Anzahl der Kombinationen für eine bestimmte Anzahl von Elementen zurück. Verwenden Sie <b>Combin</b> , um die mögliche Gesamtzahl der Gruppen für eine bestimmte Anzahl von Elementen zu bestimmen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Numerische Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn ein Argument nicht numerisch ist, generiert <b>Combin</b> einen Fehler. </para>
          <para>Wenn Zahl &lt; 0, k &lt; 0 oder Zahl &lt; k <b>Combin</b> generiert einen Fehler. </para>
          <para>Eine Kombination ist eine beliebige Menge oder Teilmenge von Elementen, unabhängig von der internen Reihenfolge. Kombinationen unterscheiden sich von Permutationen, bei denen die interne Reihenfolge signifikant ist.</para>
          <para>Die Anzahl der Kombinationen wird wie folgt ermittelt. Dabei ist Zahl = n und Auswahl_Zahl = k: 

 </para>
          <para>Abbildung 1: Anzahl an Kombinationen</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>Abbildung 2: Formel</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Combina">
      <MemberSignature Language="C#" Value="public double Combina (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combina([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combina(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combina (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combina(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16952)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Gesamtanzahl der Elemente.</param>
        <param name="Arg2">Die Anzahl der Elemente in jeder Kombination.</param>
        <summary>Gibt die Anzahl der Kombinationen mit Wiederholungen für eine angegebene Anzahl von Elementen zurück.</summary>
        <returns>DOUBLE-WERT</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complex">
      <MemberSignature Language="C#" Value="public string Complex (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Complex([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Complex (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16795)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der reale Koeffizient der komplexen Zahl.</param>
        <param name="Arg2">Der imaginäre Koeffizient der komplexen Zahl.</param>
        <param name="Arg3">Das Suffix der imaginären Komponente der komplexen Zahl. Wenn Sie diesen Wert nicht angeben, wird als Suffix "i" angenommen.</param>
        <summary>Rechnet reale und imaginäre Koeffizienten in eine komplexe Zahl im Format x + yi oder x + yj um.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Alle Funktionen mit komplexen Zahlen akzeptieren "i" und "j" als Suffix, nicht jedoch "I" oder "J". Die Verwendung von Großbuchstaben führt zu einem Fehler. Bei allen Funktionen, die zwei oder mehr komplexe Zahlen akzeptieren, müssen alle Suffixe übereinstimmen.</para>
          <para>Wenn <paramref name="Arg1" /> ist nicht numerisch, <b>komplexe</b> generiert einen Fehler. </para>
          <para>Wenn <paramref name="Arg2" /> ist nicht numerisch, <b>komplexe</b> generiert einen Fehler. </para>
          <para>Wenn <paramref name="Arg3" /> ist weder "i" noch "j", <b>komplexe</b> generiert einen Fehler.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public double Confidence (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16661)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Mit der Signifikanzebene kann die Konfidenzebene berechnet werden. Die Konfidenzebene entspricht 100*(1-alpha)%, d. h. der Alpha-Wert 0,05 gibt eine Konfidenzebene von 95 Prozent an.</param>
        <param name="Arg2">Die Standardabweichung der Grundgesamtheit für den Datenbereich wird als bekannt vorausgesetzt.</param>
        <param name="Arg3">Der Stichprobenumfang.</param>
        <summary>Gibt einen Wert zurück, mit dem Sie ein Konfidenzintervall für den Mittelwert einer Grundgesamtheit erstellen können.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu den neuen Funktionen finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" /> Methoden.</para>
          <para>Das Konfidenzintervall ist ein Bereich von Werten. Der Mittelwert der Stichprobe X, ist in der Mitte des Bereichs und der Bereich ist X ± <b>vertrauen</b>. Wenn x der Mittelwert der Lieferzeiten für per Post bestellte Produkte ist, ist X ± <b>Confidence</b> beispielsweise ein Bereich Auffüllung bedeutet. Für jeden Erwartungswert μ0, in diesem Bereich ist die Wahrscheinlichkeit, einen Stichprobenmittelwert, der weiter von μ0 als x größer als Alpha ist; für jeden Erwartungswert ist μ0, nicht in diesem Bereich ist die Wahrscheinlichkeit, einen Stichprobenmittelwert, der weiter von μ0 als x kleiner als Alpha. Anders ausgedrückt, wird davon ausgegangen, dass wir verwenden X, Standabwn und Größe einen zweiseitigen Test unter Vielfache Ebene Alpha die Hypothese erstellt wird, dass der Erwartungswert μ0 ist. Klicken Sie dann werden wir diese Hypothese nicht ablehnen, wenn μ0 befindet sich im Konfidenzintervall liegt, und zurückgewiesen wird, wenn μ0 nicht im Konfidenzintervall befindet. Konfidenzintervall lässt nicht zu, 1 – alpha Wahrscheinlichkeit, dass das nächste Paket eine Übermittlungszeit in Anspruch nimmt, die im Konfidenzintervall befindet. </para>
          <para>Wenn ein Argument nicht numerisch ist, generiert <b>Confidence</b> einen Fehler. </para>
          <para>Wenn Alpha ≤ 0 oder alpha ≥ 1, <b>Confidence</b> einen Fehler generiert. </para>
          <para>Wenn Standabwn ≤ 0, <b>Confidence</b> einen Fehler generiert. </para>
          <para>Wenn Größe keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn Umfang &lt; 1, <b>Confidence</b> generiert einen Fehler. </para>
          <para>Wenn davon ausgegangen wird, dass Alpha 0,05 ist, muss der Bereich unter der Standardnormalverteilungskurve berechnet werden, der (1-Alpha) oder 95 % entspricht. Dieser Wert beträgt ± 1,96. Das Konfidenzintervall lautet daher wie folgt: 

</para>
          <para>Abbildung 1: Konfidenzintervall</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_Norm">
      <MemberSignature Language="C#" Value="public double Confidence_Norm (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_Norm([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_Norm (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_Norm(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16872)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Mit der Signifikanzebene kann die Konfidenzebene berechnet werden. Die Konfidenzebene entspricht 100*(1-alpha)%, d. h. der Alpha-Wert 0,05 gibt eine Konfidenzebene von 95 Prozent an.</param>
        <param name="Arg2">Die Standardabweichung der Grundgesamtheit für den Datenbereich wird als bekannt vorausgesetzt.</param>
        <param name="Arg3">Der Stichprobenumfang.</param>
        <summary>Gibt einen Wert zurück, mit dem Sie ein Konfidenzintervall für den Mittelwert einer Grundgesamtheit erstellen können.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Das Konfidenzintervall ist ein Bereich von Werten. Der Mittelwert der Stichprobe X, ist in der Mitte des Bereichs und der Bereich ist X ± <b>Confidence.Norm</b>. Wenn x der Mittelwert der Lieferzeiten für per Post bestellte Produkte ist, ist X ± <b>Confidence.Norm</b> beispielsweise ein Bereich von Auffüllung bedeutet. Für jeden Erwartungswert μ0, in diesem Bereich ist die Wahrscheinlichkeit, einen Stichprobenmittelwert, der weiter von μ0 als x größer als Alpha ist; für jeden Erwartungswert ist μ0, nicht in diesem Bereich ist die Wahrscheinlichkeit, einen Stichprobenmittelwert, der weiter von μ0 als x kleiner als Alpha. Anders ausgedrückt, wird angenommen, dass x, Standabwn und Größe wird verwendet, um eine zweiseitigen Tests mit Signifikanzniveau Alpha die Hypothese erstellen, dass der Erwartungswert μ0 ist. Klicken Sie dann werden wir diese Hypothese nicht ablehnen, wenn μ0 befindet sich im Konfidenzintervall liegt, und zurückgewiesen wird, wenn μ0 nicht im Konfidenzintervall befindet. Das Konfidenzintervall lässt nicht Ableitung, dass Wahrscheinlichkeit 1 – alpha, dass das nächste Paket eine Übermittlungszeit in Anspruch nimmt, die im Konfidenzintervall ist vorhanden ist.</para>
          <para>Wenn ein Argument nicht numerisch ist, generiert <b>Confidence.Norm</b> einen Fehler. </para>
          <para>Wenn Alpha ≤ 0 oder alpha ≥ 1, <b>Confidence.Norm</b> einen Fehler generiert. </para>
          <para>Wenn Standabwn ≤ 0, <b>Confidence.Norm</b> einen Fehler generiert. </para>
          <para>Wenn Größe keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn Umfang &lt; 1, <b>Confidence.Norm</b> generiert einen Fehler. </para>
          <para>Wenn davon ausgegangen wird, dass Alpha 0,05 ist, muss der Bereich unter der Standardnormalverteilungskurve berechnet werden, der (1 - Alpha) oder 95 % entspricht. Dieser Wert beträgt ± 1,96. Das Konfidenzintervall lautet daher wie folgt: 

</para>
          <para>Abbildung 1: Konfidenzintervall</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_T">
      <MemberSignature Language="C#" Value="public double Confidence_T (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_T([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_T (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_T(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16873)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Alpha – das Vielfache Ebene verwendet, um die Vertrauensstufe zu berechnen. Das Konfidenzintervall ist gleich 100 *(1-alpha) % oder mit anderen Worten, Alpha-Wert 0,05 gibt eine 95 Prozent Vertrauensebene an.</param>
        <param name="Arg2">Standabwn – die Standardabweichung der grundgesamtheit für den Datenbereich wird als bekannt vorausgesetzt.</param>
        <param name="Arg3">Größe - die Größe der Stichprobe.</param>
        <summary>Gibt das Konfidenzintervall für den Erwartungswert einer (Student) t-verteilten Zufallsvariablen zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>Confidence.t</b> den #VALUE! Fehlerwert. </para>
          <para>Ist Alpha ≤ 0 oder alpha ≥ 1, <b>gibt Confidence.t</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Ist Standabwn ≤ 0, <b>gibt Confidence.t</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Wenn Größe keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn Umfang gleich 1 ist, <b>gibt Confidence.t</b> #DIV/0! Fehlerwert. </para>
          <para>Wenn Umfang gleich 1 ist, <b>gibt Confidence.t</b> #DIV/0! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public double Convert (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Convert([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Convert(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Convert (Arg1 As Object, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Convert(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16852)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der zu konvertierende Wert in Von_Maßeinheit.</param>
        <param name="Arg2">Die Einheiten für die Zahl.</param>
        <param name="Arg3">Die Einheiten für das Ergebnis. <b>Konvertieren</b> akzeptiert die folgenden Textwerte (in Anführungszeichen) für Von_Maßeinheit und In_Maßeinheit die im Abschnitt "Hinweise" aufgeführt sind.</param>
        <summary>Konvertiert eine Zahl von einem Maßsystem in eine andere. Beispielsweise können Sie <b>Konvertieren</b> eine Tabelle von Abständen in Meilen zu einer Tabelle von Abständen in Kilometer übersetzen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>Gramm</term>
              <description>"g"</description>
            </item>
            <item>
              <term>Slug</term>
              <description>"sg"</description>
            </item>
            <item>
              <term>Pfund (Handelsgewicht)</term>
              <description>"lbm"</description>
            </item>
            <item>
              <term>U (Atommasseeinheit)</term>
              <description>"u"</description>
            </item>
            <item>
              <term>Unze (Handelsgewicht)</term>
              <description>"ozm"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Meter</term>
              <description>"m"</description>
            </item>
            <item>
              <term>Englische Meile</term>
              <description>"mi"</description>
            </item>
            <item>
              <term>Seemeile</term>
              <description>"Nmi"</description>
            </item>
            <item>
              <term>Zoll</term>
              <description>"in"</description>
            </item>
            <item>
              <term>Fuß</term>
              <description>"ft"</description>
            </item>
            <item>
              <term>Yard</term>
              <description>"yd"</description>
            </item>
            <item>
              <term>Angström</term>
              <description>"ang"</description>
            </item>
            <item>
              <term>Pica (1/72 Zoll)</term>
              <description>"Pica"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Jahr</term>
              <description>"yr"</description>
            </item>
            <item>
              <term>Tag</term>
              <description>"day"</description>
            </item>
            <item>
              <term>Stunde</term>
              <description>"hr"</description>
            </item>
            <item>
              <term>Minute</term>
              <description>"mn"</description>
            </item>
            <item>
              <term>Sekunde</term>
              <description>"sec"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Pascal</term>
              <description>"Pa" (oder "p")</description>
            </item>
            <item>
              <term>Atmosphäre</term>
              <description>"atm" (oder "at")</description>
            </item>
            <item>
              <term>mm Quecksilbersäule</term>
              <description>"MmHg"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Newton</term>
              <description>"N"</description>
            </item>
            <item>
              <term>Dyn</term>
              <description>"dyn" (oder "dy")</description>
            </item>
            <item>
              <term>Pfund (Druck)</term>
              <description>"lbf"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Joule</term>
              <description>"J"</description>
            </item>
            <item>
              <term>Erg</term>
              <description>"e"</description>
            </item>
            <item>
              <term>Thermodynamische Kalorie</term>
              <description>"c"</description>
            </item>
            <item>
              <term>IT-Kalorie</term>
              <description>"cal"</description>
            </item>
            <item>
              <term>Elektronenvolt</term>
              <description>"eV" (oder "ev")</description>
            </item>
            <item>
              <term>Pferdestärken/Stunde</term>
              <description>"HPh" (oder "hh")</description>
            </item>
            <item>
              <term>Wattstunden</term>
              <description>"Wh" (oder "wh")</description>
            </item>
            <item>
              <term>Fuß pro Pfund</term>
              <description>"flb"</description>
            </item>
            <item>
              <term>BTU</term>
              <description>"BTU" (or "btu")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Pferdestärke</term>
              <description>"HP" (oder "h")</description>
            </item>
            <item>
              <term>Watt</term>
              <description>"W" (oder "w")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Tesla</term>
              <description>"T"</description>
            </item>
            <item>
              <term>Gauss</term>
              <description>"ga"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Grad Celsius</term>
              <description>"C" (oder "cel")</description>
            </item>
            <item>
              <term>Grad Fahrenheit</term>
              <description>"F" (oder "fah")</description>
            </item>
            <item>
              <term>Kelvin</term>
              <description>"K" (oder "kel")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Teelöffel</term>
              <description>"tsp"</description>
            </item>
            <item>
              <term>Esslöffel</term>
              <description>"tbs"</description>
            </item>
            <item>
              <term>Unze (Flüssigkeit)</term>
              <description>"oz"</description>
            </item>
            <item>
              <term>Cup</term>
              <description>"cup"</description>
            </item>
            <item>
              <term>Pint (USA)</term>
              <description>"pt" (oder "us_pt")</description>
            </item>
            <item>
              <term>Pint (Großbritannien)</term>
              <description>"uk_pt"</description>
            </item>
            <item>
              <term>Quart</term>
              <description>"qt"</description>
            </item>
            <item>
              <term>Gallone</term>
              <description>"gal"</description>
            </item>
            <item>
              <term>Liter</term>
              <description>"l" (oder "lt")</description>
            </item>
          </list>
          <para>Die folgenden Abkürzungen für Einheitenpräfixe können metrischen Werten für Von_Maßeinheit oder In_Maßeinheit vorangestellt werden.</para>
          <list type="table">
            <item>
              <term>Exa</term>
              <description>1E+18</description>
              <description>"E"</description>
            </item>
            <item>
              <term>Peta</term>
              <description>1E+15</description>
              <description>"P"</description>
            </item>
            <item>
              <term>Tera</term>
              <description>1E+12</description>
              <description>"T"</description>
            </item>
            <item>
              <term>Giga</term>
              <description>1E+09</description>
              <description>"G"</description>
            </item>
            <item>
              <term>Mega</term>
              <description>1E+06</description>
              <description>"M"</description>
            </item>
            <item>
              <term>Kilo</term>
              <description>1E+03</description>
              <description>"k"</description>
            </item>
            <item>
              <term>Hecto</term>
              <description>1E+02</description>
              <description>"h"</description>
            </item>
            <item>
              <term>Dekao</term>
              <description>1E+01</description>
              <description>"e"</description>
            </item>
            <item>
              <term>Dezi</term>
              <description>1E-01</description>
              <description>"d"</description>
            </item>
            <item>
              <term>Zenti</term>
              <description>1E-02</description>
              <description>"c"</description>
            </item>
            <item>
              <term>Milli</term>
              <description>1E-03</description>
              <description>"m"</description>
            </item>
            <item>
              <term>Mikro</term>
              <description>1E-06</description>
              <description>"u"</description>
            </item>
            <item>
              <term>Nano</term>
              <description>1E-09</description>
              <description>"n"</description>
            </item>
            <item>
              <term>Piko</term>
              <description>1E-12</description>
              <description>"p"</description>
            </item>
            <item>
              <term>Femto</term>
              <description>1E-15</description>
              <description>"f"</description>
            </item>
            <item>
              <term>Atto</term>
              <description>1E-18</description>
              <description>"a"</description>
            </item>
          </list>
          <para>Wenn die Eingabedatentypen falsch sind, generiert <b>Konvertieren</b> einen Fehler. </para>
          <para>Wenn die Einheit nicht vorhanden ist, generiert <b>Konvertieren</b> einen Fehler. </para>
          <para>Wenn die Einheit ein abgekürztes nicht unterstützt, generiert <b>Konvertieren</b> einen Fehler. </para>
          <para>Wenn die Einheiten zu unterschiedlichen Gruppen gehören, generiert <b>Konvertieren</b> einen Fehler. </para>
          <para>Bei Einheitennamen und Präfixen muss die Groß- und Kleinschreibung beachtet werden.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Correl">
      <MemberSignature Language="C#" Value="public double Correl (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Correl([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Correl(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Correl (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Correl(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16691)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ein Zellbereich mit Werten.</param>
        <param name="Arg2">Ein zweiter Zellbereich mit Werten.</param>
        <summary>Gibt den Korrelationskoeffizienten der <paramref name="Arg1" /> und <paramref name="Arg2" /> Zelle Bereiche.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Mit dem Korrelationskoeffizienten können Sie die Beziehung zwischen zwei Eigenschaften bestimmen. Sie können beispielsweise die Beziehung zwischen der durchschnittlichen Temperatur an einem bestimmten Ort und der Verwendung von Klimaanlagen untersuchen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert. Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn <paramref name="Arg1" /> und <paramref name="Arg2" /> über eine unterschiedliche Anzahl von Datenpunkten verfügen, <b>Correl</b> generiert einen Fehler. </para>
          <para>Wenn einer der beiden <paramref name="Arg1" /> oder <paramref name="Arg2" /> leer ist, oder wenn s (die Standardabweichung) der entsprechenden Werte gleich NULL ist, generiert <b>Correl</b> einen Fehler. </para>
          <para>Die Formel für den Korrelationskoeffizienten lautet wie folgt: 

</para>
          <para>Abbildung 1: Gleichung für den Korrelationskoeffizienten</para>
          <para></para>
          <para></para>
          <para>Dabei sind x und y die Stichprobenmittelwerte Average(Arg1) und Average(Arg2).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public double Cosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16614)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine beliebige reelle Zahl, für die der hyperbolische Kosinus ermittelt werden soll.</param>
        <summary>Gibt den hyperbolischen Kosinus einer Zahl zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Formel für den hyperbolischen Kosinus lautet wie folgt: </para>
          <para>Abbildung 1: Formel für den hyperbolischen Kosinus</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cot">
      <MemberSignature Language="C#" Value="public double Cot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16934)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Winkel in Bogenmaß (Radiant), für die Sie den Kotangens möchten.</param>
        <summary>Gibt den Kotangens eines Winkels zurück.</summary>
        <returns>DOUBLE-WERT</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Coth">
      <MemberSignature Language="C#" Value="public double Coth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Coth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Coth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Coth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Coth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16935)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Winkel in Bogenmaß (Radiant), für die Sie den Kotangens möchten.</param>
        <summary>Gibt den hyperbolischen Kotangens einer Zahl zurück.</summary>
        <returns>DOUBLE-WERT</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public double Count (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Count([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Count (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16384)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 bis 30 Argumente, die verschiedene Datentypen enthalten oder einen Bezug dazu darstellen. Es werden jedoch nur Zahlen gezählt.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Ermittelt die Anzahl der Zellen, die Zahlen enthalten, und zählt Zahlen in der Liste der Argumente.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie zum Abrufen der Anzahl der Einträge in ein numerisches Feld, das in einem Bereich oder Array von Zahlen ist <b>Count</b> . </para>
          <para>Es werden alle Argumente gezählt, bei denen es sich um Zahlen, Datumsangaben oder Textdarstellungen von Zahlen handelt.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in der Liste der Argumente eingeben, werden gezählt.</para>
          <para>Argumente, bei denen es sich um Fehlerwerte handelt, und Text, der nicht in Zahlen umgewandelt werden kann, werden ignoriert.</para>
          <para>Wenn ein Argument ein Array oder einen Verweis darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Verweis gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Verweis werden ignoriert.</para>
          <para>Wenn Sie Wahrheitswerte, Text oder Fehlerwerte zählen möchten, verwenden Sie die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Funktion.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountA">
      <MemberSignature Language="C#" Value="public double CountA (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountA([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountA (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16553)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 bis 30 Argumente, die die zu zählenden Werte darstellen.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Ermittelt die Anzahl von nicht leeren Zellen sowie die Werte in der Liste der Argumente.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <b>CountA</b> , um die Anzahl der Zellen gezählt werden, die Daten in einem Bereich oder Array enthalten.</para>
          <para>Bei einem Wert handelt es sich um eine beliebige Information. Dazu zählen Fehlerwerte und leere Zeichenfolgen (""). Leere Zellen sind keine Werte.</para>
          <para>Wenn es sich bei einem Argument um ein Array oder einen Bezug handelt, werden nur Werte in diesem Array oder Bezug verwendet. Leere Zellen und Textwerte im Array oder Bezug werden ignoriert.</para>
          <para>Wenn Sie keine Wahrheitswerte, Text oder Fehlerwerte zählen möchten, verwenden Sie die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Funktion.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountBlank">
      <MemberSignature Language="C#" Value="public double CountBlank (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountBlank([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountBlank(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountBlank (Arg1 As Range) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountBlank(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16731)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Bereich, in dem die leeren Zellen gezählt werden sollen.</param>
        <summary>Zählt leere Zellen in einem bestimmten Zellbereich.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Zellen mit Formeln, die "" (leere Zeichenfolgen) zurückgeben, werden ebenfalls gezählt. Zellen mit Nullwerten werden nicht gezählt.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIf">
      <MemberSignature Language="C#" Value="public double CountIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIf(Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIf (Arg1 As Range, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountIf(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16730)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Zellbereich, in dem Zellen gezählt werden sollen.</param>
        <param name="Arg2">Die Kriterien in Form einer Zahl, Ausdruck, Zellbezug oder Text, der definiert, welche Zellen gezählt werden. Kriterien können beispielsweise als 32, ausgedrückt werden "32", "&gt;32", "Äpfel" oder B4.</param>
        <summary>Ermittelt die Anzahl der Zellen in einem Bereich, die den angegebenen Kriterien entsprechen.</summary>
        <returns>Gibt <see cref="T:System.Double" />.</returns>
        <remarks>
          <para>Für die Kriterien können Sie die Platzhalterzeichen Sternchen (*) und Fragezeichen (?) verwenden. Mit einem Fragezeichen erfolgt ein Abgleich mit jedem einzelnen Zeichen; mit einem Stern erfolgt ein Abgleich mit einer beliebigen Abfolge von Zeichen. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, geben Sie vor dem Zeichen eine Tilde (~) ein.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIfs">
      <MemberSignature Language="C#" Value="public double CountIfs (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIfs(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIfs (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16865)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ein oder mehrere Bereiche, in denen die zugeordneten Kriterien ausgewertet werden sollen.</param>
        <param name="Arg2">Ein oder mehrere Kriterien in Form einer Zahl, Ausdruck, Zellbezug oder Text, die definieren, welche Zellen gezählt werden. Kriterien können beispielsweise als 32, ausgedrückt werden "32", "&gt;32", "Äpfel" oder B4.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Ermittelt die Anzahl der Zellen in einem Bereich, die mehreren Kriterien entsprechen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Zellen in einem Bereich werden nur gezählt, wenn alle angegebenen Kriterien für diese Zelle erfüllt werden.</para>
          <para>Wenn eine Zelle in einem Argument leer ist, wird Sie von <b>CountIfs</b> wie dem Wert 0 behandelt. </para>
          <para>In Kriterien können Sie die Platzhalterzeichen Sternchen (*) und Fragezeichen (?) verwenden. Mit einem Fragezeichen erfolgt ein Abgleich mit jedem einzelnen Zeichen; mit einem Stern erfolgt ein Abgleich mit einer beliebigen Abfolge von Zeichen. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, geben Sie vor dem Zeichen eine Tilde (~) ein.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDayBs">
      <MemberSignature Language="C#" Value="public double CoupDayBs (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDayBs([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDayBs(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDayBs (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16836)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2, für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg4">Die Basis, auf der die Zinstage gezählt werden.</param>
        <summary>Gibt die Anzahl der Tage vom Anfang des Zinstermins bis zum Abrechnungstermin zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die folgende Tabelle enthält die Liste der Werte für <paramref name="Arg4" />.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültiges Datum angegeben ist, generiert <b>CoupDayBs</b> einen Fehler. </para>
          <para>Wenn es sich bei Häufigkeit um eine andere Zahl als 1, 2 oder 4 handelt, generiert <b>CoupDayBs</b> einen Fehler. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4 ist, generiert <b>CoupDayBs</b> einen Fehler. </para>
          <para>Wenn Abrechnung ≥ Fälligkeit, <b>CoupDayBs</b> einen Fehler generiert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDays">
      <MemberSignature Language="C#" Value="public double CoupDays (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDays([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDays(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDays (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16837)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2, für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg4">Die Basis, auf der die Zinstage gezählt werden.</param>
        <summary>Gibt die Anzahl der Tage der Zinsperiode zurück, die das Abrechnungsdatum einschließt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <para>Die folgende Tabelle enthält die Werte, die in <paramref name="Arg4" />.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültiges Datum angegeben ist, generiert <b>CoupDays</b> einen Fehler. </para>
          <para>Wenn es sich bei Häufigkeit um eine andere Zahl als 1, 2 oder 4 handelt, generiert <b>CoupDays</b> einen Fehler. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4 ist, generiert <b>CoupDays</b> einen Fehler. </para>
          <para>Wenn Abrechnung ≥ Fälligkeit, <b>CoupDays</b> einen Fehler generiert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDaysNc">
      <MemberSignature Language="C#" Value="public double CoupDaysNc (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDaysNc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDaysNc(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDaysNc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16838)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2, für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg4">Die Basis, auf der die Zinstage gezählt werden.</param>
        <summary>Gibt die Anzahl der Tage vom Abrechnungstermin bis zum nächsten Zinstermin zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <para>Die folgende Tabelle enthält die Werte, die in <paramref name="Arg4" />.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültiges Datum angegeben ist, generiert <b>CoupDaysNc</b> einen Fehler. </para>
          <para>Wenn es sich bei Häufigkeit um eine andere Zahl als 1, 2 oder 4 handelt, generiert <b>CoupDaysNc</b> einen Fehler. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4 ist, generiert <b>CoupDaysNc</b> einen Fehler. </para>
          <para>Wenn Abrechnung ≥ Fälligkeit, <b>CoupDaysNc</b> einen Fehler generiert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNcd">
      <MemberSignature Language="C#" Value="public double CoupNcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16839)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2, für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg4">Die Basis, auf der die Zinstage gezählt werden.</param>
        <summary>Gibt eine Zahl zurück, die den nächsten Zinstermin nach dem Abrechnungstermin darstellt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <para>Die folgende Tabelle enthält die Werte, die in <paramref name="Arg4" />.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültiges Datum angegeben ist, generiert <b>CoupNcd</b> einen Fehler. </para>
          <para>Wenn es sich bei Häufigkeit um eine andere Zahl als 1, 2 oder 4 handelt, generiert <b>CoupNcd</b> einen Fehler. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4 ist, generiert <b>CoupNcd</b> einen Fehler. </para>
          <para>Wenn Abrechnung ≥ Fälligkeit, <b>CoupNcd</b> einen Fehler generiert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNum">
      <MemberSignature Language="C#" Value="public double CoupNum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16840)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2, für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg4">Die Basis, auf der die Zinstage gezählt werden.</param>
        <summary>Gibt die Anzahl der Zinstermine zwischen Abrechnungs- und Fälligkeitsdatum zurück, aufgerundet auf den nächsten ganzen Termin.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <para>Die folgende Tabelle enthält die Werte, die in <paramref name="Arg4" />.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültiges Datum angegeben ist, generiert <b>CoupNum</b> einen Fehler. </para>
          <para>Wenn es sich bei Häufigkeit um eine andere Zahl als 1, 2 oder 4 handelt, generiert <b>CoupNum</b> einen Fehler. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4 ist, generiert <b>CoupNum</b> einen Fehler. </para>
          <para>Wenn Abrechnung ≥ Fälligkeit, <b>CoupNum</b> einen Fehler generiert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupPcd">
      <MemberSignature Language="C#" Value="public double CoupPcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupPcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupPcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupPcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16841)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2, für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg4">Die Basis, auf der die Zinstage gezählt werden.</param>
        <summary>Gibt das Datum des letzten Zinstermins vor dem Abrechnungstermin zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <para>Die folgende Tabelle enthält die Werte, die in <paramref name="Arg4" />.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültiges Datum angegeben ist, generiert <b>CoupPcd</b> einen Fehler. </para>
          <para>Wenn es sich bei Häufigkeit um eine andere Zahl als 1, 2 oder 4 handelt, generiert <b>CoupPcd</b> einen Fehler. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4 ist, generiert <b>CoupPcd</b> einen Fehler. </para>
          <para>Wenn Abrechnung ≥ Fälligkeit, <b>CoupPcd</b> einen Fehler generiert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Covar">
      <MemberSignature Language="C#" Value="public double Covar (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covar([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covar(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covar (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covar(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16692)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der erste Zellbereich mit ganzen Zahlen.</param>
        <param name="Arg2">Der zweite Zellbereich mit ganzen Zahlen.</param>
        <summary>Gibt die Kovarianz zurück, d. h. den Mittelwert der für alle Datenpunktpaare gebildeten Produkte der Abweichungen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu den neuen Funktionen finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" /> Methode.</para>
          <para>Mit der Kovarianz können Sie die Beziehung zwischen zwei Datensätzen bestimmen. Sie können beispielsweise untersuchen, ob ein höheres Einkommen mit einer besseren Ausbildung zusammenhängt.</para>
          <para>Bei den Argumenten muss es sich um Zahlen oder Namen, Arrays oder Bezüge mit Zahlen handeln.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn <paramref name="Arg1" /> und <paramref name="Arg2" /> haben unterschiedlich viele Datenpunkte, generiert <b>Covar</b> einen Fehler. </para>
          <para>Wenn einer der beiden <paramref name="Arg1" /> oder <paramref name="Arg2" /> ist leer ist, generiert <b>Covar</b> einen Fehler. </para>
          <para>Die Kovarianz lautet wie folgt: 

 </para>
          <para>Abbildung 1: Gleichung für die Kovarianz</para>
          <para></para>
          <para></para>
          <para>Dabei sind x und y die Stichprobenmittelwerte AVERAGE(Array1) und AVERAGE(Array2), und n ist die Stichprobengröße.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_P">
      <MemberSignature Language="C#" Value="public double Covariance_P (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_P([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_P (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_P(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16876)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der erste Zellbereich mit ganzen Zahlen.</param>
        <param name="Arg2">Der zweite Zellbereich mit ganzen Zahlen.</param>
        <summary>Gibt die Kovarianz einer Grundgesamtheit, den Mittelwert der für alle Datenpunktpaare gebildeten Produkte der Abweichungen zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <b>Covariance.p</b> , um die Beziehung zwischen zwei Datasets zu bestimmen. Beispielsweise können Sie überprüfen, ob ein höheres Einkommen höheres Maß Education begleitet.</para>
          <para>Bei den Argumenten muss es sich um Zahlen oder Namen, Arrays oder Bezüge mit Zahlen handeln.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn <paramref name="Arg1" /> und <paramref name="Arg2" /> haben unterschiedlich viele Datenpunkte, generiert <b>Covariance.p</b> einen Fehler. </para>
          <para>Wenn einer der beiden <paramref name="Arg1" /> oder <paramref name="Arg2" /> ist leer ist, generiert <b>Covariance.p</b> einen Fehler. </para>
          <para>Die Kovarianz lautet wie folgt: 

 </para>
          <para>Abbildung 1: Gleichung für die Kovarianz</para>
          <para></para>
          <para></para>
          <para>Dabei sind x und y die Stichprobenmittelwerte AVERAGE(Array1) und AVERAGE(Array2), und n ist die Stichprobengröße.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_S">
      <MemberSignature Language="C#" Value="public double Covariance_S (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_S([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_S (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_S(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16877)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 - der erste Zellbereich mit ganzen Zahlen.</param>
        <param name="Arg2">Array2 – der zweite Zellbereich mit ganzen Zahlen.</param>
        <summary>Gibt die Kovarianz einer Stichprobe, den Mittelwert der für alle Datenpunktpaare gebildeten Produkte der Abweichungen in zwei Datasets zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Bei den Argumenten muss es sich um Zahlen oder Namen, Arrays oder Bezüge mit Zahlen handeln.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn array1 und array2 eine unterschiedliche Anzahl von Datenpunkten verfügen, gibt <b>Covariance.s</b> den Fehlerwert #n/a zurück. </para>
          <para>Wenn array1 und array2 leer ist oder nur 1 Datenpunkt jeweils <b>Covariance.s enthält</b> gibt den #DIV/0! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt eine 32-Bit-Ganzzahl, die die Anwendung angibt, in der das Objekt erstellt wurde. Nur-Lese- <b>Ganzzahl</b> (Int in c#).</summary>
        <value>To be added.</value>
        <remarks>
          <para>Wenn das Objekt in Microsoft Excel erstellt wurde, gibt diese Eigenschaft die Zeichenfolge XCEL zurück, dies entspricht die hexadezimale Zahl 5843454 c ist. Die <b>Creator</b> -Eigenschaft ist in Microsoft Excel für den Macintosh verwendet werden, in dem jede Anwendung einen Erstellercode aus vier Zeichen verfügt über entwickelt. Der Erstellercode von Microsoft Excel lautet beispielsweise XCEL zurück.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CritBinom">
      <MemberSignature Language="C#" Value="public double CritBinom (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CritBinom([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CritBinom(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function CritBinom (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CritBinom(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16662)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Anzahl der Bernoulliexperimente.</param>
        <param name="Arg2">Die Wahrscheinlichkeit für den günstigen Ausgang des Experiments.</param>
        <param name="Arg3">Die Grenzwahrscheinlichkeit.</param>
        <summary>Gibt den kleinsten Wert zurück, für den die kumulierten Wahrscheinlichkeiten der Binomialverteilung größer oder gleich einer Grenzwahrscheinlichkeit sind.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie diese Funktion für die Qualität Assurance Applications. Verwenden Sie beispielsweise <b>CritBinom</b> die größte Anzahl defekte Teile bestimmen, die von einem Assembly Line ausführen, ohne dass das gesamte betrachten zulässig sind.</para>
          <para>Wenn ein Argument nicht numerisch ist, generiert <b>CritBinom</b> einen Fehler. </para>
          <para>Wenn Versuche keine ganze Zahl darstellt, wird die Zahl gekürzt.</para>
          <para>Wenn Versuche &lt; 0 ist, generiert <b>CritBinom</b> einen Fehler. </para>
          <para>Ist Erfolgswahrsch &lt; 0 oder Erfolgswahrsch &gt; 1 ist, generiert <b>CritBinom</b> einen Fehler. </para>
          <para>Wenn alpha &lt; 0 oder Alpha &gt; 1 ist, generiert <b>CritBinom</b> einen Fehler.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Csc">
      <MemberSignature Language="C#" Value="public double Csc (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csc([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csc(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csc (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csc(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16936)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Winkel in Bogenmaß (Radiant), für die Sie die Cosecant möchten.</param>
        <summary>Gibt die Cosecant eines Winkels zurück.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Csch">
      <MemberSignature Language="C#" Value="public double Csch (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csch([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csch(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csch (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csch(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16937)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Winkel in Bogenmaß (Radiant), für die Sie die kosekans möchten.</param>
        <summary>Gibt die kosekans eines Winkels zurück.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CumIPmt">
      <MemberSignature Language="C#" Value="public double CumIPmt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumIPmt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumIPmt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumIPmt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumIPmt(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16832)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Zinssatz.</param>
        <param name="Arg2">Die Gesamtzahl der Zahlungsperioden.</param>
        <param name="Arg3">Der Gegenwartswert.</param>
        <param name="Arg4">Die erste Periode in der Berechnung. Zahlungsperioden werden von 1 ausgehend nummeriert.</param>
        <param name="Arg5">Die letzte Periode in der Berechnung.</param>
        <param name="Arg6">Der Zeitpunkt für die Zahlung.</param>
        <summary>Gibt die kumulierten Zinsen zurück, die zwischen Anfang und Ende zu zahlen sind.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>In den folgenden Tabellen sind die Werte, die in <paramref name="Arg6" />.</para>
          <list type="table">
            <item>
              <term>0 (Null)</term>
              <description>Zahlung am Ende der Periode</description>
            </item>
            <item>
              <term>1</term>
              <description>Zahlung am Anfang der Periode</description>
            </item>
          </list>
          <para>Stellen Sie sicher, dass Sie konsistent zu den Einheiten, die Sie für Zins und Zzr verwenden sind. Wenn Sie monatliche Zahlungen eines Darlehens vier Jahre mit einer jährlichen Zinssatz von 12 Prozent vornehmen, verwenden Sie 12 % / 12 für Rate und 4 * 12 für <paramref name="Arg2" />. Wenn Sie für den gleichen Kredit jährliche Zahlen vorgenommen haben, verwenden Sie 12 % für Rate und 4 für <paramref name="Arg2" />. </para>
          <para>
            <paramref name="Arg2" />, <paramref name="Arg4" />, <paramref name="Arg5" />, und Typ werden zu ganzen Zahlen gekürzt. </para>
          <para>Wenn Zins ≤ 0, <paramref name="Arg2" /> ≤ 0 ist, oder <paramref name="Arg3" /> ≤ 0, <b>CumIPmt</b> generiert einen Fehler. </para>
          <para>Wenn <paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1 oder <paramref name="Arg4" /> &gt; <paramref name="Arg5" />, <b>CumIPmt einen Fehler</b> . </para>
          <para>Wenn <paramref name="Arg6" /> ist eine andere Zahl als 0 oder 1, <b>CumIPmt</b> generiert einen Fehler.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CumPrinc">
      <MemberSignature Language="C#" Value="public double CumPrinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumPrinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumPrinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumPrinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumPrinc(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16831)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Zinssatz.</param>
        <param name="Arg2">Die Gesamtzahl der Zahlungsperioden.</param>
        <param name="Arg3">Der Gegenwartswert.</param>
        <param name="Arg4">Die erste Periode in der Berechnung. Zahlungsperioden werden von 1 ausgehend nummeriert.</param>
        <param name="Arg5">Die letzte Periode in der Berechnung.</param>
        <param name="Arg6">Die letzte Periode in der Berechnung.</param>
        <summary>Gibt die aufgelaufene Tilgung eines Darlehens zurück, die zwischen Anfang und Ende zu zahlen ist.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>In den folgenden Tabellen sind die Werte, die in <paramref name="Arg6" />.</para>
          <list type="table">
            <item>
              <term>0 (Null)</term>
              <description>Zahlung am Ende der Periode</description>
            </item>
            <item>
              <term>1</term>
              <description>Zahlung am Anfang der Periode</description>
            </item>
          </list>
          <para>Stellen Sie sicher, dass Sie konsistent zu den Einheiten, die Sie für Zins und Zzr verwenden sind. Wenn Sie monatliche Zahlungen eines Darlehens vier Jahre mit einer jährlichen Zinssatz von 12 Prozent vornehmen, verwenden Sie 12 % / 12 für Rate und 4 * 12 für <paramref name="Arg2" />. Wenn Sie für den gleichen Kredit jährliche Zahlen vorgenommen haben, verwenden Sie 12 % für Rate und 4 für <paramref name="Arg2" />. </para>
          <para>
            <paramref name="Arg2" />, <paramref name="Arg4" />, <paramref name="Arg5" />, und Typ werden zu ganzen Zahlen gekürzt. </para>
          <para>Wenn Zins ≤ 0, <paramref name="Arg2" /> ≤ 0 ist, oder <paramref name="Arg3" /> ≤ 0, <b>CumPrinc</b> generiert einen Fehler. </para>
          <para>Wenn <paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1 oder <paramref name="Arg4" /> &gt; <paramref name="Arg5" />, <b>CumPrinc einen Fehler</b> . </para>
          <para>Wenn <paramref name="Arg6" /> ist eine andere Zahl als 0 oder 1, <b>CumPrinc</b> generiert einen Fehler.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DAverage">
      <MemberSignature Language="C#" Value="public double DAverage (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DAverage([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DAverage(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DAverage (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DAverage(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16426)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Berechnet den Mittelwert aus Werten in einer Listen- oder Datenbankspalte, die angegebene Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Da das Gleichheitszeichen verwendet wird, eine Formel an, wenn Sie in einer Zelle Text oder einen Wert eingeben, wertet Microsoft Excel die Eingabe. Dies kann jedoch unerwarteten Filterergebnissen führen. Wenn Sie einen Vergleichsoperator für Text oder einen Wert angeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich: </para>
          <para>='' = Eintrag ''</para>
          <para>Wobei Entryis den Text oder den Wert ermittelt werden soll. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Daten wird Excel nicht zwischen Groß-und Kleinschreibung unterschieden. Jedoch können Sie eine Formel, die zum Ausführen der Groß-/ Kleinschreibung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public double Days (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Days(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16957)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">start_date(Arg2) und Enddatum (Arg1) sind die beiden Datumsangaben, zwischen, denen Sie die Anzahl von Tagen ermitteln möchten.</param>
        <param name="Arg2">start_date(Arg2) und Enddatum (Arg1) sind die beiden Datumsangaben, zwischen, denen Sie die Anzahl von Tagen ermitteln möchten.</param>
        <summary>Gibt die Anzahl der Tage zwischen den beiden Datumsangaben zurück.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Days360">
      <MemberSignature Language="C#" Value="public double Days360 (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days360([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days360(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days360 (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16604)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die beiden Datumswerte, bei denen die Anzahl der dazwischen liegenden Tage ermittelt werden soll. Wenn Ausgangsdatum (Arg1) nach Enddatum (Arg2) liegt, gibt Days360 eine negative Zahl zurück. Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden.</param>
        <param name="Arg2">Die beiden Datumswerte, bei denen die Anzahl der dazwischen liegenden Tage ermittelt werden soll. Wenn Ausgangsdatum (Arg1) nach Enddatum (Arg2) liegt, gibt Days360 eine negative Zahl zurück. Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden.</param>
        <param name="Arg3">Ein boolescher Wert, der angibt, ob bei der Berechnung die USA oder die Europäische Methode verwendet.</param>
        <summary>Gibt die Anzahl der Tage zwischen zwei Datumswerten auf der Grundlage eines Jahrs mit 360 Tagen (d. h. zwölf Monaten mit jeweils 30 Tagen) zurück. Dies wird bei einigen Berechnungen in der Buchhaltung verwendet.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie diese Funktion zum Berechnen von Zahlungen, wenn Ihr System Accounting auf zwölf Monaten für 30 Tage basiert. Die folgende Tabelle enthält die Werte für <paramref name="Arg3" />.</para>
          <list type="table">
            <item>
              <term>
                <b>false</b> oder nicht angegeben</term>
              <description>US-Methode (NASD). Wenn das Anfangsdatum der 31. Tag eines Monats ist, wird er dem 30. Tag des gleichen Monats gleichgesetzt. Wenn das Enddatum der 31. Tag eines Monats ist und das Anfangsdatum vor dem 30. Tag eines Monats liegt, wird das Enddatum dem 1. Tag des nächsten Monats gleichgesetzt, andernfalls ist das Enddatum gleich dem 30. Tag des gleichen Monats.</description>
            </item>
            <item>
              <term>
                <b>"true"</b>
              </term>
              <description>Europäische Methode. Anfangsdatumswerte und Enddatumswerte, die auf den 31. Tag eines Monats fallen, werden dem 30. Tag des gleichen Monats gleichgesetzt.</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Db">
      <MemberSignature Language="C#" Value="public double Db (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Db([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Db(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Db (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16631)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ansch_Wert – die Anlagekosten für den Vermögenswert.</param>
        <param name="Arg2">Restwert – der Wert zum Ende der Abschreibung (gelegentlich wird er als "Restwert" des Vermögenswerts bezeichnet).</param>
        <param name="Arg3">Nutzungsdauer – die Anzahl der Zeiträume, über die der Vermögenswert abgeschrieben wird (dies wird gelegentlich als "Nutzungsdauer" des Vermögenswerts bezeichnet).</param>
        <param name="Arg4">Periode – der Zeitraum, für den die Abschreibung berechnet werden soll. Die Einheiten der Periode und der Nutzungsdauer müssen übereinstimmen.</param>
        <param name="Arg5">Monat – die Anzahl der Monate im ersten Jahr. Wenn Sie diesen Wert nicht angeben, wird von 12 ausgegangen.</param>
        <summary>Gibt die geometrisch-degressive Abschreibung eines Vermögenswerts für eine bestimmte Periode zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Geometrisch-degressive berechnet die Abschreibung zu einem festen Satz. DB verwendet die folgenden Formeln, um Abschreibung für einen bestimmten Zeitraum zu berechnen:</para>
          <para>(Kosten – Summe der Abschreibung aus vorhergehenden Perioden) * Satz</para>
          <para>Dabei gilt Folgendes:</para>
          <para>Rate = 1 – ((salvage / cost) ^ (1 / Leben)), gerundet auf drei Dezimalstellen</para>
          <para>Abschreibung für die ersten und letzten Punkte stellt einen Sonderfall dar. Für die erste Periode verwendet DB die folgende Formel:</para>
          <para>Kosten * Satz * Monat / 12</para>
          <para>Für die letzte Periode verwendet DB die folgende Formel:</para>
          <para>((Kosten – Summe der Abschreibung aus vorhergehenden Perioden) * Satz * (12 – Monat)) / 12</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dbcs">
      <MemberSignature Language="C#" Value="public string Dbcs (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dbcs([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dbcs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dbcs (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Dbcs(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16599)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Text oder ein Bezug auf eine Zelle mit dem zu ändernden Text.</param>
        <summary>Buchstaben von halber Breite (Single-Byte) innerhalb einer Zeichenfolge konvertiert in voller Breite (Doppelbytezeichen) Zeichen. Der Name der Funktion (und die Zeichen, die es konvertiert) ist abhängig von der spracheinstellungen.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DCount">
      <MemberSignature Language="C#" Value="public double DCount (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCount([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCount(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCount (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCount(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16424)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn das Argument mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Gibt die Anzahl der Zellen mit Zahlen in einer Listen- oder Datenbankspalte zurück, die bestimmte Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Da das Gleichheitszeichen verwendet wird, eine Formel an, wenn Sie in einer Zelle Text oder einen Wert eingeben, wertet Microsoft Excel die Eingabe. Dies kann jedoch unerwarteten Filterergebnissen führen. Wenn Sie einen Vergleichsoperator für Text oder einen Wert angeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich: </para>
          <para>='' = Eintrag ''</para>
          <para>Eintrag ist, in dem der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Daten wird Excel nicht zwischen Groß-und Kleinschreibung unterschieden. Jedoch können Sie eine Formel, die zum Ausführen der Groß-/ Kleinschreibung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DCountA">
      <MemberSignature Language="C#" Value="public double DCountA (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCountA([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCountA(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCountA (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCountA(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16583)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Gibt die Anzahl der nicht leeren Zellen in einer Listen- oder Datenbankspalte zurück, die bestimmte Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Da das Gleichheitszeichen verwendet wird, eine Formel an, wenn Sie in einer Zelle Text oder einen Wert eingeben, wertet Microsoft Excel die Eingabe. Dies kann jedoch unerwarteten Filterergebnissen führen. Wenn Sie einen Vergleichsoperator für Text oder einen Wert angeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich: </para>
          <para>='' = Eintrag ''</para>
          <para>Eintrag ist, in dem der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Daten wird Excel nicht zwischen Groß-und Kleinschreibung unterschieden. Jedoch können Sie eine Formel, die zum Ausführen der Groß-/ Kleinschreibung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ddb">
      <MemberSignature Language="C#" Value="public double Ddb (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ddb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ddb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16528)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ansch_Wert – die Anlagekosten für den Vermögenswert.</param>
        <param name="Arg2">Restwert – der Wert zum Ende der Abschreibung (gelegentlich wird er als "Restwert" des Vermögenswerts bezeichnet). Dieser Wert kann 0 entsprechen.</param>
        <param name="Arg3">Nutzungsdauer – die Anzahl der Zeiträume, über die der Vermögenswert abgeschrieben wird (dies wird gelegentlich als "Nutzungsdauer" des Vermögenswerts bezeichnet).</param>
        <param name="Arg4">Periode – der Zeitraum, für den die Abschreibung berechnet werden soll. Die Einheiten der Periode und der Nutzungsdauer müssen übereinstimmen.</param>
        <param name="Arg5">Faktor – die Rate für die Abschreibung. Wenn Sie den Faktor nicht angeben, wird von 2 ausgegangen (Doppelraten-Abschreibung).</param>
        <summary>Gibt die degressive Doppelratenabschreibung eines Vermögenswerts oder eine mit einer anderen Methode berechnete Abschreibung für eine bestimmte Periode zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: bei allen fünf Argumenten muss eine positive Zahlen.</para>
          <para>Der degressiven Doppelraten berechnet die Abschreibung zu einem beschleunigten Satz. Die Abschreibung ist in der ersten Periode am höchsten und nimmt in den nachfolgenden Zeiträumen. <b>DDB</b> verwendet die folgende Formel, um Abschreibung für einen bestimmten Zeitraum zu berechnen:</para>
          <code>Min( (cost - total depreciation from prior periods) * (factor/life), (cost - salvage -  total depreciation from prior periods) )
</code>
          <para>Ändern Sie Faktor, wenn Sie die Methode der doppelten Restwertabschreibung nicht verwenden möchten.</para>
          <para>Verwendung der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" /> ausgeführt werden, wenn Sie die Abschreibung größer als die degressive Abschreibung ist zur linearen Abschreibung wechseln möchten.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Bin">
      <MemberSignature Language="C#" Value="public string Dec2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16771)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die ganze Dezimalzahl, die Sie konvertieren möchten. Wenn Zahl negativ ist, sind gültige Werte ignoriert, und <b>Dec2Bin</b> gibt eine binäre Zahl (10 Bits) 10 Zeichen in der das wichtigste Bit das Vorzeichen-Bit ist. Die verbleibenden 9 Bits sind Magnitude Bits. Negative Zahlen werden mithilfe zweier-Komplement-Notation dargestellt.</param>
        <param name="Arg2">Wert für stellen - die Anzahl der Zeichen angezeigt werden sollen. Wenn dies nicht angegeben wird, verwendet <b>Dec2Bin</b> die Mindestanzahl der Zeichen erforderlich. Wert für stellen eignet sich für den Rückgabewert mit führenden 0 (Nullen).</param>
        <summary>Rechnet eine Dezimalzahl in eine binäre Zahl um.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Zahl &lt; -512 oder wenn Zahl &gt; 511 ist, gibt <b>Dec2Bin</b> den #NUM zurück! Fehlerwert. </para>
          <para>Wenn Zahl nicht numerisch ist, gibt <b>Dec2Bin</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn für <b>Dec2Bin</b> mehr als Stellen Zeichen erforderlich sind, gibt es das #NUM zurück! Fehlerwert. </para>
          <para>Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn der Wert für stellen nicht numerisch ist, gibt <b>Dec2Bin</b> den #VALUE! Fehlerwert. </para>
          <para>Ist Stellen NULL oder negativ ist, <b>Dec2Bin</b> gibt das #NUM! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Hex">
      <MemberSignature Language="C#" Value="public string Dec2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16772)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die ganze Dezimalzahl, die Sie konvertieren möchten. Wenn Zahl negativ ist, stellen ignoriert, und <b>Dec2Hex</b> gibt eine hexadezimale Zahl (40-Bit) 10 Zeichen in der das wichtigste Bit das Vorzeichen-Bit ist. Die verbleibenden 39 Bits sind Magnitude Bits. Negative Zahlen werden mithilfe zweier-Komplement-Notation dargestellt.</param>
        <param name="Arg2">Wert für stellen - die Anzahl der Zeichen angezeigt werden sollen. Wenn dies nicht angegeben wird, verwendet <b>Dec2Hex</b> die Mindestanzahl der Zeichen erforderlich. Wert für stellen eignet sich für den Rückgabewert mit führenden 0 (Nullen).</param>
        <summary>Rechnet eine dezimale Zahl in eine Hexadezimalzahl um.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Zahl &lt; -549,755,813,888 oder &gt; 549.755.813.887 ist, gibt <b>Dec2Hex</b> den #NUM zurück! Fehlerwert. </para>
          <para>Wenn Zahl nicht numerisch ist, gibt <b>Dec2Hex</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn für <b>Dec2Hex</b> mehr als Stellen Zeichen erforderlich sind, gibt es das #NUM zurück! Fehlerwert. </para>
          <para>Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn der Wert für stellen nicht numerisch ist, gibt <b>Dec2Hex</b> den #VALUE! Fehlerwert. </para>
          <para>Ist Stellen negativ, gibt <b>Dec2Hex</b> den #NUM! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Oct">
      <MemberSignature Language="C#" Value="public string Dec2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16773)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die ganze Dezimalzahl, die Sie konvertieren möchten. Wenn Zahl negativ ist, stellen ignoriert, und <b>Dec2Oct</b> gibt eine oktale Zahl (30-Bit) 10 Zeichen in der das wichtigste Bit das Vorzeichen-Bit ist zurück. Die verbleibenden 29 Bits sind Magnitude Bits. Negative Zahlen werden mithilfe zweier-Komplement-Notation dargestellt.</param>
        <param name="Arg2">Wert für stellen - die Anzahl der Zeichen angezeigt werden sollen. Wenn dies nicht angegeben wird, verwendet <b>Dec2Oct</b> die Mindestanzahl der Zeichen erforderlich. Wert für stellen eignet sich für den Rückgabewert mit führenden 0 (Nullen).</param>
        <summary>Rechnet eine Dezimalzahl in eine oktale Zahl um.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Zahl &lt; -536,870,912 oder &gt; 536.870.911 ist, gibt <b>Dec2Oct</b> den #NUM zurück! Fehlerwert. </para>
          <para>Wenn Zahl nicht numerisch ist, gibt <b>Dec2Oct</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn für <b>Dec2Oct</b> mehr als Stellen Zeichen erforderlich sind, gibt es das #NUM zurück! Fehlerwert. </para>
          <para>Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn der Wert für stellen nicht numerisch ist, gibt <b>Dec2Oct</b> den #VALUE! Fehlerwert. </para>
          <para>Ist Stellen negativ, gibt <b>Dec2Oct</b> den #NUM! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decimal">
      <MemberSignature Language="C#" Value="public double Decimal (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Decimal([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Decimal(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decimal (Arg1 As String, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Decimal(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16956)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Zahl, die Sie konvertieren möchten.</param>
        <param name="Arg2">Die Basis der Nummer werden Sie konvertieren.</param>
        <summary>Konvertiert eine Textdarstellung einer Zahl in einer angegebenen Basis in eine Dezimalzahl.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Degrees">
      <MemberSignature Language="C#" Value="public double Degrees (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Degrees([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Degrees (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Degrees(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16727)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Winkel – der umzurechnende Winkel im Bogenmaß.</param>
        <summary>Rechnet Bogenmaß in Grad um.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public double Delta (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Delta([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Delta(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delta (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16802)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1 – die erste Zahl.</param>
        <param name="Arg2">Zahl2 – die zweite Zahl. Wenn dies nicht angegeben wird, wird Null angenommen.</param>
        <summary>Überprüft, ob zwei Werte gleich sind. Gibt 1 zurück, wenn sich die erste und die zweite Zahl entsprechen, andernfalls wird 0 zurückgegeben.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie diese Funktion, um einen Satz von Werten zu filtern. Durch summieren mehrerer <b>Delta</b> -Funktionen berechnen Sie beispielsweise die Anzahl gleich-Paare. Diese Funktion ist auch bekannt als Kroneckersymbol.</para>
          <para>Wenn Zahl1 nicht numerisch ist, gibt <b>Delta</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Zahl2 nicht numerisch ist, gibt <b>Delta</b> den #VALUE! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DevSq">
      <MemberSignature Language="C#" Value="public double DevSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DevSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DevSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DevSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16702)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – zwischen 1 und 30 Argumente, für die die Summe der quadrierten Abweichungen ermittelt werden soll. Sie können auch ein Array oder einen Bezug auf ein Array anstelle der durch Komma getrennten Argumente verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt die Summe der quadrierten Abweichungen der Datenpunkte von ihrem Stichprobenmittelwert zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen. </para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt. </para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt. </para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht. </para>
          <para>Die Formel für die Summe der quadrierten Abweichungen lautet wie folgt: 

 </para>
          <para>Abbildung 1: Gleichung für die Summe der quadratischen abweichungen</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DGet">
      <MemberSignature Language="C#" Value="public object DGet (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DGet([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DGet(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DGet (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DGet(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16619)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Extrahiert einen Wert aus einer Listen- oder Datenbankspalte, der bestimmte Bedingungen erfüllt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Da das Gleichheitszeichen verwendet wird, eine Formel an, wenn Sie in einer Zelle Text oder einen Wert eingeben, wertet Microsoft Excel die Eingabe. Dies kann jedoch unerwarteten Filterergebnissen führen. Wenn Sie einen Vergleichsoperator für Text oder einen Wert angeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich: </para>
          <para>='' = Eintrag ''</para>
          <para>Eintrag ist, in dem der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Daten wird Excel nicht zwischen Groß-und Kleinschreibung unterschieden. Jedoch können Sie eine Formel, die zum Ausführen der Groß-/ Kleinschreibung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Disc">
      <MemberSignature Language="C#" Value="public double Disc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Disc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Disc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Disc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16819)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Kurs – ist der Preis des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg4">Rückzahlung – der Rückkaufswert des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg5">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt den Abschlag (Disagio) eines Wertpapiers zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden. </para>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültige fortlaufende Zahl ist, gibt <b>Disc</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Kurs ≤ 0 oder Rückzahlung ≤ 0, <b>CD</b> das #NUM #zahl! Fehlerwert. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4 ist, gibt <b>Disc</b> das #NUM zurück! Fehlerwert. </para>
          <para>Ist Abrechnung ≥ Fälligkeit ist, gibt <b>Disc</b> den #NUM #zahl! Fehlerwert. </para>
          <para>
            <b>Disc</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Gleichung zur Berechnung der Disc-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>B = Anzahl der Tage in einem Jahr je nach der Jahresbasis.</para>
          <para>DSM = Anzahl der Tage zwischen Abrechnung und Fälligkeit.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DMax">
      <MemberSignature Language="C#" Value="public double DMax (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMax([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMax(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMax (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMax(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16428)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Gibt die größte Zahl in einer Listen- oder Datenbankspalte zurück, die bestimmte Bedingungen erfüllt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Da das Gleichheitszeichen verwendet wird, eine Formel an, wenn Sie in einer Zelle Text oder einen Wert eingeben, wertet Microsoft Excel die Eingabe. Dies kann jedoch unerwarteten Filterergebnissen führen. Wenn Sie einen Vergleichsoperator für Text oder einen Wert angeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich: </para>
          <para>='' = Eintrag ''</para>
          <para>Eintrag ist, in dem der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Daten wird Excel nicht zwischen Groß-und Kleinschreibung unterschieden. Jedoch können Sie eine Formel, die zum Ausführen der Groß-/ Kleinschreibung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DMin">
      <MemberSignature Language="C#" Value="public double DMin (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMin([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMin(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMin (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMin(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16427)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Gibt die kleinste Zahl in einer Listen- oder Datenbankspalte zurück, die bestimmte Bedingungen erfüllt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Da das Gleichheitszeichen verwendet wird, eine Formel an, wenn Sie in einer Zelle Text oder einen Wert eingeben, wertet Microsoft Excel die Eingabe. Dies kann jedoch unerwarteten Filterergebnissen führen. Wenn Sie einen Vergleichsoperator für Text oder einen Wert angeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich: </para>
          <para>='' = Eintrag ''</para>
          <para>Eintrag ist, in dem der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Daten wird Excel nicht zwischen Groß-und Kleinschreibung unterschieden. Jedoch können Sie eine Formel, die zum Ausführen der Groß-/ Kleinschreibung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dollar">
      <MemberSignature Language="C#" Value="public string Dollar (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dollar([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dollar (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16397)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – eine Zahl, ein Bezug auf eine Zelle mit einer Zahl oder eine Formel, die zu einer Zahl ausgewertet wird.</param>
        <param name="Arg2">Dezimalstellen – die Anzahl der Stellen nach dem Komma. Wenn dieser Wert negativ ist, wird die Zahl vor dem Komma gerundet. Wenn Sie diesen Wert nicht angeben, wird 2 angenommen.</param>
        <summary>Diese Funktion rechnet eine Zahl in das Textformat um und fügt ein Währungssymbol ein. Der Name der Funktion (und das Währungssymbol) ist abhängig von den Spracheinstellungen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Der Hauptunterschied zwischen dem Formatieren einer Zelle, die eine Zahl mit dem Befehl Zellen (Menü "Format") enthält und Formatieren einer Zahl direkt mit der <b>Dollar</b> -Funktion ist, dass <b>Dollar</b> das Ergebnis in Text konvertiert. Eine Zahl, die mit dem Befehl Zellen formatiert ist immer noch eine Zahl. Sie können weiterhin mit <b>Dollar</b> in Formeln, die formatierte Zahlen verwendet werden, da Microsoft Excel bei der Berechnung zu Nummern als Textwerte eingegebene Nummern konvertiert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarDe">
      <MemberSignature Language="C#" Value="public double DollarDe (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarDe([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarDe(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarDe (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarDe(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16827)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – eine als Bruch angegebene Zahl.</param>
        <param name="Arg2">Teiler – die ganze Zahl, die als Nenner für den Bruch verwendet werden soll.</param>
        <summary>Rechnet einen als Bruch angegebenen Dollarpreis in einen als Dezimalzahl angegebenen Dollarpreis um. Verwenden Sie DOLLARDE zum Umrechnen von Preisen, die als Bruchzahlen angegeben sind, in Dezimalzahlen (z. B. für Wertpapierpreise).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Teiler keine ganze Zahl darstellt, wird die Zahl gekürzt.</para>
          <para>Wenn Teiler kleiner als 0 ist, gibt <b>DollarDe</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Teiler gleich 0 ist, gibt <b>DollarDe</b> den #DIV/0! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarFr">
      <MemberSignature Language="C#" Value="public double DollarFr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarFr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarFr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarFr (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarFr(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16828)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – eine Dezimalzahl.</param>
        <param name="Arg2">Teiler – die ganze Zahl, die als Nenner des Bruchs verwendet werden soll.</param>
        <summary>Rechnet einen als Dezimalzahl angegebenen Dollarpreis in einen als Bruch angegebenen Dollarpreis um. Verwenden Sie DOLLARFR zum Konvertieren von Dollarpreisen, die als Dezimalzahlen angegeben sind, in Bruchzahlen (z. B. für Wertpapierpreise).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Teiler keine ganze Zahl darstellt, wird die Zahl gekürzt.</para>
          <para>Wenn Teiler kleiner als 0 ist, gibt <b>DollarFr</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Teiler gleich 0 ist, gibt <b>DollarFr</b> den #DIV/0! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DProduct">
      <MemberSignature Language="C#" Value="public double DProduct (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DProduct([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DProduct(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DProduct (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DProduct(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16573)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder die Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den angegebenen Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Multipliziert die Werte in einer Listen- oder Datenbankspalte, die die angegebenen Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Da das Gleichheitszeichen verwendet wird, eine Formel an, wenn Sie in einer Zelle Text oder einen Wert eingeben, wertet Microsoft Excel die Eingabe. Dies kann jedoch unerwarteten Filterergebnissen führen. Wenn Sie einen Vergleichsoperator für Text oder einen Wert angeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich: </para>
          <para>='' = Eintrag ''</para>
          <para>Eintrag ist, in dem der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Daten wird Excel nicht zwischen Groß-und Kleinschreibung unterschieden. Jedoch können Sie eine Formel, die zum Ausführen der Groß-/ Kleinschreibung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDev">
      <MemberSignature Language="C#" Value="public double DStDev (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDev([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDev(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDev (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDev(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16429)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Schätzt die Standardabweichung einer Grundgesamtheit auf Grundlage einer Stichprobe mithilfe von Zahlen in einer Listen- oder Datenbankspalte, die bestimmte Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Da das Gleichheitszeichen verwendet wird, eine Formel an, wenn Sie in einer Zelle Text oder einen Wert eingeben, wertet Microsoft Excel die Eingabe. Dies kann jedoch unerwarteten Filterergebnissen führen. Wenn Sie einen Vergleichsoperator für Text oder einen Wert angeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich: </para>
          <para>='' = Eintrag ''</para>
          <para>Eintrag ist, in dem der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Daten wird Excel nicht zwischen Groß-und Kleinschreibung unterschieden. Jedoch können Sie eine Formel, die zum Ausführen der Groß-/ Kleinschreibung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDevP">
      <MemberSignature Language="C#" Value="public double DStDevP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDevP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDevP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDevP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDevP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16579)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Berechnet die Standardabweichung einer Grundgesamtheit auf Grundlage der gesamten Grundgesamtheit mithilfe von Zahlen in einer Listen- oder Datenbankspalte, die bestimmte Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Da das Gleichheitszeichen verwendet wird, eine Formel an, wenn Sie in einer Zelle Text oder einen Wert eingeben, wertet Microsoft Excel die Eingabe. Dies kann jedoch unerwarteten Filterergebnissen führen. Wenn Sie einen Vergleichsoperator für Text oder einen Wert angeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich: </para>
          <para>='' = Eintrag ''</para>
          <para>Eintrag ist, in dem der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Daten wird Excel nicht zwischen Groß-und Kleinschreibung unterschieden. Jedoch können Sie eine Formel, die zum Ausführen der Groß-/ Kleinschreibung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DSum">
      <MemberSignature Language="C#" Value="public double DSum (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DSum([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DSum(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DSum (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DSum(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16425)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Addiert die Zahlen in einer Listen- oder Datenbankspalte, die die angegebenen Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Da das Gleichheitszeichen verwendet wird, eine Formel an, wenn Sie in einer Zelle Text oder einen Wert eingeben, wertet Microsoft Excel die Eingabe. Dies kann jedoch unerwarteten Filterergebnissen führen. Wenn Sie einen Vergleichsoperator für Text oder einen Wert angeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich: </para>
          <para>='' = Eintrag ''</para>
          <para>Eintrag ist, in dem der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Daten wird Excel nicht zwischen Groß-und Kleinschreibung unterschieden. Jedoch können Sie eine Formel, die zum Ausführen der Groß-/ Kleinschreibung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy19">
      <MemberSignature Language="C#" Value="public object Dummy19 (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Dummy19([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy19(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy19 (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2827)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy21">
      <MemberSignature Language="C#" Value="public double Dummy21 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Dummy21([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy21(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy21 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Dummy21(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2826)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public double Duration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Duration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Duration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Duration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16842)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Nominalzins – der jährliche Couponzinssatz des Wertpapiers.</param>
        <param name="Arg4">Rendite – die jährliche Rendite des Wertpapiers.</param>
        <param name="Arg5">Häufigkeit – die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2 für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg6">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt die Macauley-Duration für einen angenommenen Nennwert von 100 $ zurück. Die Duration ist als gewichteter Durchschnitt des Gegenwartswerts der Cashflows definiert und wird als Maß für die Reaktion des Preises eines Wertpapiers auf Renditeänderungen verwendet.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Häufigkeit und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültiges Datum angegeben sind, gibt <b>Duration</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Nominalzins &lt; 0 oder, wenn Rendite &lt; 0, gibt <b>Dauer</b> das #NUM zurück! Fehlerwert. </para>
          <para>Wenn es sich bei Häufigkeit um eine andere Zahl als 1, 2 oder 4 handelt, gibt <b>Duration</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4 ist, gibt <b>Dauer</b> das #NUM zurück! Fehlerwert. </para>
          <para>Ist Abrechnung ≥ Fälligkeit, <b>Dauer</b> der #NUM #zahl! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DVar">
      <MemberSignature Language="C#" Value="public double DVar (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVar([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVar(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVar (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVar(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16431)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Schätzt die Varianz einer Grundgesamtheit auf Grundlage einer Stichprobe mithilfe von Zahlen in einer Listen- oder Datenbankspalte, die bestimmte Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Da das Gleichheitszeichen verwendet wird, eine Formel an, wenn Sie in einer Zelle Text oder einen Wert eingeben, wertet Microsoft Excel die Eingabe. Dies kann jedoch unerwarteten Filterergebnissen führen. Wenn Sie einen Vergleichsoperator für Text oder einen Wert angeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich: </para>
          <para>='' = Eintrag ''</para>
          <para>Eintrag ist, in dem der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Daten wird Excel nicht zwischen Groß-und Kleinschreibung unterschieden. Jedoch können Sie eine Formel, die zum Ausführen der Groß-/ Kleinschreibung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DVarP">
      <MemberSignature Language="C#" Value="public double DVarP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVarP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVarP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVarP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVarP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16580)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Berechnet die Varianz einer Grundgesamtheit auf Grundlage der gesamten Grundgesamtheit mithilfe von Zahlen in einer Listen- oder Datenbankspalte, die bestimmte Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Da das Gleichheitszeichen verwendet wird, eine Formel an, wenn Sie in einer Zelle Text oder einen Wert eingeben, wertet Microsoft Excel die Eingabe. Dies kann jedoch unerwarteten Filterergebnissen führen. Wenn Sie einen Vergleichsoperator für Text oder einen Wert angeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich: </para>
          <para>='' = Eintrag ''</para>
          <para>Eintrag ist, in dem der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Daten wird Excel nicht zwischen Groß-und Kleinschreibung unterschieden. Jedoch können Sie eine Formel, die zum Ausführen der Groß-/ Kleinschreibung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EDate">
      <MemberSignature Language="C#" Value="public double EDate (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EDate([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EDate(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EDate (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EDate(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16833)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ausgangsdatum – Das Anfangsdatum. Datumswerte sollten mithilfe der DATE-Funktion eingegeben werden oder als Ergebnisse von anderen Formeln oder Funktionen. Verwenden Sie beispielsweise DATE(2008,5,23) für den 23. Mai 2008. Es können Probleme auftreten, wenn Datumswerte als Text eingegeben werden.</param>
        <param name="Arg2">Monate – Die Anzahl der Monate vor oder nach Ausgangsdatum. Ein positiver Wert entspricht einem Datum in der Zukunft, ein negativer Wert einem Datum in der Vergangenheit.</param>
        <summary>Gibt die fortlaufende Zahl des Datums zurück, das eine bestimmte Anzahl von Monaten vor bzw. nach einem angegebenen Datum (Ausgangsdatum) liegt. Mit EDATE können Sie Fälligkeitsdaten berechnen, die auf den gleichen Tag im Monat wie das Ausgabedatum fallen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Wenn Ausgangsdatum nicht um ein gültiges Datum vorliegt, gibt <b>EDATUM</b> das #VALUE! Fehlerwert. </para>
          <para>Wenn es sich bei Monate nicht um eine ganze Zahl handelt, wird die Zahl gekürzt.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public double Effect (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Effect([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Effect (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Effect(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16830)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nominalzins – Die Nominalverzinsung.</param>
        <param name="Arg2">Perioden – Die Anzahl der Zinszahlungen pro Jahr.</param>
        <summary>Gibt die jährliche Effektivverzinsung zurück, wenn die jährliche Nominalverzinsung und die Anzahl der Zinszahlungen pro Jahr angegeben werden.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Perioden wird auf eine ganze Zahl gekürzt.</para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>Effect</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Nominalzins ≤ 0 oder ist Perioden &lt; 1, gibt <b>Effect</b> das #NUM zurück! Fehlerwert. </para>
          <para>
            <b>Effect</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Gleichung zur Berechnung der Effect-Methode</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeURL">
      <MemberSignature Language="C#" Value="public object EncodeURL (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EncodeURL([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EncodeURL(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeURL (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EncodeURL(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16981)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text, der codiert werden.</param>
        <summary>URL codiert das Argument.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EoMonth">
      <MemberSignature Language="C#" Value="public double EoMonth (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EoMonth([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EoMonth(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EoMonth (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EoMonth(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16834)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ausgangsdatum – Das Anfangsdatum. Datumswerte sollten mithilfe der DATE-Funktion eingegeben werden oder als Ergebnisse von anderen Formeln oder Funktionen. Verwenden Sie beispielsweise DATE(2008,5,23) für den 23. Mai 2008. Es können Probleme auftreten, wenn Datumswerte als Text eingegeben werden.</param>
        <param name="Arg2">Monate – Die Anzahl der Monate vor oder nach Ausgangsdatum. Ein positiver Wert entspricht einem Datum in der Zukunft, ein negativer Wert einem Datum in der Vergangenheit.</param>
        <summary>Gibt die fortlaufende Zahl des letzten Tags des Monats vor oder nach einer bestimmten Anzahl von Monaten nach bzw. vor Ausgangsdatum zurück. Mit EOMONTH können Sie Fälligkeitstermine berechnen, die auf den letzten Tag des Monats fallen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Wenn Ausgangsdatum nicht um ein gültiges Datum vorliegt, gibt <b>EoMonth</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Ausgangsdatum und Monate nicht um ein ungültiges Datum, gibt <b>EoMonth</b> den #NUM! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public double Erf (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16807)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Untere_Grenze – die Untergrenze für die Integration von <b>Erf</b>.</param>
        <param name="Arg2">Obergrenze – die Obergrenze für die Integration von <b>Erf</b>. Wenn Length angegeben, integriert Erf zwischen 0 (null) und der Untergrenze.</param>
        <summary>Gibt die Fehlerfunktion integriert zwischen Untere_Grenze und Obere_Grenze zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" /> Methode.</para>
          <para>Wenn Untere_Grenze nicht numerisch ist, gibt <b>Erf</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Untere_Grenze negativ ist, gibt <b>Erf</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Obere_Grenze nicht numerisch ist, gibt <b>Erf</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Obere_Grenze negativ ist, gibt <b>Erf</b> den #NUM! Fehlerwert. </para>
          <para>Abbildung 1: Gleichung zur Berechnung der Erf-Methode</para>
          <para></para>
          <para></para>
          <para>Abbildung 2: Gleichung zur Berechnung der Erf-Methode</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf_Precise">
      <MemberSignature Language="C#" Value="public double Erf_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Erf_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16927)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Untere_Grenze – Die Untergrenze für die Integration von ERF.</param>
        <summary>Gibt die Gauß'sche Fehlerfunktion zwischen Null und Untere_Grenze zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Ist Untere_Grenze nicht numerisch, generiert <b>Erf_Precise</b> einen Fehler. Ist Untere_Grenze negativ, generiert <b>Erf_Precise</b> einen Fehler.</para>
          <para>Abbildung 1: Gleichung zur Berechnung der Erf_Precise-Methode</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC">
      <MemberSignature Language="C#" Value="public double ErfC (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16808)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Das erste Argument.</param>
        <summary>Gibt die komplementäre ERF-Funktion zwischen dem angegebenen Parameter und Unendlich integriert zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" /> Methode.</para>
          <para>Wenn diese Funktion nicht verfügbar ist und der Fehler #NAME? zurückgegeben wird, müssen Sie das Add-In Analyse-Funktionen installieren und laden.</para>
          <para>Wenn der Parameter nicht numerisch ist, gibt <b>ErfC</b> den #VALUE! Fehlerwert.</para>
          <para>Wenn der Parameter negativ ist, gibt <b>ErfC</b> den #NUM! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC_Precise">
      <MemberSignature Language="C#" Value="public double ErfC_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16928)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Vergleichswert für die Berechnung.</param>
        <summary>Gibt die komplementäre Fehlerfunktion zwischen dem angegebenen Wert und Unendlich integriert zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn der angegebene Wert nicht numerisch ist, erzeugt <b>ErfC_Precise</b> einen Fehler.</para>
          <para>Wenn der angegebene Wert negativ ist, erzeugt <b>ErfC_Precise</b> einen Fehler.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Even">
      <MemberSignature Language="C#" Value="public double Even (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Even([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Even(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Even (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Even(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16663)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – Der zu rundende Wert.</param>
        <summary>Gibt Zahl auf die nächste gerade ganze Zahl gerundet zurück. Mit dieser Funktion können Sie paarweise auftretende Elemente verarbeiten. Betrachten Sie beispielsweise eine Kiste, in die in Reihen mit einem oder zwei Elementen befüllt werden kann. Die Kiste ist voll, wenn die Anzahl der Elemente auf die nächste gerade Zahl aufgerundet mit der Kapazität der Kiste übereinstimmt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Zahl nicht numerisch ist, gibt <b>Even</b> den #VALUE! Fehlerwert. </para>
          <para>Unabhängig vom Vorzeichen von Zahl wird ein Wert aufgerundet. Wenn es sich bei Zahl bereits um eine gerade ganze Zahl handelt, erfolgt keine Rundung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Expon_Dist">
      <MemberSignature Language="C#" Value="public double Expon_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Expon_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Expon_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Expon_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16878)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – Der Wert der Funktion.</param>
        <param name="Arg2">Lambda – Der Parameterwert.</param>
        <param name="Arg3">Kumuliert – ein Wahrheitswert, der angibt, welche Art von den Typ der Funktion. Wenn kumulative <b>true festgelegt</b>ist, <b>gibt expon.dist</b> Wert der Verteilungsfunktion; Wenn <b>false</b>, die Wahrscheinlichkeitswert der Funktion zurückgegeben.</param>
        <summary>Gibt Wahrscheinlichkeiten einer exponentialverteilten Zufallsvariablen zurück. Mit EXPON.DIST können Sie die Zeit zwischen Ereignissen modellieren, beispielsweise wie lange ein Geldautomat für die Ausgabe von Geld benötigt. Mit EXPON.DIST können Sie beispielsweise die Wahrscheinlichkeit berechnen, dass dieser Vorgang höchstens eine Minute dauert.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn x oder Lambda nicht numerisch ist, <b>gibt expon.dist</b> gibt die #VALUE! Fehlerwert. </para>
          <para>Wenn x &lt; 0, <b>gibt expon.dist</b> gibt das #NUM! Fehlerwert. </para>
          <para>Wenn Lambda ≤ 0, <b>gibt expon.dist</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Die Formel für den Wahrscheinlichkeitswert der Funktion lautet wie folgt: 

 </para>
          <para>Abbildung 1: Gleichung für die Wahrscheinlichkeitsdichte</para>
          <para></para>
          <para></para>
          <para>Die Formel für den kumulierten Wert der Verteilungsfunktion lautet wie folgt: 

</para>
          <para>Abbildung 2: Gleichung für die Verteilungsfunktion</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponDist">
      <MemberSignature Language="C#" Value="public double ExponDist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ExponDist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ExponDist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExponDist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ExponDist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16664)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – Der Wert der Funktion.</param>
        <param name="Arg2">Lambda – Der Parameterwert.</param>
        <param name="Arg3">Kumuliert – ein Wahrheitswert, der angibt, welche Art von den Typ der Funktion. Wenn kumulative <b>true festgelegt</b>ist, <b>gibt ExponDist</b> gibt Werte die Verteilungsfunktion; Wenn <b>false</b>, die Wahrscheinlichkeitswert der Funktion zurückgegeben.</param>
        <summary>Gibt die exponentielle Verteilung zurück. Verwendung <b>gibt ExponDist</b> zum Modellieren der Zeit zwischen den Ereignissen, wie etwa wie lange, eine automatisierte Kassierer dauert gezahlten übermitteln. <b>Gibt ExponDist</b> können Sie beispielsweise um die Wahrscheinlichkeit zu ermitteln, die der Vorgang höchstens 1 Minute dauert.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" /> Methode.</para>
          <para>Wenn x oder Lambda nicht numerisch ist, <b>gibt ExponDist</b> gibt die #VALUE! Fehlerwert. </para>
          <para>Wenn x &lt; 0, <b>gibt ExponDist</b> gibt das #NUM! Fehlerwert. </para>
          <para>Wenn Lambda ≤ 0, <b>gibt ExponDist</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Die Formel für den Wahrscheinlichkeitswert der Funktion lautet wie folgt: 

 </para>
          <para>Abbildung 1: Gleichung für die Wahrscheinlichkeitsdichte</para>
          <para></para>
          <para></para>
          <para>Die Formel für den kumulierten Wert der Verteilungsfunktion lautet wie folgt: 

</para>
          <para>Abbildung 2: Gleichung für die Verteilungsfunktion</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist">
      <MemberSignature Language="C#" Value="public double F_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16915)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - Der Wert, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Freiheitsgrade1 - die Anzahl der Freiheitsgrade im Zähler.</param>
        <param name="Arg3">Freiheitsgrade2 – die Freiheitsgrade des Nenners.</param>
        <param name="Arg4">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn kumulative <b>true festgelegt</b>ist, <b>gibt f.dist</b> Wert der Verteilungsfunktion; Wenn <b>false</b>, die Wahrscheinlichkeitswert der Funktion zurückgegeben.</param>
        <summary>Gibt die F-Wahrscheinlichkeitsverteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>f.dist</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn x negativ ist, gibt <b>f.dist</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade1 oder Freiheitsgrade2 keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn Freiheitsgrade1 &lt; 1, <b>gibt f.dist</b> den #NUM zurückgibt! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade &lt; 1, <b>gibt f.dist</b> den #NUM zurückgibt! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist_RT">
      <MemberSignature Language="C#" Value="public double F_Dist_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16916)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, bei dem die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Freiheitsgrade1 – die Freiheitsgrade des Zählers.</param>
        <param name="Arg3">Freiheitsgrade2 – die Freiheitsgrade des Nenners.</param>
        <summary>Gibt Werte der Verteilungsfunktion (1-Alpha) einer (rechtsseitigen) F-verteilten Zufallsvariablen zurück. Mithilfe dieser Funktion können Sie bestimmen, ob zwei Datasets unterschiedliche Streuungsmengen aufweisen. Beispielsweise können Sie die Testergebnisse von Männern und Frauen bei der Aufnahme in die Hochschule untersuchen und ermitteln, ob sich die Variabilität bei den Frauen von der bei den Männern unterscheidet.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>f.dist.RT</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn x negativ ist, gibt <b>f.dist.RT</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade1 oder Freiheitsgrade2 keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn Freiheitsgrade1 &lt; 1 oder Freiheitsgrade1 ≥ 10 ^ 10, <b>gibt f.dist.RT</b> gibt das #NUM! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade2 &lt; 1 oder Freiheitsgrade2 ≥ 10 ^ 10, <b>gibt f.dist.RT</b> gibt das #NUM! Fehlerwert. </para>
          <para>
            <b>F.dist.RT</b> wird berechnet als f.dist.RT = P (F&gt;X), wobei F eine Zufallsvariable ist, die über eine F-Verteilung mit Freiheitsgraden Freiheitsgrade1 und Freiheitsgrade2 verfügt.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv">
      <MemberSignature Language="C#" Value="public double F_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16917)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrsch – eine der kumulierten F-Verteilung zugeordnete Wahrscheinlichkeit.</param>
        <param name="Arg2">Freiheitsgrade1 - die Anzahl der Freiheitsgrade im Zähler.</param>
        <param name="Arg3">Freiheitsgrade2 – die Freiheitsgrade des Nenners.</param>
        <summary>Gibt Perzentile der F-Verteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>f.Inv</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Wahrsch &lt; 0 oder Wahrsch &gt; 1, <b>gibt f.Inv</b> den #NUM zurückgibt! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade1 oder Freiheitsgrade2 keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn Freiheitsgrade1 &lt; 1 oder Freiheitsgrade2 &lt; 1, <b>gibt f.Inv</b> den #NUM zurückgibt! Fehlerwert. </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv_RT">
      <MemberSignature Language="C#" Value="public double F_Inv_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16918)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrsch – die zur kumulativen F-Verteilung gehörende Wahrscheinlichkeit.</param>
        <param name="Arg2">Freiheitsgrade1 – die Freiheitsgrade des Zählers.</param>
        <param name="Arg3">Freiheitsgrade2 – die Freiheitsgrade des Nenners.</param>
        <summary>Gibt Perzentile der rechtsseitigen F-Verteilung zurück. Wenn p = F.DIST_RT(x,...), dann F.INV.RT(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die F-Verteilung kann in F-Tests verwendet werden, bei denen die Streuungen zweier Datenmengen ins Verhältnis gesetzt werden. Zum Beispiel können Sie die Verteilung der in den USA und Kanada erzielten Einkommen daraufhin analysieren, ob in den beiden Ländern ähnliche Einkommensverteilungen vorliegen.</para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>gibt f.Inv.RT</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Wahrsch &lt; 0 oder Wahrsch &gt; 1, <b>gibt f.Inv.RT</b> den #NUM zurückgibt! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade1 oder Freiheitsgrade2 keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn Freiheitsgrade1 &lt; 1 oder Freiheitsgrade1 ≥ 10 ^ 10, <b>gibt f.Inv.RT</b> gibt das #NUM! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade2 &lt; 1 oder Freiheitsgrade2 ≥ 10 ^ 10, <b>gibt f.Inv.RT</b> gibt das #NUM! Fehlerwert.</para>
          <para>
            <b>Gibt f.Inv.RT</b> kann verwendet werden, um kritische Werte aus der F-Verteilung zurückzugeben. Beispielsweise enthält die Ausgabe einer ANOVA-Berechnung häufig Daten für die F-Statistik, F-Wahrscheinlichkeitsfunktion und kritischen F-Wert auf der Ebene der 0,05 Bedeutung. Um den kritischen Wert von F zurückzugeben, verwenden Sie die Bedeutung Ebene als Wahrscheinlichkeitsargument <b>gibt f.Inv.RT</b>.</para>
          <para>Für Wahrscheinlichkeit einen Wert angezeigt, sucht <b>gibt f.Inv.RT</b> den Wert, gibt f.dist.RT (X, Freiheitsgrade1, Freiheitsgrade2) = Wahrscheinlichkeit. Folglich Genauigkeit von <b>gibt f.Inv.RT</b> hängt von der Genauigkeit von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />. <b>Gibt f.Inv.RT</b> verwendet der Suche iterativ vor. Wenn die Suche nach 64 Iterationen nicht zusammengeführt wurde, gibt die Funktion den Fehlerwert #n/a zurück.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Test">
      <MemberSignature Language="C#" Value="public double F_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16875)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 – das erste Array bzw. der erste Bereich von Daten.</param>
        <param name="Arg2">Array2 – das zweite Array bzw. der zweite Bereich von Daten.</param>
        <summary>Gibt das Ergebnis eines F-Tests zurück. Ein F-Test gibt die zweiseitige Wahrscheinlichkeit zurück, dass sich die Varianzen von Array1 und Array2 nicht signifikant unterscheiden. Mit dieser Funktion können Sie feststellen, ob zwei Stichproben unterschiedliche Varianzen haben. Sind beispielsweise die Prüfungsergebnisse öffentlicher und privater Schulen bekannt, können Sie ermitteln, ob bei diesen Schultypen ein unterschiedlich breites Notenspektrum üblich ist.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Argumente müssen Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn die Anzahl der Datenpunkte in array1 oder array2 weniger als 2 ist, oder die Varianz von array1 oder array2 gleich 0, gibt <b>f.Test</b> den #DIV/0! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fact">
      <MemberSignature Language="C#" Value="public double Fact (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fact([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fact(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fact (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fact(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16568)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die nicht negative Zahl, deren Fakultät bestimmt werden soll. Wenn Zahl keine ganze Zahl ist, wird sie gekürzt.</param>
        <summary>Gibt die Fakultät einer Zahl zurück. Die Fakultät einer Zahl ist gleich 1*2*3 *...* Anzahl.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FactDouble">
      <MemberSignature Language="C#" Value="public double FactDouble (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FactDouble([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FactDouble(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FactDouble (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FactDouble(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16799)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – der Wert, für den die Fakultät mit Schrittlänge 2 zurückgegeben werden soll. Wenn Zahl keine ganze Zahl ist, wird sie gekürzt.</param>
        <summary>Gibt die Fakultät zu einer Zahl mit der Schrittlänge 2 zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Zahl nicht numerisch ist, gibt <b>FactDouble</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Zahl negativ ist, gibt <b>FactDouble</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Zahl gerade ist: 

 </para>
          <para>Abbildung 1: Gleichung für gerade Zahlen</para>
          <para></para>
          <para></para>
          <para>Wenn Zahl ungerade ist: 

</para>
          <para>Abbildung 2: Gleichung für ungerade Zahlen</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FDist">
      <MemberSignature Language="C#" Value="public double FDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16665)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, bei dem die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Freiheitsgrade1 – die Freiheitsgrade des Zählers.</param>
        <param name="Arg3">Freiheitsgrade2 – die Freiheitsgrade des Nenners.</param>
        <summary>Gibt die F-Wahrscheinlichkeitsverteilung zurück. Mithilfe dieser Funktion können Sie bestimmen, ob zwei Datenmengen unterschiedliche Streuungsmengen aufweisen. Beispielsweise können Sie die Testergebnisse von Männern und Frauen bei der Aufnahme in die Hochschule untersuchen und ermitteln, ob sich die Variabilität bei den Frauen von der bei den Männern unterscheidet.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu den neuen Funktionen finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> Methoden.</para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>FDist</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn x negativ ist, gibt <b>FDist</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade1 oder Freiheitsgrade2 keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn Freiheitsgrade1 &lt; 1 oder Freiheitsgrade1 ≥ 10 ^ 10, <b>gibt FDist</b> gibt das #NUM! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade2 &lt; 1 oder Freiheitsgrade2 ≥ 10 ^ 10, <b>gibt FDist</b> gibt das #NUM! Fehlerwert. </para>
          <para>
            <b>FDist</b> wird berechnet als FDIST = P (F&gt;X), wobei F eine Zufallsvariable ist, die über eine F-Verteilung mit Freiheitsgraden Freiheitsgrade1 und Freiheitsgrade2 verfügt.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterXML">
      <MemberSignature Language="C#" Value="public object FilterXML (string Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FilterXML([in]string Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FilterXML(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterXML (Arg1 As String, Arg2 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FilterXML(System::String ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16979)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Gültige Xml-Zeichenfolge.</param>
        <param name="Arg2">XPath-Abfragezeichenfolge.</param>
        <summary>Bestimmte Daten aus den zurückgegebenen XML-Code in der Regel aus einem Funktionsaufruf <b>WebService</b> abrufen.</summary>
        <returns>
          <b>VARIANT</b>
        </returns>
        <remarks>
          <para>Der XPath-Parameter ist auf 1024 Zeichen begrenzt.</para>
          <para>Die <b>FILTERXML</b> -Funktion gibt die Ergebnisse an, die analysiert werden über das Benutzergebietsschema angegebenen Daten zurück.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public double Find (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Find([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16508)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Name des Arbeitsblatts.</param>
        <param name="Arg2">Der Name des Bereichs.</param>
        <param name="Arg3">Der Name eines Arguments zum Verfeinern der Suche.</param>
        <summary>Sucht bestimmte Informationen innerhalb eines Arbeitsblatts.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindB">
      <MemberSignature Language="C#" Value="public double FindB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FindB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16589)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Suchtext – der zu suchende Text.</param>
        <param name="Arg2">Text – der Text, der den gesuchten Text enthält.</param>
        <param name="Arg3">Erstes_Zeichen – gibt das Zeichen an, bei dem die Suche begonnen werden soll. Das erste Zeichen in Text ist Zeichen Nummer 1. Wenn Sie Erstes_Zeichen auslassen, wird als Wert 1 angenommen.</param>
        <summary>
          <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />und <b>FindB</b> suchen eine Textzeichenfolge in einer zweiten Textzeichenfolge und Zurückgeben der Anzahl der Anfangsposition der ersten Textzeichenfolge ab dem ersten Zeichen der zweiten Textzeichenfolge.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> ist festgelegt bestimmt sind für die Verwendung mit Sprachen, verwenden das Einzel-Byte-Zeichen (SBCS) und <b>FindB</b> ist für die Verwendung mit Sprachen vorgesehen, die den Doppelbyte-Zeichensatz (DBCS) verwenden. Die Einstellung für die Standardsprache auf Ihrem Computer wirkt sich auf den Rückgabewert auf folgende Weise:</para>
          <list type="bullet">
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />immer zählt jedes Zeichen an, ob Einzel-Byte oder Double-Byte, als 1, unabhängig davon, welche die Einstellung für die Standardsprache ist.</description>
            </item>
            <item>
              <description>
                <b>FindB</b> zählt jedes Doppelbyte-Zeichen als 2, wenn Sie die Bearbeitung einer Sprache, die DBCS unterstützt aktiviert haben, und klicken Sie dann als Standardsprache festlegen. Andernfalls zählt <b>FindB</b> jedes Zeichen als 1 Zeichen.</description>
            </item>
          </list>
          <para>Zu den Sprachen, die DBCS unterstützen, zählen Japanisch, Chinesisch (vereinfacht), Chinesisch (traditionell) und Koreanisch.</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />und <b>FindB</b> Groß-/Kleinschreibung und dürfen keine Platzhalterzeichen. Wenn Sie nicht zwischen Groß-und Kleinschreibung Suche oder Verwendung Platzhalter Zeichen ausführen möchten, können Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />. </para>
          <para>Wenn Suchtext ist "" (leeren Text) <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> entspricht dem erste Zeichen in der Suchzeichenfolge (d. h., das Zeichen mit dem Erstes_Zeichen oder 1). </para>
          <para>Suchtext darf keine Platzhalterzeichen enthalten.</para>
          <para>Wenn Suchtext nicht in within_text vorkommt, erscheint <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> und <b>FindB</b> Zurückgeben der #VALUE! Fehlerwert. </para>
          <para>Wenn Erstes_Zeichen nicht größer als NULL ist, ist <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> und <b>FindB</b> Zurückgeben der #VALUE! Fehlerwert. </para>
          <para>Wenn Erstes_Zeichen größer als die Länge von within_text ist, ist <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> und <b>FindB</b> Zurückgeben der #VALUE! Fehlerwert. </para>
          <para>Verwenden Sie Erstes_Zeichen, um eine angegebene Anzahl von Zeichen überspringen. Mit <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> nehmen wir beispielsweise bei arbeiten Sie mit der Zeichenfolge "MOD0093. "YoungMensApparel"verwendet. Um die Anzahl der ersten "Y" im beschreibenden Teil der Zeichenfolge suchen, Erstes_Zeichen Sie mit 8, damit der Seriennummer Teil des Texts nicht durchsucht wird. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />beginnt mit Zeichen 8, Suchtext des nächsten Zeichens und liefert die Zahl 9. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />Gibt immer die Anzahl der Zeichen vom Anfang des Text, die Zeichen, die Sie überspringen, wenn Erstes_Zeichen größer als 1 ist zählt zurück.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FInv">
      <MemberSignature Language="C#" Value="public double FInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16666)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrsch – die zur kumulativen F-Verteilung gehörende Wahrscheinlichkeit.</param>
        <param name="Arg2">Freiheitsgrade1 – die Freiheitsgrade des Zählers.</param>
        <param name="Arg3">Freiheitsgrade2 – die Freiheitsgrade des Nenners.</param>
        <summary>Gibt die Umkehrung der F-Wahrscheinlichkeitsfunktion zurück. Wenn p = FDIST(x,...), dann ist FINV(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu den neuen Funktionen finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" /> Methoden.</para>
          <para>Die F-Verteilung kann in F-Tests verwendet werden, bei denen die Streuungen zweier Datenmengen ins Verhältnis gesetzt werden. Zum Beispiel können Sie die Verteilung der in den USA und Kanada erzielten Einkommen daraufhin analysieren, ob in den beiden Ländern ähnliche Einkommensverteilungen vorliegen.</para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>FInv</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Wahrsch &lt; 0 oder Wahrsch &gt; <b>1, gibt FINV den #NUM</b> ! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade1 oder Freiheitsgrade2 keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn Freiheitsgrade1 &lt; 1 oder Freiheitsgrade1 ≥ 10 ^ <b>10, gibt FINV den #NUM</b> ! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade2 &lt; 1 oder Freiheitsgrade2 ≥ 10 ^ <b>10, gibt FINV den #NUM</b> ! Fehlerwert.</para>
          <para>
            <b>FInv</b> kann verwendet werden, um kritische Werte aus der F-Verteilung zurückzugeben. Beispielsweise enthält die Ausgabe einer ANOVA-Berechnung häufig Daten für die F-Statistik, F-Wahrscheinlichkeitsfunktion und kritischen F-Wert auf der Ebene der 0,05 Bedeutung. Um den kritischen Wert von F zurückzugeben, verwenden Sie die Bedeutung Ebene als Argument <b>FINV</b>.</para>
          <para>Einem bestimmten sucht <b>FInv</b> diesen Wert x, so dass FVERT (X, Freiheitsgrade1, Freiheitsgrade2) = Wahrscheinlichkeit. Daher hängt die Genauigkeit von <b>FInv</b> von Genauigkeit von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" />. <b>FInv</b> verwendet der Suche iterativ vor. Wenn die Suche nach 64 Iterationen nicht zusammengeführt wurde, gibt die Funktion den Fehlerwert #n/a zurück.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fisher">
      <MemberSignature Language="C#" Value="public double Fisher (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fisher([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fisher(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fisher (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fisher(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16667)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x – ein numerischer Wert, für den die Transformation ausgeführt werden soll.</param>
        <summary>Gibt die Fisher-Transformation für x zurück. Diese Transformation erzeugt eine Funktion, die normalverteilt ist und somit eine Schiefe von ungefähr Null besitzt. Mit dieser Funktion können Sie eine Hypothese bezüglich des Korrelationskoeffizienten prüfen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn x nicht numerisch ist, gibt <b>Fisher</b> den #VALUE! Fehlerwert. </para>
          <para>Ist x ≤-1 oder x ≥ 1, gibt <b>Fisher</b> den #NUM! Fehlerwert. </para>
          <para>Die Formel für die Fisher-Transformation lautet:</para>
          <para>Abbildung 1: Gleichung für die Fisher-transformation</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FisherInv">
      <MemberSignature Language="C#" Value="public double FisherInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FisherInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FisherInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FisherInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FisherInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16668)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">y – der Wert, für den die Umkehrung der Transformation ausgeführt werden soll.</param>
        <summary>Gibt die Umkehrung der Fisher-Transformation zurück. Mithilfe dieser Transformation können Sie die Korrelation zwischen Datenbereichen oder Datenarrays untersuchen. Ist y = FISHER(x), dann ist FISHERINV(y) = x.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn y nicht numerisch ist, gibt <b>FisherInv</b> den #VALUE! Fehlerwert. </para>
          <para>Die Formel für die Umkehrung der Fisher-Transformation lautet:</para>
          <para>Abbildung 1: Gleichung für die inverse Fisher-transformation</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fixed">
      <MemberSignature Language="C#" Value="public string Fixed (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Fixed([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fixed(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fixed (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16398)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die Zahl die gerundet und in Text konvertiert werden soll.</param>
        <param name="Arg2">Dezimalstellen – die Anzahl der Stellen rechts vom Dezimaltrennzeichen.</param>
        <param name="Arg3">Keine_Punkte – ein logisches Wert <b>true</b>verhindert, dass <b>Fixed</b> einschließlich Kommas in den zurückgegebenen Text.</param>
        <summary>Rundet eine Zahl auf die angegebene Anzahl von Dezimalstellen, formatiert die Zahl im Dezimalformat mit einem Komma und Punkten und gibt das Ergebnis als Text zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>In Microsoft Excel können Zahlen maximal 15 gültige Stellen haben, aber der größte zulässige Wert für Dezimalstellen ist 127.</para>
          <para>Ist Dezimalstellen negativ, werden die Stellen von Zahl links vom Dezimalkomma gerundet.</para>
          <para>Fehlt das Argument Dezimalstellen, wird es als 2 angenommen.</para>
          <para>Ist Keine_Punkte <b>false</b> oder nicht angegeben, enthält der zurückgegebene Text wie gewohnt. </para>
          <para>Der Hauptunterschied zwischen dem Formatieren einer Zelle mit einer Zahl mit dem Befehl Zellen (Menü "Format") und Formatieren einer Zahl direkt mit der Funktion fest besteht darin, dass <b>Fixed</b> das Ergebnis in Text konvertiert. Eine Zahl, die mit dem Befehl Zellen formatiert ist immer noch eine Zahl.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public double Floor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Floor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16669)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – der numerische Wert, der gerundet werden soll.</param>
        <param name="Arg2">Schritt – das Vielfache, auf das gerundet werden soll.</param>
        <summary>Rundet Zahl gegen Null ab, auf das nächste Vielfache von Schritt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" /> Methode.</para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>Floor</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Zahl und Schritt unterschiedliche Vorzeichen aufweisen, gibt <b>Floor</b> den #NUM! Fehlerwert. </para>
          <para>Unabhängig davon, welches Vorzeichen Zahl hat, wird ein Wert abgerundet, wenn die Anpassung von Null ausgehend erfolgt. Ist Zahl ein genaues Vielfaches von Schritt, erfolgt keine Rundung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Math">
      <MemberSignature Language="C#" Value="public double Floor_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16976)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, den Sie runden möchten.</param>
        <param name="Arg2">Das Vielfache, auf das gerundet werden sollen.</param>
        <param name="Arg3">Wenn eine Zahl ungleich NULL angegeben sind, wird diese Funktion in Richtung Null zu runden.</param>
        <summary>Rundet eine Zahl nach unten, auf die nächste ganze Zahl oder auf das nächstliegende Vielfache von Schritt.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Precise">
      <MemberSignature Language="C#" Value="public double Floor_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16931)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – der numerische Wert, der gerundet werden soll.</param>
        <param name="Arg2">Schritt – das Vielfache, auf das gerundet werden soll.</param>
        <summary>Gibt die angegebene Zahl, gerundet auf das nächstliegende Vielfache von Schritt, zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Abhängig vom Vorzeichen der Zahl und der Schrittargumente, rundet die <b>Floor_Precise</b>-Methode entweder zu Null oder von Null.</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>Aufrunden auf eine Stelle.</description>
            </item>
            <item>
              <term>+/+</term>
              <description>Runden in Richtung Null</description>
            </item>
            <item>
              <term>-/+</term>
              <description>Aufrunden auf eine Stelle.</description>
            </item>
            <item>
              <term>+/-</term>
              <description>Runden in Richtung Null</description>
            </item>
          </list>
          <para>Wenn ein Argument nicht numerisch ist, generiert die <b>Floor_Precise</b> -Methode einen Fehler. </para>
          <para>Ist Zahl ein genaues Vielfaches von Schritt, erfolgt keine Rundung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Forecast">
      <MemberSignature Language="C#" Value="public double Forecast (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Forecast([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Forecast(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Forecast (Arg1 As Double, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Forecast(double Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16693)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Datenpunkt, für den ein Wert vorhergesagt werden soll.</param>
        <param name="Arg2">Bekannt_y – das abhängige Array bzw. der abhängige Bereich von Daten.</param>
        <param name="Arg3">Bekannt_x – das unabhängige Array bzw. der unabhängige Bereich von Daten.</param>
        <summary>Berechnet oder prognostiziert einen künftigen Wert auf der Grundlage vorhandener Werte. Der prognostizierte Wert ist ein y-Wert für einen gegebenen x-Wert. Die bekannten Werte sind vorhandene x-Werte und y-Werte, und der neue Wert wird mithilfe der linearen Regression vorhergesagt. Mithilfe dieser Funktion können Sie künftige Umsätze, Bestandsanforderungen oder Verbrauchertrends prognostizieren.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn x nicht numerisch ist, gibt <b>Forecast</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Bekannt_y und Bekannt_x leer sind oder umfassen Sie unterschiedlich viele Datenpunkte, gibt <b>Forecast</b> den Fehlerwert #n/a zurück. </para>
          <para>Ist die Varianz von Bekannt_x 0 gleich, gibt <b>Forecast</b> den #DIV/0! Fehlerwert. </para>
          <para>Die Formel für die <b>Planung</b> ist eine + Bx, wobei: </para>
          <para>Abbildung 1: Gleichung für die Forecast-Methode</para>
          <para></para>
          <para></para>
          <para>Und:</para>
          <para>Abbildung 2: Gleichung für die Forecast-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei sind X und Y die Beispieldurchschnittswerte AVERAGE(Bekannt_x) und AVERAGE(Bekannt_y).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public object Frequency (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Frequency([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Frequency(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Frequency (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Frequency(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16636)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Belegte – ein Array von oder ein Verweis auf eine Gruppe von Werten für die Sie Häufigkeit zählen möchten. Enthält Klassen keine Werte, gibt <b>Häufigkeit</b> ein Array von Nullen zurück.</param>
        <param name="Arg2">Klassen – ein Array von oder ein Bezug auf Intervalle, in denen Sie die Werte in Klassen gruppieren möchten. Wenn Klassen keine Werte enthält, gibt <b>Häufigkeit</b> die Anzahl der Elemente in Daten zurück.</param>
        <summary>Berechnet, wie oft Werte treten in einem Bereich von Werten aus und gibt ein vertikales Array von Zahlen. Verwenden Sie beispielsweise, <b>Häufigkeit</b> , um die Anzahl der Testergebnisse zählen, die in Bereichen von Ergebnissen fallen. Da <b>Häufigkeit</b> ein Array zurückgibt, müssen sie als Arrayformel eingegeben werden.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Frequency</b> wird als Arrayformel eingegeben, nachdem Sie einen Bereich aneinander grenzender Zellen ausgewählt, in denen die zurückgegebene Verteilung angezeigt werden sollen. </para>
          <para>Die Anzahl der Elemente im zurückgegebenen Array ist größer als die Anzahl der Elemente in Klassen. Das zusätzliche Element im zurückgegebenen Array gibt die Anzahl der Werte über dem höchsten Intervall zurück. Wenn Sie drei Wertebereiche (Intervalle) zählen, die in drei Zellen eingegeben werden, müssen Sie beispielsweise sicher, dass Sie die <b>Häufigkeit</b> in vier Zellen für die Ergebnisse eingeben. Die zusätzliche Zelle gibt die Anzahl der Werte in Daten zurück, die größer als der dritte Intervallwert sind. </para>
          <para>
            <b>Frequency</b> ignoriert leere Zellen und leeren Text. </para>
          <para>Formeln, die Arrays zurückgeben, müssen als Arrayformeln eingegeben werden.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FTest">
      <MemberSignature Language="C#" Value="public double FTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16694)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 – das erste Array bzw. der erste Bereich von Daten.</param>
        <param name="Arg2">Array2 – das zweite Array bzw. der zweite Bereich von Daten.</param>
        <summary>Gibt das Ergebnis eines F-Tests zurück. Ein F-Test gibt die zweiseitige Wahrscheinlichkeit zurück, dass sich die Varianzen von Array1 und Array2 nicht signifikant unterscheiden. Mit dieser Funktion können Sie feststellen, ob zwei Stichproben unterschiedliche Varianzen haben. Sind beispielsweise die Prüfungsergebnisse öffentlicher und privater Schulen bekannt, können Sie ermitteln, ob bei diesen Schultypen ein unterschiedlich breites Notenspektrum üblich ist.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" /> Methode.</para>
          <para>Die Argumente müssen Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn die Anzahl der Datenpunkte in array1 oder array2 weniger als 2 ist, oder die Varianz von array1 oder array2 gleich 0, gibt <b>FTest</b> den #DIV/0! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fv">
      <MemberSignature Language="C#" Value="public double Fv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16441)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zins – der Zinssatz pro Zeitraum.</param>
        <param name="Arg2">Zzr – die Gesamtzahl der Zahlungsperioden in einer Annuität.</param>
        <param name="Arg3">Rmz – die pro Zeitraum vorgenommene Zahlung; dies kann sich über die Dauer der Annuität nicht ändern. Typischerweise umfasst Rmz das Kapital und die Zinsen, jedoch keine anderen Gebühren oder Steuern. Wenn Rmz ausgelassen wird, müssen Sie das Argument Bw angeben.</param>
        <param name="Arg4">Bw – der Barwert oder der heutige Gesamtwert einer Reihe zukünftiger Zahlungen. Fehlt das Argument Bw, wird es als 0 (Null) angenommen, und Sie müssen das Argument Rmz angeben.</param>
        <param name="Arg5">F – die Zahl 0 oder 1, die die Fälligkeit von Zahlungen angibt. Wenn F ausgelassen wird, wird ein Wert von 0 angenommen.</param>
        <summary>Gibt den zukünftigen Wert einer Investition zurück. Die Berechnung basiert auf regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Eine genauere Beschreibung der Argumente von <b>Zw</b> und Weitere Informationen zu Rentenfunktionen finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />.</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>Zum Ende des Zeitraums</description>
            </item>
            <item>
              <term>1</term>
              <description>Zum Anfang des Zeitraums</description>
            </item>
          </list>
          <para>Stellen Sie sicher, dass Sie die zur Angabe von Zins und Zzr verwendeten Einheiten einheitlich verwenden. Wenn Sie für eine vierjährige Anleihe mit jährlichen Zinsen von 12 Prozent monatliche Zahlungen tätigen, verwenden Sie 12%/12 für Zins und 4*12 für Zzr. Wenn Sie für dieselbe Anleihe jährliche Zahlungen tätigen, verwenden Sie 12% für Zins und 4 für Zzr.</para>
          <para>Für alle Argumente gilt, dass Geldbeträge, die Sie auszahlen (z. B. Spareinlagen), durch negative Zahlen und Geldbeträge, die Sie einnehmen (z. B. Dividenden), durch positive Zahlen dargestellt werden.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FVSchedule">
      <MemberSignature Language="C#" Value="public double FVSchedule (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FVSchedule([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FVSchedule(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FVSchedule (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FVSchedule(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16860)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Kapital – der gegenwärtige Wert.</param>
        <param name="Arg2">Zinsen – ein Array anzuwendender Zinssätze.</param>
        <summary>Gibt den aufgezinsten Wert des Anfangskapitals für eine Reihe periodisch unterschiedlicher Zinssätze zurück. Mit FVSCHEDULE können Sie den zukünftigen Wert einer Investition berechnen, für die ein variabler oder wechselnder Zinssatz vereinbart ist.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Werte in Terminplan können Zahlen oder leere Zellen sein; ein anderer Wert erzeugt das #VALUE! Fehlerwert für <b>FVSchedule</b>. Leere Zellen werden übernommen, wie Nullen (ohne Zinsen).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma">
      <MemberSignature Language="C#" Value="public double Gamma (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16959)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert für den Gamma berechnet werden soll.</param>
        <summary>Der Wert der Gamma-Funktion zurückgegeben.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Dist">
      <MemberSignature Language="C#" Value="public double Gamma_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16879)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, für den die Verteilung ausgewertet werden soll.</param>
        <param name="Arg2">Alpha – ein Parameter für die Verteilung.</param>
        <param name="Arg3">Beta – ein Parameter für die Verteilung. Wenn Beta = 1, gibt <b>Gamma.dist</b> die standard gammaverteilung zurück.</param>
        <param name="Arg4">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn kumulierten Wert <b>true</b>hat, <b>Gamma.dist</b> Wert der Verteilungsfunktion; Wenn <b>false</b>, die Wahrscheinlichkeitswert der Funktion zurückgegeben.</param>
        <summary>Gibt die Gammaverteilung zurück. Mit dieser Funktion können Sie Variablen untersuchen, die eine schiefe Verteilung besitzen. Die Gammaverteilung wird häufig bei Warteschlangenanalysen verwendet.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn x, Alpha oder Beta nicht numerisch ist, wird <b>Gamma.dist</b> gibt die #VALUE! Fehlerwert. </para>
          <para>Wenn x &lt; 0, gibt <b>Gamma.dist</b> das #NUM zurück! Fehlerwert. </para>
          <para>Wenn alpha ≤ 0 oder Beta ≤ 0, <b>gibt gamm.dist</b> das #NUM zurück! Fehlerwert. </para>
          <para>Die Formel für die Dichtefunktion der Gammaverteilung lautet: 

 </para>
          <para>Abbildung 1: Gammaverteilung</para>
          <para></para>
          <para></para>
          <para>Die Dichtefunktion der Standard-Gammaverteilung lautet:</para>
          <para>Abbildung 2: Standard gammaverteilung</para>
          <para></para>
          <para></para>
          <para>Wenn alpha = 1, <b>Gamma.dist</b> die exponentielle Verteilung mit zurück:</para>
          <para>Abbildung 3: Formel</para>
          <para></para>
          <para></para>
          <para>Eine positive ganze Zahl n alpha = N/2, Beta = 2 und kumuliert = <b>true</b>, gibt <b>Gamma.dist</b> zurück (1 - dasselbe Ergebnis wie CHIVERT(x)) mit n Freiheitsgraden. </para>
          <para>Wenn Alpha eine positive ganze Zahl ist, wird <b>Gamma.dist</b> auch bekannt als Erlang-Verteilung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Inv">
      <MemberSignature Language="C#" Value="public double Gamma_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16880)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Warsch - Eine der Gammaverteilung zugeordnete Wahrscheinlichkeit.</param>
        <param name="Arg2">Alpha – ein Parameter für die Verteilung.</param>
        <param name="Arg3">Beta – ein Parameter für die Verteilung. Wenn Beta = 1, <b>gibt Gamma.Inv</b> die standard gammaverteilung zurück.</param>
        <summary>Gibt Perzentile der Gammaverteilung zurück. Wenn p = GAMMA.DIST(x,...), dann GAMMA.INV(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Mit dieser Funktion können Sie Variablen untersuchen, die möglicherweise eine schiefe Verteilung besitzen.</para>
          <para>Wenn ein der Argumente Text ist, gibt <b>Gamma.Inv</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Wahrsch &lt; 0 oder Wahrsch &gt; 1, <b>gibt Gamma.Inv</b> den #NUM zurückgibt! Fehlerwert. </para>
          <para>Wenn alpha ≤ 0 oder Beta ≤ 0, <b>gibt Gamma.Inv</b> den #NUM zurück! Fehlerwert.</para>
          <para>Für Wahrscheinlichkeit einen Wert angezeigt, sucht <b>gibt Gamma.Inv</b> den Wert dieser Gamma.dist (X, Alpha, Beta, TRUE) = Wahrscheinlichkeit. Folglich Genauigkeit von <b>Gamma.Inv</b> hängt von der Genauigkeit von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />. <b>Gamma.Inv</b> verwendet eine iterative Suche. Wenn die Suche nach 100 Iterationen nicht zusammengeführt wurde, gibt die Funktion den Fehlerwert #n/a zurück.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaDist">
      <MemberSignature Language="C#" Value="public double GammaDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16670)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, für den die Verteilung ausgewertet werden soll.</param>
        <param name="Arg2">Alpha – ein Parameter für die Verteilung.</param>
        <param name="Arg3">Beta – ein Parameter für die Verteilung. Wenn Beta = 1, <b>gibt GammaDist</b> die standard gammaverteilung zurück.</param>
        <param name="Arg4">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn kumulative <b>true festgelegt</b>ist, <b>gibt GammaDist</b> gibt Werte die Verteilungsfunktion; Wenn <b>false</b>, die Wahrscheinlichkeitswert der Funktion zurückgegeben.</param>
        <summary>Gibt die Gammaverteilung zurück. Mit dieser Funktion können Sie Variablen untersuchen, die eine schiefe Verteilung besitzen. Die Gammaverteilung wird häufig bei Warteschlangenanalysen verwendet.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> Methode.</para>
          <para>Wenn x, Alpha oder Beta nicht numerisch ist, <b>gibt GammaDist</b> gibt das #VALUE zurück! Fehlerwert. </para>
          <para>Wenn x &lt; 0, gibt <b>GammaDist</b> das #NUM zurück! Fehlerwert. </para>
          <para>Wenn alpha ≤ 0 oder Beta ≤ 0, <b>gibt GammaDist</b> das #NUM zurück! Fehlerwert. </para>
          <para>Die Formel für die Dichtefunktion der Gammaverteilung lautet: 

 </para>
          <para>Abbildung 1: Gammaverteilung</para>
          <para></para>
          <para></para>
          <para>Die Dichtefunktion der Standard-Gammaverteilung lautet:</para>
          <para>Abbildung 2: Standard gammaverteilung</para>
          <para></para>
          <para></para>
          <para>Wenn alpha = 1, <b>gibt GammaDist</b> die exponentielle Verteilung mit zurück:</para>
          <para>Abbildung 3: Formel</para>
          <para></para>
          <para></para>
          <para>Eine positive ganze Zahl n alpha = N/2, Beta = 2 und kumuliert = <b>true</b>, <b>GAMMAVERT (1 - dasselbe Ergebnis wie CHIVERT(x)) mit n Freiheitsgraden.</b></para>
          <para>Wenn Alpha eine positive ganze Zahl ist, wird <b>GammaDist</b> auch bekannt als Erlang-Verteilung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaInv">
      <MemberSignature Language="C#" Value="public double GammaInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16671)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Warsch - Eine der Gammaverteilung zugeordnete Wahrscheinlichkeit.</param>
        <param name="Arg2">Alpha – ein Parameter für die Verteilung.</param>
        <param name="Arg3">Beta – ein Parameter für die Verteilung. Wenn Beta = 1, <b>gibt GammaInv</b> die standard gammaverteilung zurück.</param>
        <summary>Gibt die Umkehrung der kumulierten Gammaverteilung zurück. Gilt p = GAMMADIST(x,...), dann gilt GAMMAINV(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" /> Methode.</para>
          <para>Mit dieser Funktion können Sie Variablen untersuchen, die möglicherweise eine schiefe Verteilung besitzen.</para>
          <para>Wenn ein Argument Text ist, gibt <b>GammaInv</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Wahrsch &lt; 0 oder Wahrsch &gt; 1, <b>gibt GammaInv</b> gibt das #NUM! Fehlerwert. </para>
          <para>Wenn alpha ≤ 0 oder Beta ≤ 0, <b>gibt GammaInv</b> das #NUM zurück! Fehlerwert.</para>
          <para>Wenn einen Wert für Wahrsch, sucht <b>GammaInv</b> den Wert x, so dass GAMMAVERT (X, Alpha, TRUE) Wahrsch =. Daher hängt die Genauigkeit von <b>GammaInv</b> von Genauigkeit von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" />. <b>GammaInv</b> verwendet der Suche iterativ vor. Wenn die Suche nach 64 Iterationen nicht zusammengeführt wurde, gibt die Funktion den Fehlerwert #n/a zurück.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn">
      <MemberSignature Language="C#" Value="public double GammaLn (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16655)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, für den GAMMALN berechnet werden soll.</param>
        <summary>Gibt den natürlichen Logarithmus der Gammafunktion zurück, Γ(x).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" /> Methode.</para>
          <para>Wenn x nicht numerisch ist, gibt <b>GammaLn</b> den #VALUE! Fehlerwert. </para>
          <para>Ist x ≤ 0, gibt <b>GammaLn</b> den #NUM! Fehlerwert. </para>
          <para>Ein Potenzieren der Zahl e mit GAMMALN(i), wobei i eine ganze Zahl ist, führt zu dem gleichen Ergebnis wie (i - 1)!.</para>
          <para>
            <b>GammaLn</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Gleichung für die GammaLn-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>Abbildung 2: Formel</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn_Precise">
      <MemberSignature Language="C#" Value="public double GammaLn_Precise (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn_Precise([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn_Precise (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn_Precise(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16929)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, für den GAMMALN berechnet werden soll.</param>
        <summary>Gibt den natürlichen Logarithmus der Gammafunktion zurück, Γ(x).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn X nicht numerisch ist, generiert die GammaLn_Precise-Methode einen Fehler.</para>
          <para>Wenn X ≤ 0 ist, generiert die GammaLn_Precise-Methode einen Fehler.</para>
          <para>Ein Potenzieren der Zahl e mit GAMMALN(i), wobei i eine ganze Zahl ist, führt zu dem gleichen Ergebnis wie (i - 1)!.</para>
          <para>GAMMALN wird wie folgt berechnet: 

 </para>
          <para>Abbildung 1: Gleichung für die GammaLn_Precise-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>Abbildung 2: Formel</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Gauss">
      <MemberSignature Language="C#" Value="public double Gauss (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gauss([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gauss(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gauss (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gauss(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16961)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, dessen Wahrscheinlichkeit Sie berechnen möchten.</param>
        <summary>0,5 kleiner als der Poisson-Verteilung zurück.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gcd">
      <MemberSignature Language="C#" Value="public double Gcd (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gcd(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gcd (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16857)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – 1 bis 29 Werte. Werte, die keine ganzen Zahlen sind, werden gekürzt.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den größten gemeinsamen Teiler von zwei oder mehr ganzen Zahlen zurück. Der größte gemeinsame Teiler ist die größte ganze Zahl, durch die sowohl Zahl1 als auch Zahl2 dividiert werden können, ohne dass ein Rest bleibt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>Gcd</b> den #VALUE! Fehlerwert. </para>
          <para>Ist ein der Argumente kleiner als 0 (null) ist, gibt <b>Gcd</b> den #NUM! Fehlerwert. </para>
          <para>1 ist Teiler jeder Zahl (ohne Rest).</para>
          <para>Eine Primzahl hat nur sich selbst und 1 als Teiler.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GeoMean">
      <MemberSignature Language="C#" Value="public double GeoMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeoMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeoMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeoMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16703)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – 1 bis 30 Argumente, deren harmonisches Mittel berechnet werden soll. Anstelle der durch Kommas voneinander getrennten Argumente können Sie auch ein einzelnes Array oder einen Bezug auf ein Array angeben.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt das geometrische Mittel eines Arrays oder eines Bereichs positiver Zahlen zurück. Sie können beispielsweise mit GEOMEAN eine mittlere Wachstumsrate berechnen, wenn für periodisch unterschiedliche Zinssätze variable Zinssätze gegeben sind.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn einer der Datenpunkte ≤ 0, gibt <b>GeoMean</b> den #NUM! Fehlerwert. </para>
          <para>Die Formel für das geometrische Mittel lautet: 

 </para>
          <para>Abbildung 1: Gleichung für das geometrische Mittel</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GeStep">
      <MemberSignature Language="C#" Value="public double GeStep (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeStep([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeStep(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeStep (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16803)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – der Wert, der gegen Schritt geprüft werden soll.</param>
        <param name="Arg2">Schritt - den Schwellenwert. Wenn Sie einen Wert für Schritt weglassen, verwendet <b>GeStep</b> 0 (null).</param>
        <summary>Wenn Zahl ≥ Schritt; 1 gibt Andernfalls wird 0 (null) zurückgegeben. Verwenden Sie diese Funktion, um einen Satz von Werten zu filtern. Durch summieren mehrerer <b>GeStep</b> -Funktionen berechnen Sie beispielsweise die Anzahl der Werte, die einen Schwellenwert überschreiten.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>GeStep</b> den #VALUE! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Growth">
      <MemberSignature Language="C#" Value="public object Growth (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Growth([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Growth (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16436)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bekannte_y – die y-Werte, die Ihnen aus der jeweiligen Beziehung y = b*m^x bereits bekannt sind.</param>
        <param name="Arg2">Bekannt_x – eine optionale Gruppe von x-Werten, die Ihnen aus der Beziehung y = b*m^x eventuell bereits bekannt sind.</param>
        <param name="Arg3">Neue_X_Werte – neue X-Werte für die <b>Growth</b> die zugehörigen y-Werte zurückgeben soll.</param>
        <param name="Arg4">Konstante – ein Wahrheitswert, mit dem angegeben wird, ob erzwungen werden soll, dass die Konstante b gleich 1 sein soll.</param>
        <summary>Berechnet die exponentiellen mithilfe von vorhandenen Daten. <b>Wachstum</b> gibt die y-Werte für eine Reihe von neuen X-Werte, die Sie angeben, indem Sie die vorhandenen x- und y-Werte zurück. Die Arbeitsblattfunktion <b>Growth</b> können auch einer exponentiellen Kurve zu vorhandenen x und y-Werten entsprechen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn sich das Array Y_Werte in einer einzelnen Spalte befindet, wird jede Spalte mit X_Werte als separate Variable interpretiert.</para>
          <para>Wenn sich das Array Bekannt_y in einer einzelnen Zeile befindet, wird jede Zeile mit Bekannt_x als separate Variable interpretiert.</para>
          <para>Wenn eine der Zahlen in Bekannt_y gleich 0 oder negativ, gibt <b>Wachstum</b> das #NUM! Fehlerwert. </para>
          <para>Das Array Bekannt_x kann eine oder mehrere Gruppen mit Variablen enthalten. Wenn nur eine Variable verwendet wird, können Bekannt_y und Bekannt_x Bereiche beliebiger Form darstellen, solange sie gleiche Abmessungen aufweisen. Wenn mehrere Variablen verwendet werden, muss Bekannt_y einen Vektor darstellen (d. h. einen Bereich mit einer Höhe von einer Zeile oder einer Breite von einer Spalte).</para>
          <para>Wenn Bekannt_x ausgelassen wird, wird angenommen, dass dies dem Array {1,2,3,...} entspricht, das dieselbe Größe wie Bekannt_y aufweist.</para>
          <para>Neue_X_Werte muss genau wie Bekannt_x eine Spalte (oder Zeile) für jede unabhängige Variable enthalten. Demnach müssen Bekannt_x und Neue_X_Werte dieselbe Anzahl von Spalten aufweisen, wenn Bekannt_y sich in einer einzelnen Spalte befindet. Wenn sich Bekannt_y in einer einzelnen Zeile befindet, müssen Bekannt_x und Neue_X_Werte dieselbe Anzahl von Zeilen aufweisen.
</para>
          <para>
				Wenn Neue_X_Werte ausgelassen wird, wird angenommen, dass dies Bekannt_x entspricht.
</para>
          <para>
				Wenn Sie weder Bekannt_x noch Neue_X_Werte angeben, wird angenommen, dass sie dem Array {1,2,3,...} entsprechen, das dieselbe Größe wie Bekannt_y aufweist.
</para>
          <para>Wenn Konstante <b>true</b> ist oder nicht angegeben ist, wird b normal berechnet. </para>
          <para>Wenn Konstante <b>false</b>ist, wird b gleich 1 festgelegt, und die m-Werte werden so angepasst, damit y = m ^ X. </para>
          <para>Formeln, die ihre Ergebnisse als Arrays zurückgeben, müssen, nachdem die richtige Anzahl von Zellen markiert ist, als Arrayformeln eingegeben werden.</para>
          <para>Wenn Sie eine Arraykonstante für ein Argument wie Bekannt_x eingeben, verwenden Sie Kommas, um Werte in derselben Zeile zu trennen, und Semikolons, um Zeilen zu trennen.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HarMean">
      <MemberSignature Language="C#" Value="public double HarMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HarMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HarMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HarMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16704)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – 1 bis 30 Argumente, deren harmonisches Mittel berechnet werden soll. Anstelle der durch Kommas voneinander getrennten Argumente können Sie auch ein einzelnes Array oder einen Bezug auf ein Array angeben.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt das harmonische Mittel einer Datenmenge zurück. Ein harmonisches Mittel ist der Kehrwert eines aus Kehrwerten berechneten arithmetischen Mittels.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Das harmonische Mittel ist immer kleiner als das geometrische Mittel, das wiederum immer kleiner als das arithmetische Mittel ist.</para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn einer der Datenpunkte ≤ 0, gibt <b>HarMean</b> den #NUM! Fehlerwert. Die Formel für das harmonische Mittel lautet: 

 </para>
          <para>Abbildung 1: Gleichung für das harmonische Mittel</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Bin">
      <MemberSignature Language="C#" Value="public string Hex2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16768)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die hexadezimale Zahl, die umgewandelt werden soll. Zahl darf nicht mehr als 10 Zeichen enthalten. Das signifikanteste Bit von Zahl ist das Vorzeichenbit (40. Bit von rechts). Die verbleibenden 9 Bits sind Größenbits. Negative Zahlen werden in der Zweier-Komplement-Notation dargestellt.</param>
        <param name="Arg2">Wert für stellen - die Anzahl der Zeichen angezeigt werden sollen. Wenn dies nicht angegeben ist, verwendet <b>Hex2Bin</b> die Mindestanzahl der Zeichen erforderlich. Wert für stellen eignet sich für den Rückgabewert mit führenden 0 (Nullen).</param>
        <summary>Wandelt eine hexadezimale Zahl in eine binäre Zahl um.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Ist Zahl negativ, ignoriert <b>Hex2Bin</b> , und gibt eine 10 Zeichen bestehende Binärzahl zurück. </para>
          <para>Ist Zahl negativ, darf sie nicht kleiner als FFFFFFFE00 sein, und ist Zahl positiv, darf sie nicht größer als 1FF sein.</para>
          <para>Ist Zahl keine zulässige hexadezimale Zahl, gibt <b>Hex2Bin</b> den #NUM! Fehlerwert. </para>
          <para>Benötigt <b>Hex2Bin</b> mehr als Stellen Zeichen, gibt die Funktion die #NUM! Fehlerwert. Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn der Wert für stellen nicht numerisch ist, gibt <b>Hex2Bin</b> den #VALUE! Fehlerwert. </para>
          <para>Ist Stellen negativ, gibt <b>Hex2Bin</b> den #NUM! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Dec">
      <MemberSignature Language="C#" Value="public string Hex2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Hex2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16769)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die hexadezimale Zahl, die umgewandelt werden soll. Zahl darf nicht mehr als 10 Zeichen (40 Bits) enthalten. Das signifikanteste Bit von Zahl ist das Vorzeichenbit. Die verbleibenden 39 Bits sind Größenbits. Negative Zahlen werden in der Zweier-Komplement-Notation dargestellt.</param>
        <summary>Wandelt eine hexadezimale Zahl in eine Dezimalzahl um.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Ist Zahl keine zulässige hexadezimale Zahl, gibt <b>Hex2Dec</b> den #NUM! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Oct">
      <MemberSignature Language="C#" Value="public string Hex2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16770)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die hexadezimale Zahl, die umgewandelt werden soll. Zahl darf nicht mehr als 10 Zeichen enthalten. Das signifikanteste Bit von Zahl ist das Vorzeichenbit. Die verbleibenden 39 Bits sind Größenbits. Negative Zahlen werden in der Zweier-Komplement-Notation dargestellt.</param>
        <param name="Arg2">Wert für stellen - die Anzahl der Zeichen angezeigt werden sollen. Wenn dies nicht angegeben ist, verwendet <b>Hex2Oct</b> die Mindestanzahl der Zeichen erforderlich. Wert für stellen eignet sich für den Rückgabewert mit führenden 0 (Nullen).</param>
        <summary>Wandelt eine hexadezimale Zahl in eine Oktalzahl um.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Ist Zahl negativ, ignoriert <b>Hex2Oct</b> , und gibt eine aus 10 Zeichen bestehende Oktalzahl zurück. </para>
          <para>Ist Zahl negativ, darf der Wert nicht kleiner als FFE0000000 sein, und ist Zahl positiv, darf der Wert nicht größer als 1FFFFFFF sein.</para>
          <para>Ist Zahl keine zulässige hexadezimale Zahl, gibt <b>Hex2Oct</b> den #NUM! Fehlerwert. </para>
          <para>Benötigt <b>Hex2Oct</b> mehr als Stellen Zeichen, gibt die Funktion die #NUM! Fehlerwert. </para>
          <para>Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn der Wert für stellen nicht numerisch ist, gibt <b>Hex2Oct</b> den #VALUE! Fehlerwert. </para>
          <para>Ist Stellen negativ, gibt <b>Hex2Oct</b> den #NUM! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HLookup">
      <MemberSignature Language="C#" Value="public object HLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object HLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16485)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Suchkriterium - der Wert, der in der ersten Zeile der Tabelle gefunden werden soll. Suchkriterium kann ein Wert, ein Bezug oder eine Zeichenfolge sein.</param>
        <param name="Arg2">Array - eine Tabelle mit Informationen, in der Daten gesucht werden. Verwenden Sie einen Bezug auf einen Bereich oder einen Bereichsnamen.</param>
        <param name="Arg3">Zeilenindex - Nummer der Zeile in der Matrix, aus der der entsprechende Wert zurückgegeben wird. Ein Zeilenindex 1 gibt den ersten Zeilenwert in Matrix zurück, ein Zeilenindex von 2 Gibt den zweiten Zeilenwert in Matrix und So weiter. Wenn Zeilenindex kleiner als 1 ist, gibt <b>HLookup</b> den #VALUE! Fehlerwert; Wenn Zeilenindex größer als die Anzahl der Zeilen in Matrix ist, gibt <b>HLookup</b> den #REF! Fehlerwert.</param>
        <param name="Arg4">Bereich_Verweis – ein Wahrheitswert, der angibt, ob <b>HLookup</b> eine genaue Übereinstimmung oder eine ungefähre Übereinstimmung suchen soll. Wenn <b>true</b> oder weggelassen wird, wird eine ungefähre Übereinstimmung zurückgegeben. Anders ausgedrückt, wenn eine genaue Übereinstimmung gefunden wird, wird der größte Wert, der kleiner als Suchkriterium ist zurückgegeben. Wenn <b>false</b>, <b>HLookup</b> eine genaue Übereinstimmung gesucht werden sollen. Wenn eine nicht gefunden wird, wird der Fehlerwert #nv zurückgegeben.</param>
        <summary>Für einen Wert in der obersten Zeile einer Tabelle oder ein Array von Werten sucht und gibt dann einen Wert in einer Spalte aus einer Zeile, die Sie in der Tabelle oder Matrix angeben zurück. Verwenden Sie HLookup, wenn Ihre Vergleichswerte sich in einer Zeile am oberen Rand einer Tabelle mit Daten befinden, und Sie eine bestimmte Anzahl von Zeilen nach unten durchsuchen möchten. Verwendung <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> Wenn befinden sich Ihre Vergleichswerte in einer Spalte links neben der Daten ermittelt werden soll.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn <b>HLookup</b> Suchkriterium nicht finden kann und Bereich_Verweis <b>true</b>ist, verwendet sie den größten Wert, der kleiner als Suchkriterium ist. </para>
          <para>Wenn Suchkriterium kleiner als der kleinste Wert in der ersten Zeile von Matrix ist, gibt <b>HLookup</b> den Fehlerwert #n/a zurück. </para>
          <para>Wenn Bereich_Verweis FALSE ist und Suchkriterium Text ist, können Sie in Suchkriterium die Platzhalterzeichen Fragezeichen (?) und Sternchen (*) verwenden. Mit einem Fragezeichen erfolgt ein Abgleich mit jedem einzelnen Zeichen; mit einem Sternchen erfolgt ein Abgleich mit einer beliebigen Abfolge von Zeichen. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, geben Sie vor dem Zeichen eine Tilde (~) ein.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeom_Dist">
      <MemberSignature Language="C#" Value="public double HypGeom_Dist (double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]bool Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeom_Dist(double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16919)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Erfolge_S – die Anzahl der in der Stichprobe erzielten Erfolge.</param>
        <param name="Arg2">Umfang_S – der Umfang der Stichprobe.</param>
        <param name="Arg3">Erfolge_G – die Anzahl der in der Grundgesamtheit möglichen Erfolge.</param>
        <param name="Arg4">Umfang_G – der Umfang der Grundgesamtheit.</param>
        <param name="Arg5">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Kumuliert ist <b>true</b>, dann <b>gibt Hypgeom.dist</b> die Verteilungsfunktion zurück. Wenn <b>false</b>, die Wahrscheinlichkeitsfunktion zurückgegeben.</param>
        <summary>Gibt die hypergeometrische Verteilung zurück. <b>Hypgeom.dist</b> gibt die Wahrscheinlichkeit einer bestimmten Anzahl von Beispielerfolge, erhält die Größe der Stichprobe, Auffüllungserfolge und Größe der grundgesamtheit. Verwenden Sie <b>Hypgeom.dist</b> für Probleme mit einer endlichen grundgesamtheit, wobei jede Beobachtung ein Erfolg oder ein Fehler aufgetreten ist und jede Teilmenge einer angegebenen Größe mit gleicher Wahrscheinlichkeit ausgewählt wird.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>Hypgeom.dist</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Erfolge_S &lt; 0 oder Erfolge_S ist größer als der kleinere der Werte von Umfang_S bzw. Erfolge_G, <b>gibt Hypgeom.dist</b> gibt das #NUM zurück! Fehlerwert. </para>
          <para>Ist Erfolge_S kleiner als der größere Wert von 0 und (Umfang_S - Umfang_G + Erfolge_G), gibt <b>Hypgeom.dist</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Umfang_S ≤ 0 oder Umfang_S &gt; Umfang_G ist, <b>gibt Hypgeom.dist</b> gibt das #NUM zurück! Fehlerwert. </para>
          <para>Wenn Erfolge_G ≤ 0 oder Erfolge_G &gt; Umfang_G ist, <b>gibt Hypgeom.dist</b> gibt das #NUM zurück! Fehlerwert. </para>
          <para>Ist Umfang_G ≤ 0, <b>gibt Hypgeom.dist</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Die Formel für die hypergeometrische Verteilung lautet: 

 </para>
          <para>Abbildung 1: Gleichung für die hypergeometrische Verteilung</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>X = Erfolge_S</para>
          <para>n Umfang_S =</para>
          <para>M = Erfolge_G</para>
          <para>N = Umfang_G</para>
          <para>
            <b>Hypgeom.dist</b> wird ohne einer endlichen grundgesamtheit verwendet.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeomDist">
      <MemberSignature Language="C#" Value="public double HypGeomDist (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeomDist(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeomDist(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16673)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Erfolge_S – die Anzahl der in der Stichprobe erzielten Erfolge.</param>
        <param name="Arg2">Umfang_S – der Umfang der Stichprobe.</param>
        <param name="Arg3">Erfolge_G – die Anzahl der in der Grundgesamtheit möglichen Erfolge.</param>
        <param name="Arg4">Umfang_G – der Umfang der Grundgesamtheit.</param>
        <summary>Gibt die hypergeometrische Verteilung zurück. <b>Gibt HypGeomDist</b> gibt die Wahrscheinlichkeit einer bestimmten Anzahl von Beispielerfolge, erhält die Größe der Stichprobe, Auffüllungserfolge und Größe der grundgesamtheit. Verwenden Sie <b>gibt HypGeomDist</b> für Probleme mit einer endlichen grundgesamtheit, wobei jede Beobachtung ein Erfolg oder ein Fehler aufgetreten ist und jede Teilmenge einer angegebenen Größe mit gleicher Wahrscheinlichkeit ausgewählt wird.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" /> Methode.</para>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>HypGeomDist</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Erfolge_S &lt; 0 oder Erfolge_S ist größer als der kleinere der Werte von Umfang_S bzw. Erfolge_G, <b>gibt HypGeomDist</b> gibt das #NUM zurück! Fehlerwert. </para>
          <para>Ist Erfolge_S kleiner als der größere Wert von 0 und (Umfang_S - Umfang_G + Erfolge_G), gibt <b>HypGeomDist</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Umfang_S ≤ 0 oder Umfang_S &gt; Umfang_G ist, gibt HYPGEOMDIST gibt das #NUM zurück! Fehlerwert. </para>
          <para>Wenn Erfolge_G ≤ 0 oder Erfolge_G &gt; Umfang_G ist, <b>gibt HypGeomDist</b> gibt das #NUM zurück! Fehlerwert. </para>
          <para>Ist Umfang_G ≤ 0, <b>gibt HypGeomDist</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Die Formel für die hypergeometrische Verteilung lautet: 

 </para>
          <para>Abbildung 1: Gleichung für die hypergeometrische Verteilung</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>X = Erfolge_S</para>
          <para>n Umfang_S =</para>
          <para>M = Erfolge_G</para>
          <para>N = Umfang_G</para>
          <para>
            <b>Gibt HypGeomDist</b> wird ohne einer endlichen grundgesamtheit verwendet.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IfError">
      <MemberSignature Language="C#" Value="public object IfError (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfError([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfError(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfError (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfError(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16864)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - das Argument, das auf einen Fehler überprüft wird.</param>
        <param name="Arg2">Value_if_error - der zurückzugebende Wert, wenn die Formel mit einem Fehler ausgewertet wird. Die folgenden Fehlertypen werden ausgewertet: #N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME? oder #NULL!.</param>
        <summary>Gibt einen Wert, den Sie angeben, wenn eine Formel einen Fehler ergibt zurück. Andernfalls wird das Ergebnis der Formel zurückgegeben. Verwenden Sie die <b>IfError</b> -Funktion auffangen und Behandeln von Fehlern in einer Formel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Wert oder Wert_falls_Fehler eine leere Zelle ist, behandelt <b>IfError</b> dies als einen leeren Zeichenfolgenwert (""). </para>
          <para>Wenn der Wert einer Arrayformel ist, gibt <b>IfError</b> ein Array von Ergebnissen für jede Zelle in der angegebenen Wert Bereich zurück. Finden Sie im zweite Beispiel unten.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IfNa">
      <MemberSignature Language="C#" Value="public object IfNa (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfNa([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfNa(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfNa (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfNa(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16974)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert: beliebiger Wert oder Ausdruck oder Verweis.</param>
        <param name="Arg2">Value_if_na: beliebiger Wert oder Ausdruck oder Verweis.</param>
        <summary>Gibt zurück, dass der Wert, den Sie angeben, wenn der Ausdruck #n/a, andernfalls ergibt gibt das Ergebnis des Ausdrucks zurück.</summary>
        <returns>
          <b>VARIANT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImAbs">
      <MemberSignature Language="C#" Value="public string ImAbs (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImAbs([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImAbs(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImAbs (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImAbs(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16783)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, deren Absolutwert ermittelt werden soll.</param>
        <summary>Gibt den Absolutwert (Modulo) einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln. </para>
          <para>Der Absolutwert einer komplexen Zahl wird wie folgt berechnet: 

 </para>
          <para>Abbildung 1: Gleichung für den Absolutwert einer komplexen Zahl</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>Z = X + Yi</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Imaginary">
      <MemberSignature Language="C#" Value="public double Imaginary (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Imaginary([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Imaginary(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imaginary (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Imaginary(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16793)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – die komplexe Zahl, deren Imaginärteil bestimmt werden soll.</param>
        <summary>Gibt den Imaginärteil einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImArgument">
      <MemberSignature Language="C#" Value="public string ImArgument (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImArgument([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImArgument(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImArgument (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImArgument(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16791)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl ist eine komplexe Zahl, für die Sie das Argument Theta möchten.</param>
        <summary>Gibt das Argument (Theta) ein Winkel im Bogenmaß (Radiant), sodass:</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln. </para>
          <para>
            <b>ImArgument</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Gleichung für die ImArgument-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>Abbildung 2: Formel</para>
          <para></para>
          <para></para>
          <para>und</para>
          <para>Z = X + Yi</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImConjugate">
      <MemberSignature Language="C#" Value="public string ImConjugate (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImConjugate([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImConjugate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImConjugate (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImConjugate(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16792)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, deren konjugierte Zahl bestimmt werden soll.</param>
        <summary>Gibt die konjugierte komplexe Zahl zu einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln. </para>
          <para>Die konjugierte Zahl einer komplexen Zahl wird wie folgt berechnet: </para>
          <para>Abbildung 1: Gleichung für eine konjugierte Zahl einer komplexen Zahl</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCos">
      <MemberSignature Language="C#" Value="public string ImCos (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCos([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCos(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCos (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCos(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16789)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, deren Kosinus berechnet werden soll.</param>
        <summary>Gibt den Kosinus einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln. </para>
          <para>Ist Komplexe_Zahl ein Wahrheitswert, gibt <b>ImCos</b> den #VALUE! Fehlerwert. </para>
          <para>Der Kosinus einer komplexen Zahl wird wie folgt berechnet: 

 </para>
          <para>Abbildung 1: Kosinus einer komplexen Zahl</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCosh">
      <MemberSignature Language="C#" Value="public string ImCosh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCosh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCosh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCosh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCosh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16978)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe Zahl, die für den hyperbolischen Kosinus berechnet werden soll.</param>
        <summary>Gibt den hyperbolischen Kosinus einer komplexen Zahl zurück.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCot">
      <MemberSignature Language="C#" Value="public string ImCot (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCot([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCot(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCot (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCot(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16941)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe Zahl, deren den Kotangens werden soll.</param>
        <summary>Gibt den Kotangens einer komplexen Zahl zurück.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsc">
      <MemberSignature Language="C#" Value="public string ImCsc (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsc([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsc(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsc (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsc(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16942)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe Zahl, deren die Cosecant werden soll.</param>
        <summary>Gibt die Cosecant einer komplexen Zahl zurück.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsch">
      <MemberSignature Language="C#" Value="public string ImCsch (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsch([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsch(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsch (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsch(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16943)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe Zahl, deren die kosekans werden soll.</param>
        <summary>Gibt die kosekans einer komplexen Zahl zurück.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImDiv">
      <MemberSignature Language="C#" Value="public string ImDiv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImDiv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImDiv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImDiv (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImDiv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16781)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl1 – der komplexe Zähler oder Dividend.</param>
        <param name="Arg2">Komplexe_Zahl2 – der komplexe Nenner oder Divisor.</param>
        <summary>Gibt den Quotienten zweier komplexer Zahlen im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln. </para>
          <para>Der Quotient zweier komplexer Zahlen wird wie folgt berechnet: 

 </para>
          <para>Abbildung 1: Quotient zweier komplexer Zahlen</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImExp">
      <MemberSignature Language="C#" Value="public string ImExp (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImExp([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImExp(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImExp (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImExp(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16790)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, deren exponentieller Wert berechnet werden soll.</param>
        <summary>Gibt den exponentiellen Wert einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln. </para>
          <para>Der exponentielle Wert einer komplexen Zahl wird wie folgt berechnet: 

 </para>
          <para>Abbildung 1: Exponentiellen Wert einer komplexen Zahl</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLn">
      <MemberSignature Language="C#" Value="public string ImLn (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLn([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLn(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLn (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLn(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16785)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, deren natürlicher Logarithmus bestimmt werden soll.</param>
        <summary>Gibt den natürlichen Logarithmus einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln. </para>
          <para>Der natürliche Logarithmus einer komplexen Zahl wird wie folgt berechnet: 

 </para>
          <para>Abbildung 1: natürlichen Logarithmus einer komplexen Zahl</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>Abbildung 2: Formel</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog10">
      <MemberSignature Language="C#" Value="public string ImLog10 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog10([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog10(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog10 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog10(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16787)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, deren gewöhnlicher Logarithmus bestimmt werden soll.</param>
        <summary>Gibt den gewöhnlichen Logarithmus einer komplexen Zahl zur Basis 10 im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln. </para>
          <para>Der gewöhnliche Logarithmus einer komplexen Zahl kann wie folgt aus dem natürlichen Logarithmus berechnet werden: 

 </para>
          <para>Abbildung 1: Gleichung für den gewöhnlichen Logarithmus einer komplexen Zahl</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog2">
      <MemberSignature Language="C#" Value="public string ImLog2 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog2([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog2(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog2 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog2(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16786)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, deren Logarithmus zur Basis 2 bestimmt werden soll.</param>
        <summary>Gibt den Logarithmus einer komplexen Zahl zur Basis 2 im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln. </para>
          <para>Der Logarithmus einer komplexen Zahl zur Basis 2 kann wie folgt aus dem natürlichen Logarithmus berechnet werden: 

 </para>
          <para>Abbildung 1: Gleichung für Base-2 Logarithmus einer komplexen Zahl</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImPower">
      <MemberSignature Language="C#" Value="public string ImPower (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImPower([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImPower(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImPower (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImPower(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16782)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, die Sie in eine Potenz erheben möchten.</param>
        <param name="Arg2">Zahl – der Exponent, mit dem Sie die komplexe Zahl potenzieren möchten.</param>
        <summary>Gibt eine komplexe Zahl im Textformat x + yi oder x + yj zurück, die potenziert wurde.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln. </para>
          <para>Wenn Zahl nicht numerisch ist, gibt <b>IMAPOTENZ</b> das #VALUE! Fehlerwert. </para>
          <para>Zahl kann eine ganze Zahl, ein Bruch oder negativ sein.</para>
          <para>Die Potenz einer komplexen Zahl wird wie folgt berechnet: 

 </para>
          <para>Abbildung 1: Gleichung komplexe Zahl potenziert wurde</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>Abbildung 2: Formel</para>
          <para></para>
          <para></para>
          <para>und:</para>
          <para>Abbildung 3: Formel</para>
          <para></para>
          <para></para>
          <para>und:</para>
          <para>Abbildung 4: Formel</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImProduct">
      <MemberSignature Language="C#" Value="public string ImProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16797)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl1, Komplexe_Zahl2,… – 1 bis 29 miteinander zu multiplizierende komplexe Zahlen.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt das Produkt von 2 bis 29 komplexen Zahlen im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln. </para>
          <para>Das Produkt zweier komplexer Zahlen wird wie folgt berechnet:</para>
          <para>Abbildung 1: Produkt zweier komplexer Zahlen</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImReal">
      <MemberSignature Language="C#" Value="public double ImReal (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ImReal([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImReal(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImReal (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ImReal(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16794)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – die komplexe Zahl, deren Realteil bestimmt werden soll.</param>
        <summary>Gibt den Realteil einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSec">
      <MemberSignature Language="C#" Value="public string ImSec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16944)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe Zahl, deren die kosekans werden soll.</param>
        <summary>Gibt die kosekans einer komplexen Zahl zurück.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSech">
      <MemberSignature Language="C#" Value="public string ImSech (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSech([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSech(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSech (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSech(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16945)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe Zahl, deren die sekans werden soll.</param>
        <summary>Gibt die Secant einer komplexen Zahl zurück.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSin">
      <MemberSignature Language="C#" Value="public string ImSin (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSin([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSin(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSin (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSin(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16788)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, deren Sinus berechnet werden soll.</param>
        <summary>Gibt den Sinus einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln. </para>
          <para>Der Sinus einer komplexen Zahl wird wie folgt berechnet: 

 </para>
          <para>Abbildung 1: Sinus einer komplexen Zahl</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSinh">
      <MemberSignature Language="C#" Value="public string ImSinh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSinh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSinh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSinh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSinh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16977)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe Zahl, die für den hyperbolischen Sinus berechnet werden soll.</param>
        <summary>Gibt den hyperbolischen Sinus einer komplexen Zahl zurück.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSqrt">
      <MemberSignature Language="C#" Value="public string ImSqrt (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSqrt([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSqrt(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSqrt (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSqrt(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16784)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – die komplexe Zahl, deren Quadratwurzel Sie berechnen möchten.</param>
        <summary>Gibt die Quadratwurzel einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln. Die Quadratwurzel einer komplexen Zahl wird wie folgt berechnet: 

 </para>
          <para>Abbildung 1: Quadratwurzel einer komplexen Zahl</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>Abbildung 2: Formel</para>
          <para></para>
          <para></para>
          <para>und:</para>
          <para>Abbildung 3: Formel</para>
          <para></para>
          <para></para>
          <para>und:</para>
          <para>Abbildung 4: Formel</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSub">
      <MemberSignature Language="C#" Value="public string ImSub (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSub([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSub(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSub (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSub(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16780)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl1 – die komplexe Zahl, von der Komplexe_Zahl2 subtrahiert werden soll.</param>
        <param name="Arg2">Komplexe_Zahl2 – die komplexe Zahl, die von Komplexe_Zahl1 subtrahiert werden soll.</param>
        <summary>Gibt die Differenz zweier komplexer Zahlen im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln.</para>
          <para>Der Differenz zweier komplexer Zahlen wird wie folgt berechnet: 

</para>
          <para>Abbildung 1: Differenz zweier komplexer Zahlen</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSum">
      <MemberSignature Language="C#" Value="public string ImSum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16796)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl1,Komplexe_Zahl2,... – 1 bis 29 komplexe Zahlen, die addiert werden sollen.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt die Summe komplexer Zahlen im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> um den Realteil oder Imaginärteil in eine komplexe Zahl umzuwandeln. </para>
          <para>Der Summe zweier komplexer Zahlen wird wie folgt berechnet: 

</para>
          <para>Abbildung 1: Summe zweier komplexer Zahlen</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImTan">
      <MemberSignature Language="C#" Value="public string ImTan (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImTan([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImTan(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImTan (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImTan(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16940)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe Zahl, dessen Tangens Sie berechnen möchten.</param>
        <summary>Gibt den Tangens einer komplexen Zahl zurück.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public object Index (object Arg1, double Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Index([in]object Arg1, [in]float64 Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Index(System.Object,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Index (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16413)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array oder Bezug – ein Bereich von Zellen oder eine Arraykonstante. Für Bezüge ist dies der Bezug auf einen oder mehrere Bereiche von Zellen.</param>
        <param name="Arg2">Zeile – wählt die Zeile in Array aus, aus der ein Wert zurückgegeben werden soll. Wenn Zeile nicht angegeben wird, ist Spalte erforderlich. Für Bezüge ist dies die Nummer der Zeile in Bezug, aus der ein Bezug zurückgegeben werden soll.</param>
        <param name="Arg3">Spalte – wählt die Spalte in Array aus, aus der ein Wert zurückgegeben werden soll. Wenn Spalte nicht angegeben wird, ist Zeile erforderlich. Für Bezug ist dies die Nummer der Spalte in Bezug, aus der ein Bezug zurückgegeben werden soll.</param>
        <param name="Arg4">Bereich – nur verwendet, wenn Verweise zurückgeben. Wählt einen Bereich in Bezug, aus dem der Schnittpunkt von Zeile und Spalte zurückgegeben. Der erste ausgewählte oder eingegebene Bereich erhält die Nummer 1, das zweite 2 usw.. Wenn Bereich ausgelassen wird, verwendet <b>Index</b> Bereich 1.</param>
        <summary>Gibt einen Wert oder den Verweis auf einem Wert innerhalb einer Tabelle oder eines Bereichs zurück. Es gibt zwei Formen der <b>Index</b> -Funktion: Die Matrixversion und die Bezugsversion.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Arrayversion</para>
          <para>Gibt den Wert eines Elements in einer Tabelle oder einem Array zurück, ausgewählt anhand der Zeilen- und Spaltennummerindizes.</para>
          <para>Verwenden Sie die Matrixversion, wenn das erste Argument von <b>Index</b> eine Arraykonstante ist.</para>
          <para>Wenn sowohl die Zeile und Spalte Argumenten verwendet werden, gibt <b>Index</b> den Wert in der Zelle am Schnittpunkt von Zeile und Spalte zurück. </para>
          <para>Wenn Sie die Zeile oder Spalte auf 0 (null) festlegen, gibt <b>Index</b> das Array von Werten für die gesamte Spalte oder Zeile zurück. Um als ein Array zurückgegebene Werte zu verwenden, geben Sie die <b>Index</b> -Funktion als Matrixformel in einem horizontalen Bereich von Zellen für eine Zeile und in einen vertikalen Zellbereich für eine Spalte ein. Drücken Sie STRG + UMSCHALT + EINGABETASTE, um die Eingabe einer Matrixformel. </para>
          <para>Zeile und Spalte müssen auf eine Zelle im Array gehört. andernfalls gibt <b>Index</b> den #REF! Fehlerwert. </para>
          <para>Bezugsversion</para>
          <para>Gibt den Verweis auf die Zelle am Schnittpunkt von einer bestimmten Zeile und Spalte zurück. Wenn zusammenhängende der Bezug genommen wird, können Sie die Auswahl zu durchsuchenden auswählen. Wenn jeder Bereich in Verweis nur eine Zeile oder Spalte enthält, ist das Argument Zeile oder Spalte, die jeweils optional. Verwenden Sie beispielsweise für eine einzelne Zeilenverweis Bezug. </para>
          <para>Nachdem Verweis und Bereich einen bestimmten Bereich ausgewählt haben, Zeile und Spalte wählen Sie aus einer bestimmten Zelle: Zeile 1 ist die erste Zeile im Bereich, Spalte 1 ist die erste Spalte usw.. Der durch <b>Index</b> zurückgegebene Verweis ist der Schnittpunkt von Zeile und Spalte zurück. </para>
          <para>Wenn Sie die Zeile oder Spalte auf 0 (null) festlegen, gibt <b>Index</b> den Verweis für die gesamte Spalte oder Zeile zurück.</para>
          <para>Zeile, Spalte und Bereich müssen auf eine Zelle verweisen gehört. andernfalls gibt <b>Index</b> den #REF! Fehlerwert. Wenn Zeile und Spalte angegeben werden, gibt <b>Index</b> den Bereich Verweis von Bereich angegeben zurück. </para>
          <para>Das Ergebnis der Funktion <b>Index</b> ist ein Verweis und wird als solche von anderen Formeln interpretiert. Je nach der Formel kann der Rückgabewert der INDEX als Verweis oder als Wert verwendet werden. Beispielsweise entspricht die Formel CELL ("Width", INDEX (a1: B2, 1, 2)) CELL("width",B1). Die Zelle-Funktion verwendet den Rückgabewert der INDEX als Verweis auf eine Zelle. Andererseits, wandelt eine Formel wie 2*Index(a1:B2;1;2) den Rückgabewert der <b>Index</b> in der Zahl in Zelle B1.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intercept">
      <MemberSignature Language="C#" Value="public double Intercept (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Intercept([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intercept (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Intercept(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16695)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bekannt_y – die Menge der abhängigen Beobachtungen oder Daten.</param>
        <param name="Arg2">Bekannt_x – die Menge der unabhängigen Beobachtungen oder Daten.</param>
        <summary>Berechnet den Punkt, an dem eine Linie die y-Achse mithilfe von vorhandenen x- und y-Werte. Der Schnittpunkt wird basierend auf eine optimale Regressionsgeraden zurückgeben, die durch die bekannten X-Werte und y-Werte. Verwenden Sie die <b>Intercept</b> -Funktion, wenn Sie möchten den Wert der abhängigen Variablen zu bestimmen, wenn die unabhängige Variable 0 (null) ist. Die <b>Intercept</b> -Funktion können Sie beispielsweise eine Metal Stromversorgung Widerstand bei 0 ° C Vorhersagen, wann Sie die Datenpunkte, um Room Temperature und höher übernommen wurden.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Argumente müssen Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn Bekannt_y und Bekannt_x eine unterschiedliche Anzahl von Datenpunkten enthalten oder keine Datenpunkte, gibt <b>Intercept</b> den Fehlerwert #n/a zurück. </para>
          <para>Die Formel für den Schnittpunkt a der Regressionsgeraden lautet: 

</para>
          <para>Abbildung 1: Die Gleichung für Schnittpunkt der Regressionsgeraden</para>
          <para></para>
          <para></para>
          <para>wobei die Steigung, das b wie folgt berechnet:</para>
          <para>Abbildung 2: Gleichung für die Steigung</para>
          <para></para>
          <para></para>
          <para>Hierbei sind X und Y die Beispieldurchschnittswerte AVERAGE(Bekannt_x) und AVERAGE(Bekannt_y).</para>
          <para>Der zugrunde liegende Algorithmus in die <b>Intercept</b> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> Funktionen unterscheidet sich von der zugrunde liegende Algorithmus der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> Funktion. Der Unterschied zwischen diesen Algorithmen kann zu verschiedenen Ergebnissen führen, wenn Daten unbestimmten und kollineare werden. Wenn die Datenpunkte des Arguments das Y_Werte 0 und die Datenpunkte des Arguments die X_Werte sind sind beispielsweise 1: </para>
          <list type="bullet">
            <item>
              <description>
                <b>Intercept</b> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> Zurückgeben einer #DIV/0! Fehler. Die <b>Intercept</b> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> Algorithmus ist darauf ausgelegt, nur ein einziges Ergebnis gesucht und in diesem Fall werden mehrere Antworten. </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />Gibt den Wert 0 zurück. Die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> Algorithmus sinnvolle Ergebnisse für kollineare Daten zurückgeben soll, und in diesem Fall mindestens eine Antwort gefunden werden kann.</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntRate">
      <MemberSignature Language="C#" Value="public double IntRate (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IntRate([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IntRate(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IntRate (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16817)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Anlage – der in das Wertpapier investierte Betrag.</param>
        <param name="Arg4">Rückzahlung – der Betrag, der bei Fälligkeit zu erwarten ist.</param>
        <param name="Arg5">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt den Zinssatz eines voll investierten Wertpapiers zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültiges Datum angegeben sind, gibt <b>IntRate</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Anlage ≤ 0 oder Rückzahlung ≤ 0, <b>gibt IntRate</b> den #NUM zurück! Fehlerwert. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4 ist, gibt <b>IntRate</b> das #NUM zurück! Fehlerwert. </para>
          <para>Ist Abrechnung ≥ Fälligkeit, <b>gibt IntRate</b> den #NUM #zahl! Fehlerwert. </para>
          <para>
            <b>IntRate</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Gleichung für die IntRate-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>B = Anzahl der Tage in einem Jahr je nach der Jahresbasis.</para>
          <para>DIM = Anzahl der Tage von Abrechnung bis Fälligkeit.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ipmt">
      <MemberSignature Language="C#" Value="public double Ipmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ipmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ipmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ipmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16551)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zins – der Zinssatz pro Zeitraum.</param>
        <param name="Arg2">Zr – der Zeitraum, für den Sie den Zinsbetrag berechnen möchten. Zr kann nur Werte im Bereich von 1 bis Zzr annehmen.</param>
        <param name="Arg3">Zzr – die Gesamtzahl der Zahlungsperioden in einer Annuität.</param>
        <param name="Arg4">Bw – der Barwert oder der heutige Gesamtwert einer Reihe zukünftiger Zahlungen.</param>
        <param name="Arg5">Zw – der zukünftige Wert oder der Kassenbestand, den Sie nach Tätigung der letzten Zahlung erzielen möchten. Wenn Zw ausgelassen wird, wird dafür der Wert 0 angenommen (der zukünftige Wert einer Anleihe beträgt beispielsweise 0).</param>
        <param name="Arg6">F – die Zahl 0 oder 1, die die Fälligkeit von Zahlungen angibt. Wenn F ausgelassen wird, wird ein Wert von 0 angenommen.</param>
        <summary>Gibt die Zinszahlung einer Investition für den angegebenen Zeitraum ausgehend von regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0</term>
              <description>Zum Ende des Zeitraums</description>
            </item>
            <item>
              <term>1</term>
              <description>Zum Anfang des Zeitraums</description>
            </item>
          </list>
          <para>Stellen Sie sicher, dass Sie die zur Angabe von Zins und Zzr verwendeten Einheiten einheitlich verwenden. Wenn Sie für eine vierjährige Anleihe mit jährlichen Zinsen von 12 Prozent monatliche Zahlungen tätigen, verwenden Sie 12%/12 für Zins und 4*12 für Zzr. Wenn Sie für dieselbe Anleihe jährliche Zahlungen tätigen, verwenden Sie 12% für Zins und 4 für Zzr. </para>
          <para>Für alle Argumente gilt, dass Geldbeträge, die Sie auszahlen (z. B. Spareinlagen), durch negative Zahlen und Geldbeträge, die Sie einnehmen (z. B. Dividenden), durch positive Zahlen dargestellt werden.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Irr">
      <MemberSignature Language="C#" Value="public double Irr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Irr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Irr (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16446)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Werte – ein Array von Zellen oder ein Bezug auf Zellen, die Zahlen enthalten, für die Sie den internen Zinsfuß berechnen möchten.</param>
        <param name="Arg2">Schätzwert – eine geschätzte Zahl, die dem Ergebnis von IRR fast entspricht.</param>
        <summary>Gibt den internen Zinsfuß einer Investition für eine Reihe von Cashflows zurück, die durch die Zahlen in Werte angegeben werden. Diese Zahlungen müssen nicht gleich groß sein, wie dies bei Annuitätenzahlungen der Fall ist. Die Cashflows müssen jedoch in regelmäßigen Intervallen, monatlich oder jährlich, auftreten. Der interne Zinsfuß ist der Zinssatz, der für eine Investition erreicht wird, die aus Auszahlungen (negative Werte) und Einzahlungen (positive Werte) besteht, die in regelmäßigen Abständen erfolgen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Werte muss mindestens einen positiven und einen negativen Wert enthalten, damit ein interner Zinsfuß berechnet werden kann.</para>
          <para>IRR geht davon aus, dass die Zahlungen in der Reihenfolge erfolgen, in der sie in Werte angegeben sind. Sie sollten daher darauf achten, dass Sie die Ein- und Auszahlungen in der von Ihnen gewünschten Reihenfolge eingeben.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden die betreffenden Werte ignoriert.</para>
          <para>Microsoft Excel verwendet eine iterative Methode für die Berechnung von <b>Irr</b>. <b>Irr</b> beginnend mit Schätzwert die Berechnung verwendet werden, bis das Ergebnis 0,00001 Prozent ist. Wenn <b>Irr</b> kein Ergebnis finden kann, die nach dem funktioniert versucht 20 das #NUM! Fehlerwert wird zurückgegeben. </para>
          <para>In den meisten Fällen müssen Sie nicht für die Berechnung von <b>Irr</b> Schätzwert anzugeben. Wenn Schätzwert ausgelassen wird, wird angenommen, 0,1 (10 Prozent). </para>
          <para>Wird bei <b>Irr</b> den #NUM! Fehler Wert, oder wenn das Ergebnis nicht ist Ihnen erwarteten, versuchen Sie es erneut mit einem anderen Wert für Schätzwert wiederholen.</para>
          <para>
            <b>IRR</b> ist eng mit <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, der net Gegenwart Funktion Wert. Die Rendite von <b>Irr</b> berechnet ist der Zinssatz, 0 (null) Nettobarwert entspricht. Die folgende Formel veranschaulicht, wie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> und <b>Irr</b> miteinander verknüpft sind:</para>
          <para>NPV(IRR(B1:B6),B1:B6) ergibt 3.60E-08 [innerhalb der Genauigkeit der Berechnung <b>Irr</b> , dem Wert 3.60E-08 effektiv ist 0 (null).]</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsErr">
      <MemberSignature Language="C#" Value="public bool IsErr (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsErr([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsErr(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsErr (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsErr(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16510)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ von Wert und gibt <b>true</b> oder <b>false,</b> je nachdem, wenn der Wert auf einen anderen Fehlerwert als #n bezieht.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Werteargumente der ist-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, die eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 konvertiert. Jedoch in der Formel ISTZAHL("19") wird "19" wird nicht konvertiert eine Zeichenfolge zurück, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false</b>zurück. </para>
          <para>IST-Funktionen eignen sich in Formeln zum Testen des Ergebnisses einer Berechnung. In Kombination mit dem IF-Funktion bieten sie eine Methode zum Suchen von Fehlern in Formeln.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public bool IsError (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsError([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsError(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16387)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ von Wert und gibt <b>true</b> oder <b>false,</b> je nachdem, welche zurück, wenn der Wert auf einen Fehlerwert bezieht (#n/a, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME? oder #NULL!).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Werteargumente der ist-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, die eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 konvertiert. Jedoch in der Formel ISTZAHL("19") wird "19" wird nicht konvertiert eine Zeichenfolge zurück, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false</b>zurück. </para>
          <para>IST-Funktionen eignen sich in Formeln zum Testen des Ergebnisses einer Berechnung. In Kombination mit dem IF-Funktion bieten sie eine Methode zum Suchen von Fehlern in Formeln.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEven([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsEven(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEven (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEven(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16804)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ von Wert und gibt <b>true</b> oder <b>false</b> je zurück, wenn Wert ungerade ist.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Werteargumente der ist-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, die eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 konvertiert. Jedoch in der Formel ISTZAHL("19") wird "19" wird nicht konvertiert eine Zeichenfolge zurück, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false</b>zurück. </para>
          <para>IST-Funktionen eignen sich in Formeln zum Testen des Ergebnisses einer Berechnung. In Kombination mit dem IF-Funktion bieten sie eine Methode zum Suchen von Fehlern in Formeln.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFormula">
      <MemberSignature Language="C#" Value="public bool IsFormula (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsFormula([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsFormula(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsFormula (Arg1 As Range) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsFormula(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16973)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Verweis auf die Zelle, den, die Sie testen möchten. Verweis kann sein, ein Zellbezug, eine Formel oder Namen, die auf eine Zelle verweist.</param>
        <summary>Überprüft, ob ein Verweis auf eine Zelle mit einer Formel ist, und gibt <b>TRUE</b> oder <b>FALSE</b>zurück.</summary>
        <returns>
          <b>BOOL</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLogical">
      <MemberSignature Language="C#" Value="public bool IsLogical (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsLogical([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsLogical(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLogical (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsLogical(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16582)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ von Wert und gibt <b>true</b> oder <b>false,</b> je nachdem, wenn der Wert auf einen Wahrheitswert bezieht.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Werteargumente der ist-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, die eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 konvertiert. Jedoch in der Formel ISTZAHL("19") wird "19" wird nicht konvertiert eine Zeichenfolge zurück, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false</b>zurück. </para>
          <para>IST-Funktionen eignen sich in Formeln zum Testen des Ergebnisses einer Berechnung. In Kombination mit dem IF-Funktion bieten sie eine Methode zum Suchen von Fehlern in Formeln.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNA">
      <MemberSignature Language="C#" Value="public bool IsNA (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNA([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNA(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNA (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNA(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16386)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ von Wert und gibt <b>true</b> oder <b>false,</b> je nachdem, welche zurück, wenn der Wert auf den Fehlerwert #n/a (Wert nicht verfügbar) bezieht.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Werteargumente der ist-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, die eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 konvertiert. Jedoch in der Formel ISTZAHL("19") wird "19" wird nicht konvertiert eine Zeichenfolge zurück, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false</b>zurück. </para>
          <para>IST-Funktionen eignen sich in Formeln zum Testen des Ergebnisses einer Berechnung. In Kombination mit dem IF-Funktion bieten sie eine Methode zum Suchen von Fehlern in Formeln.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNonText">
      <MemberSignature Language="C#" Value="public bool IsNonText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNonText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNonText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNonText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNonText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16574)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ von Wert und gibt <b>true</b> oder <b>false,</b> je nachdem sich der Wert für jedes Element, das nicht Text ist, bezieht. (Beachten Sie, dass diese Funktion gibt <b>true</b> zurück, wenn Wert auf eine leere Zelle bezieht.)</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Werteargumente der ist-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, die eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 konvertiert. Jedoch in der Formel ISTZAHL("19") wird "19" wird nicht konvertiert eine Zeichenfolge zurück, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false</b>zurück. </para>
          <para>IST-Funktionen eignen sich in Formeln zum Testen des Ergebnisses einer Berechnung. In Kombination mit dem IF-Funktion bieten sie eine Methode zum Suchen von Fehlern in Formeln.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public bool IsNumber (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNumber([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumber (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNumber(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ von Wert und gibt <b>true</b> oder <b>false,</b> je nachdem, wenn der Wert auf eine Zahl bezieht.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Werteargumente der ist-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, die eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 konvertiert. Jedoch in der Formel ISTZAHL("19") wird "19" wird nicht konvertiert eine Zeichenfolge zurück, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false</b>zurück. </para>
          <para>IST-Funktionen eignen sich in Formeln zum Testen des Ergebnisses einer Berechnung. In Kombination mit dem IF-Funktion bieten sie eine Methode zum Suchen von Fehlern in Formeln.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ISO_Ceiling">
      <MemberSignature Language="C#" Value="public double ISO_Ceiling (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ISO_Ceiling([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ISO_Ceiling(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ISO_Ceiling (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16907)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – der zu rundende Wert.</param>
        <param name="Arg2">Schritt - ist das optionale Vielfache auf die Zahl gerundet werden soll. Wenn Genauigkeit ausgelassen wird, lautet der Standardwert 1.</param>
        <summary>Gibt eine Zahl zurück, die auf die nächste ganze Zahl oder auf das kleinste Vielfache von Schritt aufgerundet ist.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOdd">
      <MemberSignature Language="C#" Value="public bool IsOdd (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsOdd([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsOdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOdd (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOdd(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16805)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ von Wert und gibt <b>true</b> oder <b>false,</b> je nachdem, wenn der Wert ungerade ist.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Werteargumente der ist-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, die eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 konvertiert. Jedoch in der Formel ISTZAHL("19") wird "19" wird nicht konvertiert eine Zeichenfolge zurück, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false</b>zurück. </para>
          <para>IST-Funktionen eignen sich in Formeln zum Testen des Ergebnisses einer Berechnung. In Kombination mit dem IF-Funktion bieten sie eine Methode zum Suchen von Fehlern in Formeln.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoWeekNum">
      <MemberSignature Language="C#" Value="public double IsoWeekNum (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IsoWeekNum([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsoWeekNum(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsoWeekNum (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16968)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datum-Uhrzeit-Code für Datum und Uhrzeit Berechnung von Excel verwendet.</param>
        <param name="Arg2">Dieses Argument ist nicht verfügbar in der Funktion.</param>
        <summary>Gibt die Anzahl der ISO Woche des Jahres für ein bestimmtes Datum zurück.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>
          <para>Gibt die Ordnungszahl der [ISO8601] Kalenderwoche des Jahres für das angegebene Datum zurück. ISO 8601 definiert die Kalenderwoche als Zeitintervall sieben Kalendertage beginnend mit einem Montag und die ersten Kalenderwoche eines Jahres als diejenige, die dem ersten Donnerstag dieses Jahres enthält.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ispmt">
      <MemberSignature Language="C#" Value="public double Ispmt (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ispmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ispmt(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ispmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ispmt(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16734)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zins – der Zinssatz für die Investition.</param>
        <param name="Arg2">Zr – der Zeitraum, für den der Zinssatz bestimmt werden soll. Dieser muss zwischen 1 und Zzr liegen.</param>
        <param name="Arg3">Zzr – die Gesamtzahl der Zahlungsperioden für die Investition.</param>
        <param name="Arg4">Bw – der gegenwärtige Wert der Investition. Bei einem Kredit ist Bw die Kreditsumme.</param>
        <summary>Berechnet die während eines bestimmten Zeitraums für eine Investition gezahlten Zinsen. Diese Funktion wird aus Kompatibilitätsgründen mit Lotus 1-2-3 zur Verfügung gestellt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Stellen Sie sicher, dass Sie die zur Angabe von Zins und Zzr verwendeten Einheiten einheitlich verwenden. Wenn Sie für eine vierjährige Anleihe mit jährlichen Zinsen von 12 Prozent monatliche Zahlungen tätigen, verwenden Sie 12%/12 für Zins und 4*12 für Zzr. Wenn Sie für dieselbe Anleihe jährliche Zahlungen tätigen, verwenden Sie 12% für Zins und 4 für Zzr.</para>
          <para>Für alle Argumente werden die Beträge, die Sie zahlen, beispielsweise Einlagen für Sparguthaben oder andere Abhebungen, durch negative Zahlen dargestellt; Beträge, die Sie erhalten, beispielsweise Dividendenzahlungen und andere Einlagen, werden durch positive Zahlen dargestellt.</para>
          <para>Weitere Informationen zu Finanzfunktionen finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> Funktion.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsText">
      <MemberSignature Language="C#" Value="public bool IsText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16511)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ von Wert und gibt <b>true</b> oder <b>false,</b> je nachdem, wenn der Wert auf einen Text bezieht.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Werteargumente der ist-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, die eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 konvertiert. Jedoch in der Formel ISTZAHL("19") wird "19" wird nicht konvertiert eine Zeichenfolge zurück, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false</b>zurück. </para>
          <para>IST-Funktionen eignen sich in Formeln zum Testen des Ergebnisses einer Berechnung. In Kombination mit dem IF-Funktion bieten sie eine Methode zum Suchen von Fehlern in Formeln.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThaiDigit">
      <MemberSignature Language="C#" Value="public bool IsThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsThaiDigit (Arg1 As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16759)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kurt">
      <MemberSignature Language="C#" Value="public double Kurt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Kurt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Kurt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Kurt (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16706)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – 1 bis 30 Argumente, für die Sie die Kurtosis berechnen möchten. Anstelle der durch Semikolons getrennten Argumente können Sie auch ein Array oder einen Bezug auf ein Array verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt die Kurtosis (Exzess) eines Datensatzes zurück. Die Kurtosis ist ein Maß für die Wölbung (d. h. wie spitz oder flach) einer Verteilung im Vergleich zu der Normalverteilung. Eine positive Kurtosis weist auf eine relativ schmale, spitze Verteilung hin. Eine negative Kurtosis weist auf eine relativ flache Verteilung hin.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn weniger als vier Datenpunkte oder ist die Standardabweichung des Beispiels gleich 0, gibt <b>Kurt</b> den #DIV/0! Fehlerwert. </para>
          <para>Eine Kurtosis ist wie folgt definiert: 

 </para>
          <para>Abbildung 1: Kurtosisgleichung</para>
          <para></para>
          <para></para>
          <para>Dabei ist s die Beispielstandardabweichung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Large">
      <MemberSignature Language="C#" Value="public double Large (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Large([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Large(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Large (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Large(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16709)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrix – eine Matrix oder ein Bereich von Daten, für die bzw. den der k-größte Wert ermittelt werden soll.</param>
        <param name="Arg2">k – die Position (ausgehend vom größten Wert) in einer Matrix oder im Zellbereich der zurückzugebenden Daten.</param>
        <summary>Gibt den k größten Wert in einem DataSet zurück. Sie können diese Funktion verwenden, Auswählen eines Werts, der die relative Lage anhand. Beispielsweise können Sie <b>Groß</b> die höchster Wert zurückzugeben, zweit- oder Third-Place Punktzahl.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Array leer ist, gibt <b>Large</b> den #NUM! Fehlerwert. </para>
          <para>Wenn k ≤ 0 oder ist k größer als die Anzahl der Datenpunkte, gibt <b>Large</b> den #NUM! Fehlerwert.</para>
          <para>Ist n die Anzahl der Datenpunkte in einem Bereich, gibt LARGE(Matrix,1) den größten und LARGE(Matrix,n) den kleinsten Wert zurück.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lcm">
      <MemberSignature Language="C#" Value="public double Lcm (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Lcm([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lcm(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lcm (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16859)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... sind -1 bis 29 Werte, deren kleinstes gemeinsames Vielfaches Sie berechnen möchten. Bei Werten, die keine ganzen Zahlen sind, werden deren Nachkommastellen abgeschnitten.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt das kleinste gemeinsame Vielfache der als Argumente angegebenen ganzen Zahlen zurück. Als kleinstes gemeinsames Vielfaches wird die kleinste positive ganze Zahl bezeichnet, die ein Vielfaches aller ganzzahligen Argumente Zahl1, Zahl2 und so weiter ist. LCM können Sie verwenden, wenn Sie Brüche addieren müssen, die unterschiedliche Nenner haben.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>Lcm</b> den #VALUE! Fehlerwert. </para>
          <para>Ist ein der Argumente kleiner als 0 (null) ist, gibt <b>Lcm</b> den #NUM! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinEst">
      <MemberSignature Language="C#" Value="public object LinEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LinEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LinEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16433)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Y_Werte - die bereits bekannten y-Werte in der Beziehung y = mx + b.</param>
        <param name="Arg2">X_Werte - eine optionale Menge mit möglicherweise bereits bekannten x-Werten in der Beziehung y = mx + b.</param>
        <param name="Arg3">Konstante - ein Wahrheitswert, mit dem angegeben wird, ob erzwungen werden soll, dass die Konstante b gleich 0 sein soll.</param>
        <param name="Arg4">Stats - ein Wahrheitswert, der angibt, ob weitere Regressionskenngrößen zurückgegeben werden sollen.</param>
        <summary>Berechnet die Parameter eines linearen Trends unter Verwendung der Methode der kleinsten Quadrate, um eine passende Gerade zu berechnen und einen Array zurückzugeben, der die Gerade beschreibt. Da diese Funktion einen Array von Werten zurückgibt, muss sie als Arrayformel eingegeben werden.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Formel einer solchen Geraden lautet:</para>
          <para>y = mx + b oder</para>
          <para>y = m1x1 + m2x2 + ... + b (bei mehreren Bereichen mit x-Werten)</para>
          <para>Dabei ist der abhängige y-Wert eine Funktion der unabhängigen X-Werte. Die m-Werte werden Koeffizient jedes X-Wert, und b ist ein konstanter Wert. Beachten Sie, dass y, X und m Vektoren sein können. Das Array, das <b>LinEst</b> gibt ist {Mn; Mn-1;..., m1, b}. <b>LinEst</b> können auch weitere Regressionskenngrößen zurückgegeben werden.</para>
          <para>Wenn sich das Array Y_Werte in einer einzelnen Spalte befindet, wird jede Spalte mit X_Werte als separate Variable interpretiert.</para>
          <para>Wenn sich das Array Bekannt_y in einer einzelnen Zeile befindet, wird jede Zeile mit Bekannt_x als separate Variable interpretiert.</para>
          <para>Das Array Bekannt_x kann eine oder mehrere Gruppen mit Variablen enthalten. Wenn nur eine Variable verwendet wird, können Bekannt_y und Bekannt_x Bereiche beliebiger Form darstellen, solange sie gleiche Abmessungen aufweisen. Wenn mehrere Variablen verwendet werden, muss Bekannt_y einen Vektor darstellen (d. h. einen Bereich mit einer Höhe von einer Zeile oder einer Breite von einer Spalte).</para>
          <para>Wenn Bekannt_x ausgelassen wird, wird angenommen, dass dies dem Array {1,2,3,...} entspricht, das dieselbe Größe wie Bekannt_y aufweist.</para>
          <para>Wenn Konstante <b>true</b> ist oder nicht angegeben ist, wird b normal berechnet. </para>
          <para>Wenn Konstante <b>false</b>ist, wird b gleich 0 festgelegt und die m-Werte werden so angepasst, gestreckt y = mx gilt. </para>
          <para>Wenn Stats ist <b>Truuue</b>, gibt <b>LinEst</b> weitere Regressionskenngrößen zurück, damit das zurückgegebene Array ist {Mn; Mn-1;...; m1; b.sen; Sen, Sen-1;..., se1; Seb; r2; sey.f; R2; df.ssreg; Ssresid}. </para>
          <para>Wenn Stats <b>false</b> oder nicht angegeben, gibt <b>LinEst</b> nur die m-Koeffizienten sowie die Konstante b zurück. </para>
          <para>Die folgenden Regressionskenngrößen können zusätzlich ermittelt werden:</para>
          <list type="table">
            <item>
              <term>se1,se2,...,sen</term>
              <description>Sind die Standardfehlerwerte der Koeffizienten m1;m2;...;mn.</description>
            </item>
            <item>
              <term>seb</term>
              <description>Der Standardfehlerwert der Konstante b (Seb = #n/a Wenn Konstante <b>false</b>ist).</description>
            </item>
            <item>
              <term>r2</term>
              <description>Der Koeffizient der Bestimmung. Vergleicht geschätzte und tatsächliche y-Werte und dessen Wert zwischen 0 und 1. Wenn es sich um 1 ist, besteht eine perfekte Korrelation in der Stichprobe – es gibt keinen Unterschied zwischen den geschätzten y-Wert und der tatsächlichen y-Wert. Andererseits Wenn der Koeffizient Bestimmung 0 ist, ist die Formel Regressionsformel nicht Vorhersage einen y-Wert. </description>
            </item>
            <item>
              <term>sey</term>
              <description>Der Standardfehler des Schätzwerts y (Prognosewert).</description>
            </item>
            <item>
              <term>F</term>
              <description>Die F-Statistik (oder der berechnete F-Wert). Anhand der F-Statistik können Sie entscheiden, ob die zwischen der abhängigen und der unabhängigen Variablen beobachtete Beziehung zufällig ist oder nicht.</description>
            </item>
            <item>
              <term>df</term>
              <description>Die Anzahl der Freiheitsgrade. Verwenden Sie die Freiheitsgrade, um kritische F-Werte in einer statistischen Tabelle zu finden. Vergleichen der finden Sie in der Tabelle auf die F-Statistik von <b>LinEst zurückgegebenen</b> auf einer Ebene für die einzelnen Details des Modells. </description>
            </item>
            <item>
              <term>ssreg</term>
              <description>Die Regressionssumme der Quadrate.</description>
            </item>
            <item>
              <term>ssresid</term>
              <description>Die verbleibende Summe der Quadrate.</description>
            </item>
          </list>
          <para>Die folgende Abbildung zeigt, in welcher Reihenfolge die zusätzlichen Regressionskenngrößen zurückgegeben werden.</para>
          <para>Abbildung 1: Arbeitsblatt</para>
          <para></para>
          <para></para>
          <para>Sie können eine beliebige geraden Linie mit der Steigung und den y-Achsenabschnitt beschreiben: </para>
          <para>Steigung (m):</para>
          <para>
Übernehmen Sie die Steigung einer Zeile, die häufig als m geschrieben wird, zwei Punkte in der Zeile (x 1, y1) und (X2, y2); die Steigung ist gleich (y2 - y1) / (x 2 - x 1).</para>
          <para>Y-Achsenabschnitt (b):</para>
          <para>
Der y-Achsenabschnitt, häufig als b geschrieben ist der Wert von y an der Stelle, an denen die Zeile die y-Achse schneidet.</para>
          <para>Die Formel einer geraden Linie ist y = Mx + b. Wenn Sie die Werte von m und b kennen, können Sie jedem Punkt in der Zeile durch Anschließen y oder X-Wert in dieser Formel berechnen. Sie können auch die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" /> Funktion.</para>
          <para>Wenn Sie nur eine unabhängige X-Variable haben, können Sie die Werte Steigung und den y-Achsenabschnitt direkt mithilfe der folgenden Formeln zu erhalten: </para>
          <para>Steigung:</para>
          <para>
=Index(LINEST(known_y's,known_x's),1)</para>
          <para>Y-Achsenabschnitt:</para>
          <para>
=INDEX(LINEST(Y_Werte,X_Werte),2)</para>
          <para>Die Genauigkeit der Zeile berechnet, indem <b>LineEst</b> hängt von den Grad der Punkt (XY) in Ihre Daten. Je linearer die Daten, die genauer <b>LineEst</b> Modell. <b>LineEst</b> verwendet die Methode der kleinsten Quadrate für die optimale Anpassung für die Daten zu ermitteln. Wenn Sie nur eine unabhängige X-Variable haben, basieren die Berechnung der m und b entsprechend der folgenden Formeln: </para>
          <para>Abbildung 2: Formel</para>
          <para></para>
          <para></para>
          <para>Abbildung 3: Formel</para>
          <para></para>
          <para></para>
          <para>, wobei x und y beispielhafte Mittelwerte sind, z. B. x = AVERAGE(X_Werte) und y = AVERAGE(Y_Werte).</para>
          <para>Linie und Kurve-getestet Funktionen <b>LineEst</b> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" /> können die beste gerade Linie oder die exponentielle Kurve, die Ihren Daten entspricht berechnen. Allerdings müssen Sie entscheiden, welche der beiden Ergebnisse Ihren Daten entspricht. Sie können für eine exponentielle Kurve Trend für einer geraden Linie oder Wachstum (Y_Werte, X_Werte) berechnen. Diese Funktionen ohne das Argument Neue_x_Werte, zurückzugeben ein Array von y-Werte liegen entlang der Zeile oder einer Kurve Ihrer tatsächlichen Datenpunkte. Sie können dann die prognostizierten Werte mit den tatsächlichen Werten vergleichen. Sie möchten beide für einen visuellen Vergleich Diagramm. </para>
          <para>In Regressionsformel Analyse berechnet Microsoft Excel für jeden Punkt das Quadrat der Differenz zwischen der für diesen Punkt erwarteten y-Wert und dessen tatsächlichen y-Wert. Die Summe dieser quadrierten Differenzen wird die verbleibende Summe der Quadrate, Ssresid aufgerufen. Klicken Sie dann berechnet Microsoft Excel die Gesamtsumme der Quadrate, Sstotal. Wenn Konstante = <b>true</b>oder nicht angegeben die Gesamtsumme der Quadrate der Summe der quadrierten Unterschiede zwischen den tatsächlichen y-Werten und dem Mittelwert der y-Werte. Wenn Konstante = <b>"false"</b>, die gesamte Summe der Quadrate ist die Summe der Quadrate der tatsächlichen y-Werte (ohne Subtraktion der y-Mittelwert von jedem einzelnen y-Wert). Dann Regressionssumme der Quadrate; df.ssreg; gesucht werden kann: df.ssreg = Sstotal - Ssresid. Je kleiner ist, die verbleibende Summe der Quadrate mit Gesamtsumme der Quadrate verglichen, je größer der Wert des Koeffizienten der Bestimmung, r2, das ein Indikator wie gut die aus der Analyse Regressionsformel resultierende Gleichung erläutert die Beziehung zwischen der Variablen. R2 entspricht df.ssreg/Sstotal. </para>
          <para>In einigen Fällen, eine oder mehrere Spalten X (wird davon ausgegangen, dass Y und x werden in Spalten) möglicherweise keine zusätzlichen Vorhersagen-Wert in der X-Spalten. Anders ausgedrückt, möglicherweise eine oder mehrere X-Spalten der Eliminierung zu vorhergesagte Y-Werten führen, die gleichmäßig genau sind. In diesem Fall sollte Mal Spalten redundante Regressionsformel Modell ausgelassen werden. Dieses Phänomen heißt "Kollinearität", da redundant X-Spalte als Summe aus ein Vielfaches von non-redundante X Spalten ausgedrückt werden kann. <b>LinEst</b> sucht nach Collinearity und all redundant mal Spalten aus dem Modell Regressionsformel entfernt, wenn es sie erkennt. Entfernt X Spalten können in <b>LinEst</b> Ausgabe mit Koeffizienten 0 als auch Se 0 erkannt werden. Wenn eine oder mehrere Spalten als redundant entfernt werden, ist R2 betroffen, da die Anzahl der X tatsächlich Summenspalten für Vorhersagen R2 abhängt. Wenn R2 geändert wird, da redundante X Spalten werden entfernt, der folgenden Werte und F auch betroffen sind. Collinearity sollte relativ selten in Praxis sein. Jedoch einen Fall, wobei es wahrscheinlicher ist auftreten, wenn einige X Spalten nur 0 oder 1 enthalten, als Indikatoren, der angibt, ob ein Thema in einem Versuch des oder ist kein Mitglied einer bestimmten Gruppe. Wenn Konstante <b>true</b> = oder weggelassen, <b>LinEst</b> fügt effektiv eine zusätzlich Mal Spalte alle 1 ein, um den Schnittpunkt zu modellieren. Wenn Sie eine Spalte mit einem 1 für einzelnen Betreff, wenn männlich oder 0, wenn nicht haben, und Sie auch haben eine Spalte mit einem 1 für einzelnen Betreff, wenn weiblich oder 0 Wenn nicht, diese letztere Spalte ist erforderlich, da die Einträge aus den Eintrag in der "Männlich Indikator" Subtraktion abgerufen werden kann Spalte aus dem Eintrag in der Spalte zusätzliche alle 1 hinzugefügt durch <b>LineEst</b>. </para>
          <para>R2 wird wie folgt berechnet, wenn keine X-Spalten aus dem Modell aufgrund Collinearity entfernt werden: Wenn k Spalten mit X_Werte vorhanden sind und const = <b>true</b> oder nicht angegeben ist, R2 = n – k – 1. Wenn Konstante = <b>"false"</b>, dann R2 = n - k. In beiden Fällen erhöht aufgrund von Kollinearität entfernten Spalten R2 um 1. </para>
          <para>Formeln, die Arrays zurückgeben, müssen als Arrayformeln eingegeben werden. Wenn Sie eine Arraykonstante wie Bekannt_x als Argument eingeben möchten, verwenden Sie Kommas, um Werte in der gleichen Zeile und Semikolons, um Zeilen zu trennen. Trennzeichen können je nach Ihrer Gebietsschema in den Regions- und Sprachoptionen in der Systemsteuerung abweichen. </para>
          <para>Beachten Sie, dass mithilfe einer Regressionsformel vorhergesagte y-Werte möglicherweise ungültig sind, wenn diese außerhalb des Bereichs der y-Werte liegen, die Sie zur Ermittlung der Formel verwendet haben. Der zugrunde liegende Algorithmus in der <b>LinEst</b> -Funktion unterscheidet sich von der zugrunde liegende Algorithmus der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> Funktionen. Der Unterschied zwischen diesen Algorithmen kann zu verschiedenen Ergebnissen führen, wenn Daten unbestimmten und kollineare werden. Wenn die Datenpunkte des Arguments das Y_Werte 0 und die Datenpunkte des Arguments die X_Werte sind sind beispielsweise 1: </para>
          <para>
            <b>LineEst</b> gibt den Wert 0 zurück. Der Algorithmus <b>LinEst</b> sinnvolle Ergebnisse für kollineare Daten zurückgeben soll, und in diesem Fall mindestens eine Antwort gefunden werden kann. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> Zurückgeben einer #DIV/0! Fehler. Die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> Algorithmus ist darauf ausgelegt, nur ein einziges Ergebnis gesucht und in diesem Fall werden mehrere Antworten.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ln">
      <MemberSignature Language="C#" Value="public double Ln (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ln([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ln(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ln (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ln(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16406)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die positive reelle Zahl, deren natürlichen Logarithmus Sie berechnen möchten.</param>
        <summary>Gibt den natürlichen Logarithmus einer Zahl zurück. Natürliche Logarithmen haben die Konstante e (2,71828182845904) als Basis.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Ln</b> ist die Umkehrfunktion der EXP-Funktion.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public double Log (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16493)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die positive reelle Zahl, deren Logarithmus Sie berechnen möchten.</param>
        <param name="Arg2">Basis – die Basis des Logarithmus. Wenn das Argument Basis fehlt, wird es als 10 angenommen.</param>
        <summary>Gibt den Logarithmus einer Zahl zu der angegebenen Basis zurück.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public double Log10 (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log10([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log10 (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Log10(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16407)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die positive reelle Zahl, deren Logarithmus zur Basis 10 Sie berechnen möchten.</param>
        <summary>Gibt den Logarithmus einer Zahl zur Basis 10 zurück.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogEst">
      <MemberSignature Language="C#" Value="public object LogEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LogEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16435)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bekannte_y – die y-Werte, die Ihnen aus der jeweiligen Beziehung y = b*m^x bereits bekannt sind.</param>
        <param name="Arg2">Bekannt_x – eine optionale Gruppe von x-Werten, die Ihnen aus der Beziehung y = b*m^x eventuell bereits bekannt sind.</param>
        <param name="Arg3">Konstante – ein Wahrheitswert, mit dem angegeben wird, ob erzwungen werden soll, dass die Konstante b gleich 1 sein soll.</param>
        <param name="Arg4">Stats - ein Wahrheitswert, der angibt, ob weitere Regressionskenngrößen zurückgegeben werden sollen.</param>
        <summary>In Regressionsanalysen berechnet diese Funktion eine Exponentialkurve, die möglichst gut an die von Ihnen bereitgestellten Daten angepasst ist, und gibt einen Array von Werten zurück, der diese Kurve beschreibt. Da diese Funktion einen Array von Werten zurückgibt, muss die Formel als Arrayformel eingegeben werden.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Formel der Kurve lautet:</para>
          <para>y = b*m^x oder</para>
          <para>y = (b *(m1 ^ X1)*(m2 ^ X2) * _) (falls mehrere X-Werte vorhanden sind)</para>
          <para>Dabei ist der abhängige y-Wert eine Funktion der unabhängigen X-Werte. Die m-Werte Basis, jede Exponent X-Wert entspricht, und b ist ein konstanter Wert. Beachten Sie, dass y, X und m Vektoren sein können. Das Array, das gibt <b>LogEst</b> ist {Mn; Mn-1;..., m1, b}.</para>
          <para>Wenn sich das Array Y_Werte in einer einzelnen Spalte befindet, wird jede Spalte mit X_Werte als separate Variable interpretiert.</para>
          <para>Wenn sich das Array Bekannt_y in einer einzelnen Zeile befindet, wird jede Zeile mit Bekannt_x als separate Variable interpretiert.</para>
          <para>
				Das Array X_Werte kann eine oder mehrere Gruppen von Variablen umfassen. Wird nur eine Variable verwendet, können Y_Werte und X_Werte Bereiche beliebiger Form sein, solange sie dieselben Dimensionen haben. Werden mehrere Variablen verwendet, müssen Y_Werte als Zellbereiche vorliegen, wobei sich der Bereich nur über eine Zeile oder eine Spalte erstrecken darf (auch als "Vektor" bezeichnet).
</para>
          <para>Wenn Bekannt_x ausgelassen wird, wird angenommen, dass dies dem Array {1,2,3,...} entspricht, das dieselbe Größe wie Bekannt_y aufweist.</para>
          <para>Wenn Konstante <b>true</b> ist oder nicht angegeben ist, wird b normal berechnet.</para>
          <para>Wenn Konstante <b>false</b>ist, wird b gleich 1 festgelegt, und die m-Werte werden gemäß y = m ^ X.</para>
          <para>Wenn Stats gleich <b>true</b>ist, gibt <b>LogEst</b> weitere Regressionskenngrößen zurück, damit das zurückgegebene Array ist {Mn; Mn-1;...; m1; b.sen; Sen, Sen-1;..., se1; Seb; R 2; sey.f; R2; df.ssreg; Ssresid}. </para>
          <para>Wenn Stats <b>false</b> oder nicht angegeben, gibt <b>LogEst</b> nur die m-Koeffizienten sowie die Konstante b zurück. </para>
          <para>Weitere Informationen zu den zusätzlichen Regressionskenngrößen finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />.</para>
          <para>Mehrere Zeichnung Ihrer Daten ähnelt einer exponentiellen Kurve, die bessere berechnete Zeile wird Ihren Daten entsprechen. Wie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />, <b>LogEst</b> gibt ein Array von Werten, die eine Beziehung zwischen den Werten beschreibt jedoch <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> entspricht einer geraden zu Ihren Daten; <b>LogEst</b> entspricht einer geraden Linie. Weitere Informationen finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Wenn Sie nur eine unabhängige X-Variable haben, erhalten y-Achsenabschnitt (b) Werte Sie direkt über die folgende Formel: </para>
          <para>Y-Achsenabschnitt (b):</para>
          <para>
Index(LOGEST(known_y's,known_x's),2)</para>
          <para>Können die y = b * m ^ x Gleichung vorhergesagt zukünftige y-Werte, aber Microsoft Excel bietet die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" /> Funktion für Sie dazu. Weitere Informationen finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />.</para>
          <para>Formeln, die Arrays zurückgeben, müssen als Arrayformeln eingegeben werden.</para>
          <para>Wenn Sie eine Arraykonstante wie x-Werte als Argument eingeben, verwenden Sie Kommas, um Werte in derselben Zeile zu trennen, und Semikolons, um Zeilen zu trennen. Diese Trennzeichen unterscheiden sich möglicherweise je nach den lokalen Einstellungen unter Regions- und Sprachoptionen in der Systemsteuerung.</para>
          <para>Beachten Sie, dass mithilfe einer Regressionsformel vorhergesagte y-Werte möglicherweise ungültig sind, wenn diese außerhalb des Bereichs der y-Werte liegen, die Sie zur Ermittlung der Formel verwendet haben.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogInv">
      <MemberSignature Language="C#" Value="public double LogInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16675)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrsch – eine zur Lognormalverteilung gehörige Wahrscheinlichkeit.</param>
        <param name="Arg2">Mittelwert – der Mittelwert der Lognormalverteilung.</param>
        <param name="Arg3">Standabwn – die Standardabweichung der Lognormalverteilung.</param>
        <summary>Mit dieser Funktion können Sie Daten analysieren, die logarithmisch transformiert wurden.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" /> Methode.</para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>LogInv</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Wahrsch &lt;0 oder Wahrsch = &gt;= 1, <b>gibt LogInv</b> gibt das #NUM! Fehlerwert. </para>
          <para>Wenn Standabwn &lt;= 0, gibt <b>LOGINV den #NUM</b> ! Fehlerwert. </para>
          <para>
				Die Umkehrfunktion der Lognormalverteilung lautet: </para>
          <para>Abbildung 1: Umkehrfunktion der lognormalverteilung</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Dist">
      <MemberSignature Language="C#" Value="public double LogNorm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16920)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - Der Wert, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Mittelwert – den Mittelwert der lognormalverteilung.</param>
        <param name="Arg3">Standabwn – die Standardabweichung der lognormalverteilung.</param>
        <param name="Arg4">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn kumulierten Wert <b>true</b>hat, <b>Lognorm.dist</b> Wert der Verteilungsfunktion; Wenn <b>false</b>, die Wahrscheinlichkeitswert der Funktion zurückgegeben.</param>
        <summary>Gibt Werte der Verteilungsfunktion einer lognormalverteilten Zufallsvariable zurück. Mit dieser Funktion können Sie Daten analysieren, die logarithmisch transformiert wurden.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>Lognorm.dist</b> die #VALUE! Fehlerwert. </para>
          <para>Ist x ≤ 0 oder ist Standabwn ≤ 0, <b>Lognorm.dist</b> gibt das #NUM zurück! Fehlerwert. </para>
          <para>Die Formel für die Verteilungsfunktion einer logarithmischen Normalverteilung lautet: </para>
          <para>Abbildung 1: Gleichung für die lognormalverteilung</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Inv">
      <MemberSignature Language="C#" Value="public double LogNorm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16921)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrsch – eine zur lognormalverteilung gehörige Wahrscheinlichkeit.</param>
        <param name="Arg2">Mittelwert – den Mittelwert der lognormalverteilung.</param>
        <param name="Arg3">Standabwn – die Standardabweichung der lognormalverteilung.</param>
        <summary>Gibt Perzentile der Lognormalverteilung zurück. Mit dieser Funktion können Sie Daten analysieren, die logarithmisch transformiert wurden.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>Lognorm.Inv</b> die #VALUE! Fehlerwert. </para>
          <para>Wenn Wahrsch &lt;0 oder Wahrsch = &gt;= 1, <b>Lognorm.Inv</b> gibt das #NUM! Fehlerwert. </para>
          <para>Wenn Standabwn &lt;= 0, <b>Lognorm.Inv</b> gibt das #NUM! Fehlerwert. </para>
          <para>
				Die Umkehrfunktion der Lognormalverteilung lautet: </para>
          <para>Abbildung 1: Umkehrfunktion der lognormalverteilung</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNormDist">
      <MemberSignature Language="C#" Value="public double LogNormDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNormDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNormDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16674)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, bei dem die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Mittelwert – der Mittelwert der Lognormalverteilung.</param>
        <param name="Arg3">Standabwn – die Standardabweichung der Lognormalverteilung.</param>
        <summary>Gibt Werte der Verteilungsfunktion einer lognormalverteilten Zufallsvariable zurück. Mit dieser Funktion können Sie Daten analysieren, die logarithmisch transformiert wurden.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> Methode.</para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>LogNormDist</b> den #VALUE! Fehlerwert. </para>
          <para>Ist x ≤ 0 oder ist Standabwn ≤ 0, <b>gibt LogNormDist</b> den #NUM zurück! Fehlerwert. </para>
          <para>Die Formel für die Verteilungsfunktion einer logarithmischen Normalverteilung lautet: </para>
          <para>Abbildung 1: Gleichung für die lognormalverteilung</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public object Lookup (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Lookup([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lookup (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16412)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">"Lookup_value" – eines Werts, der <b>Verweis</b> im ersten Vektor sucht. Suchkriterium kann eine Zahl, Text, ein Wahrheitswert oder einen Namen oder Verweis, der auf einen Wert bezieht.</param>
        <param name="Arg2">Suchvektor oder Matrix – In der Vektorversion ein Bereich, der nur eine Zeile oder eine Spalte enthält. Zulässige Elemente von Suchvektor sind Zeichenfolgen (Texte), Zahlen oder Wahrheitswerte. In der Matrixversion ein Zellbereich, der Text, Zahlen oder Wahrheitswerte enthält, den Sie mit dem Suchwert vergleichen möchten.</param>
        <param name="Arg3">Ergebnisvektor – wird nur in der Vektorversion verwendet. Ein Bereich, der nur eine Zeile oder Spalte enthält. Dieser Vektor muss genauso viele Elemente umfassen wie Suchvektor.</param>
        <summary>Gibt einen Wert aus einem Vektor oder einer Matrix zurück. Für die LOOKUP-Funktion gibt es zwei Syntaxversionen: die Vektor- und die Matrixversion.</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>Durchsuchen eines Bereichs in einer Zeile oder einer Spalte (auch als Vektor bezeichnet) nach einem Wert und Zurückgeben eines Werts von derselben Position in einem zweiten Bereich in einer Zeile oder einer Spalte</term>
              <description>Vektorversion</description>
              <description>Verwenden Sie die Vektorversion, wenn Sie eine umfangreiche Liste mit Werten durchsuchen möchten oder wenn sich die Werte im Lauf der Zeit ändern.</description>
            </item>
            <item>
              <term>Durchsuchen der ersten Zeile einer Matrix nach einem angegebenen Wert und Zurückgeben eines Werts von derselben Position in der letzten Zeile oder Spalte einer Matrix</term>
              <description>Matrixversion</description>
              <description>Verwenden Sie die Matrixversion, wenn Sie über eine kleine Liste mit Werten verfügen und die Werte konstant bleiben.</description>
            </item>
          </list>
          <para>
            <b>Hinweis</b>: Sie können auch die Funktion zum <b>Nachschlagen</b> als Alternative die IF-Funktion für ausgeklügelte Tests oder Tests für mehr als sieben Bedingungen. Siehe die Beispiele in die Matrixversion.</para>
          <para>Vektorversion</para>
          <para>Ein Vektor ist ein Bereich von nur eine Zeile oder Spalte. Die Vektorversion von <b>Verweis</b> sucht in einem einzeiligen oder einspaltigen Bereich (als Vektor bezeichnet) nach einem Wert und gibt einen Wert von derselben Position in einem zweiten Bereich einer Zeile oder einer Spalte zurück. Verwenden Sie dieses Formular der <b>Lookup</b> -Funktion, wenn Sie angeben möchten, den Bereich mit den Werten, die Sie abgleichen möchten. Die anderen Form von <b>Verweis</b> sucht automatisch in die erste Spalte oder Zeile.</para>
          <para>
            <b>Wichtig</b>: die Werte in Suchvektor müssen in aufsteigender Reihenfolge angeordnet sein:..., -2, -1, 0, 1, 2,..., A – Z, <b>false</b>, <b>true</b>. Andernfalls kann die <b>Lookup</b> nicht den richtigen Wert zurück. Groß-und Kleinschreibung entsprechen.</para>
          <para>Kann die LOOKUP-Funktion keinen Wert finden, der mit dem jeweiligen Wert von Suchkriterium übereinstimmt, verwendet sie den Wert in Suchvektor, der bezogen auf den Wert von Suchkriterium kleiner oder gleich ist.</para>
          <para>Wenn Suchkriterium kleiner als der kleinste Wert in Suchvektor ist, gibt <b>Lookup</b> den Fehlerwert #n/a zurück.</para>
          <para>Arrayversion</para>
          <para>Die Matrixversion von <b>Verweis</b> sucht in der ersten Zeile oder Spalte einer Matrix nach dem angegebenen Wert und gibt einen Wert aus derselben Position in der letzten Zeile oder Spalte des Arrays zurück. Verwenden Sie diese Version von <b>Verweis</b> , wenn die Werte, die übereinstimmen soll in der ersten Zeile oder Spalte in der Matrix sind. Verwenden Sie die andere Form von <b>Verweis</b> , wenn Sie den Speicherort der Spalte oder Zeile angeben möchten.</para>
          <para>
            <b>Tipp</b>: Es ist im Allgemeinen sollten Sie die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />oder <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />Funktion anstelle der Matrixversion von <b>Verweis</b>. Diese Version der <b>Lookup-Funktion</b> ist für die Kompatibilität mit anderen Kalkulationstabellenprogrammen bereitgestellt.</para>
          <para>Wenn <b>Lookup</b> die Suchkriterium nicht findet, verwendet sie den größten Wert im Array, das kleiner als oder gleich dem Suchkriterium ist.</para>
          <para>Wenn Suchkriterium kleiner als der kleinste Wert in der ersten Zeile oder Spalte (Dies hängt von den matrixdimensionen) ist, gibt <b>Lookup</b> den Fehlerwert #n/a zurück.</para>
          <para>Die Matrixversion von <b>Verweis</b> ist sehr ähnlich der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> Funktionen. Der Unterschied besteht darin, die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> sucht nach Suchkriterium in der ersten Zeile <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> Suche in der ersten Spalte und <b>Lookup</b> -Suche entsprechend den Dimensionen der Matrix.</para>
          <para>Wenn Array einen Bereich abdeckt, der breiter als ist hoch (mehr Spalten als Zeilen), durchsucht <b>Lookup</b> Suchkriterium in der ersten Zeile.</para>
          <para>Wenn Matrix quadratisch oder quadratisch hat ist Wide (mehr Zeilen als Spalten), durchsucht <b>Lookup</b> die erste Spalte.</para>
          <para>Mit <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />, Sie können Indexes, aber immer wählt <b>Verweis</b> den letzten Wert in der Zeile oder Spalte.</para>
          <para>
            <b>Wichtig</b>: die Werte im Array müssen in aufsteigender Reihenfolge angeordnet werden:..., -2, -1, 0, 1, 2,..., A – Z, <b>false</b>, <b>true</b>. Andernfalls kann die <b>Lookup</b> nicht den richtigen Wert zurück. Groß-und Kleinschreibung entsprechen.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public double Match (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Match([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Match(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16448)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">
            Suchkriterium – der Wert, aufgrund dessen der gewünschte Wert in einer Tabelle gesucht wird.</param>
        <param name="Arg2">
            Suchmatrix – ein zusammenhängender Zellbereich mit möglichen Vergleichskriterien. Suchmatrix muss eine Matrix oder ein Bezug auf eine Matrix sein.</param>
        <param name="Arg3">
            Vergleichstyp – die Zahl -1, 0 oder 1. Vergleichstyp gibt an, auf welche Weise Microsoft Excel die Werte in einer Suchmatrix mit den Suchkriterien vergleicht.</param>
        <summary>Gibt die relative Position eines Elements in einem Array, das mit einen angegebenen Wert in einer bestimmten Reihenfolge übereinstimmt. Verwenden Sie statt einer der <b>Übereinstimmung</b> die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" /> funktioniert, wenn Sie die Position eines Elements in einem Bereich und nicht das Element selbst benötigen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Suchkriterium ist der Wert, den Sie in Suchmatrix abgleichen möchten. Wenn Sie Person im Telefonbuch Telefonnummer suchen, verwenden Sie den Namen der Person als dem Nachschlagewert ein, aber die Telefonnummer ist der gewünschte Wert.</para>
          <para>Suchkriterium kann ein Wert (eine Zahl, eine Zeichenfolge oder ein Wahrheitswert) oder ein Bezug auf eine Zelle sein, die eine Zahl, eine Zeichenfolge oder einen Wahrheitswert enthält.</para>
          <para>Wenn "match_type" 1 ist, liefert <b>Vergleich</b> den größten Wert, der kleiner als oder gleich dem Suchkriterium ist. Such-Matrix müssen in aufsteigender Reihenfolge angeordnet sein:...-2, -1, 0, 1, 2,..., A – Z, <b>false</b>, <b>true</b>.</para>
          <para>Wenn "match_type" 0 ist, liefert <b>Vergleich</b> den ersten Wert, der gleich Suchkriterium ist. Such-Matrix kann in beliebiger Reihenfolge entsprechen.</para>
          <para>Wenn Vergleichstyp-1 ist, liefert <b>Vergleich</b> den kleinsten Wert, der größer als oder gleich dem Suchkriterium ist. Such-Matrix müssen in absteigender Reihenfolge angeordnet sein: <b>true</b>, <b>false</b>, Z-A,... 2, 1, 0, -1,-2,..., und So weiter. Wenn "match_type" ausgelassen wird, wird es als 1 angenommen.</para>
          <para>
            <b>Übereinstimmung</b> gibt die Position der übereinstimmenden Wert innerhalb der Such-Matrix, nicht den Wert selbst zurück. Beispielsweise gibt MATCH("b",{"a","b","c"},0) 2, der die relative Position innerhalb des Arrays {"a", "b", "C"} "b". </para>
          <para>
            <b>Match</b> unterscheidet nicht zwischen Groß- und Kleinbuchstaben beim Abgleichen. </para>
          <para>Wenn <b>Match</b> keinen übereinstimmenden nicht erfolgreich ist, wird den Fehlerwert #n/a zurückgegeben. </para>
          <para>Ist Vergleichstyp gleich 0 und ist als Suchkriterium eine Zeichenfolge angegeben, können Sie im Suchkriterium Platzhalterzeichen, Fragezeichen und Sternchen (*) verwenden. Ein Fragezeichen ersetzt beim Abgleichen ein einzelnes Zeichen und ein Sternchen eine beliebige Zeichenfolge. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, müssen Sie eine Tilde (~) vor das zu suchende Zeichen setzen.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public double Max (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Max([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Max (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16391)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... - 1 bis 30 Zahlen, deren größten Wert Sie ermitteln möchten.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den größten Wert innerhalb einer Argumentliste zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn es sich bei einem Argument um ein Array oder einen Bezug handelt, werden nur Zahlen in diesem Array oder Bezug verwendet. Leere Zellen, Wahrheitswerte oder Text im Array oder Bezug werden ignoriert.</para>
          <para>Enthalten die Argumente keine Zahlen, gibt <b>Max</b> 0 (null) zurück. </para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn Sie Wahrheitswerte und Textdarstellungen von Zahlen in einen Bezug als Teil der Berechnung aufnehmen möchten, verwenden Sie die <see cref="MAXA" /> Funktion.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MDeterm">
      <MemberSignature Language="C#" Value="public double MDeterm (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDeterm([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDeterm(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDeterm (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MDeterm(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16547)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrix – eine quadratische Matrix (die Anzahl der Zeilen und Spalten ist identisch).</param>
        <summary>Gibt die Determinante einer Matrix zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Array kann als ein Zellbereich, beispielsweise a1: C3 angegeben werden; als Arraykonstante z. B. {1.2.3; 4.5.6; 7.8.9} oder als dieser Name. <b>MDeterm</b> gibt die #VALUE! Fehler beim: </para>
          <para>Zellen in der Matrix sind leer oder enthalten Text.</para>
          <para>Die Matrix hat eine ungleiche Anzahl an Zeilen und Spalten.</para>
          <para>Die Größe der Matrix überschreitet 73 Spalten und 73 Zeilen.</para>
          <para>Die Determinante einer Matrix ist eine Zahl, die aus den Werten berechnet wird, die zu der jeweiligen Matrix gehören. Für eine aus drei Zeilen und drei Spalten bestehende Matrix (A1:C3) ist die Determinante wie folgt definiert: 

</para>
          <code>MDETERM(A1:C3)</code>
          <para>ist gleich</para>
          <code>A1*(B2*C3-B3*C2) + A2*(B3*C1-B1*C3) + A3*(B1*C2-B2*C1)</code>
          <para>Determinanten werden normalerweise dazu verwendet, Formelsysteme zu lösen, die mehrere Unbekannte (Variablen) haben.</para>
          <para>
            <b>MDeterm</b> wird mit einer Genauigkeit von ungefähr 16 Stellen berechnet, die zu einem numerischen kleinen Fehler führen können, wenn die Berechnung nicht abgeschlossen ist. Beispielsweise kann die Determinante einer Matrix einzigartige von 0 (null) 1E 16 abweichen.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MDuration">
      <MemberSignature Language="C#" Value="public double MDuration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDuration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDuration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDuration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16843)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Nominalzins – der jährliche Couponzinssatz des Wertpapiers.</param>
        <param name="Arg4">Rendite – die jährliche Rendite des Wertpapiers.</param>
        <param name="Arg5">Häufigkeit – die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2 für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg6">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt die modifizierte Macauley-Dauer eines Wertpapiers mit einem angenommenen Nennwert von 100 $ zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Kupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Kupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Häufigkeit und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültiges Datum angegeben sind, gibt <b>MDuration</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Rendite &lt; 0 oder, wenn Nominalzins &lt; 0, gibt <b>MDuration</b> das #NUM zurück! Fehlerwert. </para>
          <para>Wenn es sich bei Häufigkeit um eine andere Zahl als 1, 2 oder 4 handelt, gibt <b>MDuration</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4, <b>gibt MDuration</b> das #NUM zurückgibt! Fehlerwert. </para>
          <para>Ist Abrechnung ≥ Fälligkeit, <b>gibt MDuration</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Die modifizierte Dauer ist wie folgt definiert: 

 </para>
          <para>Abbildung 1: Gleichung für die modifizierte Dauer</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Median">
      <MemberSignature Language="C#" Value="public double Median (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Median([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Median (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16611)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... - 1 bis 30 Zahlen, deren Median Sie berechnen möchten.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den Median der angegebenen Zahlen zurück. Der Median ist die Zahl, die in der Mitte einer Zahlenreihe liegt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn eine gerade Anzahl von Zahlen in der Sammlung vorhanden ist, berechnet <b>Median</b> den Mittelwert der zwei Zahlen in der Mitte. Finden Sie unter der zweiten Formel in dem Beispiel.</para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>
            <b>Hinweis</b>: die <b>Median</b> -Funktion gibt zentralen Tendenz der Speicherort des Mittelpunkts des einer Gruppe von Zahlen in einer statistischen Verteilung ist. Die drei sind die meisten gemeinsamen zentrale Tendenz:</para>
          <list type="bullet">
            <item>
              <description>Mittelwert. Dies ist das arithmetische Mittel, das berechnet wird, indem Zahlen addiert werden und die Summe dann durch die Anzahl der Summanden geteilt wird. Der Mittelwert von 2, 3, 3, 5, 7 und 10 beträgt beispielsweise 30 geteilt durch 6, also 5.</description>
            </item>
            <item>
              <description>Medianwert. Dies ist die mittlere Zahl in einer Gruppe von Zahlen. Dies bedeutet, dass die Hälfte der Zahlen größer als der Median und die Hälfte der Zahlen kleiner als der Median ist. Der Median von 2, 3, 3, 5, 7 und 10 ist beispielsweise 4.</description>
            </item>
            <item>
              <description>Modalwert. Dies ist die Zahl, die in einer Gruppe von Zahlen am häufigsten vorkommt. Der Modalwert von 2, 3, 3, 5, 7 und 10 ist beispielsweise 3.</description>
            </item>
          </list>
          <para>Bei einer symmetrischen Verteilung in einer Gruppe von Zahlen sind diese drei Arten der zentralen Tendenz gleich. Bei einer nicht symmetrischen Verteilung in einer Gruppe von Zahlen können die Werte unterschiedlich sein.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public double Min (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Min([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Min (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16390)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – 1 bis 30 Zahlen, deren kleinsten Wert Sie ermitteln möchten.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den kleinsten Wert innerhalb einer Wertemenge zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn es sich bei einem Argument um ein Array oder einen Bezug handelt, werden nur Zahlen in diesem Array oder Bezug verwendet. Leere Zellen, Wahrheitswerte oder Text im Array oder Bezug werden ignoriert.</para>
          <para>Enthalten die Argumente keine Zahlen, gibt <b>Min</b> 0 zurück. </para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn Sie Wahrheitswerte und Zahlen in Textform in einen Bezug als Teil der Berechnung aufnehmen möchten, verwenden Sie die MINA-Funktion.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MInverse">
      <MemberSignature Language="C#" Value="public object MInverse (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MInverse([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MInverse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MInverse (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MInverse(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16548)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrix – eine quadratische Matrix (die Anzahl der Zeilen und Spalten ist identisch).</param>
        <summary>Gibt die Inverse einer Matrix zurück (die zu einer Matrix gehörende Kehrmatrix).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Größe des Arrays muss 52 Spalten mit je 52 Zeilen nicht überschreiten. Wenn dies der Fall ist, gibt die Funktion einer #VALUE! Fehler. </para>
          <para>Matrix kann wie folgt angegeben werden: als Zellbereich (z. B. A1:C3), als Arraykonstante (z. B. {1.2.3;4.5.6;7.8.9} oder als Name, der einem Zellbereich oder einer Arraykonstanten zugeordnet ist.</para>
          <para>Wenn Zellen in der Matrix leer sind oder Text enthalten, gibt <b>MInverse</b> den #VALUE! Fehlerwert. </para>
          <para>
            <b>MInverse</b> gibt auch die #VALUE! Fehlerwert Array keine gleiche Anzahl von Zeilen und Spalten. </para>
          <para>Formeln, die einen Array zurückgeben, müssen als Arrayformel eingegeben werden.</para>
          <para>Inverse Matrizen werden ebenso wie Determinanten im Allgemeinen zur Lösung von mathematischen Formelsystemen mit mehreren Variablen verwendet. Das Produkt einer Matrix und ihrer Inverse ist die Einheitsmatrix, eine quadratische Matrix, in der die Elemente auf der Hauptdiagonalen gleich 1 und alle anderen Elemente gleich 0 sind.</para>
          <para>Nehmen Sie als Beispiel für die Berechnung einer Matrix aus zwei Zeilen und zwei Spalten an, dass der Bereich A1:B2 die Buchstaben a, b, c und d enthält, die vier beliebige Zahlen darstellen. Die folgende Tabelle zeigt die Inverse der Matrix A1:B2. 

</para>
          <list type="table">
            <item>
              <term>Zeile 1</term>
              <description>d / (ein*d / b*-c)</description>
              <description>b / (b *- c a*d)</description>
            </item>
            <item>
              <term>Zeile 2</term>
              <description>c / (b *- c a*d)</description>
              <description>eine / (ein*d / b*-c)</description>
            </item>
          </list>
          <para>
            <b>MInverse</b> wird mit einer Genauigkeit von ungefähr 16 Stellen berechnet, die zu einem numerischen kleinen Fehler führen können, wenn die Stornierung nicht abgeschlossen ist. </para>
          <para>Einige quadratischen Matrizen kann nicht umgekehrt werden und gibt das #NUM zurück! Fehlerwert <b>MINVERSE</b>. Die Determinante für eine invertierbar-Matrix ist 0.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MIrr">
      <MemberSignature Language="C#" Value="public double MIrr (object Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MIrr([in]object Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MIrr(System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIrr (Arg1 As Object, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MIrr(System::Object ^ Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16445)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Werte – eine Matrix oder ein Bezug auf Zellen, die Zahlen enthalten. Diese Zahlen entsprechen einer Reihe von Auszahlungen (negative Werte) sowie Einzahlungen (positive Werte), die in gleich langen Perioden erfolgen.</param>
        <param name="Arg2">Investition – der Zinssatz, den Sie für die gezahlten Gelder ansetzen.</param>
        <param name="Arg3">Reinvestition – ist der Zinssatz, den Sie für reinvestierte Gelder erzielen.</param>
        <summary>Gibt einen modifizierten internen Zinsfuß zurück, bei dem positive und negative Cashflows mit unterschiedlichen Zinssätzen finanziert werden. MIRR berücksichtigt sowohl die Kosten der jeweiligen Investition als auch die Zinsen, die sich aus der Reinvestition des Gelds ergeben.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Werte müssen mindestens einen positiven und einen negativen Wert den geänderten internen Zinsfuß berechnen enthalten. Andernfalls gibt <b>MIrr</b> den #DIV/0! Fehlerwert. </para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>
            <b>MIrr</b> verwendet die Reihenfolge der Werte, um die Reihenfolge der Cashflows interpretiert werden. Achten Sie darauf, dass Ihre Zahlung und Einnahmewerte in der gewünschten Reihenfolge und mit den richtigen Zeichen (positive Werte für die gezahlten empfangen, negative Werte für die gezahlten bezahlt) eingeben. </para>
          <para>Wenn n die Anzahl der Cashflows in Werten ist, invsatz Investition entspricht und reinvsatz Reinvestition entspricht, lautet die Formel für <b>MIrr</b> : </para>
          <para>Abbildung 1: Formel für MIrr-Methode</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MMult">
      <MemberSignature Language="C#" Value="public object MMult (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MMult([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MMult(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MMult (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MMult(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16549)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrix1, Matrix2 – die Matrizen, die Sie multiplizieren möchten.</param>
        <param name="Arg2">Matrix1, Matrix2 – die Matrizen, die Sie multiplizieren möchten.</param>
        <summary>Gibt das Produkt zweier Matrizen zurück. Das Ergebnis ist eine Matrix, die dieselbe Anzahl von Zeilen wie Matrix1 und dieselbe Anzahl von Spalten wie Matrix2 hat.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Anzahl der Spalten von Matrix1 muss mit der Anzahl der Zeilen von Matrix2 übereinstimmen, und beide Matrizen dürfen nur Zahlen enthalten.</para>
          <para>Matrix1 und Matrix2 können als Zellbereiche, Matrixkonstanten oder Bezüge angegeben sein.</para>
          <para>
            <b>MMult</b> gibt die #VALUE! Fehler beim: </para>
          <para>Zellen sind leer oder enthalten Text.</para>
          <para>Die Anzahl der Spalten in Matrix1 und die Anzahl der Zeilen in Matrix2 ist nicht identisch.</para>
          <para>Die Größe der sich daraus ergebenden Matrix ist größer oder gleich einer Gesamtsumme von 5.461 Zellen.</para>
          <para>Die sich aus der Multiplikation zweier Matrizen B und C ergebende Matrix A sieht wie folgt aus: 

 </para>
          <para>Abbildung 1: Ergebende Matrix eine der Multiplikation zweier Matrizen b und c</para>
          <para></para>
          <para></para>
          <para>wobei i die Zeilennummer und j die Spaltennummer ist.</para>
          <para>Formeln, die einen Array zurückgeben, müssen als Arrayformel eingegeben werden.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public double Mode (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16714)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – 1 bis 30 Argumente, für die Sie das harmonische Mittel berechnen möchten. Anstelle der durch Semikolons getrennten Argumente können Sie auch ein Array oder einen Bezug auf ein Array verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den häufigsten Wert in einem Array oder Datenbereich zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Diese Funktion wurde, kann die Verbesserte Genauigkeit bereitstellen und besser widerzuspiegeln, deren Namen ihrer Verwendung, durch eine oder mehrere neue Funktionen ersetzt. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu den neuen Funktionen finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Methoden.</para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen sein.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert. Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Enthält das Dataset keine mehrfach vorkommenden Datenpunkte, gibt <b>Mode</b> den Fehlerwert #n/a zurück.</para>
          <para>
            <b>Hinweis</b>: die <b>Mode</b> -Funktion gibt zentralen Tendenz der Speicherort des Mittelpunkts des einer Gruppe von Zahlen in einer statistischen Verteilung ist. Die drei sind die meisten gemeinsamen zentrale Tendenz:</para>
          <list type="bullet">
            <item>
              <description>Mittelwert. Dies ist das arithmetische Mittel, das berechnet wird, indem Zahlen addiert werden und die Summe dann durch die Anzahl der Summanden geteilt wird. Der Mittelwert von 2, 3, 3, 5, 7 und 10 beträgt beispielsweise 30 geteilt durch 6, also 5.</description>
            </item>
            <item>
              <description>Medianwert. Dies ist die mittlere Zahl in einer Gruppe von Zahlen. Dies bedeutet, dass die Hälfte der Zahlen größer als der Median und die Hälfte der Zahlen kleiner als der Median ist. Der Median von 2, 3, 3, 5, 7 und 10 ist beispielsweise 4.</description>
            </item>
            <item>
              <description>Modalwert. Dies ist die Zahl, die in einer Gruppe von Zahlen am häufigsten vorkommt. Der Modalwert von 2, 3, 3, 5, 7 und 10 ist beispielsweise 3.</description>
            </item>
          </list>
          <para>Bei einer symmetrischen Verteilung in einer Gruppe von Zahlen sind diese drei Arten der zentralen Tendenz gleich. Bei einer nicht symmetrischen Verteilung in einer Gruppe von Zahlen können die Werte unterschiedlich sein.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Mult">
      <MemberSignature Language="C#" Value="public object Mode_Mult (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Mode_Mult([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Mult (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16881)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1 - das erste Zahlenargument, für die Sie den Modus berechnen möchten.</param>
        <param name="Arg2">Zahl2 bis Zahl30 - Zahlenargumente von 2 bis 30, für die Sie den Modus berechnen möchten. Sie können auch ein Array oder einen Bezug auf ein Array anstelle der durch Komma getrennten Argumente verwenden.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt ein vertikales Array mit den häufigsten Werten in einem Array oder Datenbereich zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen sein.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert. Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Enthält das Dataset keine mehrfach vorkommenden Datenpunkte, gibt <b>Mode.Mult</b> den Fehlerwert #n/a zurück.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Sngl">
      <MemberSignature Language="C#" Value="public double Mode_Sngl (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode_Sngl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Sngl (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16882)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2... - 1 bis 30 Argumente, für die Sie den Modus berechnen möchten. Sie können auch ein Array oder einen Bezug auf ein Array anstelle der durch Komma getrennten Argumente verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den häufigsten Wert in einem Array oder Datenbereich zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen sein.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert. Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Enthält das Dataset keine mehrfach vorkommenden Datenpunkte, gibt <b>Mode.sngl</b> den Fehlerwert #n/a zurück.</para>
          <para>
            <b>Hinweis</b>: der <b>Mode.sngl</b> -Funktion gibt zentralen Tendenz der Speicherort des Mittelpunkts des einer Gruppe von Zahlen in einer statistischen Verteilung ist. Die drei sind die meisten gemeinsamen zentrale Tendenz:</para>
          <list type="bullet">
            <item>
              <description>Durchschnittliche das arithmetische Mittel und wird durch Hinzufügen einer Gruppe von Zahlen, und klicken Sie dann Division durch die Anzahl der diese Nummern berechnet. Beispielsweise ist der Durchschnitt von 2, 3, 3, 5, 7 und 10 30 geteilt durch 6, 5. </description>
            </item>
            <item>
              <description>Median Wert einer Gruppe von Zahlen in der Mitte; d. h., Hälfte die Zahlen enthalten Werte, die größer als der Median sind, und die Hälfte die Zahlen enthalten Werte, die kleiner als der Median sind. Beispielsweise ist der Median von 2, 3, 3, 5, 7 und 10 4. </description>
            </item>
            <item>
              <description>Die am häufigsten auftretenden Zahl in einer Gruppe von Zahlen Modus. Beispielsweise ist der Modus 2, 3, 3, 5, 7 und 10 3.</description>
            </item>
          </list>
          <para>Bei einer symmetrischen Verteilung in einer Gruppe von Zahlen sind diese drei Arten der zentralen Tendenz gleich. Bei einer nicht symmetrischen Verteilung in einer Gruppe von Zahlen können die Werte unterschiedlich sein.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MRound">
      <MemberSignature Language="C#" Value="public double MRound (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MRound([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MRound(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MRound (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MRound(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16806)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – Der zu rundende Wert.</param>
        <param name="Arg2">Vielfaches – das Vielfache, auf das Sie Zahl runden möchten.</param>
        <summary>Gibt eine auf das gewünschte Vielfache gerundete Zahl zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>MRound</b> rundet Weg von NULL, wenn der Rest der Division von Zahl durch Vielfaches größer als oder gleich der Hälfte des Werts von mehreren ist.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiNomial">
      <MemberSignature Language="C#" Value="public double MultiNomial (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MultiNomial([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MultiNomial(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MultiNomial (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16858)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – 1 bis 29 Werte, deren Polynomialkoeffizienten Sie berechnen möchten.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den Polynominalkoeffizienten einer Gruppe von Zahlen zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>POLYNOMIAL</b> das #VALUE! Fehlerwert. </para>
          <para>Ist ein der Argumente kleiner als 0 (null) ist, gibt <b>POLYNOMIAL</b> das #NUM! Fehlerwert. </para>
          <para>Der Polynomialkoeffizient lautet wie folgt: 

 </para>
          <para>Abbildung 1: Gleichung für die MultiNomial-Methode</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Munit">
      <MemberSignature Language="C#" Value="public object Munit (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Munit([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Munit(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Munit (Arg1 As Double) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Munit(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16966)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ganze Zahl, die Dimension die Einheit Matrix, die Sie zurückgeben möchten.</param>
        <summary>Gibt die Matrix Einheit für die angegebene Dimension zurück.</summary>
        <returns>
          <b>VARIANT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinom_Dist">
      <MemberSignature Language="C#" Value="public double NegBinom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16922)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl_Misserfolge - Die Anzahl der Misserfolge.</param>
        <param name="Arg2">Zahl_Erfolge - Die Anzahl der Erfolge.</param>
        <param name="Arg3">Erfolgswahrsch - Die Wahrscheinlichkeit eines Erfolgs.</param>
        <param name="Arg4">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn kumulative <b>true festgelegt</b>ist, <b>gibt Negbinom.dist</b> Wert der Verteilungsfunktion; Wenn <b>false</b>, die Wahrscheinlichkeitswert der Funktion zurückgegeben.</param>
        <summary>Gibt das negative Binomialverteilung zurück. <b>Negbinom.dist</b> gibt die Wahrscheinlichkeit, dass es ungünstigen den Erfolg Zahl_Erfolge werden wird, wenn die Konstante Wahrscheinlichkeit eines Erfolgs Erfolgswahrsch ist. Diese Funktion ähnelt Wahrscheinlichkeiten einer binomialverteilten Zufallsvariablen, außer dass die Anzahl der Erfolge festgelegt ist und die Anzahl der Versuche ist die Variable. Wie der Binomialverteilung sind Versuche angenommen, dass Sie unabhängig sein.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Beispielsweise müssen Sie 10 Personen mit hervorragende Ansätze zu finden, und wissen Sie, dass die Wahrscheinlichkeit, dass ein Kandidat diese 0,3 ist. <b>Negbinom.dist</b> berechnet die Wahrscheinlichkeit, dass Sie eine bestimmte Anzahl der unvollständigen Kandidaten befragen, bevor alle 10 Kandidaten: </para>
          <para>Zahl_Misserfolge und Zahl_Erfolge werden zu ganzen Zahlen gekürzt, indem ihre Nachkommastellen abgeschnitten werden.</para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>Negbinom.dist</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Erfolgswahrsch &lt; 0 oder Wahrsch &gt; 1, gibt <b>Negbinom.dist</b> das #NUM zurück! Fehlerwert. </para>
          <para>Wenn Zahl_Misserfolge &lt; 0 oder Zahl_Erfolge &lt; 1, gibt <b>Negbinom.dist</b> das #NUM zurück! Fehlerwert. </para>
          <para>Die Formel einer negativen Binomialverteilung lautet: 

 </para>
          <para>Abbildung 1: Gleichung für die negativen Binomialverteilung</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>X ist gleich Zahl_Misserfolge, R ist gleich Zahl_Erfolge, und p ist gleich Erfolgswahrsch.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinomDist">
      <MemberSignature Language="C#" Value="public double NegBinomDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinomDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinomDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16676)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl_Misserfolge - Die Anzahl der Misserfolge.</param>
        <param name="Arg2">Zahl_Erfolge - Die Anzahl der Erfolge.</param>
        <param name="Arg3">Erfolgswahrsch - Die Wahrscheinlichkeit eines Erfolgs.</param>
        <summary>Gibt das negative Binomialverteilung zurück. NegBinomDist gibt die Wahrscheinlichkeit, dass es ungünstigen den Erfolg Zahl_Erfolge werden wird, wenn die Konstante Wahrscheinlichkeit eines Erfolgs Erfolgswahrsch ist. Diese Funktion ähnelt Wahrscheinlichkeiten einer binomialverteilten Zufallsvariablen, außer dass die Anzahl der Erfolge festgelegt ist und die Anzahl der Versuche ist die Variable. Wie der Binomialverteilung sind Versuche angenommen, dass Sie unabhängig sein.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Diese Funktion wurde, kann die Verbesserte Genauigkeit bereitstellen und besser widerzuspiegeln, deren Namen ihrer Verwendung, durch eine oder mehrere neue Funktionen ersetzt. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> Methode.</para>
          <para>Beispielsweise müssen Sie 10 Personen mit hervorragende Ansätze zu finden, und wissen Sie, dass die Wahrscheinlichkeit, dass ein Kandidat diese 0,3 ist. <b>NegBinomDist</b> berechnet die Wahrscheinlichkeit, dass Sie eine bestimmte Anzahl der unvollständigen Kandidaten befragen, bevor alle 10 Kandidaten. </para>
          <para>Zahl_Misserfolge und Zahl_Erfolge werden zu ganzen Zahlen gekürzt, indem ihre Nachkommastellen abgeschnitten werden.</para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>NegBinomDist</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Erfolgswahrsch &lt; 0 oder Wahrsch &gt; 1, <b>gibt NegBinomDist</b> das #NUM zurückgibt! Fehlerwert. </para>
          <para>Wenn Zahl_Misserfolge &lt; 0 oder Zahl_Erfolge &lt; 1, <b>gibt NegBinomDist</b> das #NUM zurückgibt! Fehlerwert. </para>
          <para>Die Formel einer negativen Binomialverteilung lautet: 

 </para>
          <para>Abbildung 1: Gleichung für die negativen Binomialverteilung</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>X ist gleich Zahl_Misserfolge, R ist gleich Zahl_Erfolge, und p ist gleich Erfolgswahrsch.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays">
      <MemberSignature Language="C#" Value="public double NetworkDays (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16856)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ausgangsdatum - ein Datum, das das Anfangsdatum darstellt.</param>
        <param name="Arg2">Enddatum - ein Datum, das das Enddatum darstellt.</param>
        <param name="Arg3">Freie_Tage - ein optionaler Bereich mit einem oder mehreren Datumswerten, die aus dem Arbeitskalender ausgeschlossen werden sollen, beispielsweise landesweite und bundeslandspezifische Feiertage sowie bewegliche Feiertage. Bei dem Bereich kann es sich entweder um einen Zellbereich, der die Datumsangaben enthält, oder um eine Matrixkonstante der fortlaufenden Zahlen handeln, die die Datumsangaben darstellen.</param>
        <summary>Gibt die Anzahl der Arbeitstage zwischen Ausgangsdatum und Enddatum zurück. Arbeitstage schließen Wochenenden und Feiertage angegeben sind. Verwendung <b>gibt NetworkDays</b> mitarbeitervergütungen berechnet, die fällig basierend auf der Anzahl der Tage, die während eines bestimmten Ausdrucks erfolgreich war.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Wenn ein der Argumente kein gültiges Datum vorliegt, gibt <b>NetworkDays</b> den #VALUE! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays_Intl">
      <MemberSignature Language="C#" Value="public double NetworkDays_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16904)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ausgangsdatum - das Startdatum für das ist der Unterschied berechnet werden. Ausgangsdatum kann, oder später ist als das Enddatum einer älteren Version als identisch sein.</param>
        <param name="Arg2">Enddatum – das Enddatum für das ist der Unterschied berechnet werden. Ausgangsdatum kann, oder später ist als das Enddatum einer älteren Version als identisch sein.</param>
        <param name="Arg3">Wochenende – gibt an, die Wochentage, die Wochentage und sind nicht in die Anzahl der Arbeitstage zwischen Ausgangsdatum und Enddatum enthalten. Wochenende ist ein wochenendnummer oder eine Zeichenfolge, die beim Auftreten von Wochenenden angibt.</param>
        <param name="Arg4">Feiertage – eine optionale Gruppe von einer oder mehreren Datumsangaben, die aus dem Kalender Arbeitstag ausgeschlossen werden sollen. Feiertage ist ein Bereich von Zellen, die die Daten enthalten, oder eine Arraykonstante der seriellen Werte, die die Datumsangaben darstellen. Die Reihenfolge der Datumsangaben oder serielle Werte Feiertage kann beliebige sein.</param>
        <summary>Gibt die Anzahl ganzer Arbeitstage zwischen zwei Datumswerten mithilfe von Parametern zurück, um anzugeben, welche bzw. wie viele Tage Wochenendtage sind. Wochenendtage und Tage, die als freie Tage angegeben sind, gelten nicht als Arbeitstage.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Ausgangsdatum hinter Enddatum liegt, ist der Rückgabewert negativ, und der Wert entspricht der Anzahl ganzer Arbeitstage.</para>
          <para>Wenn Ausgangsdatum außerhalb des Bereichs für den aktuellen datumsbasiswert ist, gibt <b>gibt NETWORKDAYS.Intl</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Enddatum außerhalb des Bereichs für den aktuellen datumsbasiswert ist, gibt <b>gibt NETWORKDAYS.Intl</b> den #NUM! Fehlerwert. </para>
          <para>Wenn eine Zeichenfolge in wochenendeeine Unzulässige Länge hat oder unzulässige Zeichen enthält, gibt <b>gibt NETWORKDAYS.Intl</b> den #VALUE! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nominal">
      <MemberSignature Language="C#" Value="public double Nominal (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Nominal([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Nominal(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Nominal (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Nominal(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16829)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Effektiver_Zins – die Effektivverzinsung.</param>
        <param name="Arg2">Perioden – Die Anzahl der Zinszahlungen pro Jahr.</param>
        <summary>Gibt die jährliche Nominalverzinsung zurück, ausgehend vom effektiven Zinssatz sowie der Anzahl der Verzinsungsperioden innerhalb eines Jahrs.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Perioden wird auf eine ganze Zahl gekürzt.</para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>Nominal</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Effektiver_Zins ≤ 0 oder Perioden &lt; 1, <b>Nominal</b> gibt das #NUM! Fehlerwert. </para>
          <para>
            <b>Nominal</b> bezieht sich auf die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" /> wie in der folgenden Formel dargestellt: </para>
          <para>Abbildung 1: Formel</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Dist">
      <MemberSignature Language="C#" Value="public double Norm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16883)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - Der Wert, dessen Verteilung bestimmt werden soll.</param>
        <param name="Arg2">Mittelwert - Das arithmetisches Mittel der Verteilung.</param>
        <param name="Arg3">Standabwn - Die Standardabweichung der Verteilung.</param>
        <param name="Arg4">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn kumulative <b>true festgelegt</b>ist, <b>gibt Norm.dist</b> Wert der Verteilungsfunktion; Wenn <b>false</b>, die Wahrscheinlichkeitsfunktion zurückgegeben.</param>
        <summary>Gibt die Normalverteilung für den angegebenen Mittelwert und die angegebene Standardabweichung zurück. Diese Funktion hat viele Anwendungsgebiete innerhalb der Statistik, so unter anderem auch zum Testen von Hypothesen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Ist Mittelwert oder Standabwn nicht numerisch, gibt <b>Norm.dist</b> den #VALUE! Fehlerwert. </para>
          <para>Ist Standabwn ≤ 0, <b>gibt Norm.dist</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Ist Mittelwert = 0, Standabwn = 1, und kumuliert = <b>true</b>, <b>gibt Norm.dist</b> die standardnormalverteilung gibt <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />. </para>
          <para>Die Formel für die normale Dichtefunktion (kumulativen = <b>false</b>) ist: </para>
          <para>Abbildung 1: Gleichung für die normalverteilung</para>
          <para></para>
          <para></para>
          <para>Wenn kumuliert = <b>true</b>; die Formel das Integral von der negativen Unendlichkeit bis x der angegebenen Formel ist.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Inv">
      <MemberSignature Language="C#" Value="public double Norm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16884)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Warsch - Eine der Normalverteilung zugeordnete Wahrscheinlichkeit.</param>
        <param name="Arg2">Mittelwert - Das arithmetisches Mittel der Verteilung.</param>
        <param name="Arg3">Standabwn - Die Standardabweichung der Verteilung.</param>
        <summary>Gibt die Quantile der Normalverteilung für den angegebenen Mittelwert und die angegebene Standardabweichung zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>Norm.Inv</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Wahrsch &lt;= 0 oder Wahrsch &gt;= 1, <b>gibt Norm.Inv</b> gibt das #NUM! Fehlerwert. </para>
          <para>Ist Standabwn ≤ 0, <b>gibt Norm.Inv</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Wenn Mittelwert = 0 und Standabwn = 1, <b>gibt Norm.Inv</b> verwendet die standardnormalverteilung (finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />).</para>
          <para>Für Wahrscheinlichkeit einen Wert angezeigt, sucht <b>gibt Norm.Inv</b> den Wert, gibt Norm.dist (X, Mittelwert, Standabwn, TRUE) = Wahrscheinlichkeit. Folglich Genauigkeit von <b>Norm.Inv</b> hängt von der Genauigkeit von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Dist">
      <MemberSignature Language="C#" Value="public double Norm_S_Dist (double Arg1, bool Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Dist([in]float64 Arg1, [in]bool Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Dist (Arg1 As Double, Arg2 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Dist(double Arg1, bool Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16923)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Z - Der Wert, dessen Verteilung bestimmt werden soll.</param>
        <param name="Arg2">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn kumulierten Wert <b>true</b>hat, <b>Norm.s.dist</b> Wert der Verteilungsfunktion; Wenn <b>false</b>, die Wahrscheinlichkeitsfunktion zurückgegeben.</param>
        <summary>Gibt Werte der Verteilungsfunktion einer standardnormalverteilten Zufallsvariablen zurück. Die Standardnormalverteilung hat den Mittelwert 0 und die Standardabweichung 1. Sie können diese Funktion anstelle einer Tabelle verwenden, in der Werte der Verteilungsfunktion der Standardnormalverteilung zusammengestellt sind.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn z nicht numerisch ist, gibt <b>Norm.s.dist</b> den #VALUE! Fehlerwert. </para>
          <para>Die Formel der Dichtefunktion der standardisierten Normalverteilung lautet: 

 </para>
          <para>Abbildung 1: Gleichung für den standardisierten normalverteilung</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Inv">
      <MemberSignature Language="C#" Value="public double Norm_S_Inv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Inv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Inv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Inv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16924)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Warsch - Eine der Normalverteilung zugeordnete Wahrscheinlichkeit.</param>
        <summary>Gibt Quantile der Standardnormalverteilung zurück. Die Standardnormalverteilung hat den Mittelwert 0 und die Standardabweichung 1.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Wahrscheinlichkeit nicht numerisch ist, gibt <b>Norm.s.Inv</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Wahrsch &lt; 0 oder Wahrsch &gt; 1, gibt <b>Norm.s.Inv</b> den #NUM zurück! Fehlerwert.</para>
          <para>Einem bestimmten <b>Norm.s.Inv</b> sucht den Wert Z solche, NORM_S_DIST(z) Wahrscheinlichkeit =. Folglich Genauigkeit von <b>Norm.s.Inv</b>hängt von der Genauigkeit von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />. <b>Norm.s.Inv</b> verwendet eine iterative Suche. Wenn die Suche nach 100 Iterationen nicht zusammengeführt wurde, gibt die Funktion den Fehlerwert #n/a zurück.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NormDist">
      <MemberSignature Language="C#" Value="public double NormDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16677)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x – der Wert, dessen Wahrscheinlichkeit Sie berechnen möchten.</param>
        <param name="Arg2">Mittelwert – das arithmetische Mittel der Verteilung.</param>
        <param name="Arg3">Standabwn – die Standardabweichung der Verteilung.</param>
        <param name="Arg4">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn kumulative <b>true festgelegt</b>ist, <b>gibt NormDist</b> gibt Werte die Verteilungsfunktion; Wenn <b>false</b>, die Wahrscheinlichkeitsfunktion zurückgegeben.</param>
        <summary>Gibt die Normalverteilung für den angegebenen Mittelwert und die angegebene Standardabweichung zurück. Diese Funktion hat sehr viele Anwendungsgebiete innerhalb der Statistik, so unter anderem auch zum Testen von Hypothesen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> Methode.</para>
          <para>Ist Mittelwert oder Standabwn nicht numerisch, gibt <b>NormDist</b> den #VALUE! Fehlerwert. </para>
          <para>Ist Standabwn ≤ 0, <b>gibt NormDist</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Ist Mittelwert = 0, Standabwn = 1, und kumuliert = <b>true</b>, <b>gibt NormDist</b> gibt die standardnormalverteilung, <b>gibt NormDist</b>zurück. </para>
          <para>Die Formel für die normale Dichtefunktion (kumulativen = <b>false</b>) ist: </para>
          <para>Abbildung 1: Gleichung für die normalverteilung</para>
          <para></para>
          <para></para>
          <para>Wenn kumuliert = <b>true</b>; die Formel das Integral von der negativen Unendlichkeit bis x der angegebenen Formel ist.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NormInv">
      <MemberSignature Language="C#" Value="public double NormInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16679)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrsch – die zur Normalverteilung gehörige Wahrscheinlichkeit.</param>
        <param name="Arg2">Mittelwert – das arithmetische Mittel der Verteilung.</param>
        <param name="Arg3">Standabwn – die Standardabweichung der Verteilung.</param>
        <summary>Gibt die Quantile der Normalverteilung für den angegebenen Mittelwert und die angegebene Standardabweichung zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" /> Methode.</para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>NormInv</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Wahrsch &lt; 0 oder Wahrsch &gt; 1, gibt <b>NormInv</b> das #NUM zurück! Fehlerwert. </para>
          <para>Ist Standabwn ≤ 0, <b>gibt NormInv</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Wenn Mittelwert = 0 und Standabwn = 1, <b>gibt NormInv</b> verwendet die standardnormalverteilung (finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" />). </para>
          <para>Einem bestimmten sucht <b>NormInv</b> diesen Wert x, so dass NORMVERT (X, Mittelwert, Standabwn, TRUE) = Wahrscheinlichkeit. Daher hängt die Genauigkeit von <b>NormInv</b> von Genauigkeit von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" />. <b>NormInv</b> verwendet der Suche iterativ vor. Wenn die Suche nach 100 Iterationen nicht zusammengeführt wurde, gibt die Funktion den Fehlerwert #n/a zurück.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSDist">
      <MemberSignature Language="C#" Value="public double NormSDist (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSDist([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSDist (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSDist(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16678)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">z – der Wert, dessen Wahrscheinlichkeit Sie berechnen möchten.</param>
        <summary>Gibt Werte der Verteilungsfunktion einer standardnormalverteilten Zufallsvariablen zurück. Die Standardnormalverteilung hat den Mittelwert 0 und die Standardabweichung 1. Sie können diese Funktion anstelle einer Tabelle verwenden, in der Werte der Verteilungsfunktion der Standardnormalverteilung zusammengestellt sind.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> Methode.</para>
          <para>Ist z nicht numerisch, gibt <b>NormSDist</b> den #VALUE! Fehlerwert. </para>
          <para>Die Formel der Dichtefunktion der standardisierten Normalverteilung lautet: 

 </para>
          <para>Abbildung 1: Gleichung für den standardisierten normalverteilung</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSInv">
      <MemberSignature Language="C#" Value="public double NormSInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16680)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrsch – die zur Normalverteilung gehörige Wahrscheinlichkeit.</param>
        <summary>Gibt Quantile der Standardnormalverteilung zurück. Die Standardnormalverteilung hat einen Mittelwert von 0 und eine Standardabweichung von 1.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" /> Methode.</para>
          <para>Wenn Wahrscheinlichkeit nicht numerisch ist, gibt <b>STANDNORMINV</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Wahrsch &lt;= 0 oder Wahrsch &gt;= 1, <b>STANDNORMINV</b> gibt das #NUM! Fehlerwert.</para>
          <para>Einem bestimmten sucht <b>STANDNORMINV</b> diesen Wert Z solche, STANDNORMVERT Wahrsch =. Daher hängt die Genauigkeit von <b>NormSInv</b> von Genauigkeit von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" />.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public double NPer (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NPer([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NPer(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16442)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zins – der Zinssatz pro Zeitraum.</param>
        <param name="Arg2">Rmz – der Betrag (Annuität), der in jeder Periode gezahlt wird. Dieser Betrag kann sich während der Laufzeit nicht ändern. Üblicherweise umfasst Rmz Tilgung und Zinsen, nicht jedoch sonstige Gebühren oder Steuern. (Rmz = Regelmäßige Zahlung)</param>
        <param name="Arg3">Bw – der Barwert oder der heutige Gesamtwert einer Reihe zukünftiger Zahlungen.</param>
        <param name="Arg4">Zw – der zukünftige Wert oder der Kassenbestand, den Sie nach Tätigung der letzten Zahlung erzielen möchten. Wenn Zw ausgelassen wird, wird dafür der Wert 0 angenommen (der zukünftige Wert einer Anleihe beträgt beispielsweise 0).</param>
        <param name="Arg5">F – die Zahl 0 oder 1, die die Fälligkeit von Zahlungen angibt.</param>
        <summary>Gibt die Anzahl der Zahlungsperioden einer Investition zurück, die auf periodischen, gleich bleibenden Zahlungen sowie einem konstanten Zinssatz basiert.</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>Zum Ende des Zeitraums</description>
            </item>
            <item>
              <term>1</term>
              <description>Zum Anfang des Zeitraums</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Npv">
      <MemberSignature Language="C#" Value="public double Npv (double Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Npv([in]float64 Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Npv (Arg1 As Double, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16395)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zins – der Abzinsungsfaktor für die Dauer einer Periode.</param>
        <param name="Arg2">Wert1, Wert2, ... – 1 bis 29 Argumente, die den Auszahlungen und den Einzahlungen entsprechen.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den Nettobarwert (Kapitalwert) einer Investition auf der Basis eines Abzinsungsfaktors für eine Reihe periodischer Zahlungen zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wert1, Wert2, ... müssen als Zahlungsvorgänge in gleich bleibenden Zeitabständen erfolgen und sind jeweils am Ende einer Periode vorzunehmen.</para>
          <para>
            <b>NPV</b> verwendet die Reihenfolge der Wert1, Wert2,..., um die Reihenfolge der Cashflows interpretieren. Achten Sie darauf, dass Ihre Zahlung und Einnahmewerte in der richtigen Reihenfolge einzugeben. </para>
          <para>Es werden alle Argumente berücksichtigt, bei denen es sich um Zahlen, leere Zellen, Wahrheitswerte oder Zahlen in Textform handelt. Argumente, die Fehlerwerte oder Text enthalten, der sich nicht in eine Zahl umwandeln lässt, werden ignoriert.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Die <b>Npv</b> -Investition beginnt eine Periode vor dem Datum des Cashflows value1 und endet mit dem letzten Cashflow in der Liste. Die <b>Npv</b> -Berechnung basiert auf zukünftigen Cashflows. Wenn der erste Cashflow am Anfang des ersten Zinstermins auftritt, muss der erste Wert dem <b>Npv</b> -Ergebnis in der Liste der Argumente nicht enthalten hinzugefügt werden. Weitere Informationen finden Sie unter den folgenden Beispielen. </para>
          <para>Wenn n die Anzahl der Cashflows in der Liste mit Werten ist, wird die Formel für <b>NPV wie folgt</b> : </para>
          <para>Abbildung 1: Formel für Npv-Methode</para>
          <para></para>
          <para></para>
          <para>
            <b>NPV</b> ist vergleichbar mit der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> Funktion (Barwert). Der wesentliche Unterschied zwischen BW und <b>Npv</b> besteht, die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> Cashflows am Ende oder am Anfang des Zeitraums ermöglicht. Im Gegensatz zu Variablen <b>Npv</b> -Cashflow-Werte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> Cashflows während der Investition konstant sein muss. Informationen zu Annuitäten und Finanzfunktionen finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />. </para>
          <para>
            <b>NPV</b> ist auch im Zusammenhang mit der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /> Funktion (interner Zinsfuß). <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" />Gibt die Rate an, für die <b>Npv</b> NULL gleich: NBW(IKV(...);...) = 0.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberValue">
      <MemberSignature Language="C#" Value="public double NumberValue (string Arg1, string Arg2, string Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NumberValue([in]string Arg1, [in]string Arg2, [in]string Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NumberValue(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function NumberValue (Arg1 As String, Arg2 As String, Arg3 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NumberValue(System::String ^ Arg1, System::String ^ Arg2, System::String ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16969)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine Zeichenfolge, darstellt, die Nummer, die Sie konvertieren möchten.</param>
        <param name="Arg2">Das Zeichen als Dezimaltrennzeichen in der Zeichenfolge verwendet.</param>
        <param name="Arg3">Das Zeichen als Gruppentrennzeichen für die in der Zeichenfolge verwendet.</param>
        <summary>Konvertiert Text in Zahl in einer Weise unabhängig vom Gebietsschema.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Bin">
      <MemberSignature Language="C#" Value="public string Oct2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16774)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die oktale Zahl, die Sie umwandeln möchten. Zahl darf aus höchstens 10 Zeichen bestehen. Das signifikante Bit von Zahl ist das Vorzeichenbit (entspricht dem 30. Bit von rechts). Die anderen 29 Bits sind Betragsbits. Negative Zahlen werden mit der Zweierkomplementschreibweise dargestellt.</param>
        <param name="Arg2">Wert für stellen - die Anzahl der Zeichen angezeigt werden sollen. Wenn dies nicht angegeben ist, verwendet <b>Oct2Bin</b> die Mindestanzahl der Zeichen erforderlich. Wert für stellen eignet sich für den Rückgabewert mit führenden 0 (Nullen).</param>
        <summary>Wandelt eine oktale Zahl in eine binäre Zahl (Dualzahl) um.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Ist Zahl negativ, ignoriert <b>Oct2Bin</b> , und gibt eine 10 Zeichen bestehende Binärzahl zurück. </para>
          <para>Ist Zahl negativ, darf sie nicht kleiner als 7777777000 sein, und ist Zahl positiv, darf sie nicht größer als 777 sein.</para>
          <para>Ist Zahl keine zulässige oktale Zahl, gibt <b>Oct2Bin</b> den #NUM! Fehlerwert. </para>
          <para>Benötigt <b>Oct2Bin</b> mehr als Stellen Zeichen, gibt die Funktion die #NUM! Fehlerwert. </para>
          <para>Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn der Wert für stellen nicht numerisch ist, gibt <b>Oct2Bin</b> den #VALUE! Fehlerwert. </para>
          <para>Ist Stellen negativ, gibt <b>Oct2Bin</b> den #NUM! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Dec">
      <MemberSignature Language="C#" Value="public string Oct2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Oct2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16776)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die oktale Zahl, die umgewandelt werden soll. Zahl darf nicht mehr als 10 oktale Zeichen (30 Bits) enthalten. Das signifikanteste Bit von Zahl ist das Vorzeichenbit. Die verbleibenden 29 Bits sind Größenbits. Negative Zahlen werden in der Zweierkomplementschreibweise dargestellt.</param>
        <summary>Wandelt eine oktale Zahl in eine dezimale Zahl um.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Ist Zahl keine zulässige oktale Zahl, gibt <b>Oct2Dec</b> den #NUM! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Hex">
      <MemberSignature Language="C#" Value="public string Oct2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16775)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die oktale Zahl, die umgewandelt werden soll. Zahl darf nicht mehr als 10 oktale Zeichen (30 Bits) enthalten. Das signifikanteste Bit von Zahl ist das Vorzeichenbit. Die verbleibenden 29 Bits sind Größenbits. Negative Zahlen werden in der Zweierkomplementschreibweise dargestellt.</param>
        <param name="Arg2">Wert für stellen - die Anzahl der Zeichen angezeigt werden sollen. Wenn dies nicht angegeben ist, verwendet <b>Oct2Hex</b> die Mindestanzahl der Zeichen erforderlich. Wert für stellen eignet sich für den Rückgabewert mit führenden 0 (Nullen).</param>
        <summary>Wandelt eine oktale Zahl in eine hexadezimale Zahl um.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Ist Zahl negativ, ignoriert <b>Oct2Hex</b> , und gibt eine hexadezimale Zahl mit 10 zurück. </para>
          <para>Ist Zahl keine zulässige oktale Zahl, gibt <b>Oct2Hex</b> die #NUM! Fehlerwert. </para>
          <para>
            <b>Oct2Hex</b> benötigt mehr als Stellen Zeichen, gibt die Funktion die #NUM! Fehlerwert. </para>
          <para>Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn der Wert für stellen nicht numerisch ist, gibt <b>Oct2Hex</b> die #VALUE! Fehlerwert. </para>
          <para>Ist Stellen negativ, gibt <b>Oct2Hex</b> die #NUM! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Odd">
      <MemberSignature Language="C#" Value="public double Odd (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Odd([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Odd(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Odd (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Odd(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16682)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – Der zu rundende Wert.</param>
        <summary>Rundet eine Zahl auf die nächste ungerade ganze Zahl auf.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Zahl nicht numerisch ist, gibt <b>Ungerade</b> die #VALUE! Fehlerwert. </para>
          <para>Unabhängig vom Vorzeichen von Zahl wird ein Wert aufgerundet. Wenn es sich bei Zahl bereits um eine ungerade ganze Zahl handelt, erfolgt keine Rundung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFPrice">
      <MemberSignature Language="C#" Value="public double OddFPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16846)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Emission – das Datum der Wertpapieremission.</param>
        <param name="Arg4">Erster_Zinstermin – der erste Zinstermin des Wertpapiers.</param>
        <param name="Arg5">Zins – der Zinssatz des Wertpapiers.</param>
        <param name="Arg6">Rendite – die jährliche Rendite des Wertpapiers.</param>
        <param name="Arg7">Rückzahlung – der Rückkaufswert des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg8">Häufigkeit – die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2 für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg9">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt den Kurs pro 100 $ Nennwert eines Wertpapiers mit einem unregelmäßigen (kurzen oder langen) ersten Zinstermin zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Kupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Kupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Emission, Erster_Zinstermin und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung, Fälligkeit, Problem oder Erster_Zinstermin kein gültiges Datum angegeben ist, gibt <b>OddFPrice</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Rate &lt; 0 oder, wenn Rendite &lt; 0, <b>gibt OddFPrice</b> gibt das #NUM! Fehlerwert. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4, <b>gibt OddFPrice</b> das #NUM zurückgibt! Fehlerwert. </para>
          <para>Die folgende Bedingung Datum muss erfüllt sein; andernfalls gibt <b>OddFPrice</b> den #NUM! Fehlerwert: </para>
          <para>Fälligkeit &gt; Erster_Zinstermin &gt; Abrechnung &gt; Problem</para>
          <para></para>
          <para>
            <b>OddFPrice</b> rechnet wie folgt: ungerade kurzen ersten Zinstermin (kurz):</para>
          <para>Abbildung 1: Ungerade kurzen ersten Zinstermin (kurz)</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>A = Anzahl der Tage vom Anfang des Zinstermins bis zum Abrechnungstermin (aufgelaufene Tage).</para>
          <para>DSC = Anzahl der Tage vom Abrechnungstermin an den nächsten Zinstermin.</para>
          <para>DFC = Anzahl der Tage vom Anfang des der ungerade ersten Zinstermin (kurz), das Datum des ersten Zinstermins.</para>
          <para>E = Anzahl der Tage der Zinsperiode.</para>
          <para>N = Anzahl der zwischen dem Abrechnungstermin und dem Fälligkeitstermin fällig sind. (Wenn diese Nummer Bruchs enthält, wird es auf die nächste ganze Zahl ausgelöst.)</para>
          <para>Kurs bei unregelmäßigem ersten Zinstermin (kurz):</para>
          <para>Abbildung 2: Kurs bei unregelmäßigem ersten Zinstermin (kurz)</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>Ai = Anzahl von Tagen ab dem Anfang der i-te oder letzte Periode innerhalb ungerader Periode fiktiv.</para>
          <para>DCi = Anzahl von Tagen aus dem Anfangsdatum (oder Emissionsdatum) zum ersten fiktiv (ich = 1) oder die Anzahl der Tage in fiktiv (ich = 2,..., i = NC).</para>
          <para>DSC = Anzahl der Tage von Abrechnung bis zum nächsten Zinstermin.</para>
          <para>E = Anzahl der Tage Zinsperiode.</para>
          <para>N = Anzahl der Zinstermine zwischen dem ersten Zinstermin reale und Rückzahlung Datum. (Wenn diese Nummer Bruchs enthält, wird es auf die nächste ganze Zahl ausgelöst.)</para>
          <para>NC = Anzahl der Zeiträume, fiktiv, die in ungerader Periode passen. (Wenn diese Nummer Bruchs enthält, wird es auf die nächste ganze Zahl ausgelöst.)</para>
          <para>NLi = normalen Länge der vollständigen i-te oder letzten fiktiv ungerade binnen weniger Tage.</para>
          <para>Nq = Anzahl der gesamten fiktiv Perioden zwischen Abrechnung und ersten Zinstermin (kurz).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFYield">
      <MemberSignature Language="C#" Value="public double OddFYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16847)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Emission – das Datum der Wertpapieremission.</param>
        <param name="Arg4">Erster_Zinstermin – der erste Zinstermin des Wertpapiers.</param>
        <param name="Arg5">Zins – der Zinssatz des Wertpapiers.</param>
        <param name="Arg6">Kurs – der Preis des Wertpapiers.</param>
        <param name="Arg7">Rückzahlung – der Rückkaufswert des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg8">Häufigkeit – die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2 für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg9">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt die Rendite eines Wertpapiers mit einem unregelmäßigen (kurzen oder langen) ersten Zinstermin zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Kupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Kupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Emission, Erster_Zinstermin und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung, Fälligkeit, Problem oder Erster_Zinstermin kein gültiges Datum angegeben ist, gibt <b>OddFYield</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Rate &lt; 0 oder Kurs ≤ 0, <b>gibt OddFYield</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4, <b>gibt OddFYield</b> das #NUM zurückgibt! Fehlerwert. </para>
          <para>Die folgende Bedingung Datum muss erfüllt sein; andernfalls gibt <b>OddFYield</b> den #NUM! Fehlerwert: </para>
          <para>Fälligkeit &gt; Erster_Zinstermin &gt; Abrechnung &gt; Problem</para>
          <para>Excel verwendet <b>OddFYield</b>berechnen. Diese Funktion verwendet die Newton-Methode auf Basis der Formel, die für die Funktion verwendet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />. Die Rendite wird bis zu 100 Iterationsschritten geändert, bis der Ungefährer Preis die Newton-ungefähr in der Preis ist. Finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> für die Formel, <b>gibt OddFYield</b> verwendet.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLPrice">
      <MemberSignature Language="C#" Value="public double OddLPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16844)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Letzter_Zinstermin – der letzte Zinstermin des Wertpapiers vor dem Fälligkeitstermin.</param>
        <param name="Arg4">Zins – der Zinssatz des Wertpapiers.</param>
        <param name="Arg5">Rendite – die jährliche Rendite des Wertpapiers.</param>
        <param name="Arg6">Rückzahlung – der Rückkaufswert des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg7">Häufigkeit – die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2 für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg8">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt den Kurs pro 100 $ Nennwert eines Wertpapiers mit einem unregelmäßigen letzten Zinstermin zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Kupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Kupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Letzter_Zinstermin und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung, Fälligkeit oder Letzter_Zinstermin kein gültiges Datum angegeben ist, gibt <b>OddLPrice</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Rate &lt; 0 oder, wenn Rendite &lt; 0, <b>gibt OddLPrice</b> gibt das #NUM! Fehlerwert. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4, <b>gibt OddLPrice</b> das #NUM zurückgibt! Fehlerwert. </para>
          <para>Die folgende Bedingung Datum muss erfüllt sein; andernfalls <b>gibt OddLPrice</b> den #NUM! Fehlerwert: </para>
          <para>Fälligkeit &gt; Abrechnung &gt; Letzter_Zinstermin</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLYield">
      <MemberSignature Language="C#" Value="public double OddLYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16845)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Letzter_Zinstermin – der letzte Zinstermin des Wertpapiers vor dem Fälligkeitstermin.</param>
        <param name="Arg4">Zins – der Zinssatz des Wertpapiers.</param>
        <param name="Arg5">Kurs – der Preis des Wertpapiers.</param>
        <param name="Arg6">Rückzahlung – der Rückkaufswert des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg7">Häufigkeit – die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2 für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg8">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt die Rendite eines Wertpapiers mit einem unregelmäßigen letzten Zinstermin unabhängig von der Dauer zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Kupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Kupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Letzter_Zinstermin und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung, Fälligkeit oder Letzter_Zinstermin kein gültiges Datum angegeben ist, gibt <b>OddLYield</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Rate &lt; 0 oder Kurs ≤ 0, <b>gibt OddLYield</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4, gibt <b>OddLYield</b> den #NUM zurück! Fehlerwert. </para>
          <para>Die folgende Bedingung Datum muss erfüllt sein; andernfalls gibt <b>OddLYield</b> den #NUM! Fehlerwert: </para>
          <para>Fälligkeit &gt; Abrechnung &gt; Letzter_Zinstermin </para>
          <para>
            <b>OddLYield</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Gleichung für die OddLYield-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>Ai = Anzahl der aufgelaufenen Tage der i-te oder letzte, Fiktiv-Periode innerhalb ungerader Periode vorwärts gezählt ab dem letzten Zinstermin vor dem Fälligkeitstermin.</para>
          <para>DCi = Anzahl der Tage, die in der i-te oder letzte, Fiktiv-Periode gezählt werden, wie durch die Länge des tatsächlichen Zinstermins bis getrennt.</para>
          <para>NC = Anzahl der Zeiträume, fiktiv, die in ungerader Periode; passen Wenn diese Nummer Bruchs enthält, wird es auf die nächste ganze Zahl ausgelöst werden.</para>
          <para>NLi = normalen Länge in Tagen der i-te oder letzten fiktiv innerhalb einer ungeraden Zinsperiode.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public bool Or (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Or([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Or(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Or (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16421)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Logical1, logical2,... – 1 bis 30 Bedingungen zu, die testenden kann <b>true</b> oder <b>false</b>sein.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt <b>true,</b> Wenn ein Argument <b>true</b>ist; Gibt <b>false</b> zurück, wenn alle Argumente <b>false</b>sind.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Argumente müssen Wahrheitswerte wie <b>true</b> oder <b>false</b>oder in Arrays oder Bezüge, die Wahrheitswerte enthalten ergeben. </para>
          <para>Wenn ein Array- oder Bezugsargument Text oder leere Zellen enthält, werden diese Werte ignoriert.</para>
          <para>Wenn der angegebene Bereich keine Wahrheitswerte enthält, gibt <b>oder</b> die #VALUE! Fehlerwert. </para>
          <para>Eine Arrayformel <b>oder</b> können Sie überprüfen, ob ein bestimmter Wert in einem Array vorhanden. Drücken Sie STRG + UMSCHALT + EINGABETASTE, um die Eingabe einer Matrixformel.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt das übergeordnete Objekt für das angegebene Objekt zurück. Schreibgeschützt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PDuration">
      <MemberSignature Language="C#" Value="public double PDuration (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PDuration([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PDuration(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function PDuration (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double PDuration(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16954)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Zinssatz pro Zeitraum.</param>
        <param name="Arg2">Barwert der Investition.</param>
        <param name="Arg3">Gewünschte zukünftigen Wert der Investition.</param>
        <summary>Gibt die Anzahl der Perioden benötigt, um einen angegebenen Wert zu erreichen einer Investition zurück.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pearson">
      <MemberSignature Language="C#" Value="public double Pearson (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pearson([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pearson (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pearson(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16696)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 – eine Reihe unabhängiger Werte.</param>
        <param name="Arg2">Array2 – eine Reihe abhängiger Werte.</param>
        <summary>Gibt den Pearsonschen Korrelationskoeffizienten r zurück. Dieser Koeffizient ist ein dimensionsloser Index mit dem Wertebereich -1,0 = r = 1,0 und ein Maß dafür, inwieweit zwischen zwei Datensätzen eine lineare Abhängigkeit besteht.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Argumente müssen Zahlen oder Namen, Arraykonstanten oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn array1 und array2 leer sind oder eine unterschiedliche Anzahl von Datenpunkten verfügen, gibt <b>Pearson</b> den Fehlerwert #n/a zurück. </para>
          <para>Die Formel für den Pearsonschen Korrelationskoeffizienten r lautet: 

 </para>
          <para>Abbildung 1: Pearsonschen Korrelationskoeffizienten</para>
          <para></para>
          <para></para>
          <para>Dabei sind x und y die Stichprobenmittelwerte AVERAGE(Array1) und AVERAGE(Array2).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile">
      <MemberSignature Language="C#" Value="public double Percentile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16712)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrix ist eine Matrix oder ein Datenbereich, die/der die relative Lage der Daten beschreibt.</param>
        <param name="Arg2">Alpha – der Perzentilwert aus dem geschlossenen Intervall von 0 bis 1.</param>
        <summary>Gibt das Alpha-Quantil einer Gruppe von Daten zurück. Mithilfe dieser Funktion können Sie einen Akzeptanzschwellenwert festlegen. So könnten Sie beispielsweise entscheiden, dass nur Kandidaten untersucht werden, deren Prüfungsergebnisse oberhalb des 90 %-Quantils liegen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu den neuen Funktionen finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" /> Methode. </para>
          <para>Wenn Array leer ist, gibt <b>Quantil</b> das #NUM! Fehlerwert. </para>
          <para>Ist k nicht numerisch, gibt <b>Quantil</b> den #VALUE! Fehlerwert. </para>
          <para>Ist k &lt; 0 oder ist k &gt; 1, gibt <b>Quantil</b> das #NUM zurück! Fehlerwert. </para>
          <para>Ist k kein Vielfaches von 1 / (n - 1), interpoliert <b>Percentile</b> , um den Wert des k-Quantils zu bestimmen.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Exc">
      <MemberSignature Language="C#" Value="public double Percentile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16885)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - Das Array oder der Datenbereich, das/der die relative Lage bestimmt.</param>
        <param name="Arg2">K - der Prozentwert im Bereich von 0.. 1 exklusive.</param>
        <summary>Gibt das k-Quantil von Werten in einem Bereich zurück, wobei k im Bereich von 0..1 ausschließlich liegt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Array leer ist, gibt <b>PERCENTILE.EXC</b> den #NUM! Fehlerwert </para>
          <para>Ist k nicht numerisch, gibt <b>PERCENTILE.EXC</b> den #VALUE! Fehlerwert. </para>
          <para>Ist k ≤ 0 oder k ≥ 1, <b>gibt PERCENTILE.EXC</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Ist k kein Vielfaches von 1 / (n - 1), interpoliert <b>PERCENTILE.EXC</b> , um den Wert des k-Quantils zu bestimmen. </para>
          <para>
            <b>PERCENTILE.EXC</b> wird interpoliert, wenn der Wert für die angegebene Quantil zwischen zwei Werte im Array liegt. Wenn es für die Quantil k angegeben, interpoliert kann nicht gibt Excel #NUM zurück! Fehler.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Inc">
      <MemberSignature Language="C#" Value="public double Percentile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16886)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - Das Array oder der Datenbereich, das/der die relative Lage bestimmt.</param>
        <param name="Arg2">k - Der Prozentwert im Intervall von 0 bis 1 einschließlich.</param>
        <summary>Gibt das k-Quantil von Werten in einem Bereich zurück. Mithilfe dieser Funktion können Sie einen Akzeptanzschwellenwert festlegen. So könnten Sie beispielsweise nur Kandidaten untersuchen, deren Prüfungsergebnisse oberhalb des 90 %-Quantils liegen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Array leer ist, gibt <b>PERCENTILE.Inc</b> den #NUM! Fehlerwert. </para>
          <para>Ist k nicht numerisch, gibt <b>PERCENTILE.Inc</b> den #VALUE! Fehlerwert. </para>
          <para>Ist k &lt; 0 oder ist k &gt; 1, <b>gibt PERCENTILE.Inc</b> den #NUM zurückgibt! Fehlerwert. </para>
          <para>Ist k kein Vielfaches von 1 / (n - 1), interpoliert <b>PERCENTILE.Inc</b> , um den Wert des k-Quantils zu bestimmen.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank">
      <MemberSignature Language="C#" Value="public double PercentRank (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16713)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrix – die Matrix oder der Bereich numerischer Daten, die/der die relative Position der Daten beschreibt.</param>
        <param name="Arg2">x – der Wert, dessen Rang Sie bestimmen möchten.</param>
        <param name="Arg3">Vielfache - ein optionaler Wert, der die Anzahl der Nachkommastellen für den zurückgegebenen Prozentwert identifiziert. Wenn Length angegeben, verwendet <b>QUANTILSRANG</b> drei Ziffern (0.xxx).</param>
        <summary>Gibt den Rang eines Werts in einem Dataset als Prozentsatz des Datasets zurück. Diese Funktion kann verwendet werden, für die relative Lage eines Werts in einem DataSet ausgewertet werden soll. <b>PercentRank</b> können Sie beispielsweise die Platzierung in einer Eignungsprüfung Score zwischen alle Ergebnisse für den Test ausgewertet werden soll.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu den neuen Funktionen finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" /> Methoden.</para>
          <para>Wenn Array leer ist, gibt <b>PercentRank</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Genauigkeit &lt; 1, gibt <b>PercentRank</b> das #NUM zurück! Fehlerwert. </para>
          <para>Wenn x nicht mit einer der Werte im Array übereinstimmt, interpoliert <b>PercentRank</b> um Quantilsrang zu bestimmen der richtigen.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Exc">
      <MemberSignature Language="C#" Value="public double PercentRank_Exc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Exc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Exc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16887)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - Das Array oder der Datenbereich mit numerischen Werten, das/der die relative Lage bestimmt.</param>
        <param name="Arg2">X - Der Wert, dessen Rang Sie bestimmen möchten.</param>
        <param name="Arg3">Vielfache - eines Werts, der die Anzahl der Nachkommastellen für den zurückgegebenen Prozentwert identifiziert. Wenn Length angegeben, wird <b>PERCENTRANK.EXC</b> drei Ziffern (0.xxx) verwendet.</param>
        <summary>Gibt den prozentualen Rang eines Werts in einem Dataset als Prozentsatz des Datasets (0..1 ausschließlich) zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Array leer ist, gibt <b>PERCENTRANK.EXC</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Genauigkeit &lt; 1, gibt <b>PERCENTRANK.EXC</b> das #NUM zurück! Fehlerwert. </para>
          <para>Wenn x nicht mit einer der Werte im Array übereinstimmt, interpoliert <b>PERCENTRANK.EXC</b> , um den richtigen Prozentsatz-Rang zurückzugeben.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Inc">
      <MemberSignature Language="C#" Value="public double PercentRank_Inc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Inc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Inc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16888)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - Das Array oder der Datenbereich mit numerischen Werten, das/der die relative Lage bestimmt.</param>
        <param name="Arg2">X - Der Wert, dessen Rang Sie bestimmen möchten.</param>
        <param name="Arg3">Vielfache - ein optionaler Wert, der die Anzahl der Nachkommastellen für den zurückgegebenen Prozentwert identifiziert. Wenn Length angegeben, wird <b>PERCENTRANK.Inc</b> drei Ziffern (0.xxx) verwendet.</param>
        <summary>Gibt den Rang eines Werts in einem Dataset als Prozentsatz (0.. 1 ausschließlich, inklusive) des Datensatzes zurück. Diese Funktion kann verwendet werden, für die relative Lage eines Werts in einem DataSet ausgewertet werden soll. Beispielsweise können Sie <b>PERCENTRANK.Inc</b> verwenden, für die Platzierung von einer Eignungsprüfung Score zwischen alle Ergebnisse für den Test ausgewertet werden soll.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Array leer ist, gibt <b>PERCENTRANK.Inc</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Genauigkeit &lt; 1, gibt <b>PERCENTRANK.Inc</b> das #NUM zurück! Fehlerwert. </para>
          <para>Wenn x nicht mit einer der Werte im Array übereinstimmt, interpoliert <b>PERCENTRANK.Inc</b> , um den richtigen Prozentsatz-Rang zurückzugeben.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Permut">
      <MemberSignature Language="C#" Value="public double Permut (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permut([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permut(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permut (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permut(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16683)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">n – eine ganze Zahl, die die Anzahl aller Elemente beschreibt.</param>
        <param name="Arg2">k – eine ganze Zahl, die angibt, aus wie vielen Elementen jede Variationsmöglichkeit bestehen soll.</param>
        <summary>Gibt die Anzahl der Möglichkeiten zurück, um k Elemente aus einer Menge von n Elementen ohne Zurücklegen zu ziehen. Eine Variation ist eine Menge von Elementen oder Ereignissen, deren interne Anordnung oder Reihenfolge relevant ist. Variationen unterscheiden sich von Kombinationen, für die die interne Anordnung nicht relevant ist. Verwenden Sie diese Funktion z. B. für die Berechnung von Wahrscheinlichkeiten bei Zahlenlotterien.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Beide Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn n oder k nicht numerisch ist, gibt <b>Permut</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Zahl ≤ 0 oder, wenn k &lt; 0, <b>gibt Permut</b> gibt das #NUM! Fehlerwert. </para>
          <para>Wenn Zahl &lt; k, gibt <b>Permut</b> das #NUM zurück! Fehlerwert. </para>
          <para>Die Formel zur Berechnung der Anzahl der Variationen lautet: 

 </para>
          <para>Abbildung 1: Gleichung für die Anzahl der Variationen</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Permutationa">
      <MemberSignature Language="C#" Value="public double Permutationa (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permutationa([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permutationa(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permutationa (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permutationa(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16951)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Gesamtanzahl der Objekte.</param>
        <param name="Arg2">Anzahl der Objekte in jede Variationsmöglichkeit bestehen soll.</param>
        <summary>Gibt die Anzahl der Variationen für eine bestimmte Anzahl von Objekten (mit Wiederholungsintervall), die aus der Gesamtzahl der Objekte ausgewählt werden kann.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phi">
      <MemberSignature Language="C#" Value="public double Phi (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Phi([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phi(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phi (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Phi(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16962)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Anzahl die Dichte an die standardnormalverteilung werden sollen.</param>
        <summary>Gibt den Wert der Dichtefunktion für eine standardnormalverteilung zurück.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetic">
      <MemberSignature Language="C#" Value="public string Phonetic (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Phonetic([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phonetic(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phonetic (Arg1 As Range) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Phonetic(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16744)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bezug – eine Textzeichenfolge oder ein Verweis auf eine einzelne Zelle bzw. einen Zellbereich, die bzw. der eine Furigana-Textzeichenfolge enthält.</param>
        <summary>Extrahiert die phonetischen (Furigana-) Zeichen aus einer Textzeichenfolge.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Ist Bezug ein Zellbereich, wird die Furigana-Textzeichenfolge in der linken oberen Zelle des Bereichs zurückgegeben. </para>
          <para>Ist Bezug ein Bereich nicht angrenzender Zellen, wird der Fehler #N/A zurückgegeben.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pi">
      <MemberSignature Language="C#" Value="public double Pi ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pi() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pi" />
      <MemberSignature Language="VB.NET" Value="Public Function Pi () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pi();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16403)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Wert pi zurück, die mathematische Konstante (3,14159265358979) mit einer Genauigkeit von 15 Stellen.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public double Pmt (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pmt(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16443)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zins – der Zinssatz pro Periode (Zahlungszeitraum).</param>
        <param name="Arg2">Zzr gibt an, über wie viele Perioden die jeweilige Annuität (Rente) gezahlt wird. (Zzr = Anzahl der Zahlungszeiträume)</param>
        <param name="Arg3">Bw ist der Barwert oder der Gesamtbetrag, den eine Reihe zukünftiger Zahlungen zum gegenwärtigen Zeitpunkt wert ist. Dieser Wert wird auch "Kreditbetrag" genannt. (Bw = Barwert)</param>
        <param name="Arg4">Zw – der zukünftige Wert (Endwert) oder der Kassenbestand, den Sie nach der letzten Zahlung erreicht haben möchten. Fehlt das Argument Zw, wird der Wert 0 (Null) angenommen, d. h., der Endwert eines Kredits ist gleich 0. (Zw = Zukünftiger Wert)</param>
        <param name="Arg5">F kann den Wert 0 oder 1 annehmen und gibt an, wann Zahlungen fällig sind. (F = Fälligkeit)</param>
        <summary>Berechnet die konstante Zahlung einer Annuität pro Periode, wobei konstante Zahlungen und ein konstanter Zinssatz vorausgesetzt werden.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Eine genauere Beschreibung der Argumente der <b>Pmt</b>, finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> Funktion.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>Zum Ende des Zeitraums</description>
            </item>
            <item>
              <term>1</term>
              <description>Zum Anfang des Zeitraums</description>
            </item>
          </list>
          <para>Zurückgegebene <b>RMZ</b> umfasst nur die Tilgung und die Zinsen, jedoch keine steuern, reservieren Zahlungen und Gebühren zurückgegebener. </para>
          <para>Stellen Sie sicher, dass Sie für Zins und Zzr zueinander passende Zeiteinheiten verwenden. Wenn Sie für einen Kredit mit vierjähriger Laufzeit und einem jährlichen Zinssatz von 12% monatliche Zahlungen leisten, müssen Sie für Zins 12%/12 und für Zzr 4*12 angeben. Wenn Sie für den gleichen Kredit jährliche Zahlungen leisten, müssen Sie für Zins 12 Prozent und für Zzr 4 angeben.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson">
      <MemberSignature Language="C#" Value="public double Poisson (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16684)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x – die Zahl der Fälle.</param>
        <param name="Arg2">Mittelwert – der erwartete Zahlenwert.</param>
        <param name="Arg3">Kumuliert – der Wahrheitswert, der den Typ der Funktion bestimmt. Ist Kumuliert TRUE, gibt POISSON den Wert der Verteilungsfunktion der jeweiligen Poissonverteilung zurück, also die Wahrscheinlichkeit, dass die Anzahl zufällig auftretender Ereignisse zwischen 0 und einschließlich x liegt. Ist Kumuliert FALSE, gibt POISSON den Wert der Wahrscheinlichkeitsfunktion zurück, also die Wahrscheinlichkeit, dass die Anzahl der Ereignisse genau x sein wird.</param>
        <summary>Gibt Wahrscheinlichkeiten einer poissonverteilten Zufallsvariablen zurück. Eine übliche Anwendung der Poissonverteilung ist die Modellierung der Anzahl der Ereignisse innerhalb eines bestimmten Zeitraums, beispielsweise die Anzahl der Bankkunden, die innerhalb einer Stunde an einem Geldautomaten eintreffen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" /> Methode.</para>
          <para>Ist x keine ganze Zahl, werden die Nachkommastellen abgeschnitten.</para>
          <para>Wenn x oder Mittelwert nicht numerisch, <b>gibt Poisson</b> gibt das #VALUE! Fehlerwert. </para>
          <para>Wenn x &lt; 0, <b>gibt Poisson</b> gibt das #NUM! Fehlerwert. </para>
          <para>Ist Mittelwert ≤ 0, <b>gibt Poisson</b> den #NUM #zahl! Fehlerwert. </para>
          <para>
            <b>POISSON</b> wird wie folgt berechnet. </para>
          <para>Für kumulative = <b>"false"</b>:</para>
          <para>Abbildung 1: Calcuation Kumuliert ist false</para>
          <para></para>
          <para></para>
          <para>Für kumulative = <b>true</b>:</para>
          <para>Abbildung 2: Calcuation kumuliert gilt</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson_Dist">
      <MemberSignature Language="C#" Value="public double Poisson_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16889)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - Die Anzahl der Fälle.</param>
        <param name="Arg2">Mittelwert - Der erwartete numerische Wert.</param>
        <param name="Arg3">Kumuliert – ein Wahrheitswert, der das Formular der zurückgegebene Verteilung bestimmt. Wenn kumulative <b>true festgelegt</b>ist, <b>gibt POISSON.dist</b> gibt die kumulative Poisson-Wahrscheinlichkeit, die die Anzahl der zufällig auftretender Ereignisse zwischen 0 (null) und einschließlich; X werden Wenn <b>false</b>, der Wahrscheinlichkeitsfunktion zurückgegeben wird, dass die Anzahl der Ereignisse genau x sein wird.</param>
        <summary>Gibt Wahrscheinlichkeiten einer poissonverteilten Zufallsvariablen zurück. Eine übliche Anwendung der Poissonverteilung ist die Modellierung der Anzahl der Ereignisse innerhalb eines bestimmten Zeitraums, beispielsweise die Anzahl der Bankkunden, die innerhalb einer Stunde an einem Geldautomaten eintreffen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Ist x keine ganze Zahl, werden die Nachkommastellen abgeschnitten.</para>
          <para>Wenn x oder Mittelwert nicht numerisch ist, <b>gibt POISSON.dist</b> gibt die #VALUE! Fehlerwert. </para>
          <para>Wenn x &lt; 0, <b>gibt POISSON.dist</b> gibt das #NUM! Fehlerwert. </para>
          <para>Ist Mittelwert ≤ 0, <b>gibt POISSON.dist</b> den #NUM #zahl! Fehlerwert. </para>
          <para>
            <b>POISSON.dist</b> wird wie folgt berechnet. </para>
          <para>Für kumulative = <b>"false"</b>:</para>
          <para>Abbildung 1: Calcuation Kumuliert ist false</para>
          <para></para>
          <para></para>
          <para>Für kumulative = <b>true</b>:</para>
          <para>Abbildung 2: Calcuation kumuliert gilt</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public double Power (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Power([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Power(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Power (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Power(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16721)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die Zahl, die Sie mit dem Exponenten potenzieren möchten. Es sind alle reellen Zahlen zulässig.</param>
        <param name="Arg2">Potenz – der Exponent, mit dem Sie die Zahl potenzieren möchten.</param>
        <summary>Gibt als Ergebnis eine potenzierte Zahl zurück.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ppmt">
      <MemberSignature Language="C#" Value="public double Ppmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ppmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ppmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ppmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16552)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zins – der Zinssatz pro Zeitraum.</param>
        <param name="Arg2">Zr – gibt die Periode an und muss zwischen 1 und Zzr liegen. (Zr = Zahlungszeitraum)</param>
        <param name="Arg3">Zzr – die Gesamtzahl der Zahlungsperioden in einer Annuität.</param>
        <param name="Arg4">Bw – der aktuelle Wert – der Gesamtbetrag, dessen Wert eine Reihe von zukünftigen Zahlungen besitzt.</param>
        <param name="Arg5">Zw – der zukünftige Wert (Endwert) oder der Kassenbestand, den Sie nach der letzten Zahlung erreicht haben möchten. Fehlt das Argument Zw, wird der Wert 0 (Null) angenommen, d. h., der Endwert eines Kredits ist gleich 0. (Zw = Zukünftiger Wert)</param>
        <param name="Arg6">F – die Zahl 0 oder 1, die die Fälligkeit von Zahlungen angibt.</param>
        <summary>Gibt die Kapitalrückzahlung einer Investition für eine angegebene Periode zurück. Es werden konstante periodische Zahlungen und ein konstanter Zinssatz vorausgesetzt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Eine genauere Beschreibung der Argumente der <b>ppm</b>, finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>Zum Ende des Zeitraums</description>
            </item>
            <item>
              <term>1</term>
              <description>Zum Anfang des Zeitraums</description>
            </item>
          </list>
          <para>Stellen Sie sicher, dass Sie die zur Angabe von Zins und Zzr verwendeten Einheiten einheitlich verwenden. Wenn Sie für eine vierjährige Anleihe mit jährlichen Zinsen von 12 Prozent monatliche Zahlungen tätigen, verwenden Sie 12%/12 für Zins und 4*12 für Zzr. Wenn Sie für dieselbe Anleihe jährliche Zahlungen tätigen, verwenden Sie 12% für Zins und 4 für Zzr.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Price">
      <MemberSignature Language="C#" Value="public double Price (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Price([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Price(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Price (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16825)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Zins – der jährliche Kuponzinssatz des Wertpapiers.</param>
        <param name="Arg4">Rendite – die jährliche Rendite des Wertpapiers.</param>
        <param name="Arg5">Rückzahlung – der Rückkaufswert des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg6">Häufigkeit – die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2 für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg7">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt den Kurs pro 100 $ Nennwert eines Wertpapiers zurück, das periodisch Zinsen auszahlt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Häufigkeit und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültiges Datum angegeben sind, gibt <b>Price</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Rendite &lt; 0 oder, wenn Rate &lt; 0, gibt <b>Price</b> das #NUM zurück! Fehlerwert. </para>
          <para>Ist Rückzahlung ≤ 0, <b>gibt Price</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Wenn Häufigkeit eine andere Zahl als 1, 2 oder 4 handelt, gibt <b>Price</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4, gibt <b>Price</b> den #NUM zurück! Fehlerwert. </para>
          <para>Ist Abrechnung ≥ Fälligkeit, <b>gibt Price</b> den #NUM #zahl! Fehlerwert. <b>Price</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Gleichung für die Price-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>DSC = Anzahl der Tage von Abrechnung bis zum nächsten Zinstermin.</para>
          <para>E = Anzahl der Tage in dem das Abrechnungsdatum liegt Zinsperiode.</para>
          <para>N = Anzahl der Zinstermine zwischen Abrechnung und Rückzahlung Datum.</para>
          <para>A = Anzahl der Tage vom Anfang des Zinstermins bis zum Abrechnungstermin.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceDisc">
      <MemberSignature Language="C#" Value="public double PriceDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16820)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Disagio – der Abzinsungsfaktor (Disagio) des Wertpapiers.</param>
        <param name="Arg4">Rückzahlung – der Rückkaufswert des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg5">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt den Kurs pro 100 $ Nennwert eines unverzinslichen Wertpapiers zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültiges Datum angegeben sind, gibt <b>PriceDisc</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Disagio ≤ 0 oder Rückzahlung ≤ 0, <b>gibt PriceDisc</b> den #NUM zurück! Fehlerwert. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4, <b>gibt PriceDisc</b> das #NUM zurückgibt! Fehlerwert. </para>
          <para>Ist Abrechnung ≥ Fälligkeit, <b>gibt PriceDisc</b> den #NUM #zahl! Fehlerwert. </para>
          <para>
            <b>PriceDisc</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Gleichung für die PriceDisc-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>B = Anzahl der Tage in Jahr je nach Jahresbasis.</para>
          <para>DSM = Anzahl der Tage von Abrechnung bis Fälligkeit.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceMat">
      <MemberSignature Language="C#" Value="public double PriceMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16815)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Emission – das Ausgabedatum des Wertpapiers, das als fortlaufende Zahl angegeben wird.</param>
        <param name="Arg4">Zins – ist der Zinssatz des Wertpapiers am Ausgabetag.</param>
        <param name="Arg5">Rendite – die jährliche Rendite des Wertpapiers.</param>
        <param name="Arg6">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt den Kurs pro 100 $ Nennwert eines Wertpapiers zurück, das Zinsen am Fälligkeitsdatum auszahlt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Emission und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung, Fälligkeit oder Emission kein gültiges Datum angegeben ist, gibt <b>PriceMat</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Rate &lt; 0 oder, wenn Rendite &lt; 0, <b>gibt PriceMat</b> gibt das #NUM! Fehlerwert. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4, <b>gibt PriceMat</b> das #NUM zurückgibt! Fehlerwert. </para>
          <para>Ist Abrechnung ≥ Fälligkeit, <b>gibt PriceMat</b> den #NUM #zahl! Fehlerwert. <b>PriceMat</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Gleichung für die PriceMat-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>B = Anzahl der Tage in Jahr je nach Jahresbasis.</para>
          <para>DSM = Anzahl der Tage von Abrechnung bis Fälligkeit.</para>
          <para>DIM = Anzahl der Tage von Emission bis Fälligkeit.</para>
          <para>A = Anzahl der Tage von Emission bis Abrechnung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prob">
      <MemberSignature Language="C#" Value="public double Prob (object Arg1, object Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Prob([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Prob(System.Object,System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prob (Arg1 As Object, Arg2 As Object, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16701)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Beob_Werte – ein Bereich von Realisationen der Zufallsvariablen, denen Wahrscheinlichkeiten zugeordnet sind.</param>
        <param name="Arg2">Beob_Wahrsch – die Wahrscheinlichkeiten zu den beobachteten Werten.</param>
        <param name="Arg3">Untergrenze – die untere Grenze der Werte, deren Wahrscheinlichkeit berechnet werden soll.</param>
        <param name="Arg4">Obergrenze – die optionale obere Grenze der Werte, deren Wahrscheinlichkeit berechnet werden soll.</param>
        <summary>Gibt die Wahrscheinlichkeit für ein von zwei Werten eingeschlossenes Intervall zurück. Ist das Argument Obergrenze nicht angegeben, berechnet diese Funktion die Wahrscheinlichkeit, dass zu Beob_Werte gehörige Werte gleich dem Wert von Untergrenze sind.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Beob_Wahrsch ≤ 0 Wert oder ist eine Beob_Wahrsch &gt; 1, gibt <b>Prob</b> das #NUM zurück! Fehlerwert. </para>
          <para>Ist die Summe der Werte in Beob_Wahrsch ¹ 1, <b>gibt Prob</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Wenn Obere_Grenze nicht angegeben ist, gibt <b>Prob</b> die Wahrscheinlichkeit für den Wert Untergrenze zurück. </para>
          <para>Enthalten Beob_Werte und Beob_Wahrsch unterschiedlich viele Datenpunkte enthalten, gibt <b>Prob</b> den Fehlerwert #n/a zurück.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Product">
      <MemberSignature Language="C#" Value="public double Product (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Product([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Product(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Product (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16567)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – 1 bis 30 Zahlen, die Sie multiplizieren möchten.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Multipliziert die Argumente und gibt das Produkt zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Berücksichtigt werden nur Argumente, die Zahlen, Wahrheitswerte oder Zahlen in Textform sind. Als Fehlerwerte oder Text angegebene Argumente, die nicht in Zahlen umgewandelt werden können, führen zu Fehlern. </para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Proper">
      <MemberSignature Language="C#" Value="public string Proper (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Proper([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Proper(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Proper (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Proper(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16498)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text – in Anführungszeichen eingeschlossener Text, eine Formel, die Text zurückgibt, oder ein Bezug auf eine Zelle, die den Text enthält, den Sie teilweise groß schreiben möchten.</param>
        <summary>Wandelt den ersten Buchstaben aller Wörter einer Zeichenfolge in Großbuchstaben um. Wandelt alle anderen Buchstaben in Kleinbuchstaben um.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pv">
      <MemberSignature Language="C#" Value="public double Pv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16440)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zins – der Zinssatz pro Periode (Zahlungszeitraum). Wenn Sie beispielsweise für die Anschaffung eines Autos einen Kredit mit einem jährlichen Zinssatz von 10 Prozent aufnehmen und diesen Kredit in monatlichen Raten zurückzahlen, beträgt der monatliche Zinssatz 10 %/12 oder 0,83 %. Für den Zinssatz müssten Sie also einen der Werte 10 %/12 oder 0,83 % oder 0,0083 in die Formel eingeben.</param>
        <param name="Arg2">Zzr – gibt an, über wie viele Perioden die jeweilige Annuität (Rente) gezahlt wird. (Zzr = Anzahl der Zahlungszeiträume). Wenn Sie beispielsweise zur Finanzierung eines Autos einen Kredit mit einer Laufzeit von 4 Jahren aufnehmen, den Sie in monatlichen Raten zurückzahlen, hat der Kredit eine Laufzeit von 4*12 (oder 48) Perioden. Für Zzr müssten Sie also 48 eingeben.</param>
        <param name="Arg3">Rmz – der Betrag (die Annuität), der in jeder Periode gezahlt wird. Dieser Betrag bleibt während der Laufzeit konstant. Üblicherweise umfasst Rmz das Kapital und die Zinsen, nicht jedoch sonstige Gebühren oder Steuern. (Rmz = Regelmäßige Zahlung). Beispielsweise müssen Sie für einen Autokredit, der bei einem Zinssatz von 12 Prozent eine Laufzeit von vier Jahren hat, monatlich 263,33 € zurückzahlen. Für Rmz müssten Sie also -263,33 angeben. Wenn für Zins kein Wert angegeben wird, muss ein Wert für Zw angegeben werden.</param>
        <param name="Arg4">Zw – der zukünftige Wert (Endwert) oder der Kassenbestand, den Sie nach der letzten Zahlung erreicht haben möchten. Fehlt das Argument Zw, wird es als 0 angenommen (beispielsweise ist der Endwert eines Kredits gleich 0). (Zw = Zukünftiger Wert). Wenn Sie als Beispiel 50.000 € ansparen möchten, um in 18 Jahren ein bestimmtes Projekt finanzieren zu können, ist der zugehörige Endwert 50.000 €. Mit einer vorsichtigen Schätzung des Zinssatzes können Sie nun ausrechnen, wie viel Sie jeden Monat sparen müssen. Wenn für Zw kein Wert angegeben wird, muss ein Wert für Rmz angegeben werden.</param>
        <param name="Arg5">F – die Zahl 0 oder 1, die die Fälligkeit von Zahlungen angibt.</param>
        <summary>Gibt den Barwert einer Investition zurück. Der Barwert ist der Gesamtbetrag, den eine Reihe zukünftiger Zahlungen zum gegenwärtigen Zeitpunkt wert ist. Wenn Sie beispielsweise einen Kredit aufnehmen, ist die Summe dieses Kredits für den Kreditgeber gleich dem Barwert.</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>Zum Ende des Zeitraums</description>
            </item>
            <item>
              <term>1</term>
              <description>Zum Anfang des Zeitraums</description>
            </item>
          </list>
          <para>Stellen Sie sicher, dass Sie die zur Angabe von Zins und Zzr verwendeten Einheiten einheitlich verwenden. Wenn Sie für eine vierjährige Anleihe mit jährlichen Zinsen von 12 Prozent monatliche Zahlungen tätigen, verwenden Sie 12%/12 für Zins und 4*12 für Zzr. Wenn Sie für dieselbe Anleihe jährliche Zahlungen tätigen, verwenden Sie 12% für Zins und 4 für Zzr. </para>
          <para>Annuitäten gelten die folgenden Funktionen: </para>
          <list type="table">
            <item>
              <term>KUMZINSZ</term>
              <description>KAPZ</description>
            </item>
            <item>
              <term>KUMKAPITAL</term>
              <description>BW</description>
            </item>
            <item>
              <term>ZW</term>
              <description>ZINS</description>
            </item>
            <item>
              <term>ZW2</term>
              <description>XINTZINSFUSS</description>
            </item>
            <item>
              <term>ZINSZ</term>
              <description>XKAPITALWERT</description>
            </item>
            <item>
              <term>RMZ</term>
              <description />
            </item>
          </list>
          <para>Eine Annuität ist eine Reihe von konstanten Barzahlungen über einen kontinuierlichen Zeitraum. Beispielsweise ergibt eines Darlehens Auto oder einen Hypothekenrechner auf einer Annuität. Weitere Informationen finden Sie in der Beschreibung für jede Funktion Annuität. </para>
          <para>Für die Annuitätenfunktionen gilt, dass alle Zahlungen, die Sie tätigen (so z. B. Spareinlagen), durch negative Zahlen, und alle Geldbeträge, die Sie einnehmen (z. B. Dividenden), durch positive Zahlen dargestellt werden. Beispielsweise würde eine Spareinlage von 1.000 € durch das Argument -1000 dargestellt, wenn Sie der Einzahler sind, und durch das Argument 1000, wenn Sie die Bank sind. </para>
          <para>Microsoft Excel berechnet ein finanzmathematisches Argument mithilfe der jeweils anderen Argumente. Ist Zins ungleich 0, dann gilt: 

 </para>
          <para>Abbildung 1: Gleichung bei Zins ungleich 0</para>
          <para></para>
          <para></para>
          <para>Wenn Zins gleich 0, dann gilt:</para>
          <para>(Rmz * Zzr) + BW + Zw = 0</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile">
      <MemberSignature Language="C#" Value="public double Quartile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16711)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array – das Array oder der Zellbereich mit numerischen Werten, für das bzw. den Sie den Quartilswert ermitteln möchten.</param>
        <param name="Arg2">Quart – gibt an, welcher Wert zurückgegeben werden soll.</param>
        <summary>Gibt die Quartile eines Datasets zurück. Quartiles sind häufig in Sales und Umfragedaten zur Auffüllungen in Gruppen unterteilen. <b>Quartile</b> können Sie beispielsweise den oberen 25 Prozent der Einkommen in eine Population finden.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu den neuen Funktionen finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" /> Methoden.</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>Kleinster Wert</description>
            </item>
            <item>
              <term>1</term>
              <description>Erstes Quartil (25. Perzentil)</description>
            </item>
            <item>
              <term>2</term>
              <description>Mittlerer Wert (50. Perzentil)</description>
            </item>
            <item>
              <term>3</term>
              <description>Drittes Quartil (75. Perzentil)</description>
            </item>
            <item>
              <term>4</term>
              <description>Maximalwert</description>
            </item>
          </list>
          <para>Wenn Array leer ist, gibt <b>Quartile</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Quart keine ganze Zahl darstellt, wird die Zahl gekürzt.</para>
          <para>Wenn QUARTILE &lt; 0 oder, wenn Quart &gt; 4, <b>gibt Quartile</b> gibt das #NUM! Fehlerwert. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> den gleichen Wert wie <b>Quartile</b> zurück, wenn Quart jeweils gleich 0 (null), 2 und 4 ist, ist.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Exc">
      <MemberSignature Language="C#" Value="public double Quartile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16890)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - das Array oder der Zellbereich numerische Werte, die die QUARTILE Sie bestimmen möchten.</param>
        <param name="Arg2">Quartile - Der zurückzugebende Wert.</param>
        <summary>Gibt die Quartile eines Datasets zurück, basierend auf Perzentilwerten von 0..1 ausschließlich.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Array leer ist, gibt <b>gibt QUARTILE.Inc</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Quart keine ganze Zahl darstellt, wird die Zahl gekürzt.</para>
          <para>Wenn QUARTILE ≤ 0 oder ≥ 4, <b>gibt QUARTILE.Inc</b> Quartil das #NUM zurück! Fehlerwert. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> als <b>gibt QUARTILE.Inc</b> den gleichen Wert zurück, wenn Quart jeweils gleich 0 (null), 2 und 4 ist, ist.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Inc">
      <MemberSignature Language="C#" Value="public double Quartile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16891)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array – das Array oder der Zellbereich mit numerischen Werten, für das bzw. den Sie den Quartilswert ermitteln möchten.</param>
        <param name="Arg2">Quartile - Der zurückzugebende Wert.</param>
        <summary>Gibt die Quartile eines Datasets basierend auf Perzentilwerten von 0..1 einschließlich zurück. Quartile werden häufig in Verkaufsdaten und Umfragedaten verwendet, um Grundgesamtheiten in Gruppen zu unterteilen. Beispielsweise können Sie mit QUARTILE.INC die obersten 25 % an Einkommenswerten in einer Grundgesamtheit ermitteln.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Array leer ist, gibt <b>gibt QUARTILE.Inc</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Quart keine ganze Zahl darstellt, wird die Zahl gekürzt.</para>
          <para>Wenn QUARTILE &lt; 0 oder, wenn Quart &gt; 4, <b>gibt QUARTILE.Inc</b> das #NUM zurückgibt! Fehlerwert. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> als <b>gibt QUARTILE.Inc</b> den gleichen Wert zurück, wenn Quart jeweils gleich 0 (null), 2 und 4 ist, ist.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Quotient">
      <MemberSignature Language="C#" Value="public double Quotient (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quotient([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quotient(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quotient (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quotient(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16801)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zähler – der Dividend.</param>
        <param name="Arg2">Nenner – der Divisor.</param>
        <summary>Gibt den ganzzahligen Teil einer Division zurück. Mit dieser Funktion können Sie den Restbetrag einer Division verwerfen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>Quotient</b> den #VALUE! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Radians">
      <MemberSignature Language="C#" Value="public double Radians (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Radians([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Radians(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Radians (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Radians(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16726)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Winkel – ein Winkel in Grad, der umgerechnet werden soll.</param>
        <summary>Rechnet Grad in Bogenmaß um.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandBetween">
      <MemberSignature Language="C#" Value="public double RandBetween (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RandBetween([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RandBetween(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RandBetween (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RandBetween(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16848)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Unten – die kleinste von RANDBETWEEN zurückzugebende ganze Zahl.</param>
        <param name="Arg2">Oben – die größte von RANDBETWEEN zurückzugebende ganze Zahl.</param>
        <summary>Gibt eine zufällige ganze Zahl zwischen den von Ihnen angegebenen Zahlen zurück. Bei jeder Berechnung des Arbeitsblatts wird eine neue zufällige ganze Zahl zurückgegeben.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public double Rank (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16600)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die Zahl, deren Rang ermittelt werden soll.</param>
        <param name="Arg2">Bezug – ein Array von oder ein Bezug auf eine Liste von Zahlen. Nichtnumerische Werte in Bezug werden ignoriert.</param>
        <param name="Arg3">Reihenfolge – eine Zahl, mit der angegeben wird, wie der Rang einer Zahl ermittelt werden soll.</param>
        <summary>Gibt den Rang einer Zahl in einer Liste von Zahlen zurück. Der Rang einer Zahl entspricht ihrer Größe im Verhältnis zu anderen Werten in einer Liste. (Wenn die Liste sortiert werden würde, entspräche der Rang der Nummer der Position.)</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu den neuen Funktionen finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> Methoden.</para>
          <para>Wenn Reihenfolge mit 0 (Null) angegeben oder ausgelassen wird, wird der Rang von Zahl in Microsoft Excel so ermittelt, als wenn Bezug eine in absteigender Reihenfolge sortierte Liste darstellt.</para>
          <para>Wenn Reihenfolge einem Wert ungleich Null entspricht, wird der Rang von Zahl in Microsoft Excel so ermittelt, als wenn Bezug eine in aufsteigender Reihenfolge sortierte Liste darstellt.</para>
          <para>
            <b>Rang</b> gibt doppelten Nummern denselben Rang. Das Vorhandensein von doppelten Zahlen beeinflusst jedoch den Rang der nachfolgenden Zahlen. Beispielsweise in eine Liste mit ganzen Zahlen in aufsteigender Reihenfolge, falls die Nummer 10 zweimal erscheint und Rang 5, dann 11 einen Rang 7 (keine Zahl müssten Rang 6) sortiert.</para>
          <para>Für einige Zwecke möchten eine möglicherweise eine Definition des Rangs zu verwenden, die gleiche Werte berücksichtigt. Im vorherigen Beispiel würde eine für die Zahl 10 Rang 5,5 einnehmen soll. Dies kann durch hinzufügen den folgenden Korrekturfaktor auf den Wert von <b>Rank</b>zurückgegebenen erfolgen. Dieser Korrekturfaktor eignet sich sowohl für den Fall, in dem Rang in absteigender Reihenfolge berechnet wird (Reihenfolge = 0 oder weggelassen) oder aufsteigender Reihenfolge (Reihenfolge = Wert ungleich null).</para>
          <para>Korrekturfaktor für Count(ref) + 1 – (Zahl; 0) Rang (Zahl; 1)] / 2.</para>
          <para>Im folgenden Beispiel ergibt RANK(A2,A1:A5,1) 3. Der Korrekturfaktor ist (5 + 1 – 2 – 3) / 2 = 0,5, und der geänderte Rang, die gleiche Werte berücksichtigt ist 3 + 0,5 = 3,5. Wenn Zahl nur einmal in Ref vorkommt, werden der Korrekturfaktor 0, da <b>Rang</b> nicht angepasst werden.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Avg">
      <MemberSignature Language="C#" Value="public double Rank_Avg (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Avg([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Avg (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16892)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl - Die Zahl, deren Rang ermittelt werden soll.</param>
        <param name="Arg2">Bezug - Ein Array von oder ein Bezug auf eine Liste mit Zahlen. Nicht numerische Werte im Bezug werden ignoriert.</param>
        <param name="Arg3">Reihenfolge – eine Zahl, die angibt, wie der Rang von Zahl bestimmt. Wenn Reihenfolge 0 ist oder weggelassen wird, versieht Microsoft Excel Zahl mit einem Rang, als wäre der Bezug eine in absteigender Reihenfolge sortierte Liste. Wenn die Reihenfolge einen beliebigen Wert ungleich NULL ist, stuft Microsoft Excel Nummer ein, als wäre der Bezug eine in aufsteigender Reihenfolge sortierte Liste.</param>
        <summary>Gibt den Rang zurück, den eine Zahl innerhalb einer Liste von Zahlen einnimmt, d. h. die Größe relativ zu anderen Werten in der Liste. Wenn mehrere Werte die gleiche Rangzahl aufweisen, wird die durchschnittliche Rangzahl zurückgegeben.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Eq">
      <MemberSignature Language="C#" Value="public double Rank_Eq (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Eq([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Eq (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16893)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl - Die Zahl, deren Rang ermittelt werden soll.</param>
        <param name="Arg2">Bezug - Ein Array von oder ein Bezug auf eine Liste mit Zahlen. Nicht numerische Werte im Bezug werden ignoriert.</param>
        <param name="Arg3">Reihenfolge - Ein Wert, der bestimmt, welchen Rang eine Zahl einnehmen soll.</param>
        <summary>Gibt den Rang einer Zahl in einer Liste von Zahlen zurück. Der Rang einer Zahl entspricht ihrer Größe im Verhältnis zu anderen Werten in einer Liste. (Wenn die Liste sortiert werden würde, entspräche der Rang der Nummer der Position.)</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Reihenfolge 0 ist oder weggelassen wird, versieht Microsoft Excel Zahl mit einem Rang, als wäre der Bezug eine in absteigender Reihenfolge sortierte Liste.</para>
          <para>Wenn Reihenfolge einem Wert ungleich Null entspricht, wird der Rang von Zahl in Microsoft Excel so ermittelt, als wäre Bezug eine in aufsteigender Reihenfolge sortierte Liste.</para>
          <para>
            <b>Rank.EQ-Methode</b> gibt doppelten Nummern denselben Rang. Das Vorhandensein von doppelten Zahlen beeinflusst jedoch den Rang der nachfolgenden Zahlen. Beispielsweise in eine Liste mit ganzen Zahlen in aufsteigender Reihenfolge, falls die Nummer 10 zweimal erscheint und Rang 5, dann 11 einen Rang 7 (keine Zahl müssten Rang 6) sortiert.</para>
          <para>Für einige Zwecke möchten Sie möglicherweise eine Definition des Rangs zu verwenden, die gleiche Werte berücksichtigt. Im vorherigen Beispiel sollten Sie für die Zahl 10 ein Rang 5,5 zugewiesen. Fügen Sie dazu den folgenden Korrekturfaktor auf den Wert von <b>Rank.EQ-Methode</b>zurückgegeben. Dieser Korrekturfaktor eignet sich sowohl für den Fall, in dem Rang in absteigender Reihenfolge berechnet wird (Reihenfolge = 0 oder weggelassen) oder aufsteigender Reihenfolge (Reihenfolge = Wert ungleich null).</para>
          <para>Korrekturfaktor für Count(ref) + 1 – Rank.EQ (Zahl; 0) – Rank.EQ (number, Ref, 1)]/2.In im folgenden Beispiel wird, RANK_EQ(A2,A1:A5,1) ergibt 3. Der Korrekturfaktor ist (5 + 1 – 2 – 3) / 2 = 0,5, und der geänderte Rang, die gleiche Werte berücksichtigt ist 3 + 0,5 = 3,5. Wenn Zahl nur einmal in Ref vorkommt, wird der Korrekturfaktor 0 sein, da <b>Rank.EQ-Methode</b> nicht angepasst werden.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public double Rate (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rate([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rate(System.Double,System.Double,System.Double,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16444)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zzr – die Gesamtzahl der Zahlungsperioden in einer Annuität.</param>
        <param name="Arg2">Rmz – die pro Zeitraum vorgenommene Zahlung; dies kann sich über die Dauer der Annuität nicht ändern. Typischerweise umfasst Rmz das Kapital und die Zinsen, jedoch keine anderen Gebühren oder Steuern. Wenn Rmz ausgelassen wird, müssen Sie das Argument Zw angeben.</param>
        <param name="Arg3">Bw – der aktuelle Wert – der Gesamtbetrag, dessen Wert eine Reihe von zukünftigen Zahlungen besitzt.</param>
        <param name="Arg4">Zw – der zukünftige Wert oder der Kassenbestand, den Sie nach Tätigung der letzten Zahlung erzielen möchten. Wenn Zw ausgelassen wird, wird dafür der Wert 0 angenommen (der zukünftige Wert einer Anleihe beträgt beispielsweise 0).</param>
        <param name="Arg5">F – die Zahl 0 oder 1, die die Fälligkeit von Zahlungen angibt.</param>
        <param name="Arg6">Schätzwert – Ihre Schätzung bezüglich der Höhe des Zinssatzes.</param>
        <summary>Gibt den Zinssatz pro Zeitabschnitt einer Annuität zurück. RATE wird nach Iteration berechnet und kann Null oder mehrere Lösungen ergeben. Wenn die aufeinanderfolgenden Ergebnisse von RATE sich nach 20 Iterationen nicht bis auf 0,0000001 nähern, gibt RATE den Fehlerwert #NUM! zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Eine vollständige Beschreibung der Argumente Zzr, Rmz, BW, Zw und Typ, finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>Zum Ende des Zeitraums</description>
            </item>
            <item>
              <term>1</term>
              <description>Zum Anfang des Zeitraums</description>
            </item>
          </list>
          <para>Wenn Sie Schätzwert nicht angeben, wird ein Wert von 10 Prozent vorausgesetzt.</para>
          <para>Wenn <b>Rate</b> nicht innerhalb von, versuchen Sie unterschiedliche Werte für Schätzwert wiederholen. <b>Rate</b> annähert in der Regel auf, wenn zwischen 0 und 1 Schätzwert.</para>
          <para>Stellen Sie sicher, dass Sie die zur Angabe von Schätzwert und Zzr verwendeten Einheiten einheitlich verwenden. Wenn Sie für eine vierjährige Anleihe mit jährlichen Zinsen von 12 Prozent monatliche Zahlungen tätigen, verwenden Sie 12%/12 für Schätzwert und 4*12 für Zzr. Wenn Sie für dieselbe Anleihe jährliche Zahlungen tätigen, verwenden Sie 12% für Schätzwert und 4 für Zzr.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Received">
      <MemberSignature Language="C#" Value="public double Received (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Received([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Received(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Received (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16818)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Anlage – der in das Wertpapier investierte Betrag.</param>
        <param name="Arg4">Disagio – der Abzinsungsfaktor (Disagio) des Wertpapiers.</param>
        <param name="Arg5">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt den bei Fälligkeit für ein vollständig angelegtes Wertpapier erhaltenen Betrag zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültiges Datum angegeben sind, gibt <b>Received</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Anlage ≤ 0 oder Disagio ≤ 0, <b>erhalten</b> das #NUM zurück! Fehlerwert. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4 ist, gibt <b>Received</b> das #NUM zurück! Fehlerwert. </para>
          <para>Wenn Abrechnung ≥ Fälligkeit ist gibt, Received das #NUM zurück! Fehlerwert. <b>Received</b> wird folgendermaßen berechnet: </para>
          <para>Abbildung 1: Gleichung für Received-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>B = Anzahl der Tage in einem Jahr je nach der Jahresbasis.</para>
          <para>DIM = Anzahl der Tage von Emission bis Fälligkeit.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Replace([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16503)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text (die Zeichenfolge), in dem (der) Sie einige Zeichen ersetzen möchten.</param>
        <param name="Arg2">Die Position des Zeichens in <paramref name="Arg1" /> durch Ersetzen Sie die gewünschten <paramref name="Arg4" />.</param>
        <param name="Arg3">Die Anzahl der Zeichen in <paramref name="Arg1" /> , die Sie möchten die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> -Methode zum Ersetzen durch <paramref name="Arg4" />.</param>
        <param name="Arg4">Text, der Zeichen ersetzt werden <paramref name="Arg1" />.</param>
        <summary>Ersetzt auf der Grundlage der angegebenen Anzahl von Zeichen einen Teil einer Zeichenfolge durch eine andere Zeichenfolge.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceB">
      <MemberSignature Language="C#" Value="public string ReplaceB (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReplaceB([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceB (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReplaceB(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16591)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Alter_Text – der Text, in dem Sie einige Zeichen ersetzen möchten.</param>
        <param name="Arg2">Erstes_Zeichen – die Position des Zeichens in Alter_Text, den Sie durch Neuer_Text ersetzen möchten.</param>
        <param name="Arg3">Anzahl_Zeichen – die Anzahl der Zeichen in Alter_Text, die mittels REPLACE durch Neuer_Text ersetzt werden sollen.</param>
        <param name="Arg4">Neuer_Text – der Text, durch den die Zeichen in Alter_Text ersetzt werden.</param>
        <summary>REPLACEB ersetzt einen Teil einer Textzeichenfolge anhand der von Ihnen angegebenen Anzahl von Bytes durch eine andere Textzeichenfolge.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> ist festgelegt bestimmt sind für die Verwendung mit Sprachen, verwenden das Einzel-Byte-Zeichen (SBCS) und <b>ReplaceB</b> ist für die Verwendung mit Sprachen vorgesehen, die den Doppelbyte-Zeichensatz (DBCS) verwenden. Die Einstellung für die Standardsprache auf Ihrem Computer wirkt sich auf den Rückgabewert auf folgende Weise:</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />immer zählt jedes Zeichen an, ob Einzel-Byte oder Double-Byte, als 1, unabhängig davon, welche die Einstellung für die Standardsprache ist. </para>
          <para>
            <b>ReplaceB</b> zählt jedes Doppelbyte-Zeichen als 2, wenn Sie die Bearbeitung einer Sprache, die DBCS unterstützt aktiviert haben, und klicken Sie dann als Standardsprache festlegen. Andernfalls zählt <b>ReplaceB</b> jedes Zeichen als 1 Zeichen. </para>
          <para>Zu den Sprachen, die DBCS unterstützen, zählen Japanisch, Chinesisch (vereinfacht), Chinesisch (traditionell) und Koreanisch.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rept">
      <MemberSignature Language="C#" Value="public string Rept (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Rept([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rept(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rept (Arg1 As String, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Rept(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16414)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text – der Text, der wiederholt werden soll.</param>
        <param name="Arg2">Zahl_Wiederholungen – eine positive Zahl, mit der angegeben wird, wie oft der Text wiederholt werden soll.</param>
        <summary>Wiederholt Text so oft wie angegeben. Mit REPT können Sie eine Zelle mit einer Anzahl von Vorkommen einer Textzeichenfolge füllen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Zahl_Wiederholungen 0 (null) ist, gibt <b>Rept</b> "" (leere Zeichenfolge). </para>
          <para>
				Wenn Zahl_Wiederholungen keine ganze Zahl darstellt, wird die Zahl gekürzt.
</para>
          <para>Das Ergebnis der <b>Rept</b> -Funktion darf nicht länger als 32.767 Zeichen sein; andernfalls gibt <b>Rept #VALUE</b> !. </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Roman">
      <MemberSignature Language="C#" Value="public string Roman (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Roman([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Roman(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Roman (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16738)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die arabische Ziffer, die konvertiert werden soll.</param>
        <param name="Arg2">Format – eine Zahl, mit der die Art der gewünschten römischen Ziffer angegeben wird. Das Format für römische Ziffern reicht von klassisch bis vereinfacht und wird mit größeren Werten für Format prägnanter.</param>
        <summary>Konvertiert eine arabische Ziffer in eine römische als Text an.</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>Klassisch</description>
            </item>
            <item>
              <term>1</term>
              <description>Kürzeren.</description>
            </item>
            <item>
              <term>2</term>
              <description>Kürzeren.</description>
            </item>
            <item>
              <term>3</term>
              <description>Kürzeren.</description>
            </item>
            <item>
              <term>4</term>
              <description>Vereinfacht</description>
            </item>
            <item>
              <term>
                <b>"true"</b>
              </term>
              <description>Standard.</description>
            </item>
            <item>
              <term>
                <b>false</b>
              </term>
              <description>Vereinfacht</description>
            </item>
          </list>
          <para>Wenn Zahl negativ ist, wird der Fehlerwert #VALUE! zurückgegeben.</para>
          <para>Wenn Zahl größer als 3999 ist, wird der Fehlerwert #VALUE! zurückgegeben.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public double Round (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Round([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Round (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Round(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16411)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die zu rundende Zahl.</param>
        <param name="Arg2">Anzahl_Stellen – gibt die Anzahl der Stellen an, bis auf die Zahl gerundet werden soll.</param>
        <summary>Rundet eine Zahl auf eine angegebene Anzahl von Stellen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Anzahl_Stellen größer als 0 (Null) ist, wird Anzahl auf die angegebene Anzahl von Dezimalstellen gerundet. </para>
          <para>Wenn Anzahl_Stellen 0 ist, wird Zahl auf die nächste ganze Zahl gerundet. </para>
          <para>Wenn Anzahl_Stellen kleiner als 0 ist, wird Zahl an der linken Stelle neben dem Dezimalkomma gerundet.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtDown">
      <MemberSignature Language="C#" Value="public double RoundBahtDown (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtDown([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtDown(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtDown (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtDown(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16760)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtUp">
      <MemberSignature Language="C#" Value="public double RoundBahtUp (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtUp([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtUp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtUp (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtUp(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16761)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundDown">
      <MemberSignature Language="C#" Value="public double RoundDown (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundDown([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundDown(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundDown (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundDown(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16597)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – eine beliebige reelle Zahl, die abgerundet werden soll.</param>
        <param name="Arg2">Anzahl_Stellen - die Anzahl der Stellen, bis auf die Zahl gerundet werden soll.</param>
        <summary>Rundet eine Zahl in Richtung Null ab.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>RoundDown</b> verhält sich wie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />, außer dass sie eine Zahl immer abgerundet. </para>
          <para>Wenn Anzahl_Stellen größer als 0 (Null) ist, wird Zahl auf die angegebene Anzahl von Dezimalstellen abgerundet.</para>
          <para>Wenn Anzahl_Stellen 0 ist, wird Zahl auf die nächste ganze Zahl abgerundet.</para>
          <para>Wenn Anzahl_Stellen kleiner als 0 ist, wird Zahl an der linken Stelle neben dem Dezimalkomma abgerundet.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundUp">
      <MemberSignature Language="C#" Value="public double RoundUp (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundUp([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundUp(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundUp (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundUp(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16596)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl - eine beliebige reelle Zahl, die aufgerundet werden soll.</param>
        <param name="Arg2">Anzahl_Stellen - die Anzahl der Stellen, bis auf die Zahl gerundet werden soll.</param>
        <summary>Rundet eine Zahl in entgegengesetzter Richtung zu 0 (Null) auf.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>RoundUp</b> verhält sich wie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />, mit der Ausnahme, dass sie immer eine Zahl um. </para>
          <para>Wenn Anzahl_Stellen größer als 0 (Null) ist, wird Zahl auf die angegebene Anzahl von Dezimalstellen aufgerundet.</para>
          <para>Wenn Anzahl_Stellen 0 ist, wird Zahl auf die nächste ganze Zahl aufgerundet.</para>
          <para>Wenn Anzahl_Stellen kleiner als 0 ist, wird Zahl an der linken Stelle neben dem Dezimalkomma aufgerundet.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rri">
      <MemberSignature Language="C#" Value="public double Rri (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rri([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rri(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rri (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Rri(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16963)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Anzahl der Perioden für die Investition.</param>
        <param name="Arg2">Barwert der Investition.</param>
        <param name="Arg3">Zukünftigen Wert der Investition.</param>
        <summary>Gibt einen entsprechenden Zinssatz für das Wachstum einer Investition zurück.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RSq">
      <MemberSignature Language="C#" Value="public double RSq (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RSq([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RSq(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSq (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RSq(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16697)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bekannt_y – ein Array oder ein Bereich von Datenpunkten.</param>
        <param name="Arg2">Bekannt_x – ein Array oder ein Bereich von Datenpunkten.</param>
        <summary>Gibt die Quadratwurzel den Pearsonschen Korrelationskoeffizienten über Datenpunkte in Bekannt_y und Bekannt_x zurück. Weitere Informationen finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />. Der Wert kann als der Anteil der Varianz von y, die Varianz von x erklärt interpretiert werden.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn Bekannt_y und Bekannt_x leer sind oder eine unterschiedliche Anzahl von Datenpunkten verfügen, gibt <b>RSq</b> den Fehlerwert #n/a zurück. </para>
          <para>Wenn Bekannt_y und Bekannt_x nur 1 Datenpunkt enthalten, gibt <b>RSq</b> den #DIV/0! Fehlerwert. </para>
          <para>Die Formel für den Pearsonschen Korrelationskoeffizienten (r) lautet: 

 </para>
          <para>Abbildung 1: Pearsonschen Korrelationskoeffizienten</para>
          <para></para>
          <para></para>
          <para>Hierbei sind X und Y die Beispieldurchschnittswerte AVERAGE(Bekannt_x) und AVERAGE(Bekannt_y).</para>
          <para>
            <b>RSq</b> gibt r2 wird die Quadratwurzel Korrelationskoeffizienten entspricht.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RTD">
      <MemberSignature Language="C#" Value="public object RTD (object progID, object server, object topic1, object topic2, object topic3, object topic4, object topic5, object topic6, object topic7, object topic8, object topic9, object topic10, object topic11, object topic12, object topic13, object topic14, object topic15, object topic16, object topic17, object topic18, object topic19, object topic20, object topic21, object topic22, object topic23, object topic24, object topic25, object topic26, object topic27, object topic28);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RTD([in]object progID, [in]object server, [in]object topic1, [in]object topic2, [in]object topic3, [in]object topic4, [in]object topic5, [in]object topic6, [in]object topic7, [in]object topic8, [in]object topic9, [in]object topic10, [in]object topic11, [in]object topic12, [in]object topic13, [in]object topic14, [in]object topic15, [in]object topic16, [in]object topic17, [in]object topic18, [in]object topic19, [in]object topic20, [in]object topic21, [in]object topic22, [in]object topic23, [in]object topic24, [in]object topic25, [in]object topic26, [in]object topic27, [in]object topic28) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RTD(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTD (progID As Object, server As Object, topic1 As Object, Optional topic2 As Object, Optional topic3 As Object, Optional topic4 As Object, Optional topic5 As Object, Optional topic6 As Object, Optional topic7 As Object, Optional topic8 As Object, Optional topic9 As Object, Optional topic10 As Object, Optional topic11 As Object, Optional topic12 As Object, Optional topic13 As Object, Optional topic14 As Object, Optional topic15 As Object, Optional topic16 As Object, Optional topic17 As Object, Optional topic18 As Object, Optional topic19 As Object, Optional topic20 As Object, Optional topic21 As Object, Optional topic22 As Object, Optional topic23 As Object, Optional topic24 As Object, Optional topic25 As Object, Optional topic26 As Object, Optional topic27 As Object, Optional topic28 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16763)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.Object" />
        <Parameter Name="server" Type="System.Object" />
        <Parameter Name="topic1" Type="System.Object" />
        <Parameter Name="topic2" Type="System.Object" />
        <Parameter Name="topic3" Type="System.Object" />
        <Parameter Name="topic4" Type="System.Object" />
        <Parameter Name="topic5" Type="System.Object" />
        <Parameter Name="topic6" Type="System.Object" />
        <Parameter Name="topic7" Type="System.Object" />
        <Parameter Name="topic8" Type="System.Object" />
        <Parameter Name="topic9" Type="System.Object" />
        <Parameter Name="topic10" Type="System.Object" />
        <Parameter Name="topic11" Type="System.Object" />
        <Parameter Name="topic12" Type="System.Object" />
        <Parameter Name="topic13" Type="System.Object" />
        <Parameter Name="topic14" Type="System.Object" />
        <Parameter Name="topic15" Type="System.Object" />
        <Parameter Name="topic16" Type="System.Object" />
        <Parameter Name="topic17" Type="System.Object" />
        <Parameter Name="topic18" Type="System.Object" />
        <Parameter Name="topic19" Type="System.Object" />
        <Parameter Name="topic20" Type="System.Object" />
        <Parameter Name="topic21" Type="System.Object" />
        <Parameter Name="topic22" Type="System.Object" />
        <Parameter Name="topic23" Type="System.Object" />
        <Parameter Name="topic24" Type="System.Object" />
        <Parameter Name="topic25" Type="System.Object" />
        <Parameter Name="topic26" Type="System.Object" />
        <Parameter Name="topic27" Type="System.Object" />
        <Parameter Name="topic28" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="progID">Eine Zeichenfolge, die den programmgesteuerten Bezeichner des Echtzeitservers darstellt.</param>
        <param name="server">Servername, <b>Null</b> -Zeichenfolge oder <b>eine VbNullString</b> Konstante.</param>
        <param name="topic1">
          <paramref name="topic1" />–<paramref name="topic28" /> Eine <b>Zeichenfolge</b> , die ein Thema darstellt.</param>
        <param name="topic2">To be added.</param>
        <param name="topic3">To be added.</param>
        <param name="topic4">To be added.</param>
        <param name="topic5">To be added.</param>
        <param name="topic6">To be added.</param>
        <param name="topic7">To be added.</param>
        <param name="topic8">To be added.</param>
        <param name="topic9">To be added.</param>
        <param name="topic10">To be added.</param>
        <param name="topic11">To be added.</param>
        <param name="topic12">To be added.</param>
        <param name="topic13">To be added.</param>
        <param name="topic14">To be added.</param>
        <param name="topic15">To be added.</param>
        <param name="topic16">To be added.</param>
        <param name="topic17">To be added.</param>
        <param name="topic18">To be added.</param>
        <param name="topic19">To be added.</param>
        <param name="topic20">To be added.</param>
        <param name="topic21">To be added.</param>
        <param name="topic22">To be added.</param>
        <param name="topic23">To be added.</param>
        <param name="topic24">To be added.</param>
        <param name="topic25">To be added.</param>
        <param name="topic26">To be added.</param>
        <param name="topic27">To be added.</param>
        <param name="topic28">To be added.</param>
        <summary>Diese Methode stellt eine Verbindung zu einer Quelle her, um Echtzeitdaten abzurufen.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Search">
      <MemberSignature Language="C#" Value="public double Search (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Search([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Search (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16466)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Suchtext – der zu suchende Text.</param>
        <param name="Arg2">Text – der Text, in dem nach Suchtext gesucht werden soll.</param>
        <param name="Arg3">Erstes_Zeichen – die Nummer des Zeichens in Text, an deren Position mit der Suche begonnen werden soll.</param>
        <summary>
          <b>Suche</b> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> eine Zeichenfolge innerhalb einer zweiten Textzeichenfolge suchen und Zurückgeben der Anzahl der Anfangsposition der ersten Textzeichenfolge ab dem ersten Zeichen der zweiten Textzeichenfolge.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: <b>Suche</b> ist vorgesehen für die Verwendung mit Sprachen, die den Einzel-Byte-Zeichensatz (SBCS) verwenden, und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> wird bestimmt sind für die Verwendung mit Sprachen, die das Doppelbyte-Zeichen verwenden (DBCS) festgelegt. Die Einstellung für die Standardsprache auf Ihrem Computer wirkt sich auf den Rückgabewert auf folgende Weise:<b>Suche</b> zählt stets jedes Zeichen, ob Einzel-Byte oder Double-Byte, als 1, unabhängig davon, welche die Einstellung für die Standardsprache ist. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />zählt alle Double-Byte-Zeichen als 2, wenn Sie die Bearbeitung einer Sprache, die DBCS unterstützt aktiviert haben, und klicken Sie dann als Standardsprache festlegen. Andernfalls <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> zählt jedes Zeichen als 1.</para>
          <para>Zu den Sprachen, die DBCS unterstützen, zählen Japanisch, Chinesisch (vereinfacht), Chinesisch (traditionell) und Koreanisch.</para>
          <para>Verwenden der <b>Suche</b> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> um den Speicherort der ein Zeichen oder eine Zeichenfolge innerhalb einer anderen Zeichenfolge zu ermitteln, damit Sie die MID und MIDB verwenden können oder <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> Funktionen zu ändern. </para>
          <para>
            <b>Suche</b> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> wird Groß-/ Kleinschreibung nicht beachtet. Wenn Sie zwischen Groß-und Kleinschreibung zu suchen möchten, können Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />. </para>
          <para>In Suchtext können Sie die Platzhalterzeichen Sternchen (*) und Fragezeichen (?) verwenden. Mit einem Fragezeichen erfolgt ein Abgleich mit jedem einzelnen Zeichen; mit einem Sternchen erfolgt ein Abgleich mit einer beliebigen Abfolge von Zeichen. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, geben Sie vor dem Zeichen eine Tilde (~) ein.</para>
          <para>Wenn Suchtext nicht gefunden wird, wird der Fehlerwert #VALUE! zurückgegeben.</para>
          <para>Wenn Anzahl_Stellen ausgelassen wird, wird davon ausgegangen, dass dafür der Wert 1 vorliegt.</para>
          <para>Wenn Anzahl_Stellen nicht größer als 0 (Null) bzw. größer als die Länge von Text ist, wird der Fehlerwert #VALUE! zurückgegeben.</para>
          <para>Verwenden Sie Erstes_Zeichen, um eine angegebene Anzahl von Zeichen überspringen. <b>Suche</b> als Beispiel verwenden, nehmen Sie an, dass Sie die Zeichenfolge "MOD0093. arbeiten "YoungMensApparel"verwendet. Um die Anzahl der ersten "Y" im beschreibenden Teil der Zeichenfolge suchen, Erstes_Zeichen Sie mit 8, damit der Seriennummer Teil des Texts nicht durchsucht wird. <b>Suche</b> mit 8 Zeichen beginnt, Suchtext des nächsten Zeichens und liefert die Zahl 9. <b>Suchen</b> gibt immer die Anzahl der Zeichen ab dem Anfang von Text, zählen der Zeichen an, die Sie überspringen, wenn Erstes_Zeichen größer als 1 ist.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchB">
      <MemberSignature Language="C#" Value="public double SearchB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SearchB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16590)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Suchtext – der zu suchende Text.</param>
        <param name="Arg2">Text – der Text, in dem nach Suchtext gesucht werden soll.</param>
        <param name="Arg3">Erstes_Zeichen – die Nummer des Zeichens in Text, an deren Position mit der Suche begonnen werden soll.</param>
        <summary>SEARCH und SEARCHB finden eine Textzeichenfolge innerhalb einer zweiten Zeichenfolge und geben die Zahl für die Startposition der ersten Textzeichenfolge anhand des ersten Zeichens der zweiten Zeichenfolge zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: <b>Suche</b> ist vorgesehen für die Verwendung mit Sprachen, die den Einzel-Byte-Zeichensatz (SBCS) verwenden, und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> wird bestimmt sind für die Verwendung mit Sprachen, die das Doppelbyte-Zeichen verwenden (DBCS) festgelegt. Die Einstellung für die Standardsprache auf Ihrem Computer wirkt sich auf den Rückgabewert auf folgende Weise:<b>Suche</b> zählt stets jedes Zeichen, ob Einzel-Byte oder Double-Byte, als 1, unabhängig davon, welche die Einstellung für die Standardsprache ist. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />zählt alle Double-Byte-Zeichen als 2, wenn Sie die Bearbeitung einer Sprache, die DBCS unterstützt aktiviert haben, und klicken Sie dann als Standardsprache festlegen. Andernfalls <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> zählt jedes Zeichen als 1.</para>
          <para>Zu den Sprachen, die DBCS unterstützen, zählen Japanisch, Chinesisch (vereinfacht), Chinesisch (traditionell) und Koreanisch.</para>
          <para>Verwenden der <b>Suche</b> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> um den Speicherort der ein Zeichen oder eine Zeichenfolge innerhalb einer anderen Zeichenfolge zu ermitteln, damit Sie die MID und MIDB verwenden können oder <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> Funktionen zu ändern. </para>
          <para>
            <b>Suche</b> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> wird Groß-/ Kleinschreibung nicht beachtet. Wenn Sie zwischen Groß-und Kleinschreibung zu suchen möchten, können Sie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />. </para>
          <para>In Suchtext können Sie die Platzhalterzeichen Sternchen (*) und Fragezeichen (?) verwenden. Mit einem Fragezeichen erfolgt ein Abgleich mit jedem einzelnen Zeichen; mit einem Sternchen erfolgt ein Abgleich mit einer beliebigen Abfolge von Zeichen. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, geben Sie vor dem Zeichen eine Tilde (~) ein.</para>
          <para>Wenn Suchtext nicht gefunden wird, wird der Fehlerwert #VALUE! zurückgegeben.</para>
          <para>Wenn Anzahl_Stellen ausgelassen wird, wird davon ausgegangen, dass dafür der Wert 1 vorliegt.</para>
          <para>Wenn Anzahl_Stellen nicht größer als 0 (Null) bzw. größer als die Länge von Text ist, wird der Fehlerwert #VALUE! zurückgegeben.</para>
          <para>Verwenden Sie Erstes_Zeichen, um eine angegebene Anzahl von Zeichen überspringen. <b>Suche</b> als Beispiel verwenden, nehmen Sie an, dass Sie die Zeichenfolge "MOD0093. arbeiten "YoungMensApparel"verwendet. Um die Anzahl der ersten "Y" im beschreibenden Teil der Zeichenfolge suchen, Erstes_Zeichen Sie mit 8, damit der Seriennummer Teil des Texts nicht durchsucht wird. <b>Suche</b> mit 8 Zeichen beginnt, Suchtext des nächsten Zeichens und liefert die Zahl 9. <b>Suchen</b> gibt immer die Anzahl der Zeichen ab dem Anfang von Text, zählen der Zeichen an, die Sie überspringen, wenn Erstes_Zeichen größer als 1 ist.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sec">
      <MemberSignature Language="C#" Value="public double Sec (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sec([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sec(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sec (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sec(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16938)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Winkel im Bogenmaß, für die die Secant möchten.</param>
        <summary>Gibt die Secant eines Winkels zurück.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sech">
      <MemberSignature Language="C#" Value="public double Sech (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sech([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sech(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sech (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sech(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16939)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Winkel im Bogenmaß, für die die sekans möchten.</param>
        <summary>Gibt die sekans eines Winkels zurück.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeriesSum">
      <MemberSignature Language="C#" Value="public double SeriesSum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SeriesSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SeriesSum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SeriesSum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SeriesSum(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16798)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Eingabewert für die Potenzreihe.</param>
        <param name="Arg2">N – die Ausgangspotenz, die für X gelten soll.</param>
        <param name="Arg3">M – der Schritt, um den N für jeden Ausdruck in der Reihe erhöht werden soll.</param>
        <param name="Arg4">Koeffizienten – eine Reihe von Koeffizienten, mit denen jede nachfolgende Potenz von X multipliziert wird. Durch die Anzahl der Werte in Koeffizienten wird die Anzahl der Ausdrücke in der Potenzreihe bestimmt. Wenn in den Koeffizienten beispielsweise drei Werte vorhanden sind, sind drei Ausdrücke in der Potenzreihe vorhanden.</param>
        <summary>Gibt die Summe einer Potenzreihe auf Basis der Formel zurück: SERIES(x,n,m,a) = a1xn+a2x(n+m)+a3x(n+2m)+...+aix(n+(i-1)m)</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>SeriesSum</b> den #VALUE! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public double Sinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16613)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl entspricht einer beliebigen reellen Zahl.</param>
        <summary>Gibt den hyperbolischen Sinus einer Zahl zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Formel für den hyperbolischen Sinus lautet:</para>
          <para>Abbildung 1: Formel für den hyperbolischen Sinus</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew">
      <MemberSignature Language="C#" Value="public double Skew (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16707)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2 ... – Zwischen 1 und 30 Argumente, für die die Schiefe berechnet werden soll. Anstelle von Argumenten, die durch Semikolons getrennt sind, können Sie auch ein einzelnes Array oder einen Bezug auf ein Array verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt die Schiefe einer Verteilung zurück. Mit der Schiefe wird der Grad der Asymmetrie einer Verteilung um den Durchschnittswert charakterisiert. Mit positiver Schiefe wird eine Verteilung mit einer asymmetrischen Erweiterung angegeben, die auf mehr positive Werten hinweist. Mit negativer Schiefe wird eine Verteilung mit einer asymmetrischen Erweiterung angegeben, die auf mehr negative Werte hinweist.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn weniger als drei Datenpunkte vorliegen oder der Standardabweichung der Stichproben NULL ist, gibt <b>Skew</b> den #DIV/0! Fehlerwert. </para>
          <para>Die Formel für die Schiefe ist folgendermaßen definiert: 

 </para>
          <para>Abbildung 1: Gleichung für Schiefe</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew_p">
      <MemberSignature Language="C#" Value="public double Skew_p (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew_p([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew_p(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew_p (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16960)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg2">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg3">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg4">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg5">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg6">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg7">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg8">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg9">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg10">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg11">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg12">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg13">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg14">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg15">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg16">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg17">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg18">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg19">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg20">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg21">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg22">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg23">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg24">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg25">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg26">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg27">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg28">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg29">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <param name="Arg30">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die mit Zahlen darstellen, für die Sie die Schiefe auffüllen möchten.</param>
        <summary>Gibt die Schiefe einer Verteilergruppe, die auf der Grundlage einer Auffüllung zurück: eine Einstufung der Grad der Asymmetrie einer Verteilung um seinen Mittelwert.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sln">
      <MemberSignature Language="C#" Value="public double Sln (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sln([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sln(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sln (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sln(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16526)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ansch_Wert – die Anlagekosten für den Vermögenswert.</param>
        <param name="Arg2">Restwert – der Wert zum Ende der Abschreibung (gelegentlich wird er als "Restwert" des Vermögenswerts bezeichnet).</param>
        <param name="Arg3">Nutzungsdauer – die Anzahl der Zeiträume, über die der Vermögenswert abgeschrieben wird (dies wird gelegentlich als "Nutzungsdauer" des Vermögenswerts bezeichnet).</param>
        <summary>Gibt die lineare Abschreibung eines Vermögenswerts für einen Zeitraum zurück.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slope">
      <MemberSignature Language="C#" Value="public double Slope (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Slope([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slope (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Slope(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16699)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bekannt_y – ein Array oder ein Zellbereich mit numerisch abhängigen Datenpunkten.</param>
        <param name="Arg2">Bekannt_x – die unabhängigen Datenpunkte.</param>
        <summary>Gibt die Steigung der Regressionsgeraden durch Datenpunkte in Bekannt_y und Bekannt_x zurück. Die Steigung ist der vertikale Abstand, der durch den horizontalen Abstand zwischen beliebigen zwei Punkten auf der Geraden dividiert wird. Dies stellt die Änderungsrate entlang der Regressionsgeraden dar.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Argumente müssen Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn Bekannt_y und Bekannt_x leer sind oder eine unterschiedliche Anzahl von Datenpunkten verfügen, gibt <b>Slope</b> den Fehlerwert #n/a zurück. </para>
          <para>Die Formel für die Steigung der Regressionsgeraden lautet: 

 </para>
          <para>Abbildung 1: Gleichung für die Steigung der Regressionsgeraden</para>
          <para></para>
          <para></para>
          <para>Der zugrunde liegende Algorithmus in die <b>Steigung</b> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> Funktionen unterscheidet sich von der zugrunde liegende Algorithmus der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> Funktion. Der Unterschied zwischen diesen Algorithmen kann zu verschiedenen Ergebnissen führen, wenn Daten unbestimmten und kollineare werden. Wenn die Datenpunkte des Arguments das Y_Werte 0 und die Datenpunkte des Arguments die X_Werte sind sind beispielsweise 1: </para>
          <list type="bullet">
            <item>
              <description>
                <b>Steigung</b> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> Zurückgeben einer #DIV/0! Fehler. Die <b>Steigung</b> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> Algorithmus ist darauf ausgelegt, nur ein einziges Ergebnis gesucht und in diesem Fall werden mehrere Antworten. </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />Gibt den Wert 0 zurück. Die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> Algorithmus sinnvolle Ergebnisse für kollineare Daten zurückgeben soll, und in diesem Fall mindestens eine Antwort gefunden werden kann.</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Small">
      <MemberSignature Language="C#" Value="public double Small (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Small([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Small(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Small (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Small(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16710)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array – ein Array oder Bereich von numerischen Daten, für das bzw. den der k-kleinste Wert ermittelt werden soll.</param>
        <param name="Arg2">K – die Position (ausgehend vom kleinsten Wert) im Array oder im Bereich der zurückzugebenden Daten.</param>
        <summary>Gibt den k-kleinsten Wert in einem Datensatz zurück. Mit dieser Funktion können Sie Werte mit einer bestimmten relativen Bedeutung in einem Datensatz zurückgeben.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Array leer ist, gibt <b>Small</b> den #NUM! Fehlerwert. </para>
          <para>Ist k ≤ 0 oder k überschreitet die Anzahl der Datenpunkte, gibt <b>Small</b> den #NUM! Fehlerwert. </para>
          <para>Wenn N die Anzahl der Datenpunkte in Array darstellt, entspricht SMALL(Array,1) dem kleinsten Wert, und SMALL(Array,n) entspricht dem größten Wert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SqrtPi">
      <MemberSignature Language="C#" Value="public double SqrtPi (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SqrtPi([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SqrtPi(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SqrtPi (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SqrtPi(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16800)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die Zahl, mit der Pi multipliziert wird.</param>
        <summary>Gibt die Quadratwurzel von (Zahl * Pi) zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Zahl &lt; 0, gibt <b>SqrtPi</b> das #NUM zurück! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Standardize">
      <MemberSignature Language="C#" Value="public double Standardize (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Standardize([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Standardize(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Standardize (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Standardize(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16681)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, der normalisiert werden soll.</param>
        <param name="Arg2">Mittelwert – das arithmetische Mittel der Verteilung.</param>
        <param name="Arg3">Standabwn – die Standardabweichung der Verteilung.</param>
        <summary>Gibt einen normalisierten Wert aus einer Verteilung zurück, die durch Mittelwert und Standabwn charakterisiert wird.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Ist Standabwn ≤ 0, <b>Standardisierung</b> der #NUM #zahl! Fehlerwert. </para>
          <para>Die Formel für den normalisierten Wert lautet: 

 </para>
          <para>Abbildung 1: Gleichung für den normalisierten Wert</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev">
      <MemberSignature Language="C#" Value="public double StDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16396)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2 ... – Zwischen 1 und 30 Zahlenargumente, die einer Stichprobe einer Grundgesamtheit entsprechen. Anstelle von Argumenten, die durch Semikolons getrennt sind, können Sie auch ein einzelnes Array oder einen Bezug auf ein Array verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Schätzt die Standardabweichung auf der Grundlage einer Stichprobe. Bei der Standardabweichung handelt es sich um ein Maß dafür, wie weit Werte vom Durchschnittswert (Mittelwert) gestreut sind.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Methode.</para>
          <para>
            <b>StDev</b> wird davon ausgegangen, dass die Argumente einer Stichprobe aus der Gesamtheit sind. Wenn die Daten die gesamte Auffüllung darstellt, klicken Sie dann berechnen Sie die Standardabweichung mit <b>StDev</b>. </para>
          <para>Die Standardabweichung wird mithilfe der "Methode ohne Vorannahmen" (n-1) berechnet.</para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>
            <b>StDev</b> wird folgende Formel verwendet: </para>
          <para>Abbildung 1: Gleichung für die StDev-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei stellt X den Mittelwert der Stichprobe dar – AVERAGE(Zahl1, Zahl2,…), und N stellt die Größe der Stichprobe dar.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_P">
      <MemberSignature Language="C#" Value="public double StDev_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16895)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2... - 1 bis 30 Zahlenargumente, die einer Grundgesamtheit entsprechen. Sie können auch ein Array oder einen Bezug auf ein Array anstelle der durch Komma getrennten Argumente verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Berechnet die Standardabweichung auf Grundlage der angegebenen, vollständigen Grundgesamtheit als Argumente. Bei der Standardabweichung handelt es sich um ein Maß dafür, wie weit Werte vom Durchschnittswert (Mittelwert) gestreut sind.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>StDev.p</b> wird davon ausgegangen, dass die Argumente der gesamten Auffüllung sind. Wenn Ihre Daten eine Stichprobe der Population darstellt, klicken Sie dann berechnen Sie die Standardabweichung mit <b>StDev.p</b>. </para>
          <para>Bei großen Stichproben <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> und <b>StDev.p</b> ungefähr gleich große Werte zurück. </para>
          <para>Die Standardabweichung wird mithilfe der "Methode mit Vorannahmen" (n) berechnet.</para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen sein.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>
            <b>StDev.p</b> wird folgende Formel verwendet: </para>
          <para>Abbildung 1: Gleichung für die StDev_P-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei stellt X den Mittelwert der Stichprobe dar – AVERAGE(Zahl1, Zahl2,…), und N stellt die Größe der Stichprobe dar.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_S">
      <MemberSignature Language="C#" Value="public double StDev_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16894)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2 ... – Zwischen 1 und 30 Zahlenargumente, die einer Stichprobe einer Grundgesamtheit entsprechen. Anstelle von Argumenten, die durch Semikolons getrennt sind, können Sie auch ein einzelnes Array oder einen Bezug auf ein Array verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Schätzt die Standardabweichung auf der Grundlage einer Stichprobe. Bei der Standardabweichung handelt es sich um ein Maß dafür, wie weit Werte vom Durchschnittswert (Mittelwert) gestreut sind.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Für Stdev.s</b> wird vorausgesetzt, dass Argumente einer Stichprobe aus der Gesamtheit sind. Wenn die Daten die gesamte Auffüllung darstellt, klicken Sie dann berechnet die Standardabweichung using <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Die Standardabweichung wird mithilfe der "Methode ohne Vorannahmen" (n-1) berechnet.</para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>
            <b>Für Stdev.s</b> wird folgende Formel verwendet: </para>
          <para>Abbildung 1: Gleichung für die StDev_S-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei stellt X den Mittelwert der Stichprobe dar – AVERAGE(Zahl1, Zahl2,…), und N stellt die Größe der Stichprobe dar.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StDevP">
      <MemberSignature Language="C#" Value="public double StDevP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDevP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDevP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDevP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16577)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2 ... – Zwischen 1 und 30 Zahlenargumente, die einer Stichprobe einer Grundgesamtheit entsprechen. Anstelle von Argumenten, die durch Semikolons getrennt sind, können Sie auch ein einzelnes Array oder einen Bezug auf ein Array verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Berechnet die Standardabweichung auf Grundlage der angegebenen, vollständigen Grundgesamtheit als Argumente. Bei der Standardabweichung handelt es sich um ein Maß dafür, wie weit Werte vom Durchschnittswert (Mittelwert) gestreut sind.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Methode.</para>
          <para>
            <b>StDevP</b> wird davon ausgegangen, dass die Argumente der gesamten Auffüllung sind. Wenn Ihre Daten eine Stichprobe der Population darstellt, klicken Sie dann berechnet die Standardabweichung using <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Bei großen Stichproben <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> und <b>StDevP</b> ungefähr gleich große Werte zurück. </para>
          <para>Die Standardabweichung wird mithilfe der "Methode mit Vorannahmen" (n) berechnet. Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen sein. </para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht. <b>StDevP</b> wird folgende Formel verwendet: </para>
          <para>Abbildung 1: Gleichung für die StDev-Methode</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StEyx">
      <MemberSignature Language="C#" Value="public double StEyx (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StEyx([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StEyx(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StEyx (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double StEyx(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16698)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bekannt_y – ein Array oder ein Bereich von abhängigen Datenpunkten.</param>
        <param name="Arg2">Bekannt_x – ein Array oder ein Bereich von unabhängigen Datenpunkten.</param>
        <summary>Gibt den Standardfehler des geschätzten y-Werts für jedes X in der Regression zurück. Der Standardfehler ist ein Maß für die Anzahl von Fehlern in der Prognose eines Y für ein einzelnes X.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn Bekannt_y und Bekannt_x eine unterschiedliche Anzahl von Datenpunkten aufweisen, gibt <b>StEyx</b> den Fehlerwert #n/a zurück. </para>
          <para>Wenn Bekannt_y und Bekannt_x leer sind oder weniger als drei Datenpunkte, gibt <b>StEyx</b> den #DIV/0! Fehlerwert. </para>
          <para>Die Formel für den Standardfehler des geschätzten Y lautet: 

 </para>
          <para>Abbildung 1: Gleichung für den Standardfehler des geschätzten y</para>
          <para></para>
          <para></para>
          <para>Hierbei stellen X und Y die Beispieldurchschnittswerte AVERAGE(Bekannt_x) und AVERAGE(Bekannt_y) dar, und N stellt die Stichprobengröße dar.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Substitute">
      <MemberSignature Language="C#" Value="public string Substitute (string Arg1, string Arg2, string Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Substitute([in]string Arg1, [in]string Arg2, [in]string Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Substitute(System.String,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substitute (Arg1 As String, Arg2 As String, Arg3 As String, Optional Arg4 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text - der Text oder der Bezug auf eine Zelle mit Text, für die Sie Zeichen ersetzen möchten.</param>
        <param name="Arg2">Alter_Text - der zu ersetzende Text.</param>
        <param name="Arg3">Neuer_Text - der Text, durch den Sie Alter_Text ersetzen möchten.</param>
        <param name="Arg4">ntes_Auftreten - gibt an, welches Vorkommen von Alter_Text durch Neuer_Text ersetzt werden soll. Wenn Sie ntes_Auftreten angeben, wird nur diese Instanz von Alter_Text ersetzt. Andernfalls wird jedes Vorkommen von Alter_Text in Text zu Neuer_Text geändert.</param>
        <summary>Ersetzt in einer Textzeichenfolge Alter_Text durch Neuer_Text. Verwenden Sie SUBSTITUTE, wenn Sie einen bestimmten Text in einer Textzeichenfolge ersetzen möchten; verwenden Sie REPLACE, wenn Sie jeden Text ersetzen möchten, der an einer bestimmten Stelle in einer Textzeichenfolge vorkommt.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtotal">
      <MemberSignature Language="C#" Value="public double Subtotal (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Subtotal([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Subtotal(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtotal (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16728)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine Zahl, die die von der Methode zu verwendende Aggregationsfunktion angibt.</param>
        <param name="Arg2">Die erste <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekt für die ein Teilergebnis berechnet werden soll.</param>
        <param name="Arg3">
          <paramref name="Arg3" />–<paramref name="Arg30" /> Nachfolgende <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekte für die ein Teilergebnis berechnet werden soll.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Generiert Teilergebnisse.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public double Sum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16388)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... - zwischen 1 und 30 Argumente, für die Sie den Gesamtwert bzw. die Summe ermitteln möchten.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Addiert alle Zahlen in einem Zellbereich.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Zahlen, Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt. </para>
          <para>Wenn ein Argument ein Array oder ein Verweis ist, werden nur Zahlen in diesem Array oder Bezug gezählt. Leere Zellen, Wahrheitswerte oder Text im Array oder Bezug werden ignoriert. </para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIf">
      <MemberSignature Language="C#" Value="public double SumIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16729)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bereich – der Zellbereich, der nach Kriterien ausgewertet werden soll.</param>
        <param name="Arg2">Kriterien – die Kriterien in Form einer Zahl, Ausdruck oder Text, der definiert, welche Zellen hinzugefügt werden soll. Kriterien können beispielsweise als 32, ausgedrückt werden "32", "&gt;32" oder "Apples".</param>
        <param name="Arg3">Summe_Bereich – die tatsächlich zu addierenden Zellen, wenn die entsprechenden Zellen in Bereich auf Kriterien zutreffen. Wenn Summe_Bereich ausgelassen wird, werden die Zellen im Bereich sowohl nach Kriterien ausgewertet als auch addiert, sofern sie Kriterien entsprechen.</param>
        <summary>Addiert die nach einem bestimmten Kriterium angegebenen Zellen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Summe_Bereich muss nicht dieselbe Größe und Form wie Bereich aufweisen. Die tatsächlich zu addierenden Zellen werden bestimmt, indem die linke obere Zelle in Summe_Bereich als Anfangszelle verwendet wird und dann die Zellen einbezogen werden, die Bereich hinsichtlich Größe und Form entsprechen. Beispiel:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>In Kriterien können Sie die Platzhalterzeichen Sternchen (*) und Fragezeichen (?) verwenden. Mit einem Fragezeichen erfolgt ein Abgleich mit jedem einzelnen Zeichen; mit einem Sternchen erfolgt ein Abgleich mit einer beliebigen Abfolge von Zeichen. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, geben Sie vor dem Zeichen eine Tilde (~) ein.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIfs">
      <MemberSignature Language="C#" Value="public double SumIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16866)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Summe_Bereich – der Bereich, für den die Summe ermittelt werden soll.</param>
        <param name="Arg2">Kriterien_Bereich1, Kriterien_Bereich2, … – ein oder mehrere Bereiche, in denen die zugewiesenen Kriterien ausgewertet werden sollen.</param>
        <param name="Arg3">Criteria1 criteria2... -eine oder mehrere Kriterien in Form einer Zahl, Ausdruck, Zellbezug oder Text, die definieren, welche Zellen hinzugefügt werden soll. Kriterien können beispielsweise als 32, ausgedrückt werden "32", "&gt;32", "Äpfel" oder B4.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>Addiert die Zellen in einem Bereich, die mehreren Kriterien entsprechen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die einzelnen Zellen in Summe_Bereich werden nur dann addiert, wenn alle für diese Zelle angegebenen Kriterien zutreffen.</para>
          <para>Zellen in Summe_Bereich, die <b>true</b> enthalten, werden als 1 ausgewertet; Zellen in Summe_Bereich, die <b>false</b> enthalten, werden als 0 (null) ausgewertet. </para>
          <para>In Kriterien können Sie die Platzhalterzeichen Sternchen (*) und Fragezeichen (?) verwenden. Mit einem Fragezeichen erfolgt ein Abgleich mit jedem einzelnen Zeichen; mit einem Sternchen erfolgt ein Abgleich mit einer beliebigen Abfolge von Zeichen. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, geben Sie vor dem Zeichen eine Tilde (~) ein.</para>
          <para>Kriterien_Bereich muss jeweils nicht dieselbe Größe und Form wie Summe_Bereich aufweisen. Die tatsächlich zu addierenden Zellen werden bestimmt, indem die linke obere Zelle in diesem Kriterien_Bereich als Anfangszelle verwendet wird und dann die Zellen einbezogen werden, die Summe_Bereich hinsichtlich Größe und Form entsprechen. Beispiel:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumProduct">
      <MemberSignature Language="C#" Value="public double SumProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16612)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1, Array2, Array3, ... – zwischen 2 und 30 Arrays, deren Bestandteile Sie multiplizieren und anschließend addieren möchten.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Multipliziert einander entsprechende Bestandteile in den angegebenen Arrays und gibt die Summe dieser Produkte zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Arrayargumente müssen denselben Dimensionen verfügen. Wenn dies nicht der Fall ist, gibt <b>SumProduct</b> den #VALUE! Fehlerwert. </para>
          <para>
            <b>SumProduct</b> behandelt, die nicht numerisch ist, als wären sie Nullen sind.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumSq">
      <MemberSignature Language="C#" Value="public double SumSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16705)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – zwischen 1 und 30 Argumente, für die Sie die Summe der Quadrate ermitteln möchten. Sie können auch ein einzelnes Array oder einen Bezug auf ein Array anstelle von Argumenten verwenden, die durch Semikolons getrennt sind.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt die Summe der Quadrate der Argumente zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen. </para>
          <para>Zahlen, Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt. </para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert. </para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht. </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2MY2">
      <MemberSignature Language="C#" Value="public double SumX2MY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2MY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2MY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2MY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2MY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16688)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x – das erste Array bzw. der erste Wertebereich.</param>
        <param name="Arg2">Array_y – das zweite Array bzw. der zweite Wertebereich.</param>
        <summary>Gibt die Summe der Differenz von Quadraten einander entsprechender Werte in zwei Arrays zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Argumente müssen Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn Array_x und Array_y eine unterschiedliche Anzahl von Werten, <b>SumX2MY2returns</b> den Fehlerwert #n/a aufweisen. </para>
          <para>Die Formel für die Summe der Differenz von Quadraten lautet: 

 </para>
          <para>Abbildung 1: Gleichung für die Summe der Differenz von Quadraten</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2PY2">
      <MemberSignature Language="C#" Value="public double SumX2PY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2PY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2PY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2PY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2PY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16689)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x – das erste Array bzw. der erste Wertebereich.</param>
        <param name="Arg2">Array_y – das zweite Array bzw. der zweite Wertebereich.</param>
        <summary>Gibt die Summe der Summe von Quadraten einander entsprechender Werte in zwei Arrays zurück. Die Summe der Summe von Quadraten stellt einen gebräuchlichen Ausdruck in vielen statistischen Berechnungen dar.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Argumente müssen Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn Array_x und Array_y eine unterschiedliche Anzahl von Werten aufweisen, gibt <b>SumX2PY2</b> den Fehlerwert #n/a zurück. </para>
          <para>Die Formel für die Summe der Summe von Quadraten lautet: 

 </para>
          <para>Abbildung 1: Gleichung für die Summe der aus Quadratzahlen</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SumXMY2">
      <MemberSignature Language="C#" Value="public double SumXMY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumXMY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumXMY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumXMY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumXMY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16687)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x – das erste Array bzw. der erste Wertebereich.</param>
        <param name="Arg2">Array_y – das zweite Array bzw. der zweite Wertebereich.</param>
        <summary>Gibt die Summe der Quadrate von Differenzen einander entsprechender Werte in zwei Arrays zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Argumente müssen Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn Array_x und Array_y eine unterschiedliche Anzahl von Werten aufweisen, gibt <b>SumXMY2</b> den Fehlerwert #n/a zurück. </para>
          <para>Die Formel für die Summe von Differenzen im Quadrat lautet: 

 </para>
          <para>Abbildung 1: Gleichung für die Summe quadrierter Differenzen</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Syd">
      <MemberSignature Language="C#" Value="public double Syd (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Syd([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Syd(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Syd (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Syd(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16527)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ansch_Wert – die Anlagekosten für den Vermögenswert.</param>
        <param name="Arg2">Restwert – der Wert zum Ende der Abschreibung (gelegentlich wird er als "Restwert" des Vermögenswerts bezeichnet).</param>
        <param name="Arg3">Nutzungsdauer – die Anzahl der Zeiträume, über die der Vermögenswert abgeschrieben wird (dies wird gelegentlich als "Nutzungsdauer" des Vermögenswerts bezeichnet).</param>
        <param name="Arg4">Zr – der Zeitraum; hierfür müssen die gleichen Einheiten wie für Nutzungsdauer verwendet werden.</param>
        <summary>Gibt die Abschreibung eines Vermögenswerts im Hinblick auf die Zahlen der Jahressumme für einen bestimmten Zeitraum zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>SYD</b> wird folgendermaßen berechnet:</para>
          <para>Abbildung 1: Gleichung für die Syd-Methode</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist">
      <MemberSignature Language="C#" Value="public double T_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16896)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - Der Wert, für den die Verteilung ausgewertet werden soll.</param>
        <param name="Arg2">Freiheitsgrade - eine ganze Zahl, die die Anzahl der Freiheitsgrade angibt.</param>
        <param name="Arg3">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn kumulative <b>true festgelegt</b>ist, <b>gibt t.dist</b> Wert der Verteilungsfunktion; Wenn <b>false</b>, die Wahrscheinlichkeitswert der Funktion zurückgegeben.</param>
        <summary>Gibt die Student-t-Verteilung zurück, wobei ein numerischer Wert (x) einem berechneten Wert von t entspricht, für den die Prozentpunkte berechnet werden.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>t.dist</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade &lt; 1, gibt <b>t.dist-Methode</b> das #NUM zurück! Fehlerwert. </para>
          <para>Wenn x &lt; 0, und klicken Sie dann auf <b>t.dist-Methode</b> gibt das #NUM zurück! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_2T">
      <MemberSignature Language="C#" Value="public double T_Dist_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16897)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - Der Wert, für den die Verteilung ausgewertet werden soll.</param>
        <param name="Arg2">Freiheitsgrade - eine ganze Zahl, die die Anzahl der Freiheitsgrade angibt.</param>
        <summary>Gibt die zweiseitige (Student) t-Verteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>T_Dist_2T</b> die #VALUE! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade &lt; 1, <b>T_Dist_2T</b> das #NUM zurückgibt! Fehlerwert. </para>
          <para>Wenn x &lt; 0, und klicken Sie dann auf <b>T_Dist_2T</b> gibt das #NUM zurück! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_RT">
      <MemberSignature Language="C#" Value="public double T_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16898)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - Der Wert, für den die Verteilung ausgewertet werden soll.</param>
        <param name="Arg2">Freiheitsgrade - Eine ganze Zahl zum Angeben der Freiheitsgrade.</param>
        <summary>Gibt die rechtsseitige (Student) t-Verteilung zurück, wobei ein numerischer Wert (x) dem berechneten Wert t entspricht, für den die Prozentpunkte berechnet werden sollen. Die t-Verteilung wird in der Hypothesenüberprüfung von kleinen Beispieldatensätzen verwendet. Verwenden Sie diese Funktion anstelle einer Tabelle mit kritischen Werten für die t-Verteilung.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>gibt t.dist.RT</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade &lt; 1, <b>gibt t.dist.RT</b> den #NUM zurückgibt! Fehlerwert. </para>
          <para>Die Argumente Freiheitsgrade und Seiten werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Seiten einen anderen Wert als 1 oder 2 aufweist, gibt <b>gibt t.dist.RT</b> den #NUM! Fehlerwert. </para>
          <para>Wenn x &lt; 0, dann <b>gibt t.dist.RT</b> gibt das #NUM zurück! Fehlerwert. </para>
          <para>Wenn Seiten = 1, <b>gibt t.dist.RT</b> wird als gibt t.dist.RT berechnet = P (X&gt;X), wobei X eine Zufallsvariable ist, die t-Verteilung. Wenn Seiten = 2, <b>gibt t.dist.RT</b> wird als gibt t.dist.RT berechnet = P (| X | &gt; X) = P (X &gt; x oder X &lt; - X). </para>
          <para>Da x &lt; 0 ist, <b>gibt t.dist.RT</b> verwenden nicht zulässig beim x &lt; 0, beachten Sie, T_DIST_RT(-x,df) = 1 – T_DIST_RT(x,df) = P (X &gt; - X) und T_DIST_2T(-x,df) = T_DIST_2T(x df) = P (| X | &gt; X).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv">
      <MemberSignature Language="C#" Value="public double T_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16899)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrsch – die zur Student-t-Verteilung gehörige Wahrscheinlichkeit.</param>
        <param name="Arg2">Freiheitsgrade - die Anzahl der Freiheitsgrade, durch die die Verteilung charakterisiert wird.</param>
        <summary>Gibt linksseitige Quantile der (Student) t-Verteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>gibt t.Inv</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Wahrsch &lt; 0 oder Wahrsch &gt; 1, <b>gibt t.Inv</b> das #NUM zurückgibt! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade keine ganze Zahl ist, wird die Zahl gekürzt.</para>
          <para>Wenn Freiheitsgrade &lt; 1, <b>gibt t.Inv</b> das #NUM zurückgibt! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv_2T">
      <MemberSignature Language="C#" Value="public double T_Inv_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16900)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Warsch - Die zweiseitig zur Student-t-Verteilung gehörige Wahrscheinlichkeit.</param>
        <param name="Arg2">Freiheitsgrade - Die Anzahl der Freiheitsgrade, durch die die Verteilung charakterisiert wird.</param>
        <summary>Gibt den t-Wert der Student-t-Verteilung als Funktion der Wahrscheinlichkeit und der Freiheitsgrade zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>T_Inv_2T</b> die #VALUE! Fehlerwert. </para>
          <para>Wenn Wahrsch &lt; 0 oder, wenn Wahrsch &gt; 1, <b>T_Inv_2T</b> das #NUM zurückgibt! Fehlerwert. Wenn der Wert für Freiheitsgrade keine ganze Zahl darstellt, wird die Zahl gekürzt. </para>
          <para>Wenn Freiheitsgrade &lt; 1, <b>T_Inv_2T</b> das #NUM zurückgibt! Fehlerwert. </para>
          <para>
            <b>T_Inv_2T</b> gibt den Wert t, so dass P (| X | &gt; t) = dabei ist X eine Zufallsvariable, der die t-Verteilung und P folgt (| X | &gt; t) = P (X &lt; t- oder X &gt; d). </para>
          <para>Ein einseitige t-Wert kann durch Ersetzen von Wahrsch mit 2*Wahrscheinlichkeit zurückgegeben werden. Für eine Wahrscheinlichkeit von 0,05 und Freiheitsgraden von 10 wird der Wert zweiseitige mit T_INV_2T(0.05,10), berechnet das 2.28139 zurückgibt. Der eine einseitige Wert für die gleiche Wahrscheinlichkeit und der Freiheitsgrade kann mit berechnet werden T_INV_2T(2*0.05,10), die 1.812462 zurückgibt. </para>
          <para>
            <b>Hinweis</b>: In einigen Tabellen wird Wahrsch als (1-p) beschrieben.</para>
          <para>Wenn ein Wert für Wahrsch <b>T_Inv_2T</b> sucht den Wert x, so, gibt t.dist.RT (X, Freiheitsgrade; 2) = Wahrscheinlichkeit. Folglich Genauigkeit von <b>T_Inv_2T</b> hängt von der Genauigkeit von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />. <b>T_Inv_2T</b> verwendet eine iterative Suche. Wenn die Suche nach 100 Iterationen nicht zusammengeführt wurde, gibt die Funktion den Fehlerwert #n/a zurück.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Test">
      <MemberSignature Language="C#" Value="public double T_Test (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Test([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Test (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Test(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16925)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 - Das erste Dataset.</param>
        <param name="Arg2">Array2 - Das zweite Dataset.</param>
        <param name="Arg3">Typargumente - gibt die Anzahl der Seiten der Verteilung. Wenn Seiten = 1, <b>gibt t.Test</b> verwendet die-Quadrat-Verteilung. Wenn Seiten = 2, <b>gibt t.Test</b> verwendet die zweiseitige Verteilung.</param>
        <param name="Arg4">Typ - Die Art des durchzuführenden T-Tests.</param>
        <summary>Gibt die Wahrscheinlichkeit zurück, die mit einem Student-t-Test verbunden ist. Verwenden Sie T.TEST, um zu ermitteln, ob zwei Stichproben wahrscheinlich aus denselben zwei zugrunde liegenden Grundgesamtheiten stammen, die denselben Mittelwert besitzen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn array1 und array2 eine unterschiedliche Anzahl von Datenpunkten und Typ aufweisen = 1 (kombinierte), <b>gibt t.Test</b> gibt den Fehlerwert #n/a zurück. </para>
          <para>Die Seiten und Typargumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Seiten oder Typ nicht numerisch ist, gibt <b>t.Test</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Seiten einen anderen Wert als 1 oder 2 aufweist, gibt <b>t.Test</b> den #NUM! Fehlerwert. </para>
          <para>
            <b>T.Test</b> verwendet die Daten in Matrix1 und Matrix2 zur Berechnung einer nicht Negative t-Statistik. Wenn Seiten = 1, <b>gibt t.Test</b> gibt die Wahrscheinlichkeit, einen höheren Wert t-Statistik unter der Annahme, dass Matrix1 und Matrix2 Beispiele von Auffüllungen mit der gleichen Mittelwert sind zurück. Der Rückgabewert <b>gibt t.Test</b> beim Typargumente = 2 ist double, zurückgegeben, bei welchen = 1 und die Wahrscheinlichkeit, einen höheren absoluten Wert der t-Statistik unter der Annahme "dieselbe Auffüllung bedeutet" entspricht.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public double Tanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Tanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Tanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Tanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16615)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – eine beliebige reelle Zahl</param>
        <summary>Gibt den hyperbolischen Tangens einer Zahl zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Formel für den hyperbolischen Tangens lautet:</para>
          <para>Abbildung 1: Formel für den hyperbolischen Tangens</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillEq">
      <MemberSignature Language="C#" Value="public double TBillEq (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillEq([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillEq(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillEq (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16822)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Schatzwechsels. Das Abrechnungsdatum des Schatzwechsels entspricht dem Datum nach dem Emissionsdatum, mit dem das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für den Schatzwechsel. Das Fälligkeitsdatum entspricht dem Datum, mit dem die Gültigkeit des Schatzwechsels abläuft.</param>
        <param name="Arg3">ImportantDates sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden. Disagio – des Schatzwechsels Abzinsungssatz angibt.</param>
        <summary>Gibt die Rendite eines Schatzwechsels zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Abrechnung und Fälligkeit werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültiges Datum angegeben sind, gibt <b>TBillEq</b> den #VALUE! Fehlerwert. </para>
          <para>Ist Disagio ≤ 0, <b>gibt TBillEq</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Wenn Abrechnung &gt; Fälligkeit oder wenn Fälligkeit mehr als ein Jahr hinter Abrechnung liegt, gibt <b>TBillEq</b> den #NUM! Fehlerwert. </para>
          <para>
            <b>TBILLEQ wird als TBILLEQ</b> = (365 X Rate) / (360-(Rate X DSM)), wobei DSM ist die Anzahl der Tage zwischen Abrechnung und Fälligkeit entspricht, die anhand der Basis 360 Tagen pro Jahr.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillPrice">
      <MemberSignature Language="C#" Value="public double TBillPrice (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillPrice([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillPrice(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillPrice (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16823)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Schatzwechsels. Das Abrechnungsdatum des Schatzwechsels entspricht dem Datum nach dem Emissionsdatum, mit dem das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für den Schatzwechsel. Das Fälligkeitsdatum entspricht dem Datum, mit dem die Gültigkeit des Schatzwechsels abläuft.</param>
        <param name="Arg3">Disagio – der Abzinsungsfaktor (Disagio) des Schatzwechsels.</param>
        <summary>Gibt den Nennwert des Preises pro 100 $ für einen Schatzwechsel zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Abrechnung und Fälligkeit werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültiges Datum angegeben sind, gibt <b>TBillPrice</b> den #VALUE! Fehlerwert. </para>
          <para>Ist Disagio ≤ 0, <b>gibt TBillPrice</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Wenn Abrechnung &gt; Fälligkeit oder wenn Fälligkeit mehr als ein Jahr hinter Abrechnung liegt, gibt <b>TBillPrice</b> den #NUM! Fehlerwert. </para>
          <para>
            <b>TBillPrice</b> wird folgendermaßen berechnet: </para>
          <para>Abbildung 1: Gleichung für die TBillPrice-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>DSM = Anzahl der Tage zwischen Abrechnung und Fälligkeit ist, fälligkeitsdatumswerte, die mehr als ein Kalenderjahr hinter dem Abrechnungsdatum ist.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillYield">
      <MemberSignature Language="C#" Value="public double TBillYield (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillYield([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillYield(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillYield (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16824)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Schatzwechsels. Das Abrechnungsdatum des Schatzwechsels entspricht dem Datum nach dem Emissionsdatum, mit dem das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für den Schatzwechsel. Das Fälligkeitsdatum entspricht dem Datum, mit dem die Gültigkeit des Schatzwechsels abläuft.</param>
        <param name="Arg3">Kurs – der Nennwert des Schatzwechsels als Preis pro 100 $.</param>
        <summary>Gibt die Rendite für einen Schatzwechsel zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Abrechnung und Fälligkeit werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültiges Datum angegeben sind, gibt <b>TBillYield</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Kurs ≤ 0, <b>gibt TBillYield</b> den #NUM zurückgibt! Fehlerwert. </para>
          <para>Wenn Abrechnung ≥ Fälligkeit oder wenn Fälligkeit mehr als ein Jahr hinter Abrechnung liegt, gibt <b>TBillYield</b> den #NUM! Fehlerwert. </para>
          <para>
            <b>TBillYield</b> wird folgendermaßen berechnet: </para>
          <para>Abbildung 1: Gleichung für die TBillYield-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>DSM = Anzahl der Tage zwischen Abrechnung und Fälligkeit ist, fälligkeitsdatumswerte, die mehr als ein Kalenderjahr hinter dem Abrechnungsdatum ist.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TDist">
      <MemberSignature Language="C#" Value="public double TDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16685)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der numerische Wert, für den die Verteilung ausgewertet werden soll.</param>
        <param name="Arg2">Freiheitsgrade – eine ganze Zahl, mit der die Anzahl der Freiheitsgrade angegeben wird.</param>
        <param name="Arg3">Seiten – gibt die zurückzugebende Anzahl von Verteilungserweiterungen an. Wenn Seiten = 1, gibt TDIST die Verteilung mit einer Erweiterung zurück. Wenn Seiten = 2, gibt TDIST die Verteilung mit zwei Erweiterungen zurück.</param>
        <summary>Gibt die Prozentpunkte (die Wahrscheinlichkeit) für die Student-t-Verteilung zurück, wobei ein numerischer Wert (x) einem berechneten Wert von t entspricht, für den die Prozentpunkte berechnet werden sollen. Die t-Verteilung wird in der Hypothesenüberprüfung von kleinen Beispieldatensätzen verwendet. Verwenden Sie diese Funktion anstelle einer Tabelle mit kritischen Werten für die t-Verteilung.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu den neuen Funktionen finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" />, und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" /> Methoden.</para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>TDist</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Freiheitsgrade &lt; 1, <b>gibt TDist</b> das #NUM zurückgibt! Fehlerwert. </para>
          <para>Die Argumente Freiheitsgrade und Seiten werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Seiten einen anderen Wert als 1 oder 2 aufweist, gibt <b>TDist</b> den #NUM! Fehlerwert. </para>
          <para>Wenn x &lt; 0, und klicken Sie dann auf <b>TVERT</b> gibt das #NUM zurück! Fehlerwert. </para>
          <para>Wenn Seiten = 1, <b>wird TVERT als TVERT</b> = P (X&gt;X), wobei X eine Zufallsvariable ist, die t-Verteilung. Wenn Seiten = 2, <b>wird TVERT als TVERT</b> = P (| X | &gt; X) = P (X &gt; x oder X &lt; - X). </para>
          <para>Seit x &lt; 0 nicht zulässig, <b>gibt TDist</b> verwenden Wenn X &lt; 0, Hinweis TDIST(-x,df,1) = 1 – TDIST(x,df,1) = P (X &gt; - X) und TDIST(-x,df,2) = TDIST (x df, 2) = P (| X | &gt; X).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text (object Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Text([in]object Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Text(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Text (Arg1 As Object, Arg2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Text(System::Object ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16432)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ein numerischer Wert, eine Formel, die einen numerischen Wert ergibt, oder ein Bezug auf eine Zelle, die einen numerischen Wert enthält.</param>
        <param name="Arg2">Ein Zahlenformat in Textform im Dialogfeld Zellen formatieren auf der Registerkarte Zahl im Feld Kategorie.</param>
        <summary>Konvertiert einen Wert in Text in einem bestimmten Zahlenformat.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDayOfWeek">
      <MemberSignature Language="C#" Value="public string ThaiDayOfWeek (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDayOfWeek([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDayOfWeek(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDayOfWeek (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDayOfWeek(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16753)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDigit">
      <MemberSignature Language="C#" Value="public string ThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDigit (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16754)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiMonthOfYear">
      <MemberSignature Language="C#" Value="public string ThaiMonthOfYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiMonthOfYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiMonthOfYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiMonthOfYear (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiMonthOfYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16755)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumSound">
      <MemberSignature Language="C#" Value="public string ThaiNumSound (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumSound([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumSound(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumSound (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumSound(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16756)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumString">
      <MemberSignature Language="C#" Value="public string ThaiNumString (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumString([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumString(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumString (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumString(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16757)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiStringLength">
      <MemberSignature Language="C#" Value="public double ThaiStringLength (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiStringLength([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiStringLength(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiStringLength (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiStringLength(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16758)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiYear">
      <MemberSignature Language="C#" Value="public double ThaiYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiYear (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16762)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TInv">
      <MemberSignature Language="C#" Value="public double TInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16716)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrsch – die Wahrscheinlichkeit, die der Student-t-Verteilung mit zwei Erweiterungen zugeordet ist.</param>
        <param name="Arg2">Freiheitsgrade – die Anzahl der Freiheitsgrade, mit der die Verteilung charakterisiert werden soll.</param>
        <summary>Gibt den t-Wert der Student-t-Verteilung als Funktion der Wahrscheinlichkeit und der Freiheitsgrade zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu den neuen Funktionen finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" /> Methoden.</para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>TInv</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Wahrsch &lt; 0 oder Wahrsch &gt; 1, gibt <b>TInv</b> das #NUM zurück! Fehlerwert. </para>
          <para>Wenn der Wert für Freiheitsgrade keine ganze Zahl darstellt, wird die Zahl gekürzt.</para>
          <para>Wenn Freiheitsgrade &lt; 1, gibt <b>TInv</b> das #NUM zurück! Fehlerwert. </para>
          <para>
            <b>TInv</b> gibt den Wert t, so dass P (| X | &gt; t) = dabei ist X eine Zufallsvariable, der die t-Verteilung und P folgt (| X | &gt; t) = P (X &lt; t- oder X &gt; d). </para>
          <para>Ein einseitige t-Wert kann durch Ersetzen von Wahrsch mit 2*Wahrscheinlichkeit zurückgegeben werden. Für eine Wahrscheinlichkeit von 0,05 und Freiheitsgraden von 10 wird der Wert zweiseitige mit TINV(0.05,10), berechnet das 2.28139 zurückgibt. Der eine einseitige Wert für die gleiche Wahrscheinlichkeit und der Freiheitsgrade kann mit berechnet werden TINV(2*0.05,10), die 1.812462 zurückgibt. </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public object Transpose (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Transpose([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Transpose(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transpose (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Transpose(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16467)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array – ein Array oder Zellbereich auf einem Arbeitsblatt, der transponiert werden soll. Die Transponierte wird gebildet, indem die erste Zeile des Arrays als erste Spalte des neuen Arrays verwendet wird, die zweite Zeile des Arrays als zweite Spalte des neuen Arrays usw.</param>
        <summary>Gibt einen vertikalen Zellbereich als horizontalen Bereich zurück oder umgekehrt. TRANSPOSE muss als Arrayformel in einem Bereich eingegeben werden, der jeweils dieselbe Anzahl von Zeilen und Spalten besitzt wie ein Array. Verwenden Sie TRANSPOSE, um zwischen der vertikalen und horizontalen Ausrichtung eines Arrays auf einem Arbeitsblatt zu wechseln.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trend">
      <MemberSignature Language="C#" Value="public object Trend (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Trend([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trend (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16434)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Y_Werte - die bereits bekannten y-Werte in der Beziehung y = mx + b.</param>
        <param name="Arg2">X_Werte - eine optionale Menge mit möglicherweise bereits bekannten x-Werten in der Beziehung y = mx + b.</param>
        <param name="Arg3">Neue_X_Werte – neue x-Werte, für die TREND entsprechende y-Werte zurückgeben soll.</param>
        <param name="Arg4">Konstante - ein Wahrheitswert, mit dem angegeben wird, ob erzwungen werden soll, dass die Konstante b gleich 0 sein soll.</param>
        <summary>Gibt die Werte einer linearen Entwicklung zurück. Entspricht einer Geraden (wenn die Methode der kleinsten Quadrate verwendet wird) für die Arrays Bekannt_y und Bekannt_x. Gibt die y-Werte dieser Geraden für das von Ihnen angegebene Array von Neue_X_Werte zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn sich das Array Y_Werte in einer einzelnen Spalte befindet, wird jede Spalte mit X_Werte als separate Variable interpretiert.</para>
          <para>Wenn sich das Array Bekannt_y in einer einzelnen Zeile befindet, wird jede Zeile mit Bekannt_x als separate Variable interpretiert.</para>
          <para>Das Array Bekannt_x kann eine oder mehrere Gruppen mit Variablen enthalten. Wenn nur eine Variable verwendet wird, können Bekannt_y und Bekannt_x Bereiche beliebiger Form darstellen, solange sie gleiche Abmessungen aufweisen. Wenn mehrere Variablen verwendet werden, muss Bekannt_y einen Vektor darstellen (d. h. einen Bereich mit einer Höhe von einer Zeile oder einer Breite von einer Spalte).</para>
          <para>Wenn Bekannt_x ausgelassen wird, wird angenommen, dass dies dem Array {1,2,3,...} entspricht, das dieselbe Größe wie Bekannt_y aufweist.</para>
          <para>Neue_X_Werte muss genau wie Bekannt_x eine Spalte (oder Zeile) für jede unabhängige Variable enthalten. Demnach müssen Bekannt_x und Neue_X_Werte dieselbe Anzahl von Spalten aufweisen, wenn Bekannt_y sich in einer einzelnen Spalte befindet. Wenn sich Bekannt_y in einer einzelnen Zeile befindet, müssen Bekannt_x und Neue_X_Werte dieselbe Anzahl von Zeilen aufweisen.
</para>
          <para>
				Wenn Sie Neue_X_Werte auslassen, wird dafür der Wert von Bekannt_x angenommen.
</para>
          <para>
				Wenn Sie weder Bekannt_x noch Neue_X_Werte angeben, wird angenommen, dass sie dem Array {1,2,3,...} entsprechen, das dieselbe Größe wie Bekannt_y aufweist.
</para>
          <para>Wenn Konstante <b>true</b> ist oder nicht angegeben ist, wird b normal berechnet. </para>
          <para>Wenn Konstante <b>false</b>ist, wird b gleich 0 (null) festgelegt und die m-Werte werden so angepasst, damit y = mx gilt. </para>
          <para>Informationen dazu, wie Microsoft Excel eine gerade an Daten anpasst, finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Sie können <b>Trend</b> zur Anpassung von Polynomen einer Variablen verwenden. Nehmen wir beispielsweise bei Spalte A enthält y-Werte und Spalte B enthält X-Werte. Sie können eingeben X ^ 2 in Spalte C, X ^ 3 in Spalte D, und So weiter und dann Regression Spalten B bis D gegen Spalte A. </para>
          <para>Formeln, die Arrays zurückgeben, müssen als Arrayformeln eingegeben werden.</para>
          <para>Wenn Sie eine Arraykonstante für ein Argument wie Bekannt_x eingeben, verwenden Sie Kommas, um Werte in derselben Zeile zu trennen, und Semikolons, um Zeilen zu trennen.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Trim([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16502)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text – der Text, aus dem Leerzeichen entfernt werden sollen.</param>
        <summary>Entfernt alle Leerzeichen aus Text, nur keine einzelnen Leerzeichen zwischen Wörtern. Verwenden Sie TRIM für Text, den Sie aus einer anderen Anwendung erhalten haben, in der möglicherweise eine unregelmäßige Verwendung von Leerzeichen vorliegt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: die <b>Trim</b> -Funktion zu erhöhen, 7-Bit-ASCII-Leerzeichen (Wert 32) aus Text entwickelt wurde. In den Unicode-Zeichensatz ist ein zusätzliches Leerzeichen geschütztes Leerzeichen, das einen Dezimalwert 160 wurde aufgerufen. Dieses Zeichen wird häufig in Webseiten verwendet, wie die HTML-Entität <b> &amp;Nbsp;</b>. Selbst entfernt die <b>Trim</b> -Funktion dieses geschützte Leerzeichen nicht.</para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimMean">
      <MemberSignature Language="C#" Value="public double TrimMean (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TrimMean([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TrimMean(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimMean (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TrimMean(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16715)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array – das Array oder der Wertebereich, der gekürzt und für den der Durchschnitt ermittelt werden soll.</param>
        <param name="Arg2">Prozent – der Prozentsatz der Datenpunkte, die aus der Berechnung ausgeschlossen werden sollen. Wenn beispielsweise Prozent = 0,2 gilt, werden 4 Punkte aus einem Datensatz aus 20 Punkten herausgenommen (20 x 0,2): 2 aus dem oberen Bereich und 2 aus dem unteren Bereich des Datensatzes.</param>
        <summary>Gibt den Mittelwert des inneren Bereichs eines Datensatzes zurück. TRIMMEAN berechnet den Mittelwert, der sich durch Ausschließen eines prozentualen Anteils von Datenpunkten von den oberen und unteren Erweiterungen eines Datensatzes ergibt. Sie können diese Funktion verwenden, wenn Sie nicht zugehörige Daten aus Ihrer Analyse ausschließen möchten.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Prozent &lt; 0 oder Prozent &gt; 1, gibt <b>TrimMean</b> das #NUM zurück! Fehlerwert. </para>
          <para>
            <b>TrimMean</b> rundet die Zahl der ausgeschlossenen Datenpunkte auf das kleinste Vielfache von 2. Wenn Prozent = 0,1, 10 Prozent von 30 Datenpunkten entspricht 3 Punkt festgelegt. Zwecks Symmetrie schließt <b>TrimMean</b> einen einzelnen Wert aus dem oberen und unteren Rand der DataSet.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TTest">
      <MemberSignature Language="C#" Value="public double TTest (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TTest([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TTest(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTest (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TTest(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16700)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 – der erste Datensatz.</param>
        <param name="Arg2">Array2 – der zweite Datensatz.</param>
        <param name="Arg3">Seiten – gibt die Anzahl von Verteilungserweiterungen an. Wenn Seiten = 1, verwendet TTEST die Verteilung mit einer Erweiterung. Wenn Seiten = 2, verwendet TTEST die Verteilung mit zwei Erweiterungen.</param>
        <param name="Arg4">F – die Art des auszuführenden t-Tests.</param>
        <summary>Gibt die Wahrscheinlichkeit zurück, die mit einem Student-t-Test verbunden ist. Verwenden Sie TTEST, um zu ermitteln, ob zwei Stichproben wahrscheinlich aus denselben zwei zugrunde liegenden Grundgesamtheiten stammen, die denselben Mittelwert besitzen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" /> Methode.</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>Gepaart</description>
            </item>
            <item>
              <term>2</term>
              <description>Zwei Stichproben mit gleicher Varianz (homoskedastisch)</description>
            </item>
            <item>
              <term>3</term>
              <description>Zwei Stichproben mit ungleicher Varianz (heteroskedastisch)</description>
            </item>
          </list>
          <para>Wenn array1 und array2 eine unterschiedliche Anzahl von Datenpunkten und Typ aufweisen = 1 (kombinierte), <b>gibt TTest</b> gibt den Fehlerwert #n/a zurück. </para>
          <para>Die Seiten und Typargumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Seiten oder Typ nicht numerisch ist, gibt <b>TTest</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Seiten einen anderen Wert als 1 oder 2 aufweist, gibt <b>TTest</b> den #NUM! Fehlerwert. </para>
          <para>
            <b>TTest</b> verwendet die Daten in Matrix1 und Matrix2 zur Berechnung einer nicht Negative t-Statistik. Wenn Seiten = 1, <b>gibt TTest</b> gibt die Wahrscheinlichkeit, einen höheren Wert t-Statistik unter der Annahme, dass Matrix1 und Matrix2 Beispiele von Auffüllungen mit der gleichen Mittelwert sind zurück. Der von <b>TTest</b> zurückgegebene Wert beim Typargumente = 2 ist double, zurückgegeben, bei welchen = 1 und die Wahrscheinlichkeit, einen höheren absoluten Wert der t-Statistik unter der Annahme "dieselbe Auffüllung bedeutet" entspricht.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unichar">
      <MemberSignature Language="C#" Value="public string Unichar (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Unichar([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unichar(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unichar (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Unichar(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16964)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Unicode-Zahl, die ein Zeichen darstellt.</param>
        <summary>Gibt das Unicode-Zeichen, die durch den angegebenen numerischen Wert zurück.</summary>
        <returns>
          <b>STRING</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unicode">
      <MemberSignature Language="C#" Value="public double Unicode (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Unicode([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unicode (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Unicode(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16965)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zeichen, das den Unicode-Wert verwendet werden soll.</param>
        <summary>Gibt die Zahl (Codepunkt), das erste Zeichen des Texts entspricht.</summary>
        <returns>
          <b>DOUBLE-WERT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="USDollar">
      <MemberSignature Language="C#" Value="public string USDollar (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string USDollar([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.USDollar(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function USDollar (Arg1 As Double, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ USDollar(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16588)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ein Verweis auf eine Zelle mit einer Zahl oder einer Formel, die als Zahl ausgewertet wird.</param>
        <param name="Arg2">Die Anzahl der Stellen nach dem Komma. Wenn dieser Wert negativ ist, wird die Zahl vor dem Komma gerundet. Wenn Sie diesen Wert nicht angeben, wird 2 angenommen.</param>
        <summary>Konvertiert eine Zahl in Textformat und wendet ein Währungssymbol an. Der Name der Funktion (und das angewendete Symbol) ist abhängig von den Spracheinstellungen.
</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>USDollar</b> -Methode konvertiert eine Zahl in Text Währungsformat und der angegebenen Stelle ein. Das Format lautet #. ## 0.00_);($#,##0.00).</para>
          <para>Der Hauptunterschied zwischen dem Formatieren einer Zelle, die eine Zahl mit dem Befehl Format Zellen enthält und Formatieren einer Zahl direkt mit der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> -Methode ist, die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> das Ergebnis in Text konvertiert. Eine Zahl, die mit dem Befehl Zellen formatieren formatiert ist immer noch eine Zahl. Sie können weiterhin mit formatierte Zahlen verwenden <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> in Formeln, da Excel Zahlen, die konvertiert bei der Berechnung zu Nummern als Textwerte eingegeben.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Var">
      <MemberSignature Language="C#" Value="public double Var (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16430)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2... - 1 bis 30 Zahlenargumente, die einer Stichprobe einer Grundgesamtheit entsprechen.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Schätzt die Varianz anhand einer Stichprobe.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Var</b> wird davon ausgegangen, dass die Argumente einer Stichprobe aus der Gesamtheit sind. Wenn die Daten die gesamte Auffüllung darstellt, berechnen Sie die Abweichung mithilfe von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen sein.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>
            <b>Var</b> wird folgende Formel verwendet: </para>
          <para>Abbildung 1: Gleichung für die Var-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei stellt X den Mittelwert der Stichprobe dar – AVERAGE(Zahl1, Zahl2,…), und N stellt die Größe der Stichprobe dar.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_P">
      <MemberSignature Language="C#" Value="public double Var_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16902)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2... - 1 bis 30 Zahlenargumente, die einer Grundgesamtheit entsprechen.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Berechnet die Varianz anhand der Grundgesamtheit.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Var.p</b> wird davon ausgegangen, dass die Argumente der gesamten Auffüllung sind. Wenn Ihre Daten eine Stichprobe der Population darstellt, berechnen Sie die Abweichung mithilfe von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen sein.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Die Formel für <b>var.p</b> lautet: </para>
          <para>Abbildung 1: Gleichung für die Var_P-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei stellt X den Mittelwert der Stichprobe dar – AVERAGE(Zahl1, Zahl2,…), und N stellt die Größe der Stichprobe dar.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_S">
      <MemberSignature Language="C#" Value="public double Var_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16901)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2... - 1 bis 30 Zahlenargumente, die einer Stichprobe einer Grundgesamtheit entsprechen.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Schätzt die Varianz anhand einer Stichprobe.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Var.s</b> wird davon ausgegangen, dass die Argumente einer Stichprobe aus der Gesamtheit sind. Wenn die Daten die gesamte Auffüllung darstellt, berechnen Sie die Abweichung mithilfe von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>
            <b>Var.s</b> wird folgende Formel verwendet: </para>
          <para>Abbildung 1: Gleichung für die var.s-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei stellt X den Mittelwert der Stichprobe dar – AVERAGE(Zahl1, Zahl2,…), und N stellt die Größe der Stichprobe dar.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VarP">
      <MemberSignature Language="C#" Value="public double VarP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 VarP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16578)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2 ... – Zwischen 1 und 30 Zahlenargumente, die einer Grundgesamtheit entsprechen.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Berechnet die Varianz anhand der Grundgesamtheit.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Methode.</para>
          <para>
            <b>VarP</b> wird davon ausgegangen, dass die Argumente der gesamten Auffüllung sind. Wenn Ihre Daten eine Stichprobe der Population darstellt, berechnen Sie die Abweichung mithilfe von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen sein.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Die Formel für <b>VarP</b> lautet: </para>
          <para>Abbildung 1: Formel für VarP-Methode</para>
          <para></para>
          <para></para>
          <para>Dabei stellt X den Mittelwert der Stichprobe dar – AVERAGE(Zahl1, Zahl2,…), und N stellt die Größe der Stichprobe dar.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Vdb">
      <MemberSignature Language="C#" Value="public double Vdb (double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Vdb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]float64 Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Vdb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Double, Optional Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16606)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Double" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ansch_Wert – die Anlagekosten für den Vermögenswert.</param>
        <param name="Arg2">Restwert – der Wert zum Ende der Abschreibung (gelegentlich wird er als "Restwert" des Vermögenswerts bezeichnet). Dieser Wert kann 0 entsprechen.</param>
        <param name="Arg3">Nutzungsdauer – die Anzahl der Zeiträume, über die der Vermögenswert abgeschrieben wird (dies wird gelegentlich als "Nutzungsdauer" des Vermögenswerts bezeichnet).</param>
        <param name="Arg4">Anfang – der Ausgangszeitraum, für den Sie die Abschreibung berechnen möchten. Für Anfang müssen dieselben Einheiten wie für Nutzungsdauer verwendet werden.</param>
        <param name="Arg5">Ende – der Endzeitraum, für den Sie die Abschreibung berechnen möchten. Für Ende müssen dieselben Einheiten wie für Nutzungsdauer verwendet werden.</param>
        <param name="Arg6">Faktor - die Rate an, an dem die Abschreibung abnimmt. Wenn Faktor ausgelassen wird, wird angenommen, 2 (der degressiven Doppelraten) sein. Ändern Sie Faktor, wenn Sie die Methode der doppelten Restwertabschreibung nicht verwenden möchten. Eine Beschreibung der degressiven Doppelraten, finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" />.</param>
        <param name="Arg7">Nicht_wechseln – ein Wahrheitswert, mit dem angegeben wird, ob zur linearen Abschreibung gewechselt werden soll, wenn die Abschreibung größer ist als die Berechnung der Restwertabschreibung.</param>
        <summary>Gibt die Abschreibung eines Vermögenswerts für einen beliebigen angegebenen Zeitraum und Teilzeiträume zurück. Dabei wird die Methode der doppelten Restwertabschreibung oder eine andere von Ihnen angegebene Methode verwendet. VDB steht für variable Restwertabschreibung.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Nicht_wechseln <b>true</b>ist, wird Microsoft Excel nicht zur linearen Abschreibung wechseln, auch wenn die Abschreibung größer als die degressive Abschreibung ist. </para>
          <para>Wenn Nicht_wechseln <b>false</b> oder nicht angegeben, wechselt Excel zur linearen Abschreibung gewechselt, wenn die Abschreibung größer als die degressive Abschreibung ist.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VLookup">
      <MemberSignature Language="C#" Value="public object VLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object VLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16486)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Suchkriterium - Der in der ersten Spalte der Tabellenmatrix zu suchende Wert. Suchkriterium kann einen Wert oder einen Bezug darstellen. Wenn Suchkriterium kleiner als der kleinste Wert in der ersten Spalte von Matrix ist, wird von SVERWEIS der Fehlerwert #NV zurückgegeben.</param>
        <param name="Arg2">Tabellenmatrix - Mindestens zwei Datenspalten. Verwenden Sie einen Bezug auf einen Bereich oder einen Bereichsnamen. Die Werte in der ersten Spalte von Matrix sind die von Suchkriterium gesuchten Werte und können Zeichenfolgen (Texte), Zahlen oder Wahrheitswerte darstellen. Bei Zeichenfolgen (Texten) wird nicht zwischen Groß- und Kleinbuchstaben unterschieden.</param>
        <param name="Arg3">Spaltenindex - Die Spaltennummer in Matrix, aus der der entsprechende Wert zurückgegeben werden muss. Der Spaltenindex 1 gibt den Wert in der ersten Spalte in Matrix zurück. Der Spaltenindex 2 gibt den Wert in der zweiten Spalte in Matrix zurück usw.</param>
        <param name="Arg4">Bereich_Verweis – ein Wahrheitswert, der angibt, ob Sie möchten die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> -Methode, um eine genaue Übereinstimmung oder eine ungefähre Übereinstimmung suchen:</param>
        <summary>Sucht in der ersten Spalte einer Tabellenmatrix nach einem Wert und gibt in der gleichen Zeile einen Wert aus einer anderen Spalte in der Tabellenmatrix zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Das V in <b>VLookup</b> steht für vertikal. Verwenden Sie die <b>VLookup</b> -Methode statt der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> -Methode, wenn Ihre Vergleichswerte in einer Spalte links neben den Daten befinden, die ermittelt werden soll.</para>
          <para>Wenn Spaltenindex kleiner als 1 ist, generiert die <b>VLookup</b> -Methode einen Fehler. </para>
          <para>Wenn Spaltenindex größer als die Anzahl der Spalten in Tabellenmatrix ist, generiert die <b>VLookup</b> -Methode einen Fehler.</para>
          <para>Wenn Bereich_Verweis <b>true</b> oder nicht angegeben, wird eine genaue oder eine ungefähre Übereinstimmung zurückgegeben. Wenn eine genaue Übereinstimmung gefunden wird, wird der größte Wert, der kleiner als Suchkriterium ist zurückgegeben. </para>
          <para>Die Werte in der ersten Spalte von Matrix müssen in aufsteigender Reihenfolge angeordnet werden. Andernfalls kann die <b>VLookup</b> -Methode nicht den richtigen Wert zurück.</para>
          <para>Wenn Bereich_Verweis auf <b>false</b>festgelegt ist, wird die <b>VLookup</b> -Methode nur eine genaue Übereinstimmung finden. In diesem Fall müssen die Werte in der ersten Spalte der Matrix nicht sortiert werden sollen. Wenn mindestens zwei Werte in der ersten Spalte der Matrix, die das Suchkriterium erfüllen vorhanden sind, wird der erste gefundene Wert verwendet. Wenn eine genaue Übereinstimmung gefunden wird, wird ein Fehler generiert.</para>
          <para>Beim Durchsuchen von Textwerten in der ersten Spalte der Matrix, stellen Sie sicher, dass die Daten in der ersten Spalte von Matrix führende Leerzeichen oder nachstehenden Leerzeichen, uneinheitlichen gerade nicht vorhanden ist ("oder") und typografische ("oder") Anführungszeichen oder nicht druckbaren Zeichen. In diesen Fällen kann die <b>VLookup</b> -Methode einen falschen oder unerwarteten-Wert zurück. Informationen dazu, wie Sie zu bereinigen oder zu erhöhen, Werte finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" /> Methoden. Nach Zahlen oder Datumswerten gesucht werden kann, stellen Sie sicher, dass die Daten in der ersten Spalte von Matrix nicht als Textwerte gespeichert ist. In diesem Fall möglicherweise die <b>VLookup</b> -Methode einen falschen oder unerwarteten Wert zurück. </para>
          <para>Wenn Bereich_Verweis <b>false ist</b> und Suchkriterium Text ist, können Sie die Platzhalterzeichen Fragezeichen (?) und Sternchen (*) in Suchkriterium verwenden. Ein Fragezeichen entspricht einem einzelnen Zeichen; ein Sternchen ersetzt eine beliebige Abfolge von Zeichen. Wenn Sie ein Fragezeichen oder Sternchen suchen möchten, geben Sie eine Tilde (~) vor dem Zeichen.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WebService">
      <MemberSignature Language="C#" Value="public object WebService (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object WebService([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WebService(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WebService (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ WebService(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16980)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die URL des Webdiensts, stellen Sie die HTTP GET-Anforderung an.</param>
        <summary>Zugrunde liegende Funktion, die asynchron, ruft den Webdienst mithilfe einer HTTP-GET-Anforderung und Antwort zurückgegeben.</summary>
        <returns>
          <b>VARIANT</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public double Weekday (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weekday([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weekday(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16454)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fortlaufende_Zahl – eine fortlaufende Zahl, die das Datum für den gesuchten Tag darstellt. Datumswerte sollten mithilfe der DATE-Funktion eingegeben werden oder als Ergebnisse von anderen Formeln oder Funktionen. Verwenden Sie beispielsweise DATE(2008,5,23) für den 23. Mai 2008. Es können Probleme auftreten, wenn Datumswerte als Text eingegeben werden.</param>
        <param name="Arg2">Zahl_Typ – eine Zahl, mit der der Typ des Rückgabewerts bestimmt wird.</param>
        <summary>Gibt den Wochentag zurück, der einem Datum entspricht. Der Tag wird als ganze Zahl angegeben, die in der Standardeinstellung zwischen 1 (Sonntag) und 7 (Samstag) liegt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <list type="table">
            <item>
              <term>1 (oder Auslassung)</term>
              <description>Zahlen von 1 (Sonntag) bis 7 (Samstag). Verhält sich wie in früheren Versionen von Microsoft Excel.</description>
            </item>
            <item>
              <term>2</term>
              <description>Zahlen von 1 (Montag) bis 7 (Sonntag).</description>
            </item>
            <item>
              <term>3</term>
              <description>Zahlen von 0 (Montag) bis 6 (Sonntag).</description>
            </item>
            <item>
              <term>11</term>
              <description>Zahlen von 1 (Montag) bis 7 (Sonntag).</description>
            </item>
            <item>
              <term>12</term>
              <description>Zahlen von 1 (Dienstag) bis 7 (Montag)</description>
            </item>
            <item>
              <term>13</term>
              <description>Zahlen von 1 (Mittwoch) bis 7 (Dienstag)</description>
            </item>
            <item>
              <term>14</term>
              <description>Zahlen von 1 (Donnerstag) bis 7 (Mittwoch)</description>
            </item>
            <item>
              <term>15</term>
              <description>Zahlen von 1 (Freitag) bis 7 (Donnerstag)</description>
            </item>
            <item>
              <term>16</term>
              <description>Zahlen von 1 (Samstag) bis 7 (Freitag)</description>
            </item>
            <item>
              <term>17</term>
              <description>Zahlen von 1 (Sonntag) bis 7 (Samstag)</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeekNum">
      <MemberSignature Language="C#" Value="public double WeekNum (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WeekNum([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WeekNum(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekNum (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16849)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fortlaufende_Zahl – ein Datum in der Woche. Datumswerte sollten mithilfe der DATE-Funktion eingegeben werden oder als Ergebnisse von anderen Formeln oder Funktionen. Verwenden Sie beispielsweise DATE(2008,5,23) für den 23. Mai 2008. Es können Probleme auftreten, wenn Datumswerte als Text eingegeben werden.</param>
        <param name="Arg2">Zahl_Typ – eine Zahl, mit der bestimmt wird, an welchem Tag die Woche beginnt. Der Standardwert ist 1.</param>
        <summary>Gibt eine Zahl zurück, mit der angegeben wird, an welche Stelle innerhalb eines Jahres die Woche numerisch fällt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: die <b>WeekNum</b> -Funktion, dass die Woche mit dem 1. Januar, um die erste Woche des Jahres sein. Es ist jedoch ein Europäischen Standard, der der ersten Woche als eine Vorlage mit den meisten Tagen im neuen Jahr definiert (mindestens vier) fallen. Dies bedeutet, dass für Jahre, in denen drei Tage sind maximal die <b>WeekNum</b> -Funktion gibt Wochennummern, die nach der Europäischen Norm falsch sind in der ersten Woche des Januar, zurück.</para>
          <list type="table">
            <item>
              <term>1</term>
              <description>Die Woche beginnt am Sonntag. Die Wochentage sind von 1 bis 7 nummeriert.</description>
            </item>
            <item>
              <term>2</term>
              <description>Die Woche beginnt am Montag. Die Wochentage sind von 1 bis 7 nummeriert.</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull">
      <MemberSignature Language="C#" Value="public double Weibull (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16686)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, bei dem die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Alpha – ein Parameter für die Verteilung.</param>
        <param name="Arg3">Beta – ein Parameter für die Verteilung.</param>
        <param name="Arg4">Kumuliert – bestimmt die Form der Funktion.</param>
        <summary>Gibt die Weibull-Verteilung zurück. Verwenden Sie diese Verteilung in der Zuverlässigkeitsanalyse, beispielsweise für die Berechnung der mittleren Zeit bis zum ersten Ausfall eines Geräts.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> Methode.</para>
          <para>Wenn x, Alpha oder Beta nicht numerisch ist, <b>gibt Weibull</b> gibt das #VALUE! Fehlerwert. Wenn x &lt; 0, <b>gibt Weibull</b> gibt das #NUM! Fehlerwert. </para>
          <para>Wenn alpha ≤ 0 oder Beta ≤ 0, <b>gibt Weibull</b> den #NUM zurück! Fehlerwert. </para>
          <para>Die Formel für die kumulative Weibull-Verteilungsfunktion lautet: 

 </para>
          <para>Abbildung 1: Gleichung für die kumulative Weibull-Verteilung</para>
          <para></para>
          <para></para>
          <para>Die Formel für die Weibull-Wahrscheinlichkeitswert der Dichtefunktion lautet: 

</para>
          <para>Abbildung 2: Gleichung für die Weibull-Wahrscheinlichkeitswert</para>
          <para></para>
          <para></para>
          <para>Wenn alpha = 1, <b>gibt Weibull</b> die exponentielle Verteilung mit zurück:</para>
          <para>Abbildung 3: Formel</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull_Dist">
      <MemberSignature Language="C#" Value="public double Weibull_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16903)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - Der Wert, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Alpha - Ein Parameter der Verteilung.</param>
        <param name="Arg3">Beta - Ein Parameter der Verteilung.</param>
        <param name="Arg4">Kumuliert - Bestimmt die Form der Funktion.</param>
        <summary>Gibt die Weibull-Verteilung zurück. Verwenden Sie diese Verteilung in der Zuverlässigkeitsanalyse, beispielsweise für die Berechnung der mittleren Zeit bis zum ersten Ausfall eines Geräts.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn x, Alpha oder Beta nicht numerisch ist, <b>gibt WEIBULL.dist</b> gibt die #VALUE! Fehlerwert. </para>
          <para>Wenn x &lt; 0, gibt <b>Weibull.dist</b> das #NUM zurück! Fehlerwert. </para>
          <para>Wenn alpha ≤ 0 oder Beta ≤ 0, <b>gibt WEIBULL.dist</b> das #NUM zurück! Fehlerwert. </para>
          <para>Die Formel für die kumulative Weibull-Verteilungsfunktion lautet: 

 </para>
          <para>Abbildung 1: Gleichung für die kumulative Weibull-Verteilung</para>
          <para></para>
          <para></para>
          <para>Die Formel für die Weibull-Wahrscheinlichkeitswert der Dichtefunktion lautet: 

</para>
          <para>Abbildung 2: Gleichung für die Weibull-Wahrscheinlichkeitswert</para>
          <para></para>
          <para></para>
          <para>Wenn alpha = 1, <b>gibt WEIBULL.dist</b> die exponentielle Verteilung mit zurück:</para>
          <para>Abbildung 3: Formel</para>
          <para></para>
          <para></para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay">
      <MemberSignature Language="C#" Value="public double WorkDay (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16855)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ausgangsdatum - ein Datum, das das Anfangsdatum darstellt.</param>
        <param name="Arg2">Tage - die Anzahl der Tage vor oder hinter Ausgangsdatum, die nicht zu Wochenenden oder Feiertagen zählen. Mit einem positiven Wert für Tage wird ein Datum in der Zukunft ausgegeben; mit einem negativen Wert wird ein Datum in der Vergangenheit ausgegeben.</param>
        <param name="Arg3">Freie_Tage - eine optionale Liste mit einem oder mehreren Datumswerten, die aus dem Arbeitskalender ausgeschlossen werden sollen, beispielsweise landesweite und bundeslandspezifische Feiertage sowie bewegliche Feiertage. Die Liste kann einen Zellbereich darstellen, in dem die Datumswerte enthalten sind, oder eine Arraykonstante der laufenden Zahlen, die die Datumswerte darstellen.</param>
        <summary>Gibt eine Zahl zurück, die ein Datum darstellt, das der angegebenen Anzahl von Arbeitstagen vor oder hinter einem Datum (dem Ausgangsdatum) entspricht. Zu Arbeitstagen zählen keine Wochenenden oder Datumswerte, die als Feiertage gelten. Verwenden Sie WORKDAY, um Wochenenden und Feiertage auszuschließen, wenn Sie Datumswerte für die Fälligkeit von Rechnungen, erwartete Lieferzeiten oder die Anzahl der Tage der geleisteten Arbeit berechnen möchten.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Wenn ein der Argumente kein gültiges Datum vorliegt, gibt <b>WorkDay</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Ausgangsdatum zuzüglich der Tage ein ungültiges Datum ergibt sich, gibt <b>WorkDay</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Tage keine ganze Zahl darstellt, wird die Zahl gekürzt.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay_Intl">
      <MemberSignature Language="C#" Value="public double WorkDay_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16905)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ausgangsdatum - das Startdatum auf ganze Zahl gekürzt.</param>
        <param name="Arg2">Days - die Anzahl von Arbeitstagen vor oder nach dem Ausgangsdatum. Ein positiver Wert führt zu einem späteren Zeitpunkt; einem vergangenen Datum führt ein negativer Wert; 0 (null) Wert ergibt die Ausgangsdatum. Tag-Offset wird auf eine ganze Zahl gekürzt.</param>
        <param name="Arg3">Wochenende – gibt an, die Wochentage, die Wochentage und gelten nicht als Arbeitstage. Wochenende ist ein wochenendnummer oder eine Zeichenfolge, die beim Auftreten von Wochenenden angibt.</param>
        <param name="Arg4">Feiertage – eine optionale Gruppe von einer oder mehreren Datumsangaben, die aus dem Kalender Arbeitstag ausgeschlossen werden sollen. Feiertage ist ein Bereich von Zellen, die die Daten enthalten, oder eine Arraykonstante der seriellen Werte, die die Datumsangaben darstellen. Die Reihenfolge der Datumsangaben oder serielle Werte Feiertage kann beliebige sein.</param>
        <summary>Gibt die fortlaufende Nummer des Datums vor oder nach einer angegebenen Anzahl von Arbeitstagen mit benutzerdefinierten Wochenendparametern zurück. Wochenendparameter geben an, welche bzw. wie viele Tage Wochenendtage sind. Wochenendtage und Tage, die als freie Tage angegeben sind, gelten nicht als Arbeitstage.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Ausgangsdatum außerhalb des Bereichs für den aktuellen datumsbasiswert ist, gibt <b>gibt WORKDAY.Intl</b> den #NUM! Fehlerwert. </para>
          <para>Wenn ein Datum in freie außerhalb des Bereichs für den aktuellen datumsbasiswert ist, gibt <b>gibt WORKDAY.Intl</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Ausgangsdatum zuzüglich Tag-Offset versatztage ein ungültiges Datum, gibt <b>gibt WORKDAY.Intl</b> den #NUM! Fehlerwert. </para>
          <para>Wenn eine Zeichenfolge in wochenendeeine Unzulässige Länge hat oder unzulässige Zeichen enthält, gibt <b>gibt WORKDAY.Intl</b> den #VALUE! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xirr">
      <MemberSignature Language="C#" Value="public double Xirr (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xirr([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xirr(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xirr (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16813)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Werte – eine Folge von Cashflows, die einem Zahlungszeitplan mit Datumswerten entspricht. Die erste Zahlung ist optional und entspricht Kosten oder einer Zahlung, die zu Beginn der Anlage angefallen ist. Wenn als erster Wert Kosten oder eine Zahlung angegeben ist, muss dieser Wert negativ sein. Alle nachfolgenden Zahlungen werden auf der Grundlage eines Jahres mit 365 Tagen diskontiert. Die Folge von Werten muss mindestens einen positiven und einen negativen Wert aufweisen.</param>
        <param name="Arg2">Zeitpkte – ein Zeitplan mit Datumswerten für die Zahlung, die den Cashflow-Zahlungen entsprechen. Das erste Zahlungsdatum gibt den Beginn des Zahlungszeitplans an. Alle anderen Daten müssen hinter diesem Datum liegen; sie können jedoch in beliebiger Reihenfolge angegeben sein. Datumswerte sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise DATE(2008,5,23) für den 23. Mai 2008. Es können Probleme auftreten, wenn Datumswerte als Text eingegeben werden.</param>
        <param name="Arg3">Schätzwert – eine geschätzte Zahl, ist das Ergebnis von <b>Xirr</b>fast entspricht.</param>
        <summary>Gibt den internen Zinsfuß für einen Zeitplan der Cashflows, der nicht unbedingt periodisch ist, zurück. Wenn Sie den den internen Zinsfuß für eine Folge regelmäßiger Cashflows berechnen möchten, verwenden Sie die Funktion IRR.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Zahlen in Datumswerten werden zu ganzen Zahlen gekürzt.</para>
          <para>
            <b>XIRR</b> erwartet mindestens einen positiven Cashflow und einen negativen Cashflow; andernfalls <b>gibt Xirr</b> den #NUM! Fehlerwert. </para>
          <para>Wenn eine Zahl in Zeitpkte kein gültiges Datum vorliegt, gibt <b>Xirr</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn eine Zahl in Zeitpkte vor dem Anfangsdatum liegt, gibt <b>Xirr</b> den #NUM! Fehlerwert. </para>
          <para>Wenn Werte und Zeitpkte eine unterschiedliche Anzahl von Werten enthalten, gibt <b>Xirr</b> den #NUM! Fehlerwert. </para>
          <para>In den meisten Fällen müssen Sie nicht für die Berechnung von <b>Xirr</b> Schätzwert anzugeben. Wenn Length angegeben, ist Schätzwert 0,1 (10 Prozent). </para>
          <para>
            <b>XIRR</b> ist eng mit <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" />, der net Gegenwart Funktion Wert. Die Rendite von <b>Xirr</b> berechnet ist der Zinssatz, der XNPV entspricht = 0. </para>
          <para>Excel verwendet eine iterative Methode für die Berechnung von <b>Xirr</b>. Verwenden einen veränderlichen Kurs (beginnend mit Schätzwert), durchläuft <b>gibt Xirr</b> der Berechnung, bis das Ergebnis 0,000001 Prozent ist. Wenn <b>gibt Xirr</b> kein Ergebnis finden kann, die nach dem funktioniert versucht 100 das #NUM! Fehlerwert wird zurückgegeben. Die Rate wird geändert, bis: </para>
          <para>Abbildung 1: Formel</para>
          <para></para>
          <para></para>
          <para>Dabei gilt Folgendes:</para>
          <para>Di = das i-te oder letzte, Zahlungsdatum.</para>
          <para>D1 = das 0-te Zahlungsdatum.</para>
          <para>Pi = das i-te oder letzte, Zahlung.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xnpv">
      <MemberSignature Language="C#" Value="public double Xnpv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xnpv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xnpv (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Xnpv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16814)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine Folge von Cashflows, die einem Zahlungszeitplan mit Datumswerten entspricht. Die erste Zahlung ist optional und entspricht Kosten oder einer Zahlung, die zu Beginn der Anlage angefallen sind.</param>
        <param name="Arg2">Ein Zeitplan mit Datumswerten für die Zahlung, die den Cashflow-Zahlungen entsprechen. Das erste Zahlungsdatum gibt den Beginn des Zahlungszeitplans an. Alle anderen Datumsangaben müssen nach diesem Datum liegen, ihre Reihenfolge ist jedoch beliebig.
</param>
        <summary>Gibt den Nettobarwert für einen Zeitplan für die gezahlten Gelder, der nicht unbedingt regelmäßig ist.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: <b>Xnpv</b> -Methode ermöglicht keinen Parameter, der dem Rate-Argument erforderlich, durch die entsprechende XNPV-Funktion (XNPV (Zins, Werte, Datumsangaben) =) entspricht. Um Umgehung dieses Problems in VBA-Code, anstatt mithilfe der Methode <b>Xpnv</b> rufen Sie die XNPV-Funktion mithilfe der <see cref="M:Microsoft.Office.Interop.Excel._Application.Evaluate(System.Object)" /> Methode.</para>
          <para>Verwenden, um den Nettobarwert einer Reihe von Cashflows berechnen, die bei der regelmäßigen ist die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Methode.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public bool Xor (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Xor([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xor (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16953)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg2">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg3">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg4">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg5">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg6">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg7">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg8">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg9">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg10">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg11">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg12">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg13">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg14">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg15">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg16">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg17">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg18">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg19">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg20">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg21">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg22">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg23">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg24">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg25">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg26">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg27">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg28">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg29">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <param name="Arg30">1 bis 254 Bedingungen zu, die testenden können <b>TRUE</b> oder <b>FALSE</b> sein und dürfen Wahrheitswerte, Arrays oder Bezüge.</param>
        <summary>Gibt eine logische XOR aller Argumente zurück.</summary>
        <returns>
          <b>BOOL</b>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="YearFrac">
      <MemberSignature Language="C#" Value="public double YearFrac (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YearFrac([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YearFrac(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YearFrac (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16835)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ausgangsdatum - ein Datum, das das Anfangsdatum darstellt.</param>
        <param name="Arg2">Enddatum - ein Datum, das das Enddatum darstellt.</param>
        <param name="Arg3">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Berechnet den Anteil des Jahres, der durch die Anzahl voller Tage zwischen zwei Datumswerten (Ausgangsdatum und Enddatum) dargestellt wird. Mithilfe der Arbeitsblattfunktion YEARFRAC können Sie den proportionalen Anteil für Zuschüsse und Verpflichtungen bezogen auf ein Jahr ermitteln, die einem bestimmten Zeitraum zugeordnet sind.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Ausgangsdatum oder Enddatum keine gültigen Datumswerte sind, gibt <b>YearFrac</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4, <b>gibt YearFrac</b> das #NUM zurückgibt! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldDisc">
      <MemberSignature Language="C#" Value="public double YieldDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16821)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Kurs – ist der Preis des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg4">Rückzahlung – der Rückkaufswert des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg5">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt die Jahresrendite für ein diskontiertes Wertpapier zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung oder Fälligkeit kein gültiges Datum angegeben sind, gibt <b>YieldDisc</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Kurs ≤ 0 oder Rückzahlung ≤ 0, <b>gibt YieldDisc</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4 ist, <b>gibt YieldDisc</b> gibt das #NUM zurück! Fehlerwert. </para>
          <para>Ist Abrechnung ≥ Fälligkeit, <b>gibt YieldDisc</b> den #NUM #zahl! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldMat">
      <MemberSignature Language="C#" Value="public double YieldMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16816)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Emission – das Ausgabedatum des Wertpapiers, das als fortlaufende Zahl angegeben wird.</param>
        <param name="Arg4">Zins – ist der Zinssatz des Wertpapiers am Ausgabetag.</param>
        <param name="Arg5">Kurs – ist der Preis des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg6">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt die Jahresrendite für ein Wertpapier zurück, für das Zinsen bei Fälligkeit gezahlt werden.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise Datum(2008;5;23) für den 23. Tag im Mai 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1</term>
              <description>Taggenau/taggenau</description>
            </item>
            <item>
              <term>2</term>
              <description>Taggenau/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Taggenau/365</description>
            </item>
            <item>
              <term>4</term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Emission und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Abrechnung, Fälligkeit oder Emission kein gültiges Datum angegeben ist, gibt <b>YieldMat</b> den #VALUE! Fehlerwert. </para>
          <para>Wenn Rate &lt; 0 oder Kurs ≤ 0, <b>gibt YieldMat</b> den #NUM #zahl! Fehlerwert. </para>
          <para>Wenn Basis &lt; 0 oder, wenn Basis &gt; 4 ist, <b>gibt YieldMat</b> gibt das #NUM zurück! Fehlerwert. </para>
          <para>Ist Abrechnung ≥ Fälligkeit, <b>gibt YieldMat</b> den #NUM #zahl! Fehlerwert.</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Z_Test">
      <MemberSignature Language="C#" Value="public double Z_Test (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Z_Test([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Z_Test (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16926)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - Das Array oder der Datenbereich, mit dem zum Testen des Mittelwerts einer vorhandenen angenommenen Grundgesamtheit ein Abgleich erfolgt.</param>
        <param name="Arg2">Der zu testende Wert.</param>
        <param name="Arg3">Sigma - Die bekannte Standardabweichung der Grundgesamtheit. Ohne Angabe wird die Standardabweichung der Stichprobe verwendet.</param>
        <summary>Gibt den Wahrscheinlichkeitswert für einen einseitigen z-Test zurück. Für den Mittelwert einer vorhandenen angenommenen Grundgesamtheit gibt Z.TEST die Wahrscheinlichkeit zurück, dass der Mittelwert für das Beispiel größer ist als der Durchschnittswert der Beobachtungen in der Datengruppe (Array), d. h. dem beobachteten Mittelwert für das Beispiel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Array leer ist, gibt <b>z.Test</b> den Fehlerwert #n/a zurück. </para>
          <para>
            <b>Z.Test</b> wird wie folgt berechnet, wenn Sigma nicht weggelassen wird: </para>
          <para>Abbildung 1: Gleichung für Z_Test Sigma nicht weggelassen wird</para>
          <para></para>
          <para></para>
          <para>oder wenn Sigma weggelassen wird:</para>
          <para>Abbildung 2: Gleichung für Z_Test Sigma weggelassen wird</para>
          <para></para>
          <para></para>
          <para>wobei x der Mittelwert für das Beispiel AVERAGE(Array), s die Standardabweichung für das Beispiel STDEV(Array) und n die Anzahl der Beobachtungen im Beispiel COUNT(Array) ist.</para>
          <para>
            <b>Z.Test</b> stellt die Wahrscheinlichkeit, dass der Mittelwert für das Beispiel größer als der beobachtete Wert AVERAGE(array), wäre wenn der Mittelwert der zugrunde liegenden grundgesamtheit μ0 ist. Aus der Symmetrie der Normal-Verteilung zurück Wenn AVERAGE(array) &lt; μ0, <b>z.Test</b> gibt einen Wert größer 0,5.</para>
          <para>Die folgenden Excel-Formel kann verwendet werden, um die zweiseitige Wahrscheinlichkeit zu ermitteln, dass der Mittelwert der Stichprobe, der weiter von μ0 (in beide Richtungen) entfernt liegt als AVERAGE(array), wenn der Mittelwert der zugrunde liegenden grundgesamtheit μ0 ist:</para>
          <para>= 2 * MIN(Z_TEST(array,μ0,sigma) 1 - Z_TEST(array,μ0,sigma)).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ZTest">
      <MemberSignature Language="C#" Value="public double ZTest (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ZTest([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ZTest(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ZTest (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16708)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - Das Array oder der Datenbereich, mit dem zum Testen des Mittelwerts einer vorhandenen angenommenen Grundgesamtheit ein Abgleich erfolgt.</param>
        <param name="Arg2">Der zu testende Wert.</param>
        <param name="Arg3">Sigma – die (bekannte) Standardabweichung der Grundgesamtheit. Falls der Wert Sigma weggelassen wird, wird die Standardabweichung für das Beispiel verwendet.</param>
        <summary>Gibt den Wahrscheinlichkeitswert für einen einseitigen z-Test zurück. Für den Mittelwert einer vorhandenen angenommenen Grundgesamtheit gibt ZTEST die Wahrscheinlichkeit zurück, dass der Mittelwert für das Beispiel größer ist als der Durchschnittswert der Beobachtungen in der Datengruppe (Array) – d. h. dem beobachteten Mittelwert für das Beispiel.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <b>Wichtig</b>: Diese Funktion wurde ersetzt durch einen oder mehrere neuen Funktionen, die von der verbesserten Genauigkeit vorsehen und perfekte, deren Namen, Wiedergeben ihrer Verwendung. Diese Funktion ist für die Kompatibilität mit früheren Versionen von Excel weiterhin verfügbar. Jedoch Wenn Abwärtskompatibilität nicht erforderlich ist, sollten Sie mit den neuen Funktionen von nun an, da sie ihre Funktionalität genauer beschrieben. Weitere Informationen zu der neuen Funktion finden Sie unter der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" /> Methode.</para>
          <para>Wenn Array leer ist, gibt <b>ZTest</b> den Fehlerwert #n/a zurück. </para>
          <para>
            <b>ZTest</b> wird wie folgt berechnet, wenn Sigma nicht weggelassen wird: </para>
          <para>Abbildung 1: Gleichung für ZTest bei Sigma nicht weggelassen wird</para>
          <para></para>
          <para></para>
          <para>oder wenn Sigma weggelassen wird:</para>
          <para>Abbildung 2: Gleichung für ZTest bei Sigma weggelassen wird</para>
          <para></para>
          <para></para>
          <para>wobei x der Mittelwert für das Beispiel AVERAGE(Array), s die Standardabweichung für das Beispiel STDEV(Array) und n die Anzahl der Beobachtungen im Beispiel COUNT(Array) ist.</para>
          <para>
            <b>ZTest</b> stellt die Wahrscheinlichkeit, dass der Mittelwert für das Beispiel größer als der beobachtete Wert AVERAGE(array), wäre wenn der Mittelwert der zugrunde liegenden grundgesamtheit μ0 ist. Aus der Symmetrie der Normal-Verteilung zurück Wenn AVERAGE(array) &lt; μ0, ZTEST gibt einen Wert größer 0,5.</para>
          <para>Die folgenden Excel-Formel kann verwendet werden, um die zweiseitige Wahrscheinlichkeit zu ermitteln, dass der Mittelwert der Stichprobe, der weiter von μ0 (in beide Richtungen) entfernt liegt als AVERAGE(array), wenn der Mittelwert der zugrunde liegenden grundgesamtheit μ0 ist: = 2 * MIN(ZTEST(array,μ0,sigma), 1: ZTEST (Array, μ0, Sigma)).</para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>