<Type Name="WorksheetFunction" FullName="Microsoft.Office.Interop.Excel.WorksheetFunction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0e8779a13b1ae831ceba99e1523c885328838f42" /><Meta Name="ms.sourcegitcommit" Value="f58b07bd9753015d401a69461f61bc174edee843" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="01/27/2021" /><Meta Name="ms.locfileid" Value="50008603" /></Metadata><TypeSignature Language="C#" Value="public interface WorksheetFunction" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract WorksheetFunction" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.WorksheetFunction" />
  <TypeSignature Language="VB.NET" Value="Public Interface WorksheetFunction" />
  <TypeSignature Language="C++ CLI" Value="public interface class WorksheetFunction" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00020845-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wird als Container für Excel-Arbeitsblattfunktionen verwendet, die von einem Visual Basic.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="_WSFunction">
      <MemberSignature Language="C#" Value="public object _WSFunction (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _WSFunction([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction._WSFunction(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _WSFunction (Optional Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(169)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrInt">
      <MemberSignature Language="C#" Value="public double AccrInt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrInt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrInt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrInt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16853)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Emissionsdatum - das Emissionsdatum des Wertpapiers</param>
        <param name="Arg2">Erster Zins - der erste Zinstermin des Wertpapiers</param>
        <param name="Arg3">Abrechnung - das Abrechnungsdatum des Wertpapiers</param>
        <param name="Arg4">Zins - der jährliche Kuponzinssatz des Wertpapiers</param>
        <param name="Arg5">Nennwert - der Nennwert des Wertpapiers</param>
        <param name="Arg6">Häufigkeit - die Anzahl der Zinszahlungen pro Jahr</param>
        <param name="Arg7">Basis - die Art der zu verwendenden Basis für die Zählung der Zinstage</param>
        <summary>Gibt die aufgelaufenen Zinsen für ein Wertpapier zurück, das regelmäßig Zinsen abwirft.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <para>In der folgenden Tabelle werden die Werte beschrieben, die für verwendet werden <paramref name="Arg5" /> können.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AccrIntM">
      <MemberSignature Language="C#" Value="public double AccrIntM (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AccrIntM([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AccrIntM(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AccrIntM (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16854)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Das Emissionsdatum des Wertpapiers.</param>
        <param name="Arg2">Das Fälligkeitsdatum für das Wertpapier.</param>
        <param name="Arg3">Der jährliche Kuponzinssatz des Wertpapiers.</param>
        <param name="Arg4">Der Nennwert des Wertpapiers. Wenn Sie dies nicht angeben, verwendet ACCRINTM 1.000$.</param>
        <param name="Arg5">Die Basis, auf der die Zinstage gezählt werden.</param>
        <summary>Gibt die aufgelaufenen Zinsen für ein Wertpapier zurück, das bei Fälligkeit Zinsen abwirft.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <para>In der folgenden Tabelle werden die Werte beschrieben, die für verwendet werden <paramref name="Arg5" /> können.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>Die folgende Liste enthält Informationen, die Sie beim Arbeiten mit ACCRINTM beachten sollten:</para>
          <list type="bullet">
            <item>
              <description>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt.</description>
            </item>
            <item>
              <description>issue, maturity und basis werden zu ganzen Zahlen gekürzt.</description>
            </item>
            <item>
              <description>Wenn für issue oder maturity kein gültiges Datum angegeben wird, generiert ACCRINTM einen Fehler.</description>
            </item>
            <item>
              <description>Wenn rate ≤ 0 oder par ≤ 0, generiert ACCRINTM einen Fehler.</description>
            </item>
            <item>
              <description>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, generiert ACCRINTM einen Fehler. </description>
            </item>
            <item>
              <description>Wenn issue ≥ maturity, generiert ACCRINTM einen Fehler. </description>
            </item>
            <item>
              <description>ACCRINTM wird wie folgt berechnet: </description>
            </item>
          </list>
          <para>Dabei gilt:</para>
          <para>A = Anzahl der aufgelaufenen Tage, die monatlich gezählt werden. Bei Zinsterminen mit Fälligkeit wird die Anzahl der Tage vom Ausgabedatum bis zum Fälligkeitsdatum verwendet.</para>
          <para>D = Jahresbasis.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public double Acos (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acos([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acos (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acos(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16483)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Kosinus des gesuchten Winkels; er muss zwischen -1 und 1 liegen.</param>
        <summary>Gibt den Arkuskosinus (d. h. den umgekehrten Kosinus) einer Zahl zurück. Der Arkuskosinus ist der Winkel, dessen Kosinus <paramref name="Arg1" /> ist. Der Winkel wird im Bogenmaß im Bereich 0 (Null) bis Pi zurückgegeben.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn Sie das Ergebnis vom Bogenmaß in Grad umrechnen möchten, multiplizieren Sie es mit 180/PI(), oder verwenden Sie die Degrees-Methode.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public double Acosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16617)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine reelle Zahl größer oder gleich 1.</param>
        <summary>Gibt den umgekehrten hyperbolischen Kosinus einer Zahl zurück. Zahl muss größer oder gleich 1 sein. Der umgekehrte hyperbolische Kosinus ist der Wert, dessen hyperbolischer Kosinus <paramref name="Arg1" /> ist, sodass Acosh(Cosh(number)) gleich <paramref name="Arg1" /> ist.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acot">
      <MemberSignature Language="C#" Value="public double Acot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16932)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Gittereck des Winkels, den Sie benötigen.</param>
        <summary>Gibt den Arccotangent einer Zahl in Bogenmaß im Bereich von 0 bis Pi zurück.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Acoth">
      <MemberSignature Language="C#" Value="public double Acoth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Acoth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Acoth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Acoth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Acoth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16933)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der hyperbolische Cotangent des Winkels, den Sie benötigen.</param>
        <summary>Gibt den umgekehrten hyperbolischen Cotangent einer Zahl zurück.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Aggregate">
      <MemberSignature Language="C#" Value="public double Aggregate (double Arg1, double Arg2, Microsoft.Office.Interop.Excel.Range Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Aggregate([in]float64 Arg1, [in]float64 Arg2, [in]class Microsoft.Office.Interop.Excel.Range Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Aggregate(System.Double,System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Aggregate (Arg1 As Double, Arg2 As Double, Arg3 As Range, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16869)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Funktionsnummer - Eine Nummer von 1 bis 19, welche die zu verwendende Funktion angibt.</param>
        <param name="Arg2">Option - Ein numerischer Wert, der bestimmt, welche Werte im Auswertungsbereich der Funktion ignoriert werden sollen.</param>
        <param name="Arg3">Bez1 - Das erste numerische Argument für Funktionen, die mehrere numerische Argumente unterstützen und deren Aggregatwert Sie bestimmen möchten.</param>
        <param name="Arg4">Bez2 - Bez30 - Numerische Argumente von 2 bis 30, deren Aggregatwert Sie wünschen.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt ein Aggregat in einer Liste oder Datenbank zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die folgenden Einschränkungen gelten für die Ref-Argumente (Arg3 - Arg 30) basierend auf dem <b>Function_num</b> Wert.</para>
          <list type="table">
            <item>
              <term>1-13</term>
              <description>Gültige Typen:Any cell reference Union Intersections Defined names Structured referencesInvalid types: Actual data Arrays</description>
              <description>Gültige Typen:Any cell reference Union Intersections Defined names Structured referencesInvalid types: Actual data Arrays</description>
              <description>Valid types:Any cell reference Union Intersections Defined names Structured referencesInvalid types: Actual data Arrays</description>
            </item>
            <item>
              <term>14-17</term>
              <description>Gültige Typen:Jeder Zellbezug Union Intersections Definierte Namen Strukturierte Verweise auf tatsächliche Datenarrays</description>
              <description>Gültige Typen:Jeder Zellbezug Union Intersections Definierte Namen Strukturierte Verweise auf tatsächliche Datenarrays</description>
              <description>Keine Bezüge erlaubt</description>
            </item>
          </list>
          <para>Wenn ein zweites "Bez"-Argument erforderlich, aber nicht angegeben ist, gibt die AGGREGATE-Methode den Fehlerwert #WERT! zurück.</para>
          <para>Wenn einer oder mehrere Bezüge 3D-Bezüge sind, gibt die AGGREGATE-Methode den Fehlerwert #WERT!-Fehler zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorDegrc">
      <MemberSignature Language="C#" Value="public double AmorDegrc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorDegrc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorDegrc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorDegrc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16850)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Kosten des Vermögenswerts.</param>
        <param name="Arg2">Das Kaufdatum des Vermögenswerts.</param>
        <param name="Arg3">Das Enddatum des ersten Zinstermins.</param>
        <param name="Arg4">Restwert am Ende der Lebensdauer eines Vermögenswerts.</param>
        <param name="Arg5">Der Zeitraum.</param>
        <param name="Arg6">Der Abschreibungssatz.</param>
        <param name="Arg7">Die zu verwendende Jahresbasis.</param>
        <summary>Gibt die Abschreibung für einen Abrechnungszeitraum zurück. Diese Funktion wird für das französische Buchführungssystem bereitgestellt.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Vermögenswert in der Mitte des Abrechnungszeitraums erworben wird, wird die anteilige Abschreibung berücksichtigt. Die Methode ist ähnlich, mit der Ausnahme, dass ein Abschreibungskoeffizient in der Berechnung in Abhängigkeit von der Lebensdauer der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Objekte angewendet wird. In der folgenden Tabelle werden die in verwendeten Werte <paramref name="Arg7" /> beschrieben.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>360 Tage (NASD-Methode)</description>
            </item>
            <item>
              <term>1 </term>
              <description>Actual</description>
            </item>
            <item>
              <term>3</term>
              <description>365 Tage in einem Jahr</description>
            </item>
            <item>
              <term>4 </term>
              <description>360 Tage in einem Jahr (europäische Methode)</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Diese Funktion gibt die Abschreibung bis zum letzten Zinstermin in der Lebensdauer der Vermögenswerte oder bis zu dem Zeitpunkt zurück, zu dem der kumulierte Wert der Abschreibung größer als die Kosten der Vermögenswerte abzüglich des Restwerts ist.</para>
          <para>Die Abschreibungskoeffizienten lauten wie folgt:</para>
          <list type="table">
            <item>
              <term>Zwischen 3 und 4 Jahren</term>
              <description>1,5</description>
            </item>
            <item>
              <term>Zwischen 5 und 6 Jahren</term>
              <description>2 </description>
            </item>
            <item>
              <term>Mehr als 6 Jahre</term>
              <description>2,5</description>
            </item>
          </list>
          <para>Der Abschreibungssatz steigt für den Zeitraum vor dem letzten Zeitraum auf 50 Prozent an und wird bis zum letzten Zeitraum auf 100 Prozent gesteigert.</para>
          <para>Wenn die Lebensdauer der Warengüter zwischen 0 (Null) und 1, 1 und 2, 2 und 3 oder 4 und 5 liegt, wird der Fehlerwert #NUM! zurückgegeben.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AmorLinc">
      <MemberSignature Language="C#" Value="public double AmorLinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AmorLinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AmorLinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AmorLinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16851)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Kosten des Vermögenswerts.</param>
        <param name="Arg2">Das Kaufdatum des Vermögenswerts.</param>
        <param name="Arg3">Das Enddatum des ersten Zinstermins.</param>
        <param name="Arg4">Restwert am Ende der Lebensdauer eines Vermögenswerts.</param>
        <param name="Arg5">Der Zeitraum.</param>
        <param name="Arg6">Der Abschreibungssatz.</param>
        <param name="Arg7">Die zu verwendende Jahresbasis.</param>
        <summary>Gibt die Abschreibung für einen Abrechnungszeitraum zurück. Diese Funktion wird für das französische Buchführungssystem bereitgestellt.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Vermögenswert in der Mitte des Abrechnungszeitraums erworben wird, wird die anwertmäßige Abschreibung berücksichtigt. In der folgenden Tabelle werden die für verwendeten Werte <paramref name="Arg7" /> beschrieben.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>360 Tage (NASD-Methode)</description>
            </item>
            <item>
              <term>1 </term>
              <description>Actual</description>
            </item>
            <item>
              <term>3</term>
              <description>365 Tage in einem Jahr</description>
            </item>
            <item>
              <term>4 </term>
              <description>360 Tage in einem Jahr (europäische Methode)</description>
            </item>
          </list>
          <para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public bool And (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool And([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.And(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function And (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16420)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 bis 30 Bedingungen, die Sie testen möchten, die entweder <b>wahr oder</b> falsch <b>sein können.</b></param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt <b>true</b> zurück, wenn alle Argumente true <b>sind;</b> gibt <b>false zurück,</b> wenn ein oder mehrere Argumente falsch <b>sind.</b></summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente müssen zu Wahrheitswerten wie <b>"true"</b> oder <b>"false"</b>ausgewertet werden, oder die Argumente müssen Arrays oder Verweise sein, die Wahrheitswerte enthalten. </para>
          <para>Wenn ein Array- oder Bezugsargument Text oder leere Zellen enthält, werden diese Werte ignoriert.</para>
          <para>Wenn der angegebene Bereich keine Wahrheitswerte enthält, generiert diese Methode einen Fehlerwert.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wenn diese Eigenschaft ohne einen Objektbezeichner verwendet wird, gibt sie ein Objekt zurück, das <see cref="T:Microsoft.Office.Interop.Excel.Application" /> die Microsoft Excel-Anwendung darstellt. Bei Verwendung mit einem Objektbezeichner gibt diese Eigenschaft ein Objekt zurück, das den Ersteller <see cref="T:Microsoft.Office.Interop.Excel.Application" /> des angegebenen Objekts darstellt. Sie können diese Eigenschaft mit einem OLE-Automatisierungsobjekt verwenden, um die Anwendung dieses Objekts zurückzugeben. Schreibgeschützt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arabic">
      <MemberSignature Language="C#" Value="public double Arabic (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Arabic([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Arabic(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Arabic (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Arabic(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16967)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die römische Zahl, die Konvertiert werden soll.</param>
        <summary>Konvertiert eine römische Zahl in eine arabische Zahl.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public string Asc (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Asc([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asc(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Asc(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16598)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Text oder ein Bezug auf eine Zelle mit dem zu ändernden Text. Wenn der Text keine Doppelbytezeichen enthält, wird keine Konvertierung vorgenommen.</param>
        <summary>Für Sprachen mit Doppel-Byte-Zeichensatz (DBCS) werden Zeichen mit voller Breite (Doppel-Byte) in Zeichen mit halber Breite (Einzel-Byte) geändert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public double Asin (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asin([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asin (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asin(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16482)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Sinus des gesuchten Winkels, muss zwischen -1 und 1 liegen.</param>
        <summary>Gibt den Arkussinus (d. h. den umgekehrten Sinus) einer Zahl zurück. Der Arkussinus ist der Winkel, dessen Sinus <paramref name="Arg1" /> ist. Der Winkel wird im Bogenmaß im Bereich -Pi/2 bis Pi/2 zurückgegeben.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn Sie den Arkussinus in Grad ausdrücken möchten, multiplizieren Sie das Ergebnis mit 180/PI( ), oder verwenden Sie die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> Methode.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public double Asinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Asinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Asinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Asinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16616)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine beliebige reelle Zahl.</param>
        <summary>Gibt den umgekehrten hyperbolischen Sinus einer Zahl zurück. Der umgekehrte hyperbolische Sinus ist der Wert, dessen hyperbolischer Sinus <paramref name="Arg1" /> ist, sodass Asinh(Sinh(number)) gleich <paramref name="Arg1" /> ist.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public double Atan2 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atan2([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atan2 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atan2(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16481)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die X-Koordinate des Punkts.</param>
        <param name="Arg2">Die Y-Koordinate des Punkts.</param>
        <summary>Gibt den Arkustangens oder den umgekehrten Tangens der angegebenen X- und Y-Koordinaten zurück. Der Arkustangens ist der Winkel zwischen der X-Achse und einer Geraden mit dem Ursprung (0, 0) und einem Punkt mit den Koordinaten (x_num, y_num). Der Winkel wird im Bogenmaß zwischen -Pi und Pi, ausschließlich Pi, angegeben.</summary>
        <returns>To be added.</returns>
        <remarks><para>Ein positives Ergebnis stellt einen Winkel gegen den Uhrzeigersinn ausgehend von der X-Achse dar; ein negatives Ergebnis stellt einen Winkel im Uhrzeigersinn dar. </para>
          <para>
            <b>Atan2(a,b)</b> entspricht <b>Atan(b/a)</b>mit der Ausnahme, dass a in <b>Atan2</b>gleich 0 sein kann. </para>
          <para>Wenn beide <paramref name="Arg1" /> Werte <paramref name="Arg2" /> 0 sind, gibt Atan2 einen Fehlerwert zurück. </para>
          <para>Multiplizieren Sie das Ergebnis mit 180/PI( ) oder verwenden Sie die Methode, um das Arctangent in Grad zu <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" /> ausdrücken.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public double Atanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Atanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Atanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Atanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Atanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16618)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine beliebige reelle Zahl zwischen 1 und -1.</param>
        <summary>Gibt den umgekehrten hyperbolischen Tangens einer Zahl zurück. Die Zahl muss zwischen -1 und 1 (ausschließlich -1 und 1) liegen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Der umgekehrte hyperbolische Tangens ist der Wert, dessen hyperbolischer Tangens <b>Arg1</b>ist, sodass <b>Atanh(Tanh(number))</b> gleich <paramref name="Arg1" /> ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AveDev">
      <MemberSignature Language="C#" Value="public double AveDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AveDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AveDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AveDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16653)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 bis 30 Argumente, für die der Durchschnitt der absoluten Abweichung ermittelt werden soll. Sie können auch ein Array oder einen Bezug auf ein Array anstelle der durch Komma getrennten Argumente verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt die durchschnittliche absolute Abweichung von Datenpunkten von ihrem Mittelwert zurück. AveDev ist ein Maß für die Varianz in einem Datensatz.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>AveDev</b> wird durch die Maßeinheit in den Eingabedaten beeinflusst. </para>
          <para>Bei den Argumenten muss es sich um Zahlen oder Namen, Arrays oder Bezüge mit Zahlen handeln.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in der Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Die Formel für die durchschnittliche Abweichung lautet wie folgt: 

</para>
          <para>Abbildung 1: Formel für durchschnittliche Abweichung</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public double Average (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Average([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Average(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Average (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16389)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 bis 30 numerische Argumente, für die der Mittelwert ermittelt werden soll.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den Mittelwert (arithmetisches Mittel) der Argumente zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht. Wenn Sie Wahrheitswerte und Textdarstellungen von Zahlen in einem Bezug als Bestandteil der Berechnung berücksichtigen möchten, verwenden Sie die AVERAGEA-Funktion. </para>
          <para>Die <b>Mittelwertmethode</b> misst die zentrale Tendenz, d. h. die Position des Mittelpunkts einer Gruppe von Zahlen in einer statistischen Verteilung. Die folgenden drei Maße der zentralen Tendenz sind am gebräuchlichsten:</para>
          <list type="bullet">
            <item>
              <description>Mittelwert. Dies ist das arithmetische Mittel, das berechnet wird, indem Zahlen addiert werden und die Summe dann durch die Anzahl der Summanden geteilt wird. Der Mittelwert von 2, 3, 3, 5, 7 und 10 beträgt beispielsweise 30 geteilt durch 6, also 5. </description>
            </item>
            <item>
              <description>Medianwert. Dies ist die mittlere Zahl in einer Gruppe von Zahlen. Dies bedeutet, dass die Hälfte der Zahlen größer als der Median und die Hälfte der Zahlen kleiner als der Median ist. Der Median von 2, 3, 3, 5, 7 und 10 ist beispielsweise 4.</description>
            </item>
            <item>
              <description>Modalwert. Dies ist die Zahl, die in einer Gruppe von Zahlen am häufigsten vorkommt. Der Modalwert von 2, 3, 3, 5, 7 und 10 ist beispielsweise 3.</description>
            </item>
          </list>
          <para>Bei einer symmetrischen Verteilung in einer Gruppe von Zahlen sind diese drei Arten der zentralen Tendenz gleich. Bei einer nicht symmetrischen Verteilung in einer Gruppe von Zahlen können die Werte unterschiedlich sein.</para>
          <para>Beachten Sie beim Nutzen von Zellen den Unterschied zwischen leeren Zellen und Zellen, die den Wert Null enthalten, insbesondere, wenn Sie das Kontrollkästchen "Null" auf der Registerkarte "Ansicht" (Befehl "Optionen", Menü "Extras"). Leere Zellen werden nicht gezählt, null Werte jedoch.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIf">
      <MemberSignature Language="C#" Value="public double AverageIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16867)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine oder mehrere Zellen, deren Mittelwert ermittelt werden soll.</param>
        <param name="Arg2">Das Kriterium in Form einer Zahl, eines Ausdrucks, eines Zellbezugs oder Texts, mit dem definiert wird, von welchen Zellen der Mittelwert ermittelt werden soll. Kriterien können beispielsweise als 32, "32", " &gt; 32", "Äpfel" oder B4 ausgedrückt werden.</param>
        <param name="Arg3">Die Zellen, die tatsächlich ausgewertet werden sollen. Wenn Sie hier nichts angeben, wird der Bereich verwendet.</param>
        <summary>Gibt den Mittelwert (arithmetisches Mittel) aller Zellen in einem Bereich zurück, die ein bestimmtes Kriterium erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Zellen im Bereich, die <b>"true" oder</b> <b>"false"</b> enthalten, werden ignoriert. </para>
          <para>Wenn es sich bei einer Zelle im Bereich oder average_range um eine leere Zelle handelt, ignoriert <b>AverageIf</b> sie. </para>
          <para>Wenn eine Zelle in Kriterien leer ist, behandelt <b>AverageIf</b> sie als 0-Wert. </para>
          <para>Wenn keine Zellen im Bereich die Kriterien erfüllen, generiert <b>AverageIf</b> einen Fehlerwert. </para>
          <para>You can use the wildcard characters, question mark (?) and asterisk (*), in criteria. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.</para>
          <para>Die Größe von Mittelwert_Bereich muss nicht der Größe von Bereich entsprechen. Die Zellen, aus denen der Mittelwert tatsächlich berechnet wird, werden ermittelt, indem die Zelle oben links in Mittelwert_Bereich als Anfangszelle herangezogen wird und dann alle Zellen eingeschlossen werden, deren Größe und Form Bereich entsprechen, wie im folgenden Beispiel dargestellt:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>Die <b>AverageIf -Methode</b> misst die zentrale Tendenz, d. h. die Position des Mittelpunkts einer Gruppe von Zahlen in einer statistischen Verteilung. Die folgenden drei Maße der zentralen Tendenz sind am gebräuchlichsten:</para>
          <list type="bullet">
            <item>
              <description>Mittelwert. Dies ist das arithmetische Mittel, das berechnet wird, indem Zahlen addiert werden und die Summe dann durch die Anzahl der Summanden geteilt wird. Der Mittelwert von 2, 3, 3, 5, 7 und 10 beträgt beispielsweise 30 geteilt durch 6, also 5. </description>
            </item>
            <item>
              <description>Medianwert. Dies ist die mittlere Zahl in einer Gruppe von Zahlen. Dies bedeutet, dass die Hälfte der Zahlen größer als der Median und die Hälfte der Zahlen kleiner als der Median ist. Der Median von 2, 3, 3, 5, 7 und 10 ist beispielsweise 4.</description>
            </item>
            <item>
              <description>Modalwert. Dies ist die Zahl, die in einer Gruppe von Zahlen am häufigsten vorkommt. Der Modalwert von 2, 3, 3, 5, 7 und 10 ist beispielsweise 3.</description>
            </item>
          </list>
          <para>Bei einer symmetrischen Verteilung in einer Gruppe von Zahlen sind diese drei Arten der zentralen Tendenz gleich. Bei einer nicht symmetrischen Verteilung in einer Gruppe von Zahlen können die Werte unterschiedlich sein.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AverageIfs">
      <MemberSignature Language="C#" Value="public double AverageIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 AverageIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.AverageIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AverageIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16868)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ein oder mehrere Bereiche, in denen die zugeordneten Kriterien ausgewertet werden sollen.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>Gibt den Mittelwert (arithmetisches Mittel) aller Zellen zurück, die mehrere Kriterien erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn es sich bei einer Zelle in average_range um eine leere Zelle handelt, wird sie von <b>AverageIfs</b> ignoriert. </para>
          <para>Wenn eine Zelle in einem Kriterienbereich leer ist, behandelt <b>AverageIfs</b> sie als 0-Wert. </para>
          <para>Zellen im Bereich, die <b>"True"</b> enthalten, werden als 1 ausgewertet. Zellen im Bereich, die <b>"false"</b> enthalten, werden als 0 (Null) ausgewertet. </para>
          <para>Die Zellen in Mittelwert_Bereich werden bei der Ermittlung des Mittelwerts nur berücksichtigt, wenn alle angegebenen Kriterien für diese Zelle wahr sind. </para>
          <para>Wenn Zellen in average_range leer sind oder Textwerte enthalten, die nicht in Zahlen übersetzt werden können, generiert <b>AverageIfs</b> einen Fehler. </para>
          <para>Wenn keine Zellen enthalten sind, die alle Kriterien erfüllen, generiert <b>AverageIfs</b> einen Fehlerwert. </para>
          <para>You can use the wildcard characters, question mark (?) and asterisk (*), in criteria. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.</para>
          <para>Die Größe von Kriterien_Bereich muss nicht der Größe von Mittelwert_Bereich entsprechen. Die Zellen, aus denen der Mittelwert tatsächlich berechnet wird, werden ermittelt, indem die Zelle oben links in Kriterien_Bereich als Anfangszelle herangezogen wird und dann alle Zellen eingeschlossen werden, deren Größe und Form Bereich entsprechen, wie im folgenden Beispiel dargestellt:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>Die <b>AverageIfs -Funktion</b> misst die zentrale Tendenz, d. h. die Position des Mittelpunkts einer Gruppe von Zahlen in einer statistischen Verteilung. Die folgenden drei Maße der zentralen Tendenz sind am gebräuchlichsten:</para>
          <list type="bullet">
            <item>
              <description>Mittelwert. Dies ist das arithmetische Mittel, das berechnet wird, indem Zahlen addiert werden und die Summe dann durch die Anzahl der Summanden geteilt wird. Der Mittelwert von 2, 3, 3, 5, 7 und 10 beträgt beispielsweise 30 geteilt durch 6, also 5. </description>
            </item>
            <item>
              <description>Medianwert. Dies ist die mittlere Zahl in einer Gruppe von Zahlen. Dies bedeutet, dass die Hälfte der Zahlen größer als der Median und die Hälfte der Zahlen kleiner als der Median ist. Der Median von 2, 3, 3, 5, 7 und 10 ist beispielsweise 4.</description>
            </item>
            <item>
              <description>Modalwert. Dies ist die Zahl, die in einer Gruppe von Zahlen am häufigsten vorkommt. Der Modalwert von 2, 3, 3, 5, 7 und 10 ist beispielsweise 3.</description>
            </item>
          </list>
          <para>Bei einer symmetrischen Verteilung in einer Gruppe von Zahlen sind diese drei Arten der zentralen Tendenz gleich. Bei einer nicht symmetrischen Verteilung in einer Gruppe von Zahlen können die Werte unterschiedlich sein.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BahtText">
      <MemberSignature Language="C#" Value="public string BahtText (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string BahtText([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BahtText(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function BahtText (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ BahtText(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16752)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine Zahl, die in Text umgewandelt werden soll, oder ein Bezug auf eine Zelle mit einer Zahl oder Formel, die eine Zahl ergibt.</param>
        <summary>Wandelt eine Zahl in Thai-Text um und fügt das Suffix "Baht" hinzu</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Base">
      <MemberSignature Language="C#" Value="public string Base (double Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Base([in]float64 Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Base(System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Base (Arg1 As Double, Arg2 As Double, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16955)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Zahl, die konvertiert werden soll.</param>
        <param name="Arg2">Die Basis-Radix, in die Sie die Zahl konvertieren möchten.</param>
        <param name="Arg3">Die Mindestlänge der zurückgegebenen Zeichenfolge. Wenn ausgelassene führende Nullen nicht hinzugefügt werden.</param>
        <summary>Wandelt eine Zahl in eine Textdarstellung mit dem angegebenen Radix (Basis) um.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselI">
      <MemberSignature Language="C#" Value="public double BesselI (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselI([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselI(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselI (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselI(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16812)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Die Ordnung der Besselfunktion. Wenn es sich bei n nicht um eine ganze Zahl handelt, wird die Zahl gekürzt.</param>
        <summary>Gibt die geänderte Besselfunktion zurück, die der Besselfunktion entspricht, die für imaginäre Argumente ausgewertet wird.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn x nicht numerisch ist, gibt BesselI den Fehlerwert #VALUE! zurück. </para>
          <para>Wenn n nicht numerisch ist, generiert BesselI einen Fehlerwert. </para>
          <para>Wenn n &lt; 0, generiert BesselI einen Fehlerwert. </para>
          <para>Die n-te Geänderte Besselfunktion der Variablen x ist:</para>
          <para>Abbildung 1: Besselfunktion der Variablen "x"</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselJ">
      <MemberSignature Language="C#" Value="public double BesselJ (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselJ([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselJ(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselJ (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselJ(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16809)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Die Ordnung der Besselfunktion. Wenn es sich bei n nicht um eine ganze Zahl handelt, wird die Zahl gekürzt.</param>
        <summary>Gibt die Besselfunktion zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn x nicht numerisch ist, <b>generiert BesselJ</b> einen Fehlerwert. </para>
          <para>Wenn n nicht numerisch ist, gibt <b>BesselJ</b> den Fehlerwert zurück. </para>
          <para>Wenn n &lt; 0, <b>generiert BesselJ</b> einen Fehlerwert. </para>
          <para>Die n-th-Besselfunktion der Variablen x ist: </para>
          <para>Abbildung 1: Besselfunktion der Variablen "x"</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>Abbildung 2: Gammafunktion</para>
          <para> </para>
          <para> </para>
          <para>ist die Gammafunktion.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselK">
      <MemberSignature Language="C#" Value="public double BesselK (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselK([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselK(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselK (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselK(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16810)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Die Ordnung der Funktion. Wenn es sich bei n nicht um eine ganze Zahl handelt, wird die Zahl gekürzt.</param>
        <summary>Gibt die geänderte Besselfunktion zurück, die den Besselfunktionen entspricht, die für imaginäre Argumente ausgewertet werden.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn x nicht numerisch ist, <b>generiert BesselK</b> einen Fehlerwert. </para>
          <para>Wenn n nicht numerisch ist, <b>generiert BesselK</b> einen Fehlerwert. </para>
          <para>Wenn n &lt; 0, <b>generiert BesselK</b> einen Fehlerwert. </para>
          <para>Die n-te Geänderte Besselfunktion der Variablen x ist: </para>
          <para>Abbildung 1: Besselfunktion der Variablen "x"</para>
          <para> </para>
          <para> </para>
          <para>Jn und Yn sind die J- bzw. Y-Bessel-Funktionen.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BesselY">
      <MemberSignature Language="C#" Value="public double BesselY (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BesselY([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BesselY(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BesselY (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BesselY(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16811)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Die Ordnung der Funktion. Wenn es sich bei n nicht um eine ganze Zahl handelt, wird die Zahl gekürzt.</param>
        <summary>Gibt die Besselfunktion zurück, die auch als Weberfunktion oder Neumannfunktion bezeichnet wird.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn x nicht numerisch ist, <b>generiert BesselY</b> einen Fehlerwert. </para>
          <para>Wenn n nicht numerisch ist, <b>generiert BesselY</b> einen Fehlerwert. </para>
          <para>Wenn n &lt; 0, <b>generiert BesselY</b> einen Fehlerwert. </para>
          <para>Die n-th-Besselfunktion der Variablen x ist: </para>
          <para>Abbildung 1: Besselfunktion der Variablen "x"</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Dist">
      <MemberSignature Language="C#" Value="public double Beta_Dist (double Arg1, double Arg2, double Arg3, bool Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16909)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert zwischen A und B, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Der Parameter Alpha der Verteilung.</param>
        <param name="Arg3">Der Parameter Beta der Verteilung.</param>
        <param name="Arg4">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn kumulativ <b>true ist,</b>BETA. DIST gibt die kumulierte Verteilungsfunktion zurück; Wenn <b>false,</b>gibt sie die Wahrscheinlichkeitsdichtefunktion zurück.</param>
        <param name="Arg5">Eine optionale Untergrenze für das Intervall von x.</param>
        <param name="Arg6">Eine optionale Obergrenze für das Intervall von x.</param>
        <summary>Gibt die kumulierte Betaverteilungsfunktion zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Betaverteilung wird häufig zum Untersuchen der Streuung von Prozentsätzen eines Werts in Stichproben verwendet, beispielsweise der Anteil der Zeit, den jemand an einem Tag mit Fernsehen verbringt.</para>
          <list type="bullet">
            <item>
              <description>Wenn ein Argument nicht numerisch ist, <b>gibt Beta_Dist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</description>
            </item>
            <item>
              <description>If alpha ≤ 0 or beta ≤ 0, <b>Beta_Dist</b> generates an error value.</description>
            </item>
            <item>
              <description>Wenn x &lt; A, x &gt; B oder A = B ist, <b>Beta_Dist</b> ein Fehlerwert generiert.</description>
            </item>
            <item>
              <description>Wenn Sie Werte für A und B (untere und obere Grenze) auslassen, verwendet <b>Beta_Dist</b> die standardmäßige kumulierte Betaverteilung, sodass A = 0 und B = 1 ist.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Beta_Inv">
      <MemberSignature Language="C#" Value="public double Beta_Inv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Beta_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Beta_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16910)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine der Betaverteilung zugeordnete Wahrscheinlichkeit.</param>
        <param name="Arg2">Der Parameter Alpha der Verteilung.</param>
        <param name="Arg3">Der Betaparameter für die Verteilung.</param>
        <param name="Arg4">Eine optionale Untergrenze für das Intervall von x.</param>
        <param name="Arg5">Eine optionale Obergrenze für das Intervall von x.</param>
        <summary>Gibt die Umkehrung der kumulierten Verteilungsfunktion für eine angegebene Betaverteilung zurück. Wenn die Wahrscheinlichkeit BETA.DIST(x,...) entspricht, gilt BETA.INV(Wahrsch,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Mithilfe der Betaverteilung können bei der Projektplanung mögliche Fertigstellungszeitpunkte ermittelt werden, wenn ein erwarteter Fertigstellungstermin und eine Variabilität angegeben werden.</para>
          <list type="bullet">
            <item>
              <description>Wenn ein Argument nicht numerisch ist, <b>Beta_Inv</b> ein Fehlerwert generiert.</description>
            </item>
            <item>
              <description>Wenn alpha ≤ 0 oder beta ≤ 0 ist, <b>Beta_Inv</b> einen Fehlerwert generiert.</description>
            </item>
            <item>
              <description>Wenn die ≤ 0 oder die Wahrscheinlichkeit &gt; 1 ist, <b>Beta_Inv</b> einen Fehlerwert generiert.</description>
            </item>
            <item>
              <description>Wenn Sie Werte für A und B (untere und obere Grenze) auslassen, verwendet <b>Beta_Inv</b> die standardmäßige kumulative Betaverteilung, sodass A = 0 und B = 1 ist.</description>
            </item>
          </list>
          <para>Bei einem Wert für die Wahrscheinlichkeit <b>sucht Beta_Inv</b> diesen Wert x so, dass Beta_Dist(x, alpha, beta, TRUE, A, B) = Wahrscheinlichkeit. Daher hängt die Genauigkeit <b>der Beta_Inv</b> von der Genauigkeit der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" /> ab. <b>Beta_Inv</b> verwendet eine iterative Suchtechnik.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaDist">
      <MemberSignature Language="C#" Value="public double BetaDist (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16654)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert zwischen A und B, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Ein Parameter der Verteilung.</param>
        <param name="Arg3">Ein Parameter der Verteilung.</param>
        <param name="Arg4">Eine optionale Untergrenze für das Intervall von x.</param>
        <param name="Arg5">Eine optionale Obergrenze für das Intervall von x.</param>
        <summary>Gibt die kumulierte Betaverteilungsfunktion zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Dist(System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Object)" /> Methode.</para>
          <para>Die Betaverteilung wird häufig zum Untersuchen der Streuung von Prozentsätzen eines Werts in Stichproben verwendet, beispielsweise der Anteil der Zeit, den jemand an einem Tag mit Fernsehen verbringt.</para>
          <list type="bullet">
            <item>
              <description>Wenn ein Argument nicht numerisch ist, <b>gibt BetaDist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</description>
            </item>
            <item>
              <description>Wenn alpha ≤ 0 oder Betawert ≤ 0 ist, <b>generiert BetaDist</b> einen Fehlerwert.</description>
            </item>
            <item>
              <description>Wenn x &lt; A, x &gt; B oder A = B ist, generiert <b>BetaDist</b> einen Fehlerwert.</description>
            </item>
            <item>
              <description>Wenn Sie werte für A und B auslassen, <b>verwendet BetaDist</b> die standardmäßige kumulative Betaverteilung, sodass A = 0 und B = 1 ist.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BetaInv">
      <MemberSignature Language="C#" Value="public double BetaInv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BetaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaInv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BetaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16656)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine der Betaverteilung zugeordnete Wahrscheinlichkeit.</param>
        <param name="Arg2">Der Parameter Alpha der Verteilung.</param>
        <param name="Arg3">Der Betaparameter für die Verteilung.</param>
        <param name="Arg4">Eine optionale Untergrenze für das Intervall von x.</param>
        <param name="Arg5">Eine optionale Obergrenze für das Intervall von x.</param>
        <summary>Gibt die Umkehrung der kumulierten Verteilungsfunktion für eine angegebene Betaverteilung zurück. Wenn die Wahrscheinlichkeit BetaVert(x,...) entspricht, gilt BetaInv(Wahrsch,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Beta_Inv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> Methode.</para>
          <para>Mithilfe der Betaverteilung können bei der Projektplanung mögliche Fertigstellungszeitpunkte ermittelt werden, wenn ein erwarteter Fertigstellungstermin und eine Variabilität angegeben werden.</para>
          <list type="bullet">
            <item>
              <description>Wenn ein Argument nicht numerisch ist, <b>generiert BetaInv</b> einen Fehlerwert.</description>
            </item>
            <item>
              <description>Wenn alpha ≤ 0 oder beta ≤ 0 ist, <b>generiert BetaInv</b> einen Fehlerwert. </description>
            </item>
            <item>
              <description>Wenn die ≤ 0 oder die Wahrscheinlichkeit &gt; 1 ist, <b>generiert BetaInv</b> einen Fehlerwert. </description>
            </item>
            <item>
              <description>Wenn Sie die Werte für A und B auslassen, verwendet <b>BetaInv</b> die standardmäßige kumulierte Betaverteilung, sodass A = 0 und B = 1 ist.</description>
            </item>
          </list>
          <para>Bei einem Wert für die Wahrscheinlichkeit sucht <b>BetaInv</b> diesen Wert x so, dass BetaDist(x, alpha, beta, A, B) = Wahrsch. Daher hängt die Genauigkeit von <b>BetaInv</b> von der Genauigkeit der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BetaDist(System.Double,System.Double,System.Double,System.Object,System.Object)" /> ab. <b>BetaInv verwendet</b> eine iterative Suchtechnik. Wenn die Suche nach 100 Iterationen nicht konvergiert ist, generiert die Funktion einen Fehlerwert.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Dec">
      <MemberSignature Language="C#" Value="public string Bin2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Bin2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16777)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die zu konvertierende binäre Zahl. Die Zahl darf nicht mehr als 10 Zeichen (10 Bits) enthalten. Das wichtigste Bit der Zahl ist das Vorzeichenbit. Bei den verbleibenden 9 Bits handelt es sich um die Bits für den Absolutbetrag. Negative Zahlen werden in der Zweierkomplementschreibweise dargestellt.</param>
        <summary>Wandelt eine binäre Zahl in eine Dezimalzahl um.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn die Zahl keine gültige binäre Zahl ist oder mehr als 10 Zeichen (10 Bits) enthält, generiert Bin2Dec einen Fehlerwert.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Hex">
      <MemberSignature Language="C#" Value="public string Bin2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16779)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die zu konvertierende binäre Zahl. Die Zahl darf nicht mehr als 10 Zeichen (10 Bits) enthalten. Das wichtigste Bit der Zahl ist das Vorzeichenbit. Bei den verbleibenden 9 Bits handelt es sich um die Bits für den Absolutbetrag. Negative Zahlen werden in der Zweierkomplementschreibweise dargestellt.</param>
        <param name="Arg2">Die Anzahl der zu verwendenden Zeichen. Wenn Stellen weggelassen werden, verwendet <b>Bin2Hex</b> die mindestens erforderliche Anzahl von Zeichen. Das Argument Stellen ist speziell dann hilfreich, wenn der jeweilige Rückgabewert mit führenden 0-en (Nullen) aufgefüllt werden soll.</param>
        <summary>Konvertiert eine binäre Zahl in eine Hexadezimalzahl.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn es sich bei "Zahl" nicht um eine gültige binäre Zahl handelt oder wenn die Zahl mehr als 10 Zeichen (10 Bit) enthält, generiert <b>Bin2Hex</b> einen Fehler. </para>
          <para>Wenn "Zahl" negativ ist, ignoriert <b>Bin2Hex</b> Stellen und gibt eine hexadezimale Zahl mit 10 Zeichen zurück. </para>
          <para>Wenn <b>Für Bin2Hex</b> mehr Zeichen als "Stellen" erforderlich sind, wird ein Fehler generiert. </para>
          <para>Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn die Stellen nichtumerisch sind, <b>generiert Bin2Hex</b> einen Fehler. </para>
          <para>Wenn die Stellen negativ sind, <b>generiert Bin2Hex</b> einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bin2Oct">
      <MemberSignature Language="C#" Value="public string Bin2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Bin2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bin2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bin2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16778)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die zu konvertierende binäre Zahl. Die Zahl darf nicht mehr als 10 Zeichen (10 Bits) enthalten. Das wichtigste Bit der Zahl ist das Vorzeichenbit. Bei den verbleibenden 9 Bits handelt es sich um die Bits für den Absolutbetrag. Negative Zahlen werden in der Zweierkomplementschreibweise dargestellt.</param>
        <param name="Arg2">Die Anzahl der zu verwendenden Zeichen. Wenn Stellen weggelassen werden, <b>verwendet Bin2Oct</b> die mindestens erforderliche Anzahl von Zeichen. Das Argument Stellen ist speziell dann hilfreich, wenn der jeweilige Rückgabewert mit führenden 0-en (Nullen) aufgefüllt werden soll.</param>
        <summary>Konvertiert eine binäre Zahl in eine oktale Zahl.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn es sich bei "Zahl" nicht um eine gültige binäre Zahl handelt oder wenn die Zahl mehr als 10 Zeichen (10 Bit) enthält, generiert <b>Bin2Oct</b> einen Fehler. </para>
          <para>Wenn "Zahl" negativ ist, <b>ignoriert Bin2Oct</b> Stellen und gibt eine oktale Zahl mit 10 Zeichen zurück. </para>
          <para>Wenn <b>"Bin2Oct"</b> mehr Zeichen als "Stellen" erfordert, wird ein Fehler generiert. </para>
          <para>Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn die Stellen nicht numerisch sind, <b>generiert Bin2Oct</b> einen Fehler. </para>
          <para>Wenn die Stellen negativ sind, <b>generiert Bin2Oct</b> einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist">
      <MemberSignature Language="C#" Value="public double Binom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16870)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Number_s - Die Anzahl der Erfolge in Testversionen.</param>
        <param name="Arg2">Testversionen – die Anzahl der unabhängigen Versuche.</param>
        <param name="Arg3">Probability_s – die Wahrscheinlichkeit, dass jeder Test erfolgreich war.</param>
        <param name="Arg4">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn <b>"Kumulativ" auf "True"</b>gesetzt ist, gibt die Methode die kumulierte Verteilungsfunktion zurück, bei der es sich um die Wahrscheinlichkeit handelt, dass es bis zu number_s Erfolge gibt. Bei <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> <b>"False"</b>gibt sie die Wahrscheinlichkeit der Massenfunktion zurück, die wahrscheinlich ist, dass number_s erfolge.</param>
        <summary>Gibt Wahrscheinlichkeiten einer binomialverteilten Zufallsvariablen zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Verwenden Sie die Methode <b>Binom_Dist</b> bei Problemen mit einer festen Anzahl von Versuchen oder Zufallsexperimenten, wenn die Ergebnisse nur günstig oder ungünstig sein können, wenn die Zufallsexperimente unabhängig sind und die Wahrscheinlichkeit für ein günstiges Ereignis im ganzen Experiment konstant ist. Die methode <b>Binom_Dist</b> kann beispielsweise die Wahrscheinlichkeit berechnen, dass zwei der nächsten drei geerbten Kinder männlich sind. </para>
          <list type="bullet">
            <item>
              <description>Zahl_Erfolge und Versuche werden auf ganze Zahlen abgerundet. </description>
            </item>
            <item>
              <description>Wenn number_s, Testversionen oder probability_s nicht numerisch ist, generiert <b>Binom_Dist</b> Methode einen Fehler. </description>
            </item>
            <item>
              <description>Wenn number_s &lt; 0 oder number_s, generiert &gt; die <b>Binom_Dist</b> Methode einen Fehler. </description>
            </item>
            <item>
              <description>Wenn probability_s &lt; 0 oder probability_s &gt; 1 ist, <b>generiert Binom_Dist</b> Methode einen Fehler. Die Binomial-Wahrscheinlichkeits-Massenfunktion ist: </description>
            </item>
          </list>
          <para>Dabei gilt:</para>
          <para>Abbildung 2: Formel</para>
          <para> </para>
          <para> </para>
          <para>ist COMBIN(n,x).</para>
          <para>Die kumulierte Binomialverteilung ist:</para>
          <para>Abbildung 3: Kumulierte Binomialverteilung</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Dist_Range">
      <MemberSignature Language="C#" Value="public double Binom_Dist_Range (double Arg1, double Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Dist_Range([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Dist_Range(System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Dist_Range (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16958)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Anzahl der unabhängigen Versuche.</param>
        <param name="Arg2">Die Erfolgswahrscheinlichkeit der einzelnen Testversionen.</param>
        <param name="Arg3">Die Anzahl der Erfolge in Testversionen.</param>
        <param name="Arg4">Wenn angegeben, gibt diese Funktion die Wahrscheinlichkeit zurück, dass die Anzahl der erfolgreichen Versuche zwischen Arg3 und Arg4 liegen soll.</param>
        <summary>Gibt die Wahrscheinlichkeit eines Testergebniss mithilfe einer Binomialverteilung zurück.</summary>
        <returns>Gleitkommawert mit doppelter Genauigkeit</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Binom_Inv">
      <MemberSignature Language="C#" Value="public double Binom_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Binom_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Binom_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Binom_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Binom_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16871)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Testversionen – die Anzahl der Intrullli-Versuche.</param>
        <param name="Arg2">Probability_s – die Wahrscheinlichkeit eines Erfolgs für jede Testversion.</param>
        <param name="Arg3">Alpha – der Wert des Kriteriums.</param>
        <summary>Gibt die Umkehrung der Wahrscheinlichkeiten einer binomialverteilten Zufallsvariablen zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn Trials, Probability_s oder Alpha nicht numerisch ist, <b>generiert Binom_Inv</b> Methode einen Fehler. </para>
          <para>Ist Versuche keine ganze Zahl, werden die Nachkommastellen abgeschnitten. </para>
          <para>Wenn Die &lt; Testversion 0 ist, <b>generiert Binom_Inv</b> Methode einen Fehler. </para>
          <para>Wenn Probability_s &lt; 0 oder Probability_s &gt; 1 ist, generiert <b>Binom_Inv</b> Methode einen Fehler. </para>
          <para>Bei Alpha &lt; 0 oder Alpha &gt; 1 <b>generiert Binom_Inv</b> methode einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BinomDist">
      <MemberSignature Language="C#" Value="public double BinomDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 BinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.BinomDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double BinomDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16657)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Anzahl der Erfolge in Testversionen.</param>
        <param name="Arg2">Die Anzahl der unabhängigen Versuche.</param>
        <param name="Arg3">Die Erfolgswahrscheinlichkeit der einzelnen Testversionen.</param>
        <param name="Arg4">Ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn der Kumulierte Wert <b>true</b>ist, gibt <b>BinomDist</b> die kumulierte Verteilungsfunktion zurück, was die Wahrscheinlichkeit ist, dass es nur number_s gibt; Wenn <b>false,</b>gibt sie die Wahrscheinlichkeitsfunktion zurück, die wahrscheinlich ist, dass number_s sind.</param>
        <summary>Gibt Wahrscheinlichkeiten einer binomialverteilten Zufallsvariablen zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Verwenden Sie <b>BinomDist</b> bei Problemen mit einer festen Anzahl von Tests oder Versuchen, wenn die Ergebnisse einer Testversion nur Erfolg oder Fehler sind, wenn Die Versuche unabhängig sind und wenn die Erfolgswahrscheinlichkeit im gesamten Experiment konstant ist. Beispielsweise kann <b>BinomDist</b> die Wahrscheinlichkeit berechnen, dass zwei der nächsten drei geerbten Kinder männlich sind. </para>
          <para>Zahl_Erfolge und Versuche werden auf ganze Zahlen abgerundet. </para>
          <para>Wenn number_s, Testversionen oder probability_s nicht numerisch ist, generiert <b>BinomDist</b> einen Fehler. </para>
          <para>Wenn number_s &lt; 0 oder number_s, generiert &gt; <b>BinomDist</b> einen Fehler. </para>
          <para>Wenn probability_s &lt; 0 oder probability_s &gt; 1 ist, generiert <b>BinomDist</b> einen Fehler. </para>
          <para>Die Binomial-Wahrscheinlichkeits-Massenfunktion ist: </para>
          <para>Abbildung 1: Binomial-Wahrscheinlichkeits-Massenfunktion</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>Abbildung 2: Formel</para>
          <para> </para>
          <para> </para>
          <para>ist COMBIN(n,x).</para>
          <para>Die kumulierte Binomialverteilung ist:</para>
          <para>Abbildung 3: Kumulierte Binomialverteilung</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitand">
      <MemberSignature Language="C#" Value="public double Bitand (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitand([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitand(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitand (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitand(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16946)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Dezimaldarstellung der binären Zahl, die ausgewertet werden soll.</param>
        <param name="Arg2">Die Dezimaldarstellung der binären Zahl, die ausgewertet werden soll.</param>
        <summary>Gibt ein bitweises And von zwei Zahlen zurück.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitlshift">
      <MemberSignature Language="C#" Value="public double Bitlshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitlshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitlshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitlshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitlshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16949)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Dezimaldarstellung der binären Zahl, die ausgewertet werden soll.</param>
        <param name="Arg2">Die Anzahl der Bits, um die Arg1 nach links verschoben werden soll.</param>
        <summary>Gibt eine Wertnummer zurück, die um shift_amount nach links verschoben wird.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitor">
      <MemberSignature Language="C#" Value="public double Bitor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16947)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Dezimaldarstellung der binären Zahl, die ausgewertet werden soll.</param>
        <param name="Arg2">Die Dezimaldarstellung der binären Zahl, die ausgewertet werden soll.</param>
        <summary>Gibt ein bitweises OR von 2 Zahlen zurück.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitrshift">
      <MemberSignature Language="C#" Value="public double Bitrshift (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitrshift([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitrshift(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitrshift (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitrshift(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16950)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Dezimaldarstellung der binären Zahl, die ausgewertet werden soll.</param>
        <param name="Arg2">Die Anzahl der Bits, um die Arg1 nach rechts verschoben werden soll.</param>
        <summary>Gibt einen Wert zurück, der um shift_amount nach rechts verschoben wird.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bitxor">
      <MemberSignature Language="C#" Value="public double Bitxor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Bitxor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Bitxor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Bitxor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Bitxor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16948)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Dezimaldarstellung der binären Zahl, die ausgewertet werden soll.</param>
        <param name="Arg2">Die Dezimaldarstellung der binären Zahl, die ausgewertet werden soll.</param>
        <summary>Gibt ein bitweises "Exclusive Or" aus zwei Zahlen zurück.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public double Ceiling (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ceiling(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16672)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – der Wert, den Sie runden möchten.</param>
        <param name="Arg2">Schritt – das Vielfache, auf das gerundet werden soll.</param>
        <summary>Gibt eine auf das nächste Vielfache von Schritt aufgerundete Zahl zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" /> Methode.</para>
          <para>Wenn Sie beispielsweise in Preisen keine Centbeträge angeben möchten und ein Produkt 4,42 $ kostet, verwenden Sie zum Aufrunden auf das nächste Vielfache von 5 Cent folgende Formel: Ceiling(4.42,0.05).</para>
          <para>Ist ein Argument nicht numerisch, generiert <b>Ceiling</b> einen Fehler. </para>
          <para>Unabhängig vom Vorzeichen der Zahl wird ein Wert aufgerundet. Wenn der Wert für Zahl bereits ein Vielfaches von Schritt darstellt, erfolgt keine Rundung.</para>
          <para>Wenn Anzahl und Signifikanz unterschiedliche Vorzeichen haben, <b>generiert Ceiling</b> einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Math">
      <MemberSignature Language="C#" Value="public double Ceiling_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16975)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, den Sie runden möchten.</param>
        <param name="Arg2">Das Vielfache, auf das Gerundet werden soll.</param>
        <param name="Arg3">Wenn angegeben und ungleich Null, wird diese Funktion von Null abrundet.</param>
        <summary>Rundet eine Zahl auf die nächste ganze Zahl oder auf das nächste Vielfache von Signifikanz auf.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceiling_Precise">
      <MemberSignature Language="C#" Value="public double Ceiling_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ceiling_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ceiling_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ceiling_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16930)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – der Wert, den Sie runden möchten.</param>
        <param name="Arg2">Schritt – das Vielfache, auf das gerundet werden soll.</param>
        <summary>Gibt die angegebene Zahl gerundet auf das nächste Vielfache von Schritt zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn Sie beispielsweise in Preisen keine Centbeträge angeben möchten und ein Produkt 4,42 $ kostet, verwenden Sie zum Aufrunden auf das nächste Vielfache von 5 Cent folgende Formel: Ceiling(4.42,0.05).</para>
          <para>Abhängig vom Vorzeichen der Zahl und der Schrittargumente, rundet die <b>Ceiling_Precise</b>-Methode entweder zu Null oder von Null.</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>Runden in Richtung Null</description>
            </item>
            <item>
              <term>+/+</term>
              <description>Aufrunden auf eine Stelle.</description>
            </item>
            <item>
              <term>-/+</term>
              <description>Runden in Richtung Null</description>
            </item>
            <item>
              <term>+/-</term>
              <description>Aufrunden auf eine Stelle.</description>
            </item>
          </list>
          <para>Ist ein Argument nicht numerisch, generiert <b>Ceiling_Precise</b> einen Fehler. </para>
          <para>Wenn der Wert für Zahl bereits ein Vielfaches von Schritt darstellt, erfolgt keine Rundung.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiDist">
      <MemberSignature Language="C#" Value="public double ChiDist (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiDist([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiDist (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiDist(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16658)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, für den die Verteilung evaluiert werden soll.</param>
        <param name="Arg2">Die Anzahl der Freiheitsgrade.</param>
        <summary>Gibt Werte der Verteilungsfunktion (1-Alpha) einer Chi-Quadrat-verteilten Zufallsgröße zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zu den neuen Funktionen finden Sie unter den <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" /> Methoden und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" /> methoden.</para>
          <para>Die χ2-Verteilung ist einem χ2-Test zugeordnet. Verwenden Sie den χ2-Test, um beobachtete und erwartete Werte zu vergleichen.</para>
          <para>In einem Genexperiment kann beispielsweise die Hypothese aufgestellt werden, dass die nächste Pflanzengeneration bestimmte Farben aufweisen wird. Durch das Vergleichen der beobachteten Ergebnisse mit den erwarteten Ergebnissen können Sie entscheiden, ob die Ausgangshypothese wahr ist.</para>
          <para>Wenn eines der Argumente nicht numerisch ist, <b>generiert ChiDist</b> einen Fehler. </para>
          <para>Wenn "x" negativ ist, <b>generiert ChiDist</b> einen Fehler. </para>
          <para>Wenn der Wert für Freiheitsgrade keine ganze Zahl darstellt, wird die Zahl gekürzt. </para>
          <para>Wenn degrees_freedom &lt; 1 oder degrees_freedom &gt; 10^10 ist, generiert <b>ChiDist</b> einen Fehler. </para>
          <para>
            <b>ChiDist</b> wird als ChiDist = P(X x) berechnet, wobei X eine &gt; zufallsvariable χ2 ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiInv">
      <MemberSignature Language="C#" Value="public double ChiInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16659)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die zur Chi-Quadrat-Verteilung gehörige Wahrscheinlichkeit.</param>
        <param name="Arg2">Die Anzahl der Freiheitsgrade.</param>
        <summary>Gibt Perzentile der Chi-Quadrat-Verteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zu den neuen Funktionen finden Sie unter den <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" /> Methoden und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" /> methoden.</para>
          <para>Wenn Wahrsch = ChiVert(x,...) ist, gilt ChiInv(Wahrsch,...) = x. Vergleichen Sie mithilfe dieser Funktion beobachtete Ergebnisse mit erwarteten Ergebnissen, um zu bestimmen, ob die Ausgangshypothese wahr ist.</para>
          <para>Wenn eines der Argumente nicht numerisch ist, <b>generiert ChiInv</b> einen Fehler. </para>
          <para>Wenn die &lt; Wahrscheinlichkeit 0 oder die Wahrscheinlichkeit &gt; 1 ist, <b>generiert ChiInv</b> einen Fehler. </para>
          <para>Wenn der Wert für Freiheitsgrade keine ganze Zahl darstellt, wird die Zahl gekürzt. </para>
          <para>Wenn degrees_freedom &lt; 1 oder degrees_freedom ≥ 10^10 ist, generiert <b>ChiInv</b> einen Fehler.</para>
          <para>Bei einem Wert für die Wahrscheinlichkeit sucht <b>ChiInv</b> diesen Wert x so, dass ChiDist(x, degrees_freedom) = Wahrsch ist. Daher hängt die Genauigkeit von <b>ChiInv</b> von der Genauigkeit von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiDist(System.Double,System.Double)" /> ab. <b>ChiInv verwendet</b> eine iterative Suchtechnik. Wenn die Suche nach 64 Iterationen nicht konvergiert ist, generiert die Funktion einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16911)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – Der Wert, bei dem die Verteilung ausgewertet werden soll.</param>
        <param name="Arg2">Deg_freedom : Die Anzahl der Freiheitsgrade.</param>
        <param name="Arg3">Kumuliert – Ein logischer Wert, der die Form der Funktion bestimmt. Wenn kumulativ <b>true</b>ist, gibt CHISQ_DIST die kumulierte Verteilungsfunktion zurück. Wenn <b>false,</b>gibt sie die Wahrscheinlichkeitsdichtefunktion zurück.</param>
        <summary>Gibt Werte der Chi-Quadrat-Verteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Ist eines der Argumente nicht numerisch, gibt CHISQ.DIST den Fehlerwert #WERT! zurück. </para>
          <para>Wenn X negativ ist, gibt CHISQ.DIST den Fehlerwert #ZAHL! zurück. </para>
          <para>Wenn Freiheitsgrade keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Dist_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16912)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, für den die Verteilung evaluiert werden soll.</param>
        <param name="Arg2">Die Anzahl der Freiheitsgrade.</param>
        <summary>Gibt Werte der rechtsseitigen Wahrscheinlichkeitsfunktion der Chi-Quadrat-Verteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die χ2-Verteilung ist einem χ2-Test zugeordnet. Verwenden Sie den χ2-Test, um beobachtete und erwartete Werte zu vergleichen.</para>
          <para>In einem Genexperiment kann beispielsweise die Hypothese aufgestellt werden, dass die nächste Pflanzengeneration bestimmte Farben aufweisen wird. Durch das Vergleichen der beobachteten Ergebnisse mit den erwarteten Ergebnissen können Sie entscheiden, ob die Ausgangshypothese wahr ist.</para>
          <para>Wenn eines der Argumente nicht numerisch ist, <b>ChiSq_Dist_RT</b> ein Fehler generiert. </para>
          <para>Wenn "x" negativ ist, <b>ChiSq_Dist_RT</b> ein Fehler generiert. </para>
          <para>Wenn der Wert für Freiheitsgrade keine ganze Zahl darstellt, wird die Zahl gekürzt. </para>
          <para>Wenn degrees_freedom &lt; 1 oder degrees_freedom &gt; 10^10 ist, <b>generiert ChiSq_Dist_RT</b> einen Fehler. <b>ChiSq_Dist_RT</b> wird als ChiSq_Dist_RT = P(X &gt; x) berechnet, wobei X eine zufallsvariable χ2 ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16913)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrscheinlichkeit – Eine Der Chi-Quadrat-Verteilung zugeordnete Wahrscheinlichkeit.</param>
        <param name="Arg2">Deg_freedom : Die Anzahl der Freiheitsgrade.</param>
        <summary>Gibt Perzentile der linksseitigen Chi-Quadrat-Verteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Argument nicht numerisch ist, <b>gibt ChiSq_Inv</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die &lt; Wahrscheinlichkeit 0 oder die Wahrscheinlichkeit &gt; 1 <b>ist, gibt ChiSq_Inv</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Freiheitsgrade keine ganze Zahl darstellt, wird die Zahl gekürzt. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Inv_RT">
      <MemberSignature Language="C#" Value="public double ChiSq_Inv_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Inv_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Inv_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Inv_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Inv_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16914)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die zur Chi-Quadrat-Verteilung gehörige Wahrscheinlichkeit.</param>
        <param name="Arg2">Die Anzahl der Freiheitsgrade.</param>
        <summary>Gibt Perzentile der rechtsseitigen Chi-Quadrat-Verteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn Wahrsch = CHI.DIST.RT(x,...) ist, gilt CHISQ.INV.RT(Wahrsch,...) = x. Vergleichen Sie mithilfe dieser Funktion beobachtete Ergebnisse mit erwarteten Ergebnissen, um zu bestimmen, ob die Ausgangshypothese wahr ist.</para>
          <para>Wenn eines der Argumente nicht numerisch ist, <b>ChiSq_Inv_RT</b> ein Fehler generiert. </para>
          <para>Wenn die &lt; Wahrscheinlichkeit 0 oder die Wahrscheinlichkeit &gt; 1 <b>ist, ChiSq_Inv_RT</b> ein Fehler generiert. </para>
          <para>Wenn der Wert für Freiheitsgrade keine ganze Zahl darstellt, wird die Zahl gekürzt. </para>
          <para>Wenn degrees_freedom &lt; 1 oder degrees_freedom ≥ 10^10 ist, <b>generiert ChiSq_Inv_RT</b> einen Fehler.</para>
          <para>Bei einem Wert für die Wahrscheinlichkeit sucht <b>ChiSq_Inv_RT</b> diesen Wert x so, dass ChiSq_Dist_RT(x, degrees_freedom) = Wahrscheinlichkeit ist. Daher hängt die Genauigkeit <b>der ChiSq_Inv_RT</b> von der Genauigkeit der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Dist_RT(System.Double,System.Double)" /> ab. <b>ChiSq_Inv_RT</b> verwendet eine iterative Suchtechnik. Wenn die Suche nach 64 Iterationen nicht konvergiert ist, generiert die Funktion einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiSq_Test">
      <MemberSignature Language="C#" Value="public double ChiSq_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiSq_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiSq_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiSq_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16874)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Datenbereich, der Beobachtungen enthält, die mit erwarteten Werten zu testen sind.</param>
        <param name="Arg2">Der Datenbereich, der das Verhältnis des Produkts von Zeilen- und Spaltensummen zur Gesamtsumme enthält.</param>
        <summary>Gibt den Unabhängigkeitstest zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>ChiSq_Test</b> gibt den Wert aus der Chi-Quadrat-Verteilung (χ2) für die Statistik und die entsprechenden Freiheitsgrade zurück. Sie können χ2-Tests verwenden, um zu bestimmen, ob die hypothetischen Ergebnisse von einem Experiment überprüft werden.</para>
          <para>Wenn actual_range und expected_range eine andere Anzahl von Datenpunkten haben, <b>gibt ChiSq_Test</b> den Fehlerwert #N/A zurück. </para>
          <para>Der χ2-Test berechnet zunächst eine χ2-Statistik mithilfe der Formel: </para>
          <para>Abbildung 1: Formel für x-Quadrat-Test</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <list type="bullet">
            <item>
              <description>Aij = tatsächliche Häufigkeit in der i-th-Zeile, j-th-Spalte</description>
            </item>
            <item>
              <description>Eij = erwartete Häufigkeit in der i-th-Zeile, j-th-Spalte</description>
            </item>
            <item>
              <description>r = Zahl oder Zeilen</description>
            </item>
            <item>
              <description>c = Anzahl der Spalten</description>
            </item>
          </list>
          <para>Ein niedriger Wert von χ2 ist ein Indikator für die Unabhängigkeit. Wie aus der Formel zu sehen ist, ist χ2 immer positiv oder 0 und ist nur dann 0, wenn Aij = Eij für jedes i,j ist.</para>
          <para>
            <b>ChiSq_Test</b> gibt die Wahrscheinlichkeit zurück, dass ein Wert der χ2-Statistik mindestens so hoch ist, wie der durch die obige Formel berechnete Wert zufällig unter der Annahme der Unabhängigkeit passiert sein könnte. Bei der Berechnung dieser Wahrscheinlichkeit <b>verwendet ChiSq_Test</b> die χ2-Verteilung mit einer geeigneten Anzahl von Freiheitsgraden, df. Wenn r &gt; 1 und c &gt; 1, dann df = (r - 1)(c - 1). If r = 1 and c &gt; 1, then df = c - 1 or if r &gt; 1 and c = 1, then df = r - 1. r = c= 1 ist nicht zulässig und generiert einen Fehler.</para>
          <para>Die Verwendung <b>ChiSq_Test</b> ist am besten geeignet, wenn die Eijs nicht zu klein sind. Einige Statistiker schlagen vor, dass jeder Eij größer oder gleich 5 sein sollte.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChiTest">
      <MemberSignature Language="C#" Value="public double ChiTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ChiTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChiTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ChiTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16690)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Datenbereich, der Beobachtungen enthält, die mit erwarteten Werten zu testen sind.</param>
        <param name="Arg2">ImportantThis function has been replaced with one or more new functions that may provide improved accuracy and whose names better reflect their usage. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ChiSq_Test(System.Object,System.Object)" /> Methode. Der Datenbereich, der das Verhältnis des Produkts von Zeilen- und Spaltensummen zur Gesamtsumme enthält.</param>
        <summary>Gibt den Unabhängigkeitstest zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>ChiTest</b> gibt den Wert aus der Chi-Quadrat-Verteilung (χ2) für die Statistik und die entsprechenden Freiheitsgrade zurück. Sie können χ2-Tests verwenden, um zu bestimmen, ob die hypothetischen Ergebnisse von einem Experiment überprüft werden.</para>
          <para>Wenn actual_range und expected_range eine andere Anzahl von Datenpunkten haben, gibt <b>ChiTest</b> den Fehlerwert #N/A zurück. </para>
          <para>Der χ2-Test berechnet zunächst eine χ2-Statistik mithilfe der Formel: </para>
          <para>Abbildung 1: Formel für x-Quadrat-Test</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <list type="bullet">
            <item>
              <description>Aij = tatsächliche Häufigkeit in der i-th-Zeile, j-th-Spalte</description>
            </item>
            <item>
              <description>Eij = erwartete Häufigkeit in der i-th-Zeile, j-th-Spalte</description>
            </item>
            <item>
              <description>r = Zahl oder Zeilen</description>
            </item>
            <item>
              <description>c = Anzahl der Spalten</description>
            </item>
          </list>
          <para> </para>
          <para>Ein niedriger Wert von χ2 ist ein Indikator für die Unabhängigkeit. Wie aus der Formel zu sehen ist, ist χ2 immer positiv oder 0 und ist nur dann 0, wenn Aij = Eij für jedes i,j ist.</para>
          <para>
            <b>ChiTest</b> gibt die Wahrscheinlichkeit zurück, dass ein Wert der χ2-Statistik mindestens so hoch ist, wie der von der obigen Formel berechnete Wert zufällig unter der Annahme der Unabhängigkeit passiert sein könnte. Bei der Berechnung dieser Wahrscheinlichkeit verwendet <b>ChiTest</b> die χ2-Verteilung mit einer geeigneten Anzahl von Freiheitsgraden, df. Wenn r &gt; 1 und c &gt; 1, dann df = (r - 1)(c - 1). If r = 1 and c &gt; 1, then df = c - 1 or if r &gt; 1 and c = 1, then df = r - 1. r = c= 1 ist nicht zulässig und generiert einen Fehler.</para>
          <para>Die Verwendung <b>von ChiTest</b> ist am besten geeignet, wenn die Eijs nicht zu klein sind. Einige Statistiker schlagen vor, dass jeder Eij größer oder gleich 5 sein sollte.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose">
      <MemberSignature Language="C#" Value="public object Choose (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Choose([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Choose(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16484)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Gibt an, welches Wertargument ausgewählt wird. Bei Arg1 muss es sich um eine Zahl zwischen 1 und 29 handeln oder um eine Formel oder einen Zellbezug mit einer Zahl zwischen 1 und 29.</param>
        <param name="Arg2">1 bis 29 Wertargumente, aus denen choose einen Wert oder eine Aktion basierend auf Arg1 auswählt. Die Argumente können Zahlen, Zellbezüge, definierte Namen, Formeln, Funktionen oder Text sein.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Wird <paramref name="Arg1" /> als Index zum Zurückgeben eines Werts aus der Liste der Wertargumente verwendet.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn <paramref name="Arg1" /> der Wert 1 ist, gibt <b>"Choose"</b> den Wert1 zurück, wenn er 2 ist, gibt <b>"Choose"</b> den Wert2 zurück, und so weiter. </para>
          <para>Wenn der Wert kleiner als 1 oder größer als der letzte Wert in der Liste ist, generiert <paramref name="Arg1" /> <b>"Choose"</b> einen Fehler. </para>
          <para>Wenn es sich um einen Bruch handelt, wird er vor der Verwendung auf die niedrigste <paramref name="Arg1" /> ganze Zahl gekürzt. </para>
          <para>Wenn <paramref name="Arg1" /> es sich um ein Array handelt, wird jeder Wert ausgewertet, wenn <b>"Auswählen"</b> ausgewertet wird. </para>
          <para>Bei den <b>Wertargumenten für die Auswahl kann</b> es sich um Bereichsverweise und einzelne Werte um Bereichsverweise oder einzelne Werte sein. Beispiel für die Formel:</para>
          <para>=SUM(Choose(2,A1:A10,B1:B10,C1:C10))</para>
          <para>wertet aus:</para>
          <para>=SUM(B1:B10)</para>
          <para>gibt dann einen Wert basierend auf den Werten im Bereich B1:B10 zurück.</para>
          <para>The <b>Choose</b> function is evaluated first, returning the reference B1:B10. Die SUMME-Funktion wird dann mithilfe von B1:B10, dem Ergebnis der <b>Choose-Funktion,</b> als Argument ausgewertet.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Clean">
      <MemberSignature Language="C#" Value="public string Clean (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Clean([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Clean (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Clean(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16546)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Arbeitsblattinformationen, aus denen nicht druckbare Zeichen entfernt werden sollen.</param>
        <summary>Entfernt alle nicht druckbaren Zeichen aus Text.</summary>
        <returns>To be added.</returns>
        <remarks><para>Verwenden <b>Sie "Clean"</b> für Text, der aus anderen Anwendungen importiert wurde und Zeichen enthält, die möglicherweise nicht mit Ihrem Betriebssystem gedruckt werden. Sie können z. B. <b>"Clean"</b> verwenden, um Computercode auf niedriger Ebene zu entfernen, der sich häufig am Anfang und am Ende der Datendateien befindet und nicht gedruckt werden kann.</para>
          <para>
            <b>Wichtig:</b>Die Funktion <b>"Clean"</b> wurde entwickelt, um die ersten 32 nicht druckenden Zeichen im 7-Bit-ASCII-Code (Werte 0 bis 31) aus Text zu entfernen. Im Unicode-Zeichensatz gibt es weitere nicht druckbare Zeichen (Werte 127, 129, 141, 143, 144 und 157). Allein entfernt die <b>Funktion "Clean"</b> diese zusätzlichen nicht druckenden Zeichen nicht.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Combin">
      <MemberSignature Language="C#" Value="public double Combin (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combin([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combin(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combin (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combin(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16660)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Anzahl der Elemente.</param>
        <param name="Arg2">Die Anzahl der Elemente in jeder Kombination.</param>
        <summary>Gibt die Anzahl der Kombinationen für eine bestimmte Anzahl von Elementen zurück. Verwenden <b>Sie Combin,</b> um die mögliche Gesamtanzahl von Gruppen für eine bestimmte Anzahl von Elementen zu ermitteln.</summary>
        <returns>To be added.</returns>
        <remarks><para>Numerische Argumente werden zu ganzen Zahlen gekürzt. </para>
          <para>Wenn eines der Argumente nicht numerisch ist, <b>generiert Combin</b> einen Fehler. </para>
          <para>Wenn die Zahl 0, number_chosen 0 oder number_chosen ist, generiert &lt; &lt; &lt; <b>Combin</b> einen Fehler. </para>
          <para>Eine Kombination ist eine beliebige Menge oder Teilmenge von Elementen, unabhängig von der internen Reihenfolge. Kombinationen unterscheiden sich von Permutationen, bei denen die interne Reihenfolge signifikant ist.</para>
          <para>Die Anzahl der Kombinationen lautet wie folgt, wobei Zahl = n und number_chosen = k: </para>
          <para>Abbildung 1: Anzahl der Kombinationen</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>Abbildung 2: Formel</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Combina">
      <MemberSignature Language="C#" Value="public double Combina (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Combina([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Combina(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Combina (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Combina(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16952)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Gesamtzahl der Elemente.</param>
        <param name="Arg2">Die Anzahl der Elemente in jeder Kombination.</param>
        <summary>Gibt die Anzahl der Kombinationen mit Wiederholungen für eine bestimmte Anzahl von Elementen zurück.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complex">
      <MemberSignature Language="C#" Value="public string Complex (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Complex([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Complex (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16795)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der reale Koeffizient der komplexen Zahl.</param>
        <param name="Arg2">Der imaginäre Koeffizient der komplexen Zahl.</param>
        <param name="Arg3">Das Suffix der imaginären Komponente der komplexen Zahl. Wenn Sie diesen Wert nicht angeben, wird als Suffix "i" angenommen.</param>
        <summary>Rechnet reale und imaginäre Koeffizienten in eine komplexe Zahl im Format x + yi oder x + yj um.</summary>
        <returns>To be added.</returns>
        <remarks><para>Alle Funktionen mit komplexen Zahlen akzeptieren "i" und "j" als Suffix, nicht jedoch "I" oder "J". Die Verwendung von Großbuchstaben führt zu einem Fehler. Bei allen Funktionen, die zwei oder mehr komplexe Zahlen akzeptieren, müssen alle Suffixe übereinstimmen.</para>
          <para>Wenn <paramref name="Arg1" /> der Fehler nicht numerisch ist, generiert <b>Complex</b> einen Fehler. </para>
          <para>Wenn <paramref name="Arg2" /> der Fehler nicht numerisch ist, generiert <b>Complex</b> einen Fehler. </para>
          <para>Wenn <paramref name="Arg3" /> weder "i" noch "j" ist, generiert <b>Complex</b> einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public double Confidence (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16661)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Mit der Signifikanzebene kann die Konfidenzebene berechnet werden. Die Konfidenzebene entspricht 100*(1-alpha)%, d. h. der Alpha-Wert 0,05 gibt eine Konfidenzebene von 95 Prozent an.</param>
        <param name="Arg2">Die Standardabweichung der Grundgesamtheit für den Datenbereich wird als bekannt vorausgesetzt.</param>
        <param name="Arg3">Der Stichprobenumfang.</param>
        <summary>Gibt einen Wert zurück, mit dem Sie ein Konfidenzintervall für den Mittelwert einer Grundgesamtheit erstellen können.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zu den neuen Funktionen finden Sie unter den <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" /> Methoden und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" /> methoden.</para>
          <para>Bei dem Konfidenzintervall handelt es sich um einen Wertebereich. Der Mittelwert des Beispiels x befindet sich in der Mitte dieses Bereichs, und der Bereich ist x ± <b>Konfidenz</b>. Wenn "x" z. B. der Mittelwert der Stichprobe für die Zustellungszeiten von Produkten ist, die per E-Mail bestellt wurden, ist "x ± <b>Confidence"</b> ein Bereich von Mittelwerten für die Grundgesamtheit. Bei einem Mittelwert der Grundgesamtheit (μ0) in diesem Bereich ist die Wahrscheinlichkeit, dass ein Stichproben mittelwert weiter von μ0 als x erreicht wird, größer als alpha; Für jeden Mittelwert der Grundgesamtheit , μ0, nicht in diesem Bereich, ist die Wahrscheinlichkeit, dass ein Stichproben mittelwert weiter von μ0 als x erhalten wird, kleiner als alpha. Nehmen wir also an, dass wir x, standard_dev und Größe verwenden, um einen zweieckweisen Test auf Signifikanzebene Alpha der Hypothese zu erstellen, dass der Mittelwert der Grundgesamtheit μ0 ist. Diese Hypothese wird dann nicht zurückgewiesen, wenn sich μ0 im Konfidenzintervall befindet und diese Hypothese zurückweisen, wenn μ0 nicht im Konfidenzintervall liegt. Das Konfidenzintervall lässt die Aussage nicht zu, dass eine Wahrscheinlichkeit von 1 – Alpha besteht, dass für das nächste Paket eine Lieferzeit innerhalb des Konfidenzintervalls vorliegt. </para>
          <para>Wenn ein Argument nicht numerisch ist, generiert <b>Confidence</b> einen Fehler. </para>
          <para>Wenn alpha ≤ 0 oder alpha ≥ 1 ist, generiert <b>Confidence</b> einen Fehler. </para>
          <para>Wenn standard_dev ≤ 0 ist, <b>generiert "Confidence"</b> einen Fehler. </para>
          <para>Wenn Größe keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn Die Größe &lt; 1 ist, <b>generiert Confidence</b> einen Fehler. </para>
          <para>Wenn wir davon ausgehen, dass alpha gleich 0,05 ist, müssen wir die Fläche unter der Standardnormalkurve berechnen, die gleich (1 - Alpha) oder 95 Prozent ist. Dieser Wert ist ± 1,96. Das Konfidenzintervall ist daher: </para>
          <para>Abbildung 1: Konfidenzintervall</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_Norm">
      <MemberSignature Language="C#" Value="public double Confidence_Norm (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_Norm([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_Norm(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_Norm (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_Norm(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16872)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Mit der Signifikanzebene kann die Konfidenzebene berechnet werden. Die Konfidenzebene entspricht 100*(1-alpha)%, d. h. der Alpha-Wert 0,05 gibt eine Konfidenzebene von 95 Prozent an.</param>
        <param name="Arg2">Die Standardabweichung der Grundgesamtheit für den Datenbereich wird als bekannt vorausgesetzt.</param>
        <param name="Arg3">Der Stichprobenumfang.</param>
        <summary>Gibt einen Wert zurück, mit dem Sie ein Konfidenzintervall für den Mittelwert einer Grundgesamtheit erstellen können.</summary>
        <returns>To be added.</returns>
        <remarks><para>Bei dem Konfidenzintervall handelt es sich um einen Wertebereich. Der Mittelwert des Beispiels x befindet sich in der Mitte dieses Bereichs, und der Bereich ist x ± <b>Confidence_Norm</b>. Wenn x z. B. der Mittelwert der Stichprobe für die Zustellungszeiten von Produkten ist, die per E-Mail bestellt wurden, ist x ± <b>Confidence_Norm</b> ein Bereich von Mittelwerten für die Grundgesamtheit. Bei einem Mittelwert der Grundgesamtheit (μ0) in diesem Bereich ist die Wahrscheinlichkeit, dass ein Stichproben mittelwert weiter von μ0 als x erreicht wird, größer als alpha; Für jeden Mittelwert der Grundgesamtheit , μ0, nicht in diesem Bereich, ist die Wahrscheinlichkeit, dass ein Stichproben mittelwert weiter von μ0 als x erhalten wird, kleiner als alpha. Nehmen wir also an, dass x, standard_dev und Größe verwendet werden, um einen Zwei-Tail-Test auf Signifikanzebene Alpha der Hypothese zu erstellen, dass der Mittelwert der Grundgesamtheit μ0 ist. Diese Hypothese wird dann nicht zurückgewiesen, wenn sich μ0 im Konfidenzintervall befindet und diese Hypothese zurückweisen, wenn μ0 nicht im Konfidenzintervall liegt. Das Konfidenzintervall lässt nicht den Rückschluss zu, dass die Wahrscheinlichkeit 1 – Alpha ist, dass das nächste Paket eine Übermittlungszeit in Dem Konfidenzintervall nimmt.</para>
          <para>Wenn ein Argument nicht numerisch ist, <b>Confidence_Norm</b> ein Fehler generiert. </para>
          <para>Wenn alpha ≤ 0 oder alpha ≥ 1 ist, <b>Confidence_Norm</b> einen Fehler generiert. </para>
          <para>Wenn standard_dev ≤ 0 <b>ist, Confidence_Norm</b> ein Fehler generiert. </para>
          <para>Wenn Größe keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn die &lt; Größe 1 <b>ist, Confidence_Norm</b> ein Fehler generiert. </para>
          <para>Wenn angenommen wird, dass alpha gleich 0,05 ist, berechnen Sie die Fläche unter der Standardnormalkurve, die gleich (1 - Alpha) oder 95 Prozent ist. Dieser Wert ist ± 1,96. Das Konfidenzintervall ist daher: </para>
          <para>Abbildung 1: Konfidenzintervall</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Confidence_T">
      <MemberSignature Language="C#" Value="public double Confidence_T (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Confidence_T([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Confidence_T(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confidence_T (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Confidence_T(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16873)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Alpha – Die Signifikanzstufe, die zum Berechnen der Konfidenzstufe verwendet wird. Die Konfidenzstufe entspricht 100*(1 - Alpha)%, oder anders ausgedrückt, ein Alphawert von 0,05 gibt einen Konfidenzwert von 95 Prozent an.</param>
        <param name="Arg2">Standard_dev - Die Standardabweichung der Grundgesamtheit für den Datenbereich und wird als bekannt angenommen.</param>
        <param name="Arg3">Größe – Die Beispielgröße.</param>
        <summary>Gibt das Konfidenzintervall für den Mittelwert einer Grundgesamtheit mit einer Student-t-Verteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Argument nicht numerisch ist, <b>gibt Confidence_T</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn alpha ≤ 0 oder ≥ 1 ist, <b>gibt Confidence_T</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn standard_dev ≤ 0 ist, <b>gibt Confidence_T</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Größe keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn die Größe gleich 1 <b>ist, Confidence_T</b> wert #DIV/0! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die Größe gleich 1 <b>ist, Confidence_T</b> wert #DIV/0! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public double Convert (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Convert([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Convert(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Convert (Arg1 As Object, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Convert(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16852)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der zu konvertierende Wert in Von_Maßeinheit.</param>
        <param name="Arg2">Die Einheiten für die Zahl.</param>
        <param name="Arg3">Die Einheiten für das Ergebnis. <b>Convert</b> akzeptiert die folgenden Textwerte (in Anführungszeichen) für from_unit und to_unit die unten im Abschnitt "Hinweise" aufgeführt sind.</param>
        <summary>Rechnet eine Zahl aus einem Messsystem in ein anderes um. Beispielsweise kann <b>Convert</b> eine Tabelle mit Entfernungen in Meilen in eine Tabelle mit Entfernungen in Kilometern übersetzen.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>Gram</term>
              <description>"g"</description>
            </item>
            <item>
              <term>Slug</term>
              <description>"sg"</description>
            </item>
            <item>
              <term>Pfund (Handelsgewicht)</term>
              <description>"lbm"</description>
            </item>
            <item>
              <term>U (Atommasseeinheit)</term>
              <description>"u"</description>
            </item>
            <item>
              <term>Unze (Handelsgewicht)</term>
              <description>"ozm"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Meter</term>
              <description>"m"</description>
            </item>
            <item>
              <term>Englische Meile</term>
              <description>"mi"</description>
            </item>
            <item>
              <term>Seemeile</term>
              <description>"Nmi"</description>
            </item>
            <item>
              <term>Inch</term>
              <description>"in"</description>
            </item>
            <item>
              <term>Foot</term>
              <description>"ft"</description>
            </item>
            <item>
              <term>1.0</term>
              <description>"yd"</description>
            </item>
            <item>
              <term>Zungerom</term>
              <description>"ang"</description>
            </item>
            <item>
              <term>Pica (1/72 Zoll)</term>
              <description>"Pica"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Jahr</term>
              <description>"yr"</description>
            </item>
            <item>
              <term>Tag</term>
              <description>"day"</description>
            </item>
            <item>
              <term>Stunde</term>
              <description>"hr"</description>
            </item>
            <item>
              <term>Minute</term>
              <description>"mn"</description>
            </item>
            <item>
              <term>Zweiter</term>
              <description>"sec"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Pascal</term>
              <description>"Pa" (oder "p")</description>
            </item>
            <item>
              <term>Umgebung</term>
              <description>"atm" (oder "at")</description>
            </item>
            <item>
              <term>mm Quecksilbersäule</term>
              <description>"mmHg"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Newton</term>
              <description>"N"</description>
            </item>
            <item>
              <term>D d'</term>
              <description>"dyn" (oder "dy")</description>
            </item>
            <item>
              <term>Pfund (Druck)</term>
              <description>"lbf"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Joule</term>
              <description>"J"</description>
            </item>
            <item>
              <term>Erg</term>
              <description>"e"</description>
            </item>
            <item>
              <term>Thermodynamische Kalorie</term>
              <description>"c"</description>
            </item>
            <item>
              <term>IT-Kalorie</term>
              <description>"cal"</description>
            </item>
            <item>
              <term>Elektronenvolt</term>
              <description>"eV" (oder "ev")</description>
            </item>
            <item>
              <term>Power-Hour</term>
              <description>"HPh" (oder "hh")</description>
            </item>
            <item>
              <term>Zwischen-Stunde</term>
              <description>"Wh" (oder "wh")</description>
            </item>
            <item>
              <term>Fußknall</term>
              <description>"flb"</description>
            </item>
            <item>
              <term>BTU</term>
              <description>"BTU" (or "btu")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Power</term>
              <description>"HP" (oder "h")</description>
            </item>
            <item>
              <term>Zur 1.</term>
              <description>"W" (oder "w")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>10</term>
              <description>"T"</description>
            </item>
            <item>
              <term>Gauss</term>
              <description>"ga"</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Grad Celsius</term>
              <description>"C" (oder "cel")</description>
            </item>
            <item>
              <term>Grad Fahrenheit</term>
              <description>"F" (oder "fah")</description>
            </item>
            <item>
              <term>Kelvin</term>
              <description>"K" (oder "kel")</description>
            </item>
          </list>
          <list type="table">
            <item>
              <term>Teespoon</term>
              <description>"tsp"</description>
            </item>
            <item>
              <term>Tablespoon</term>
              <description>"tbs"</description>
            </item>
            <item>
              <term>Unze (Flüssigkeit)</term>
              <description>"oz"</description>
            </item>
            <item>
              <term>Pokal</term>
              <description>"pokal"</description>
            </item>
            <item>
              <term>Pint (USA)</term>
              <description>"pt" (oder "us_pt")</description>
            </item>
            <item>
              <term>Pint (Großbritannien)</term>
              <description>"uk_pt"</description>
            </item>
            <item>
              <term>Quart</term>
              <description>"qt"</description>
            </item>
            <item>
              <term>100</term>
              <description>"gal"</description>
            </item>
            <item>
              <term>100</term>
              <description>"l" (oder "lt")</description>
            </item>
          </list>
          <para>Die folgenden Abkürzungen für Einheitenpräfixe können metrischen Werten für Von_Maßeinheit oder In_Maßeinheit vorangestellt werden.</para>
          <list type="table">
            <item>
              <term>exa</term>
              <description>1E+18</description>
              <description>"E"</description>
            </item>
            <item>
              <term>peta</term>
              <description>1E+15</description>
              <description>"P"</description>
            </item>
            <item>
              <term>tera</term>
              <description>1E+12</description>
              <description>"T"</description>
            </item>
            <item>
              <term>giga</term>
              <description>1E+09</description>
              <description>"G"</description>
            </item>
            <item>
              <term>mega</term>
              <description>1E+06</description>
              <description>"M"</description>
            </item>
            <item>
              <term>Kilo</term>
              <description>1E+03</description>
              <description>"k"</description>
            </item>
            <item>
              <term>hecto</term>
              <description>1E+02</description>
              <description>"h"</description>
            </item>
            <item>
              <term>dekao</term>
              <description>1E+01</description>
              <description>"e"</description>
            </item>
            <item>
              <term>deci</term>
              <description>1E-01</description>
              <description>"d"</description>
            </item>
            <item>
              <term>centi</term>
              <description>1E-02</description>
              <description>"c"</description>
            </item>
            <item>
              <term>millimeter</term>
              <description>1E-03</description>
              <description>"m"</description>
            </item>
            <item>
              <term>micro</term>
              <description>1E-06</description>
              <description>"u"</description>
            </item>
            <item>
              <term>nano</term>
              <description>1E-09</description>
              <description>"n"</description>
            </item>
            <item>
              <term>pico</term>
              <description>1E-12</description>
              <description>"p"</description>
            </item>
            <item>
              <term>zu</term>
              <description>1E-15</description>
              <description>"f"</description>
            </item>
            <item>
              <term>atto</term>
              <description>1E-18</description>
              <description>"a"</description>
            </item>
          </list>
          <para>Wenn die Eingabedatentypen falsch sind, <b>generiert Convert</b> einen Fehler. </para>
          <para>Wenn die Einheit nicht vorhanden ist, <b>generiert Convert</b> einen Fehler. </para>
          <para>Wenn die Einheit kein abgekürzter Einheitenpräfix unterstützt, generiert <b>Convert</b> einen Fehler. </para>
          <para>Wenn sich die Einheiten in unterschiedlichen Gruppen befinden, <b>generiert Convert</b> einen Fehler. </para>
          <para>Bei Einheitennamen und Präfixen muss die Groß- und Kleinschreibung beachtet werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Correl">
      <MemberSignature Language="C#" Value="public double Correl (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Correl([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Correl(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Correl (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Correl(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16691)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ein Zellbereich mit Werten.</param>
        <param name="Arg2">Ein zweiter Zellbereich mit Werten.</param>
        <summary>Gibt den Korrelationskoeffizienten der <paramref name="Arg1" /> Zellbereiche <paramref name="Arg2" /> zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Mit dem Korrelationskoeffizienten können Sie die Beziehung zwischen zwei Eigenschaften bestimmen. Sie können beispielsweise die Beziehung zwischen der durchschnittlichen Temperatur an einem bestimmten Ort und der Verwendung von Klimaanlagen untersuchen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn <paramref name="Arg1" /> und eine andere Anzahl von <paramref name="Arg2" /> Datenpunkten hat, <b>generiert Correl</b> einen Fehler. </para>
          <para>Wenn einer oder leer ist oder wenn s (die Standardabweichung) seiner Werte gleich <paramref name="Arg1" /> <paramref name="Arg2" /> Null ist, generiert <b>Correl</b> einen Fehler. </para>
          <para>Die Gleichung für den Korrelationskoeffizienten ist:</para>
          <para>Abbildung 1: Gleichung für den Korrelationskoeffizienten</para>
          <para> </para>
          <para> </para>
          <para>Wobei x und y die Beispielwerte Average(Arg1) und Average(Arg2) sind.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public double Cosh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cosh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cosh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cosh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16614)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine beliebige reelle Zahl, für die der hyperbolische Kosinus ermittelt werden soll.</param>
        <summary>Gibt den hyperbolischen Kosinus einer Zahl zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Formel für den hyperbolischen Kosinus lautet wie folgt: </para>
          <para>Abbildung 1: Formel für den hyperbolischen Kosinus</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cot">
      <MemberSignature Language="C#" Value="public double Cot (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Cot([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Cot(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cot (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Cot(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16934)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Winkel in Bogenmaß, für den sie den Gitterangenten benötigen.</param>
        <summary>Gibt den Gitterangens eines Winkels zurück.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Coth">
      <MemberSignature Language="C#" Value="public double Coth (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Coth([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Coth(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Coth (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Coth(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16935)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Winkel in Bogenmaß, für den Sie den hyperbolischen Gittereck haben möchten.</param>
        <summary>Gibt den hyperbolischen Cotangent einer Zahl zurück.</summary>
        <returns>DOUBLE</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public double Count (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Count([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Count (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16384)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 bis 30 Argumente, die verschiedene Datentypen enthalten oder einen Bezug dazu darstellen. Es werden jedoch nur Zahlen gezählt.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Ermittelt die Anzahl der Zellen, die Zahlen enthalten, und zählt Zahlen in der Liste der Argumente.</summary>
        <returns>To be added.</returns>
        <remarks><para>Verwenden <b>Sie "Zählen",</b> um die Anzahl der Einträge in einem Zahlenfeld in einem Bereich oder Array von Zahlen zu erhalten. </para>
          <para>Es werden alle Argumente gezählt, bei denen es sich um Zahlen, Datumsangaben oder Textdarstellungen von Zahlen handelt.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in der Liste der Argumente eingeben, werden gezählt.</para>
          <para>Argumente, bei denen es sich um Fehlerwerte handelt, und Text, der nicht in Zahlen umgewandelt werden kann, werden ignoriert.</para>
          <para>Wenn ein Argument ein Array oder einen Verweis darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Verweis gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Verweis werden ignoriert.</para>
          <para>Wenn Sie Wahrheitswerte, Text oder Fehlerwerte zählen möchten, verwenden Sie die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Funktion.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountA">
      <MemberSignature Language="C#" Value="public double CountA (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountA([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountA(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountA (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16553)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 bis 30 Argumente, die die zu zählenden Werte darstellen.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Ermittelt die Anzahl von nicht leeren Zellen sowie die Werte in der Liste der Argumente.</summary>
        <returns>To be added.</returns>
        <remarks><para>Verwenden <b>Sie CountA,</b> um die Anzahl der Zellen zu zählen, die Daten in einem Bereich oder Array enthalten.</para>
          <para>Bei einem Wert handelt es sich um eine beliebige Information. Dazu zählen Fehlerwerte und leere Zeichenfolgen (""). Leere Zellen sind keine Werte.</para>
          <para>Wenn es sich bei einem Argument um ein Array oder einen Bezug handelt, werden nur Werte in diesem Array oder Bezug verwendet. Leere Zellen und Textwerte im Array oder Bezug werden ignoriert.</para>
          <para>Wenn Sie keine Wahrheitswerte, Text- oder Fehlerwerte zählen müssen, verwenden Sie die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Count(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Funktion.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountBlank">
      <MemberSignature Language="C#" Value="public double CountBlank (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountBlank([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountBlank(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountBlank (Arg1 As Range) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountBlank(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16731)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Bereich, in dem die leeren Zellen gezählt werden sollen.</param>
        <summary>Zählt leere Zellen in einem bestimmten Zellbereich.</summary>
        <returns>To be added.</returns>
        <remarks><para>Zellen mit Formeln, die "" (leere Zeichenfolgen) zurückgeben, werden ebenfalls gezählt. Zellen mit Nullwerten werden nicht gezählt.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIf">
      <MemberSignature Language="C#" Value="public double CountIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIf(Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIf (Arg1 As Range, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CountIf(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16730)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Zellbereich, in dem Zellen gezählt werden sollen.</param>
        <param name="Arg2">Das Kriterium in Form einer Zahl, eines Ausdrucks, eines Zellbezugs oder Texts, mit dem definiert wird, welche Zellen gezählt werden. Kriterien können beispielsweise als 32, "32", " &gt; 32", "Äpfel" oder B4 ausgedrückt werden.</param>
        <summary>Ermittelt die Anzahl der Zellen in einem Bereich, die den angegebenen Kriterien entsprechen.</summary>
        <returns>Gibt <see cref="T:System.Double" /> zurück.</returns>
        <remarks><para>Für die Kriterien können Sie die Platzhalterzeichen Sternchen (*) und Fragezeichen (?) verwenden. Mit einem Fragezeichen erfolgt ein Abgleich mit jedem einzelnen Zeichen; mit einem Stern erfolgt ein Abgleich mit einer beliebigen Abfolge von Zeichen. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, geben Sie vor dem Zeichen eine Tilde (~) ein.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CountIfs">
      <MemberSignature Language="C#" Value="public double CountIfs (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CountIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CountIfs(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CountIfs (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16865)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ein oder mehrere Bereiche, in denen die zugeordneten Kriterien ausgewertet werden sollen.</param>
        <param name="Arg2">Ein oder mehr Kriterien in Form einer Zahl, eines Ausdrucks, eines Zellbezugs oder Texts, mit dem definiert wird, welche Zellen gezählt werden. Kriterien können beispielsweise als 32, "32", " &gt; 32", "Äpfel" oder B4 ausgedrückt werden.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Ermittelt die Anzahl der Zellen in einem Bereich, die mehreren Kriterien entsprechen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Zellen in einem Bereich werden nur gezählt, wenn alle angegebenen Kriterien für diese Zelle erfüllt werden. </para>
          <para>Wenn eine Zelle in einem Argument eine leere Zelle ist, behandelt <b>CountIfs</b> sie als 0-Wert. </para>
          <para>You can use the wildcard characters, question mark (?) and asterisk (*), in criteria. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDayBs">
      <MemberSignature Language="C#" Value="public double CoupDayBs (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDayBs([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDayBs(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDayBs (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16836)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2, für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg4">Die Basis, auf der die Zinstage gezählt werden.</param>
        <summary>Gibt die Anzahl der Tage vom Anfang des Zinstermins bis zum Abrechnungstermin zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die folgende Tabelle enthält die Liste der Werte für <paramref name="Arg4" /> .</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn für Abrechnung oder Fälligkeit kein gültiges Datum vorliegt, <b>generiert CoupDayBs</b> einen Fehler. </para>
          <para>Wenn die Häufigkeit eine andere Zahl als 1, 2 oder 4 ist, generiert <b>CoupDayBs</b> einen Fehler. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>generiert CoupDayBs</b> einen Fehler. </para>
          <para>Wenn der Abrechnungstermin ≥ ist, <b>generiert CoupDayBs</b> einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDays">
      <MemberSignature Language="C#" Value="public double CoupDays (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDays([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDays(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDays (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16837)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2, für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg4">Die Basis, auf der die Zinstage gezählt werden.</param>
        <summary>Gibt die Anzahl der Tage der Zinsperiode zurück, die das Abrechnungsdatum einschließt.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <para>Die folgende Tabelle enthält die in verwendeten <paramref name="Arg4" /> Werte.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn für Abrechnung oder Fälligkeit kein gültiges Datum gilt, generiert <b>CoupDays</b> einen Fehler. </para>
          <para>Wenn die Häufigkeit eine andere Zahl als 1, 2 oder 4 ist, generiert <b>CoupDays</b> einen Fehler. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>generiert CoupDays</b> einen Fehler. </para>
          <para>Wenn die ≥ Fälligkeit ist, <b>generiert CoupDays</b> einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupDaysNc">
      <MemberSignature Language="C#" Value="public double CoupDaysNc (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupDaysNc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupDaysNc(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupDaysNc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16838)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2, für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg4">Die Basis, auf der die Zinstage gezählt werden.</param>
        <summary>Gibt die Anzahl der Tage vom Abrechnungstermin bis zum nächsten Zinstermin zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <para>Die folgende Tabelle enthält die in verwendeten <paramref name="Arg4" /> Werte.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Ist/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn für Abrechnung oder Fälligkeit kein gültiges Datum gilt, generiert <b>CoupDaysNc</b> einen Fehler. </para>
          <para>Wenn die Häufigkeit eine andere Zahl als 1, 2 oder 4 ist, generiert <b>CoupDaysNc</b> einen Fehler. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>generiert CoupDaysNc</b> einen Fehler. </para>
          <para>Wenn die ≥ Fälligkeit ist, <b>generiert CoupDaysNc</b> einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNcd">
      <MemberSignature Language="C#" Value="public double CoupNcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16839)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2, für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg4">Die Basis, auf der die Zinstage gezählt werden.</param>
        <summary>Gibt eine Zahl zurück, die den nächsten Zinstermin nach dem Abrechnungstermin darstellt.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <para>Die folgende Tabelle enthält die in verwendeten <paramref name="Arg4" /> Werte.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn für Abrechnung oder Fälligkeit kein gültiges Datum gilt, generiert <b>CoupNcd</b> einen Fehler. </para>
          <para>Wenn die Häufigkeit eine andere Zahl als 1, 2 oder 4 ist, generiert <b>CoupNcd</b> einen Fehler. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>generiert CoupNcd</b> einen Fehler. </para>
          <para>Wenn die ≥ ist, <b>generiert CoupNcd</b> einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupNum">
      <MemberSignature Language="C#" Value="public double CoupNum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupNum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupNum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupNum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16840)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2, für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg4">Die Basis, auf der die Zinstage gezählt werden.</param>
        <summary>Gibt die Anzahl der Zinstermine zwischen Abrechnungs- und Fälligkeitsdatum zurück, aufgerundet auf den nächsten ganzen Termin.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <para>Die folgende Tabelle enthält die in verwendeten <paramref name="Arg4" /> Werte.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Ist/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn für Abrechnung oder Fälligkeit kein gültiges Datum gilt, generiert <b>CoupNum</b> einen Fehler. </para>
          <para>Wenn die Häufigkeit eine andere Zahl als 1, 2 oder 4 ist, generiert <b>CoupNum</b> einen Fehler. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>generiert CoupNum</b> einen Fehler. </para>
          <para>Wenn die ≥ ist, <b>generiert CoupNum</b> einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CoupPcd">
      <MemberSignature Language="C#" Value="public double CoupPcd (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CoupPcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CoupPcd(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CoupPcd (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16841)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2, für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg4">Die Basis, auf der die Zinstage gezählt werden.</param>
        <summary>Gibt das vorherige Zinstermin vor dem Abrechnungsdatum zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <para>Die folgende Tabelle enthält die in verwendeten <paramref name="Arg4" /> Werte.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn abrechnung oder Fälligkeit kein gültiges Datum ist, <b>generiert CoupPcd</b> einen Fehler. </para>
          <para>Wenn die Häufigkeit eine andere Zahl als 1, 2 oder 4 ist, generiert <b>CoupPcd</b> einen Fehler. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>generiert CoupPcd</b> einen Fehler. </para>
          <para>Wenn die ≥ ist, <b>generiert CoupPcd</b> einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covar">
      <MemberSignature Language="C#" Value="public double Covar (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covar([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covar(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covar (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covar(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16692)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der erste Zellbereich mit ganzen Zahlen.</param>
        <param name="Arg2">Der zweite Zellbereich mit ganzen Zahlen.</param>
        <summary>Gibt die Kovarianz zurück, d. h. den Mittelwert der für alle Datenpunktpaare gebildeten Produkte der Abweichungen.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zu den neuen Funktionen finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" /> "and <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" /> method".</para>
          <para>Mit der Kovarianz können Sie die Beziehung zwischen zwei Datensätzen bestimmen. Sie können beispielsweise untersuchen, ob ein höheres Einkommen mit einer besseren Ausbildung zusammenhängt. </para>
          <para>Bei den Argumenten muss es sich um Zahlen oder Namen, Arrays oder Bezüge mit Zahlen handeln.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn <paramref name="Arg1" /> und wie viele <paramref name="Arg2" /> Datenpunkte unterschiedlich sind, <b>generiert Covar</b> einen Fehler. </para>
          <para>Wenn einer <paramref name="Arg1" /> oder <paramref name="Arg2" /> leer ist, generiert <b>Covar</b> einen Fehler. </para>
          <para>Die Kovarianz ist: </para>
          <para>Abbildung 1: Gleichung für Kovarianz</para>
          <para> </para>
          <para> </para>
          <para>Wobei x und y die Beispielwerte AVERAGE(Array1) und AVERAGE(Array2) sind, und n ist die Beispielgröße.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_P">
      <MemberSignature Language="C#" Value="public double Covariance_P (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_P([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_P(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_P (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_P(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16876)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der erste Zellbereich mit ganzen Zahlen.</param>
        <param name="Arg2">Der zweite Zellbereich mit ganzen Zahlen.</param>
        <summary>Gibt die Kovarianz einer Grundgesamtheit, den Mittelwert der für alle Datenpunktpaare gebildeten Produkte der Abweichungen zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Verwenden <b>Covariance_P,</b> um die Beziehung zwischen zwei Datensätzen zu bestimmen. Sie können beispielsweise untersuchen, ob ein höheres Einkommen mit einer besseren Ausbildung zusammenhängt.</para>
          <para>Bei den Argumenten muss es sich um Zahlen oder Namen, Arrays oder Bezüge mit Zahlen handeln.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn die Anzahl der Datenpunkte unterschiedlich ist und diese unterschiedlich <paramref name="Arg1" /> <paramref name="Arg2" /> sind, <b>Covariance_P</b> ein Fehler generiert. </para>
          <para>Wenn einer <paramref name="Arg1" /> oder <paramref name="Arg2" /> leer ist, <b>Covariance_P</b> ein Fehler generiert. </para>
          <para>Die Kovarianz ist: </para>
          <para>Abbildung 1: Gleichung für Kovarianz</para>
          <para> </para>
          <para> </para>
          <para>Wobei x und y die Beispielwerte AVERAGE(Array1) und AVERAGE(Array2) sind, und n ist die Beispielgröße.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Covariance_S">
      <MemberSignature Language="C#" Value="public double Covariance_S (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Covariance_S([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Covariance_S(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Covariance_S (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Covariance_S(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16877)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 – Der erste Zellbereich ganzzahliger Zahlen.</param>
        <param name="Arg2">Array2 – Der zweite Zellbereich ganzzahliger Zahlen.</param>
        <summary>Gibt die Beispielkovarianz zurück, d. h. den Mittelwert der für alle Datenpunktpaare in zwei Datensätzen gebildeten Produkte der Abweichungen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Bei den Argumenten muss es sich um Zahlen oder Namen, Arrays oder Bezüge mit Zahlen handeln.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn Array1 und Array2 eine unterschiedliche Anzahl von Datenpunkten haben, <b>gibt Covariance_S</b> den Fehlerwert #N/A zurück. </para>
          <para>Wenn array1 oder array2 leer ist oder jeweils nur einen Datenpunkt enthält, <b>gibt Covariance_S</b> den Wert #DIV/0! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen ganzzahligen 32-Bit-Wert zurück, der die Anwendung angibt, in der dieses Objekt erstellt wurde. Read-only <b>Ganze</b> Zahl (int in C#).</summary>
        <value>To be added.</value>
        <remarks><para>Wenn das Objekt in Microsoft Excel erstellt wurde, gibt die Eigenschaft die Zeichenfolge XCEL zurück, die der Hexadezimalzahl 5843454C entspricht. Die <b>Creator</b> -Eigenschaft ist für die Verwendung in Microsoft Excel für Macintosh konzipiert, wobei jede Anwendung einen vier Zeichen großen Erstellercode hat. Der Urhebercode für Microsoft Excel lautet "XCEL".</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CritBinom">
      <MemberSignature Language="C#" Value="public double CritBinom (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CritBinom([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CritBinom(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function CritBinom (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CritBinom(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16662)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Anzahl der Bernoulliexperimente.</param>
        <param name="Arg2">Die Wahrscheinlichkeit für den günstigen Ausgang des Experiments.</param>
        <param name="Arg3">Die Grenzwahrscheinlichkeit.</param>
        <summary>Gibt den kleinsten Wert zurück, für den die kumulierten Wahrscheinlichkeiten der Binomialverteilung größer oder gleich einer Grenzwahrscheinlichkeit sind.</summary>
        <returns>To be added.</returns>
        <remarks><para>Verwenden Sie diese Funktion für Qualitätssicherungsanwendungen. Verwenden Sie z. B. <b>CritBinom,</b> um die größte Anzahl fehlerhafter Teile zu ermitteln, die aus einem Assemblylinienlauf stammen dürfen, ohne die gesamte Menge abzulehnen.</para>
          <para>Wenn ein Argument nicht numerisch ist, <b>generiert CritBinom</b> einen Fehler. </para>
          <para>Wenn Versuche keine ganze Zahl darstellt, wird die Zahl gekürzt. </para>
          <para>Wenn die &lt; Testversion 0 ist, <b>generiert CritBinom</b> einen Fehler. </para>
          <para>Wenn probability_s &lt; 0 oder probability_s &gt; 1 ist, generiert <b>CritBinom</b> einen Fehler. </para>
          <para>Bei Alpha &lt; 0 oder &gt; Alpha 1 generiert <b>CritBinom</b> einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Csc">
      <MemberSignature Language="C#" Value="public double Csc (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csc([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csc(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csc (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csc(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16936)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Winkel in Bogenmaß, für den der Kosean verwendet werden soll.</param>
        <summary>Gibt den Koseiher eines Winkels zurück.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Csch">
      <MemberSignature Language="C#" Value="public double Csch (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Csch([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Csch(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Csch (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Csch(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16937)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Winkel in Bogenmaß, für den sie den hyperbolischen Kosegen wünschen.</param>
        <summary>Gibt den hyperbolischen Kosegen eines Winkels zurück.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CumIPmt">
      <MemberSignature Language="C#" Value="public double CumIPmt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumIPmt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumIPmt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumIPmt (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumIPmt(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16832)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Zinssatz.</param>
        <param name="Arg2">Die Gesamtzahl der Zahlungsperioden.</param>
        <param name="Arg3">Der Gegenwartswert.</param>
        <param name="Arg4">Die erste Periode in der Berechnung. Zahlungsperioden werden von 1 ausgehend nummeriert.</param>
        <param name="Arg5">Die letzte Periode in der Berechnung.</param>
        <param name="Arg6">Der Zeitpunkt für die Zahlung.</param>
        <summary>Gibt die kumulierten Zinsen zurück, die zwischen Anfang und Ende zu zahlen sind.</summary>
        <returns>To be added.</returns>
        <remarks><para>In den folgenden Tabellen sind werte aufgeführt, die in verwendet <paramref name="Arg6" /> werden.</para>
          <list type="table">
            <item>
              <term>0 (Null)</term>
              <description>Zahlung am Ende der Periode</description>
            </item>
            <item>
              <term>1 </term>
              <description>Zahlung am Anfang der Periode</description>
            </item>
          </list>
          <para>Stellen Sie sicher, dass Sie für Zins und Zzr zueinander passende Zeiteinheiten verwenden. Wenn Sie monatliche Zahlungen für ein vierjähriges Kredit zu einem jährlichen Zinssatz von 12 Prozent leisten, verwenden Sie 12 % /12 für zins und 4 *12 für <paramref name="Arg2" /> . Wenn Sie jährliche Zahlungen für denselben Kredit leisten, verwenden Sie 12 % für zins und 4 für <paramref name="Arg2" /> . </para>
          <para>
            <paramref name="Arg2" />, und der Typ werden auf ganze <paramref name="Arg4" /> <paramref name="Arg5" /> Zahlen gekürzt. </para>
          <para>Wenn die ≤ 0, ≤ 0 oder <paramref name="Arg2" /> ≤ <paramref name="Arg3" /> 0 ist, generiert <b>CumIPmt</b> einen Fehler. </para>
          <para>Wenn <paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1 oder <paramref name="Arg4" /> &gt; <paramref name="Arg5" /> , <b>CumIPmt</b> generiert einen Fehler. </para>
          <para>Wenn es sich um eine andere Zahl als 0 oder <paramref name="Arg6" /> 1 handelt, <b>generiert CumIPmt</b> einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CumPrinc">
      <MemberSignature Language="C#" Value="public double CumPrinc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 CumPrinc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.CumPrinc(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CumPrinc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double CumPrinc(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4, System::Object ^ Arg5, System::Object ^ Arg6);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16831)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Zinssatz.</param>
        <param name="Arg2">Die Gesamtzahl der Zahlungsperioden.</param>
        <param name="Arg3">Der Gegenwartswert.</param>
        <param name="Arg4">Die erste Periode in der Berechnung. Zahlungsperioden werden von 1 ausgehend nummeriert.</param>
        <param name="Arg5">Die letzte Periode in der Berechnung.</param>
        <param name="Arg6">Die letzte Periode in der Berechnung.</param>
        <summary>Gibt die aufgelaufene Tilgung eines Darlehens zurück, die zwischen Anfang und Ende zu zahlen ist.</summary>
        <returns>To be added.</returns>
        <remarks><para>In den folgenden Tabellen sind werte aufgeführt, die in verwendet <paramref name="Arg6" /> werden.</para>
          <list type="table">
            <item>
              <term>0 (Null)</term>
              <description>Zahlung am Ende der Periode</description>
            </item>
            <item>
              <term>1 </term>
              <description>Zahlung am Anfang der Periode</description>
            </item>
          </list>
          <para>Stellen Sie sicher, dass Sie für Zins und Zzr zueinander passende Zeiteinheiten verwenden. Wenn Sie monatliche Zahlungen für ein vierjähriges Kredit zu einem jährlichen Zinssatz von 12 Prozent leisten, verwenden Sie 12 % /12 für zins und 4 *12 für <paramref name="Arg2" /> . Wenn Sie jährliche Zahlungen für denselben Kredit leisten, verwenden Sie 12 % für zins und 4 für <paramref name="Arg2" /> . </para>
          <para>
            <paramref name="Arg2" />, und der Typ werden auf ganze <paramref name="Arg4" /> <paramref name="Arg5" /> Zahlen gekürzt. </para>
          <para>Wenn die ≤ 0, <paramref name="Arg2" /> ≤ 0 oder <paramref name="Arg3" /> ≤ 0 ist, generiert <b>CumPrinc</b> einen Fehler. </para>
          <para>Wenn <paramref name="Arg4" /> &lt; 1, <paramref name="Arg5" /> &lt; 1 oder <paramref name="Arg4" /> &gt; <paramref name="Arg5" /> , <b>CumPrinc</b> generiert einen Fehler. </para>
          <para>Wenn es sich um eine andere Zahl als 0 oder <paramref name="Arg6" /> 1 handelt, <b>generiert CumPrinc</b> einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DAverage">
      <MemberSignature Language="C#" Value="public double DAverage (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DAverage([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DAverage(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DAverage (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DAverage(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16426)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Berechnet den Mittelwert aus Werten in einer Listen- oder Datenbankspalte, die angegebene Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Da mit dem Gleichheitszeichen beim Eingeben von Text oder Werten in einer Zelle eine Formel gekennzeichnet wird, wird die Eingabe von Microsoft Excel ausgewertet. Um einen Gleichheitsvergleichsoperator für Text oder einen Wert anzugeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich ein: </para>
          <para>=''=entry''</para>
          <para>Dabei wird der Text oder Wert angezeigt, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Textdaten unterscheidet Excel nicht zwischen Groß- und Kleinbuchstaben. Sie können jedoch mithilfe einer Formel eine Suche ausführen, bei der Groß- und Kleinschreibung berücksichtigt werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public double Days (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Days(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16957)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">start_date(Arg2) und end_date (Arg1) sind die beiden Datumsangaben, zwischen denen Sie die Anzahl der Tage kennen möchten.</param>
        <param name="Arg2">start_date(Arg2) und end_date (Arg1) sind die beiden Datumsangaben, zwischen denen Sie die Anzahl der Tage kennen möchten.</param>
        <summary>Gibt die Anzahl der Tage zwischen den beiden Datumsangaben zurück.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Days360">
      <MemberSignature Language="C#" Value="public double Days360 (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Days360([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Days360(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Days360 (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16604)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die beiden Datumswerte, bei denen die Anzahl der dazwischen liegenden Tage ermittelt werden soll. Wenn Ausgangsdatum (Arg1) nach Enddatum (Arg2) liegt, gibt Days360 eine negative Zahl zurück. Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden.</param>
        <param name="Arg2">Die beiden Datumswerte, bei denen die Anzahl der dazwischen liegenden Tage ermittelt werden soll. Wenn Ausgangsdatum (Arg1) nach Enddatum (Arg2) liegt, gibt Days360 eine negative Zahl zurück. Datumsangaben sollten mithilfe der DATE-Funktion oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden.</param>
        <param name="Arg3">Ein boolescher Wert, der angibt, ob die US- oder europäische Methode in der Berechnung verwendet werden soll.</param>
        <summary>Gibt die Anzahl der Tage zwischen zwei Datumswerten auf der Grundlage eines Jahrs mit 360 Tagen (d. h. zwölf Monaten mit jeweils 30 Tagen) zurück. Dies wird bei einigen Berechnungen in der Buchhaltung verwendet.</summary>
        <returns>To be added.</returns>
        <remarks><para>Verwenden Sie diese Funktion, um Zahlungen zu berechnen, wenn Ihr Buchhaltungssystem auf zwölf 30-Tage-Monaten basiert. Die folgenden Tabellen enthalten die Werte für <paramref name="Arg3" /> .</para>
          <list type="table">
            <item>
              <term>
                <b>false</b> oder ausgelassen</term>
              <description>US-Methode (NASD). Wenn das Anfangsdatum der 31. Tag eines Monats ist, wird er dem 30. Tag des gleichen Monats gleichgesetzt. Wenn das Enddatum der 31. Tag eines Monats ist und das Anfangsdatum vor dem 30. Tag eines Monats liegt, wird das Enddatum dem 1. Tag des nächsten Monats gleichgesetzt, andernfalls ist das Enddatum gleich dem 30. Tag des gleichen Monats.</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>Europäische Methode. Anfangsdatumswerte und Enddatumswerte, die auf den 31. Tag eines Monats fallen, werden dem 30. Tag des gleichen Monats gleichgesetzt.</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Db">
      <MemberSignature Language="C#" Value="public double Db (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Db([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Db(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Db (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16631)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ansch_Wert – die Anlagekosten für den Vermögenswert.</param>
        <param name="Arg2">Restwert – der Wert zum Ende der Abschreibung (gelegentlich wird er als "Restwert" des Vermögenswerts bezeichnet).</param>
        <param name="Arg3">Nutzungsdauer – die Anzahl der Zeiträume, über die der Vermögenswert abgeschrieben wird (dies wird gelegentlich als "Nutzungsdauer" des Vermögenswerts bezeichnet).</param>
        <param name="Arg4">Periode – der Zeitraum, für den die Abschreibung berechnet werden soll. Die Einheiten der Periode und der Nutzungsdauer müssen übereinstimmen.</param>
        <param name="Arg5">Monat – die Anzahl der Monate im ersten Jahr. Wenn Sie diesen Wert nicht angeben, wird von 12 ausgegangen.</param>
        <summary>Gibt die geometrisch-degressive Abschreibung eines Vermögenswerts für eine bestimmte Periode zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Bei der geometrisch-degressiven Abschreibung wird die Abschreibung mit einem bestimmten Satz berechnet. DB verwendet die folgenden Formeln, um die Abschreibung für einen Zeitraum zu berechnen:</para>
          <para>(Kosten – Gesamte Abschreibung aus früheren Zeiträumen) * Satz</para>
          <para>Dabei gilt:</para>
          <para>rate = 1 - ((restge /cost) ^ (1 / life)), gerundet auf drei Dezimalstellen</para>
          <para>Die Abschreibung für die erste und die letzte Periode stellt einen Sonderfall dar. Für den ersten Zeitraum verwendet DB diese Formel:</para>
          <para>Kosten * Satz * Monat / 12</para>
          <para>Für den letzten Zeitraum verwendet DB diese Formel:</para>
          <para>((Kosten – Abschreibung insgesamt aus früheren Zeiträumen) * Satz * (12 - Monat)) / 12</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dbcs">
      <MemberSignature Language="C#" Value="public string Dbcs (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dbcs([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dbcs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dbcs (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Dbcs(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16599)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Text oder ein Bezug auf eine Zelle mit dem zu ändernden Text.</param>
        <summary>Konvertiert Zeichen mit halber Breite (Einzelbytezeichen) in einer Zeichenfolge in Zeichen mit normaler Breite (Doppelbytezeichen). Der Name der Funktion und die konvertierten Zeichen sind abhängig von den Spracheinstellungen.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DCount">
      <MemberSignature Language="C#" Value="public double DCount (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCount([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCount(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCount (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCount(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16424)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn das Argument mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Gibt die Anzahl der Zellen mit Zahlen in einer Listen- oder Datenbankspalte zurück, die bestimmte Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Da mit dem Gleichheitszeichen beim Eingeben von Text oder Werten in einer Zelle eine Formel gekennzeichnet wird, wird die Eingabe von Microsoft Excel ausgewertet. Um einen Gleichheitsvergleichsoperator für Text oder einen Wert anzugeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich ein: </para>
          <para>=''=entry''</para>
          <para>Dabei ist der Eintrag der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Textdaten unterscheidet Excel nicht zwischen Groß- und Kleinbuchstaben. Sie können jedoch mithilfe einer Formel eine Suche ausführen, bei der Groß- und Kleinschreibung berücksichtigt werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DCountA">
      <MemberSignature Language="C#" Value="public double DCountA (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DCountA([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DCountA(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DCountA (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DCountA(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16583)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Gibt die Anzahl der nicht leeren Zellen in einer Listen- oder Datenbankspalte zurück, die bestimmte Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Da mit dem Gleichheitszeichen beim Eingeben von Text oder Werten in einer Zelle eine Formel gekennzeichnet wird, wird die Eingabe von Microsoft Excel ausgewertet. Um einen Gleichheitsvergleichsoperator für Text oder einen Wert anzugeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich ein: </para>
          <para>=''=entry''</para>
          <para>Dabei ist der Eintrag der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Textdaten unterscheidet Excel nicht zwischen Groß- und Kleinbuchstaben. Sie können jedoch mithilfe einer Formel eine Suche ausführen, bei der Groß- und Kleinschreibung berücksichtigt werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ddb">
      <MemberSignature Language="C#" Value="public double Ddb (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ddb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ddb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16528)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ansch_Wert – die Anlagekosten für den Vermögenswert.</param>
        <param name="Arg2">Restwert – der Wert zum Ende der Abschreibung (gelegentlich wird er als "Restwert" des Vermögenswerts bezeichnet). Dieser Wert kann 0 entsprechen.</param>
        <param name="Arg3">Nutzungsdauer – die Anzahl der Zeiträume, über die der Vermögenswert abgeschrieben wird (dies wird gelegentlich als "Nutzungsdauer" des Vermögenswerts bezeichnet).</param>
        <param name="Arg4">Periode – der Zeitraum, für den die Abschreibung berechnet werden soll. Die Einheiten der Periode und der Nutzungsdauer müssen übereinstimmen.</param>
        <param name="Arg5">Faktor – die Rate für die Abschreibung. Wenn Sie den Faktor nicht angeben, wird von 2 ausgegangen (Doppelraten-Abschreibung).</param>
        <summary>Gibt die degressive Doppelratenabschreibung eines Vermögenswerts oder eine mit einer anderen Methode berechnete Abschreibung für eine bestimmte Periode zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Alle fünf Argumente müssen positive Zahlen sein.</para>
          <para>Die degressive Doppelraten-Abschreibungsmethode berechnet die Abschreibung mit beschleunigter Geschwindigkeit. Die Abschreibung ist im ersten Zeitraum am höchsten und verringert sich mit den folgenden Zeiträumen. <b>Ddb</b> verwendet die folgende Formel, um die Abschreibung für einen Zeitraum zu berechnen:</para>
          <code>Min( (cost - total depreciation from prior periods) * (factor/life), (cost - salvage -  total depreciation from prior periods) )
</code>
          <para>Ändern Sie Faktor, wenn Sie die Methode der doppelten Restwertabschreibung nicht verwenden möchten. </para>
          <para>Verwenden Sie die Funktion, wenn Sie zur geraden Abschreibungsmethode wechseln möchten, wenn die Abschreibung größer als die Berechnung des Abschreibungssaldos <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" /> ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Bin">
      <MemberSignature Language="C#" Value="public string Dec2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16771)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die ganze Dezimalzahl, die konvertiert werden soll. Wenn "Zahl" negativ ist, werden gültige Ortswerte ignoriert, und <b>Dec2Bin</b> gibt eine 10-Bit-Binärzahl (10-Bit) zurück, bei der das wichtigste Bit das Vorzeichenbit ist. Bei den verbleibenden 9 Bits handelt es sich um die Bits für den Absolutbetrag. Negative Zahlen werden in der Zweierkomplementschreibweise dargestellt.</param>
        <param name="Arg2">Stellen – die zu verwendende Anzahl von Zeichen. Wenn Stellen weggelassen werden, verwendet <b>Dec2Bin</b> die mindestens erforderliche Anzahl von Zeichen. Das Argument Stellen ist speziell dann hilfreich, wenn der jeweilige Rückgabewert mit führenden 0-en (Nullen) aufgefüllt werden soll.</param>
        <summary>Rechnet eine Dezimalzahl in eine binäre Zahl um.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn die Zahl &lt; -512 oder die Zahl &gt; 511 ist, gibt <b>Dec2Bin</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn "Number" nicht numerisch ist, gibt <b>Dec2Bin</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn <b>Dec2Bin</b> mehr Zeichen als Stellen erfordert, wird die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn die Stellen nicht numerisch sind, <b>gibt Dec2Bin</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die Stellen null oder negativ sind, <b>gibt Dec2Bin</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Hex">
      <MemberSignature Language="C#" Value="public string Dec2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16772)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die ganze Dezimalzahl, die konvertiert werden soll. Wenn "Zahl" negativ ist, werden die Stellen ignoriert, und <b>Dec2Hex</b> gibt eine hexadezimale Zahl mit 10 Zeichen (40 Bit) zurück, bei der das wichtigste Bit das Vorzeichenbit ist. Die verbleibenden 39 Bits sind Größenbits. Negative Zahlen werden in der Zweier-Komplement-Notation dargestellt.</param>
        <param name="Arg2">Stellen – die zu verwendende Anzahl von Zeichen. Wenn Stellen weggelassen werden, verwendet <b>Dec2Hex</b> die mindestens erforderliche Anzahl von Zeichen. Das Argument Stellen ist speziell dann hilfreich, wenn der jeweilige Rückgabewert mit führenden 0-en (Nullen) aufgefüllt werden soll.</param>
        <summary>Rechnet eine dezimale Zahl in eine Hexadezimalzahl um.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn die Zahl &lt; -549.755.813.888 oder die Zahl &gt; 549.755.813.887 ist, gibt <b>Dec2Hex</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn "Zahl" nicht numerisch ist, gibt <b>Dec2Hex</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn <b>Dec2Hex</b> mehr Als-Stellen-Zeichen erfordert, wird die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn die Stellen nicht numerisch sind, <b>gibt Dec2Hex</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die Stellen negativ sind, <b>gibt Dec2Hex</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dec2Oct">
      <MemberSignature Language="C#" Value="public string Dec2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dec2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dec2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dec2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16773)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die ganze Dezimalzahl, die konvertiert werden soll. Wenn "Zahl" negativ ist, werden die Stellen ignoriert, und <b>"Dec2Oct"</b> gibt eine oktale Zahl mit 10 Zeichen (30 Bit) zurück, bei der das wichtigste Bit das Vorzeichenbit ist. Die verbleibenden 29 Bits sind Größenbits. Negative Zahlen werden in der Zweierkomplementschreibweise dargestellt.</param>
        <param name="Arg2">Stellen – die zu verwendende Anzahl von Zeichen. Wenn Stellen weggelassen werden, verwendet <b>Dec2Oct</b> die mindestens erforderliche Anzahl von Zeichen. Das Argument Stellen ist speziell dann hilfreich, wenn der jeweilige Rückgabewert mit führenden 0-en (Nullen) aufgefüllt werden soll.</param>
        <summary>Rechnet eine Dezimalzahl in eine oktale Zahl um.</summary>
        <returns>To be added.</returns>
        <remarks><para>If number &lt; -536,870,912 or if number &gt; 536,870,911, <b>Dec2Oct</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn "Number" nicht numerisch ist, gibt <b>Dec2Oct</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn <b>"Dec2Oct"</b> mehr Zeichen als "Stellen" erfordert, wird die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn die Stellen nicht numerisch sind, <b>gibt Dec2Oct</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die Stellen negativ sind, <b>gibt Dec2Oct</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Decimal">
      <MemberSignature Language="C#" Value="public double Decimal (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Decimal([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Decimal(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Decimal (Arg1 As String, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Decimal(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16956)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Zahl, die konvertiert werden soll.</param>
        <param name="Arg2">Die Basis-Radix-Zahl der Zahl, die Sie konvertieren.</param>
        <summary>Konvertiert eine Textdarstellung einer Zahl in einer bestimmten Basis in eine Dezimalzahl.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Degrees">
      <MemberSignature Language="C#" Value="public double Degrees (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Degrees([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Degrees(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Degrees (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Degrees(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16727)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Winkel – der umzurechnende Winkel im Bogenmaß.</param>
        <summary>Rechnet Bogenmaß in Grad um.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public double Delta (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Delta([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Delta(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delta (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16802)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1 – die erste Zahl.</param>
        <param name="Arg2">Zahl2 – die zweite Zahl. Wenn dies nicht angegeben wird, wird Null angenommen.</param>
        <summary>Überprüft, ob zwei Werte gleich sind. Gibt 1 zurück, wenn sich die erste und die zweite Zahl entsprechen, andernfalls wird 0 zurückgegeben.</summary>
        <returns>To be added.</returns>
        <remarks><para>Verwenden Sie diese Funktion zum Filtern von Werten. Wenn Sie beispielsweise mehrere <b></b> Deltafunktionen summieren, berechnen Sie die Anzahl der gleichen Paare. Diese Funktion wird auch als Kronecker-Deltafunktion bezeichnet.</para>
          <para>Wenn Zahl1 nicht numerisch ist, <b>gibt Delta</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn "Zahl2" nicht numerisch ist, gibt <b>Delta</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DevSq">
      <MemberSignature Language="C#" Value="public double DevSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DevSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DevSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DevSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16702)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – zwischen 1 und 30 Argumente, für die die Summe der quadrierten Abweichungen ermittelt werden soll. Sie können auch ein Array oder einen Bezug auf ein Array anstelle der durch Komma getrennten Argumente verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt die Summe der quadrierten Abweichungen der Datenpunkte von ihrem Stichprobenmittelwert zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen. </para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt. </para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt. </para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht. </para>
          <para>Die Formel für die Summe der quadrierten Abweichungen lautet wie folgt: 

 </para>
          <para>Abbildung 1: Formel für die Summe der quadratischen Abweichungen</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DGet">
      <MemberSignature Language="C#" Value="public object DGet (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DGet([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DGet(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DGet (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DGet(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16619)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Extrahiert einen Wert aus einer Listen- oder Datenbankspalte, der bestimmte Bedingungen erfüllt.</summary>
        <returns>To be added.</returns>
        <remarks><para>Da mit dem Gleichheitszeichen beim Eingeben von Text oder Werten in einer Zelle eine Formel gekennzeichnet wird, wird die Eingabe von Microsoft Excel ausgewertet. Um einen Gleichheitsvergleichsoperator für Text oder einen Wert anzugeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich ein: </para>
          <para>=''=entry''</para>
          <para>Dabei ist der Eintrag der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Textdaten unterscheidet Excel nicht zwischen Groß- und Kleinbuchstaben. Sie können jedoch mithilfe einer Formel eine Suche ausführen, bei der Groß- und Kleinschreibung berücksichtigt werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Disc">
      <MemberSignature Language="C#" Value="public double Disc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Disc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Disc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Disc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16819)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Kurs – ist der Preis des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg4">Rückzahlung – der Rückkaufswert des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg5">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt den Abschlag (Disagio) eines Wertpapiers zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text. </para>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn für Abrechnung oder Fälligkeit keine gültige fortlaufende Datumsnummer vorkommt, gibt <b>Disc</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If pr ≤ 0 or if redemption ≤ 0, <b>Disc</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>gibt Disc</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die ≥ Fälligkeit ist, gibt <b>Disc</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>Der Datenträger</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Formel für die Berechnung der Disc-Methode</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>B = Anzahl der Tage in einem Jahr, abhängig von der Jahresbasis.</para>
          <para>DSM = Anzahl der Tage zwischen Abrechnung und Fälligkeit.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DMax">
      <MemberSignature Language="C#" Value="public double DMax (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMax([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMax(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMax (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMax(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16428)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Gibt die größte Zahl in einer Listen- oder Datenbankspalte zurück, die bestimmte Bedingungen erfüllt.</summary>
        <returns>To be added.</returns>
        <remarks><para>Da mit dem Gleichheitszeichen beim Eingeben von Text oder Werten in einer Zelle eine Formel gekennzeichnet wird, wird die Eingabe von Microsoft Excel ausgewertet. Um einen Gleichheitsvergleichsoperator für Text oder einen Wert anzugeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich ein: </para>
          <para>=''=entry''</para>
          <para>Dabei ist der Eintrag der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Textdaten unterscheidet Excel nicht zwischen Groß- und Kleinbuchstaben. Sie können jedoch mithilfe einer Formel eine Suche ausführen, bei der Groß- und Kleinschreibung berücksichtigt werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DMin">
      <MemberSignature Language="C#" Value="public double DMin (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DMin([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DMin(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DMin (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DMin(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16427)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Gibt die kleinste Zahl in einer Listen- oder Datenbankspalte zurück, die bestimmte Bedingungen erfüllt.</summary>
        <returns>To be added.</returns>
        <remarks><para>Da mit dem Gleichheitszeichen beim Eingeben von Text oder Werten in einer Zelle eine Formel gekennzeichnet wird, wird die Eingabe von Microsoft Excel ausgewertet. Um einen Gleichheitsvergleichsoperator für Text oder einen Wert anzugeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich ein: </para>
          <para>=''=entry''</para>
          <para>Dabei ist der Eintrag der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Textdaten unterscheidet Excel nicht zwischen Groß- und Kleinbuchstaben. Sie können jedoch mithilfe einer Formel eine Suche ausführen, bei der Groß- und Kleinschreibung berücksichtigt werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dollar">
      <MemberSignature Language="C#" Value="public string Dollar (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Dollar([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dollar (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16397)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – eine Zahl, ein Bezug auf eine Zelle mit einer Zahl oder eine Formel, die zu einer Zahl ausgewertet wird.</param>
        <param name="Arg2">Dezimalstellen – die Anzahl der Stellen nach dem Komma. Wenn dieser Wert negativ ist, wird die Zahl vor dem Komma gerundet. Wenn Sie diesen Wert nicht angeben, wird 2 angenommen.</param>
        <summary>Diese Funktion rechnet eine Zahl in das Textformat um und fügt ein Währungssymbol ein. Der Name der Funktion (und das Währungssymbol) ist abhängig von den Spracheinstellungen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Der Hauptunterschied zwischen dem Formatieren einer Zelle, die eine Zahl mit dem Befehl "Zellen" (Menü "Format") enthält, und der direkten Formatierung einer Zahl mit der Funktion <b>"Dollar"</b> besteht in der Konvertierung des Ergebnisses in Text durch <b>Dollar.</b> Bei einer Zahl, die mit dem Befehl Zellen umgerechnet wurde, handelt es sich weiterhin um eine Zahl. Sie können in Formeln weiterhin Zahlen verwenden, die mit <b>Dollar</b> formatiert sind, da in Microsoft Excel eingegebene Zahlen bei der Berechnung als Textwerte in Zahlen konvertiert werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarDe">
      <MemberSignature Language="C#" Value="public double DollarDe (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarDe([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarDe(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarDe (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarDe(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16827)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – eine als Bruch angegebene Zahl.</param>
        <param name="Arg2">Teiler – die ganze Zahl, die als Nenner für den Bruch verwendet werden soll.</param>
        <summary>Rechnet einen als Bruch angegebenen Dollarpreis in einen als Dezimalzahl angegebenen Dollarpreis um. Verwenden Sie DOLLARDE zum Umrechnen von Preisen, die als Bruchzahlen angegeben sind, in Dezimalzahlen (z. B. für Wertpapierpreise).</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn Teiler keine ganze Zahl darstellt, wird die Zahl gekürzt. </para>
          <para>Wenn die Bruchzahl kleiner als 0 ist, gibt <b>DollarDe</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn der Bruch 0 ist, <b>gibt DollarDe</b> den Wert #DIV/0! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DollarFr">
      <MemberSignature Language="C#" Value="public double DollarFr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DollarFr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DollarFr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DollarFr (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DollarFr(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16828)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – eine Dezimalzahl.</param>
        <param name="Arg2">Teiler – die ganze Zahl, die als Nenner des Bruchs verwendet werden soll.</param>
        <summary>Rechnet einen als Dezimalzahl angegebenen Dollarpreis in einen als Bruch angegebenen Dollarpreis um. Verwenden Sie DOLLARFR zum Konvertieren von Dollarpreisen, die als Dezimalzahlen angegeben sind, in Bruchzahlen (z. B. für Wertpapierpreise).</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn Teiler keine ganze Zahl darstellt, wird die Zahl gekürzt. </para>
          <para>Wenn die Bruchzahl kleiner als 0 ist, <b>gibt DollarFr</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn der Bruch 0 ist, <b>gibt DollarFr</b> den Wert #DIV/0! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DProduct">
      <MemberSignature Language="C#" Value="public double DProduct (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DProduct([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DProduct(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DProduct (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DProduct(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16573)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder die Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den angegebenen Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Multipliziert die Werte in einer Listen- oder Datenbankspalte, die die angegebenen Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Da mit dem Gleichheitszeichen beim Eingeben von Text oder Werten in einer Zelle eine Formel gekennzeichnet wird, wird die Eingabe von Microsoft Excel ausgewertet. Um einen Gleichheitsvergleichsoperator für Text oder einen Wert anzugeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich ein: </para>
          <para>=''=entry''</para>
          <para>Dabei ist der Eintrag der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Textdaten unterscheidet Excel nicht zwischen Groß- und Kleinbuchstaben. Sie können jedoch mithilfe einer Formel eine Suche ausführen, bei der Groß- und Kleinschreibung berücksichtigt werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDev">
      <MemberSignature Language="C#" Value="public double DStDev (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDev([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDev(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDev (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDev(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16429)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Schätzt die Standardabweichung einer Grundgesamtheit auf Grundlage einer Stichprobe mithilfe von Zahlen in einer Listen- oder Datenbankspalte, die bestimmte Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Da mit dem Gleichheitszeichen beim Eingeben von Text oder Werten in einer Zelle eine Formel gekennzeichnet wird, wird die Eingabe von Microsoft Excel ausgewertet. Um einen Gleichheitsvergleichsoperator für Text oder einen Wert anzugeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich ein: </para>
          <para>=''=entry''</para>
          <para>Dabei ist der Eintrag der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Textdaten unterscheidet Excel nicht zwischen Groß- und Kleinbuchstaben. Sie können jedoch mithilfe einer Formel eine Suche ausführen, bei der Groß- und Kleinschreibung berücksichtigt werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DStDevP">
      <MemberSignature Language="C#" Value="public double DStDevP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DStDevP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DStDevP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DStDevP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DStDevP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16579)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Berechnet die Standardabweichung einer Grundgesamtheit auf Grundlage der gesamten Grundgesamtheit mithilfe von Zahlen in einer Listen- oder Datenbankspalte, die bestimmte Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Da mit dem Gleichheitszeichen beim Eingeben von Text oder Werten in einer Zelle eine Formel gekennzeichnet wird, wird die Eingabe von Microsoft Excel ausgewertet. Um einen Gleichheitsvergleichsoperator für Text oder einen Wert anzugeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich ein: </para>
          <para>=''=entry''</para>
          <para>Dabei ist der Eintrag der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Textdaten unterscheidet Excel nicht zwischen Groß- und Kleinbuchstaben. Sie können jedoch mithilfe einer Formel eine Suche ausführen, bei der Groß- und Kleinschreibung berücksichtigt werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DSum">
      <MemberSignature Language="C#" Value="public double DSum (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DSum([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DSum(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DSum (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DSum(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16425)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Addiert die Zahlen in einer Listen- oder Datenbankspalte, die die angegebenen Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Da mit dem Gleichheitszeichen beim Eingeben von Text oder Werten in einer Zelle eine Formel gekennzeichnet wird, wird die Eingabe von Microsoft Excel ausgewertet. Um einen Gleichheitsvergleichsoperator für Text oder einen Wert anzugeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich ein: </para>
          <para>=''=entry''</para>
          <para>Dabei ist der Eintrag der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Textdaten unterscheidet Excel nicht zwischen Groß- und Kleinbuchstaben. Sie können jedoch mithilfe einer Formel eine Suche ausführen, bei der Groß- und Kleinschreibung berücksichtigt werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy19">
      <MemberSignature Language="C#" Value="public object Dummy19 (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Dummy19([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy19(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy19 (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2827)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Für interne Zwecke vorbehalten. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dummy21">
      <MemberSignature Language="C#" Value="public double Dummy21 (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Dummy21([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dummy21(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dummy21 (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Dummy21(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2826)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <param name="Arg2">To be added.</param>
        <summary>Für interne Zwecke vorbehalten.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public double Duration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Duration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Duration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Duration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16842)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Nominalzins – der jährliche Couponzinssatz des Wertpapiers.</param>
        <param name="Arg4">Rendite – die jährliche Rendite des Wertpapiers.</param>
        <param name="Arg5">Häufigkeit – die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2 für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg6">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt die Macauley-Duration für einen angenommenen Nennwert von 100 $ zurück. Die Duration ist als gewichteter Durchschnitt des Gegenwartswerts der Cashflows definiert und wird als Maß für die Reaktion des Preises eines Wertpapiers auf Renditeänderungen verwendet.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Häufigkeit und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn abrechnung oder Fälligkeit kein gültiges Datum ist, <b>gibt Duration</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn der &lt; Zinstermin 0 ist oder &lt; yld 0 ist, gibt <b>Duration</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die Häufigkeit eine andere Zahl als 1, 2 oder 4 ist, gibt <b>Duration</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, gibt <b>Duration</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die ≥ Fälligkeit ist, gibt <b>Duration</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DVar">
      <MemberSignature Language="C#" Value="public double DVar (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVar([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVar(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVar (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVar(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16431)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Schätzt die Varianz einer Grundgesamtheit auf Grundlage einer Stichprobe mithilfe von Zahlen in einer Listen- oder Datenbankspalte, die bestimmte Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Da mit dem Gleichheitszeichen beim Eingeben von Text oder Werten in einer Zelle eine Formel gekennzeichnet wird, wird die Eingabe von Microsoft Excel ausgewertet. Um einen Gleichheitsvergleichsoperator für Text oder einen Wert anzugeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich ein: </para>
          <para>=''=entry''</para>
          <para>Dabei ist der Eintrag der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Textdaten unterscheidet Excel nicht zwischen Groß- und Kleinbuchstaben. Sie können jedoch mithilfe einer Formel eine Suche ausführen, bei der Groß- und Kleinschreibung berücksichtigt werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DVarP">
      <MemberSignature Language="C#" Value="public double DVarP (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 DVarP([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.DVarP(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DVarP (Arg1 As Range, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double DVarP(Microsoft::Office::Interop::Excel::Range ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16580)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datenbank – der Zellbereich, der die Liste oder Datenbank darstellt. Bei einer Datenbank handelt es sich um eine Liste von zusammenhängenden Daten, in denen Zeilen mit Informationen als Datensätze und Datenspalten als Felder bezeichnet werden. Die erste Zeile der Liste enthält die Spaltenbeschriftungen.</param>
        <param name="Arg2">Datenbankfeld – gibt an, welche Spalte in der Funktion verwendet wird. Geben Sie die Spaltenbeschriftung zwischen doppelten Anführungszeichen (z. B. "Alter" oder "Rendite") oder eine Zahl (ohne Anführungszeichen) ein, die die Position der Spalte in der Liste angibt. Dabei steht 1 für die erste Spalte, 2 für die zweite Spalte usw.</param>
        <param name="Arg3">Suchkriterien – der Zellbereich mit den Bedingungen. Sie können einen beliebigen Bereich als Kriterienargument verwenden, wenn er mindestens eine Spaltenbeschriftung und mindestens eine Zelle unter der Spaltenbeschriftung enthält, in der eine Bedingung für die Spalte angegeben wird.</param>
        <summary>Berechnet die Varianz einer Grundgesamtheit auf Grundlage der gesamten Grundgesamtheit mithilfe von Zahlen in einer Listen- oder Datenbankspalte, die bestimmte Bedingungen erfüllen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Da mit dem Gleichheitszeichen beim Eingeben von Text oder Werten in einer Zelle eine Formel gekennzeichnet wird, wird die Eingabe von Microsoft Excel ausgewertet. Um einen Gleichheitsvergleichsoperator für Text oder einen Wert anzugeben, geben Sie die Kriterien als Zeichenfolgenausdruck in der entsprechenden Zelle im Kriterienbereich ein: </para>
          <para>=''=entry''</para>
          <para>Dabei ist der Eintrag der Text oder Wert, den Sie suchen möchten. Beispiel:</para>
          <list type="table">
            <item>
              <term>="=Davolio"</term>
              <description>=Davolio</description>
            </item>
            <item>
              <term>="=3000"</term>
              <description>=3000</description>
            </item>
          </list>
          <para>Beim Filtern von Textdaten unterscheidet Excel nicht zwischen Groß- und Kleinbuchstaben. Sie können jedoch mithilfe einer Formel eine Suche ausführen, bei der Groß- und Kleinschreibung berücksichtigt werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EDate">
      <MemberSignature Language="C#" Value="public double EDate (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EDate([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EDate(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EDate (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EDate(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16833)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ausgangsdatum – Das Anfangsdatum. Datumswerte sollten mithilfe der DATE-Funktion eingegeben werden oder als Ergebnisse von anderen Formeln oder Funktionen. Verwenden Sie beispielsweise DATE(2008,5,23) für den 23. Mai 2008. Es können Probleme auftreten, wenn Datumswerte als Text eingegeben werden.</param>
        <param name="Arg2">Monate – Die Anzahl der Monate vor oder nach Ausgangsdatum. Ein positiver Wert entspricht einem Datum in der Zukunft, ein negativer Wert einem Datum in der Vergangenheit.</param>
        <summary>Gibt die fortlaufende Zahl des Datums zurück, das eine bestimmte Anzahl von Monaten vor bzw. nach einem angegebenen Datum (Ausgangsdatum) liegt. Mit EDATE können Sie Fälligkeitsdaten berechnen, die auf den gleichen Tag im Monat wie das Ausgabedatum fallen.</summary>
        <returns>To be added.</returns>
        <remarks><para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Wenn start_date kein gültiges Datum ist, gibt <b>EDate</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn es sich bei Monate nicht um eine ganze Zahl handelt, wird die Zahl gekürzt.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public double Effect (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Effect([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Effect (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Effect(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16830)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Nominalzins – Die Nominalverzinsung.</param>
        <param name="Arg2">Perioden – die Anzahl der Zinszahlungen pro Jahr.</param>
        <summary>Gibt die jährliche Effektivverzinsung zurück, wenn die jährliche Nominalverzinsung und die Anzahl der Zinszahlungen pro Jahr angegeben werden.</summary>
        <returns>To be added.</returns>
        <remarks><para>Perioden wird auf eine ganze Zahl gekürzt. </para>
          <para>Wenn eines der Argumente nicht numerisch ist, gibt <b>Effect</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If nominal_rate ≤ 0 or if npery &lt; 1, <b>Effect</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>Der</b> Effekt wird wie folgt berechnet: </para>
          <para>Abbildung 1: Formel zum Berechnen der Effektmethode</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeURL">
      <MemberSignature Language="C#" Value="public object EncodeURL (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EncodeURL([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EncodeURL(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EncodeURL (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EncodeURL(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16981)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zu codierter Text.</param>
        <summary>Die URL codiert das Argument.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EoMonth">
      <MemberSignature Language="C#" Value="public double EoMonth (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 EoMonth([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.EoMonth(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EoMonth (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double EoMonth(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16834)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ausgangsdatum – Das Anfangsdatum. Datumswerte sollten mithilfe der DATE-Funktion eingegeben werden oder als Ergebnisse von anderen Formeln oder Funktionen. Verwenden Sie beispielsweise DATE(2008,5,23) für den 23. Mai 2008. Es können Probleme auftreten, wenn Datumswerte als Text eingegeben werden.</param>
        <param name="Arg2">Monate – Die Anzahl der Monate vor oder nach Ausgangsdatum. Ein positiver Wert entspricht einem Datum in der Zukunft, ein negativer Wert einem Datum in der Vergangenheit.</param>
        <summary>Gibt die fortlaufende Zahl des letzten Tags des Monats vor oder nach einer bestimmten Anzahl von Monaten nach bzw. vor Ausgangsdatum zurück. Mit EOMONTH können Sie Fälligkeitstermine berechnen, die auf den letzten Tag des Monats fallen.</summary>
        <returns>To be added.</returns>
        <remarks><para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Wenn start_date kein gültiges Datum ist, gibt <b>EoMonth</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn start_date Plusmonat ein ungültiges Datum ergibt, gibt <b>EoMonth</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf">
      <MemberSignature Language="C#" Value="public double Erf (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16807)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lower_limit - die untere Grenze für die Integration <b>von Erf</b>.</param>
        <param name="Arg2">Upper_limit - die Obergrenze für die Integration von <b>Erf</b>. Wenn er weggelassen wird, wird Erf zwischen Null und lower_limit.</param>
        <summary>Gibt die Fehlerfunktion integriert zwischen Untere_Grenze und Obere_Grenze zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" /> Methode.</para>
          <para>Wenn lower_limit nicht numerisch ist, <b>gibt Erf</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn lower_limit negativ ist, <b>gibt Erf die</b> #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn upper_limit nicht numerisch ist, <b>gibt Erf</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn upper_limit negativ ist, <b>gibt Erf</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Abbildung 1: Formel zum Berechnen der Erf-Methode</para>
          <para> </para>
          <para> </para>
          <para>Abbildung 2: Formel zum Berechnen der Erf-Methode</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Erf_Precise">
      <MemberSignature Language="C#" Value="public double Erf_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Erf_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Erf_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erf_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Erf_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16927)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Untere_Grenze – Die Untergrenze für die Integration von ERF.</param>
        <summary>Gibt die Fehlerfunktion zwischen 0 (null) und unterer Grenze integriert zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Ist Untere_Grenze nicht numerisch, generiert <b>Erf_Precise</b> einen Fehler. Ist Untere_Grenze negativ, generiert <b>Erf_Precise</b> einen Fehler.</para>
          <para>Abbildung 1: Formel zum Berechnen Erf_Precise Methode</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC">
      <MemberSignature Language="C#" Value="public double ErfC (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16808)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Das erste Argument.</param>
        <summary>Gibt die komplementäre ERF-Funktion zwischen dem angegebenen Parameter und Unendlich integriert zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" /> Methode.</para>
          <para>Wenn diese Funktion nicht verfügbar ist und die #NAME? müssen Sie das Analysis ToolPak-Add-In installieren und laden.</para>
          <para>Wenn der Parameter nicht numerisch ist, <b>gibt ErfC</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para>Wenn der Parameter negativ ist, <b>gibt ErfC</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ErfC_Precise">
      <MemberSignature Language="C#" Value="public double ErfC_Precise (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ErfC_Precise([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ErfC_Precise(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErfC_Precise (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ErfC_Precise(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16928)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Vergleichswert für die Berechnung.</param>
        <summary>Gibt die komplementäre Fehlerfunktion zwischen dem angegebenen Wert und Unendlich integriert zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn der angegebene Wert nicht numerisch ist, erzeugt <b>ErfC_Precise</b> einen Fehler.</para>
          <para>Wenn der angegebene Wert negativ ist, erzeugt <b>ErfC_Precise</b> einen Fehler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Even">
      <MemberSignature Language="C#" Value="public double Even (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Even([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Even(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Even (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Even(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16663)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – Der zu rundende Wert.</param>
        <summary>Gibt Zahl auf die nächste gerade ganze Zahl gerundet zurück. Mit dieser Funktion können Sie paarweise auftretende Elemente verarbeiten. Betrachten Sie beispielsweise eine Kiste, in die in Reihen mit einem oder zwei Elementen befüllt werden kann. Die Kiste ist voll, wenn die Anzahl der Elemente auf die nächste gerade Zahl aufgerundet mit der Kapazität der Kiste übereinstimmt.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn "Number" nicht numerisch ist, gibt <b>Even</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Unabhängig vom Vorzeichen von Zahl wird ein Wert aufgerundet. Wenn es sich bei Zahl bereits um eine gerade ganze Zahl handelt, erfolgt keine Rundung.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Expon_Dist">
      <MemberSignature Language="C#" Value="public double Expon_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Expon_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Expon_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Expon_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16878)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – Der Wert der Funktion.</param>
        <param name="Arg2">Lambda – Der Parameterwert.</param>
        <param name="Arg3">Kumuliert – Ein Wahrheitswert, der angibt, welche Form der Exponentialfunktion angegeben werden soll. Wenn <b>"Kumuliert" auf "true"</b> <b>Expon_Dist</b> die kumulierte Verteilungsfunktion zurückgegeben. wenn <b>false,</b>gibt sie die Wahrscheinlichkeitsdichtefunktion zurück.</param>
        <summary>Gibt Wahrscheinlichkeiten einer exponentialverteilten Zufallsvariablen zurück. Mit EXPONVERT können Sie die Zeit zwischen Ereignissen modellieren, beispielsweise wie lange ein Geldautomat für die Ausgabe von Geld benötigt. Mit EXPONVERT können Sie beispielsweise die Wahrscheinlichkeit berechnen, dass dieser Vorgang höchstens eine Minute dauert.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn x oder lambda nicht numerisch <b>ist, gibt Expon_Dist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x &lt; 0, <b>gibt Expon_Dist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn lambda ≤ 0 ist, <b>gibt Expon_Dist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für den Wahrscheinlichkeitswert der Funktion lautet wie folgt: 

 </para>
          <para>Abbildung 1: Gleichung für die Wahrscheinlichkeitsdichtefunktion</para>
          <para> </para>
          <para> </para>
          <para>Die Formel für den kumulierten Wert der Verteilungsfunktion lautet wie folgt: 

</para>
          <para>Abbildung 2: Formel für die kumulierte Verteilungsfunktion</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponDist">
      <MemberSignature Language="C#" Value="public double ExponDist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ExponDist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ExponDist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExponDist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ExponDist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16664)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – Der Wert der Funktion.</param>
        <param name="Arg2">Lambda – Der Parameterwert.</param>
        <param name="Arg3">Kumuliert – Ein Wahrheitswert, der angibt, welche Form der Exponentialfunktion angegeben werden soll. Wenn <b>"Cumulative" auf "true"</b>zutrifft, <b>gibt ExponDist</b> die kumulierte Verteilungsfunktion zurück. Wenn <b>false,</b>gibt sie die Wahrscheinlichkeitsdichtefunktion zurück.</param>
        <summary>Gibt Wahrscheinlichkeiten einer exponentialverteilten Zufallsvariablen zurück. Verwenden <b>Sie ExponDist,</b> um die Zeit zwischen Ereignissen zu modellieren, z. B. wie lange ein Geldautomat für die Geldausgabe benötigt. Beispielsweise können Sie <b>exponDist</b> verwenden, um die Wahrscheinlichkeit zu ermitteln, dass der Prozess bis zu 1 Minute dauert.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Expon_Dist(System.Double,System.Double,System.Boolean)" /> Methode.</para>
          <para>Wenn x oder Lambda nicht numerisch ist, <b>gibt ExponDist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x &lt; 0, <b>gibt ExponDist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn lambda ≤ 0 ist, <b>gibt ExponDist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für den Wahrscheinlichkeitswert der Funktion lautet wie folgt: 

 </para>
          <para>Abbildung 1: Gleichung für die Wahrscheinlichkeitsdichtefunktion</para>
          <para> </para>
          <para> </para>
          <para>Die Formel für den kumulierten Wert der Verteilungsfunktion lautet wie folgt: 

</para>
          <para>Abbildung 2: Gleichung für die kumulierte Verteilungsfunktion</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist">
      <MemberSignature Language="C#" Value="public double F_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16915)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - Der Wert, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Deg_freedom1 : Die Freiheitsgrade des Zählers.</param>
        <param name="Arg3">Deg_freedom2 : Die Freiheitsgrade des Nenners.</param>
        <param name="Arg4">Kumuliert – Ein logischer Wert, der die Form der Funktion bestimmt. Wenn kumulativ <b>true</b>ist, <b>gibt F_Dist</b> die kumulierte Verteilungsfunktion zurück. Wenn <b>false,</b>gibt sie die Wahrscheinlichkeitsdichtefunktion zurück.</param>
        <summary>Gibt die F-Wahrscheinlichkeitsverteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Argument nicht numerisch ist, <b>gibt F_Dist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x negativ ist, <b>gibt F_Dist</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Freiheitsgrade1 oder Freiheitsgrade2 keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn deg_freedom1 &lt; 1 ist, <b>gibt F_Dist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn deg_freedom &lt; 1 ist, <b>gibt F_Dist</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Dist_RT">
      <MemberSignature Language="C#" Value="public double F_Dist_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Dist_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Dist_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Dist_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16916)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, bei dem die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Freiheitsgrade1 – die Freiheitsgrade des Zählers.</param>
        <param name="Arg3">Freiheitsgrade2 – die Freiheitsgrade des Nenners.</param>
        <summary>Gibt Werte der Verteilungsfunktion (1-Alpha) einer (rechtsseitigen) F-verteilten Zufallsvariablen zurück. Mithilfe dieser Funktion können Sie bestimmen, ob zwei Datasets unterschiedliche Streuungsmengen aufweisen. Beispielsweise können Sie die Testergebnisse von Männern und Frauen bei der Aufnahme in die Hochschule untersuchen und ermitteln, ob sich die Variabilität bei den Frauen von der bei den Männern unterscheidet.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Argument nicht numerisch ist, <b>gibt F_Dist_RT</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x negativ ist, <b>gibt F_Dist_RT</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Freiheitsgrade1 oder Freiheitsgrade2 keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn degrees_freedom1 &lt; 1 oder degrees_freedom1 ≥ 10^10 ist, <b>gibt F_Dist_RT</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn degrees_freedom2 &lt; 1 oder degrees_freedom2 ≥ 10^10 ist, <b>gibt F_Dist_RT</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>F_Dist_RT</b> wird als F_DIST_RT=P( F x ) berechnet, wobei F eine zufällige Variable mit einer F-Verteilung mit degrees_freedom1 und &gt; degrees_freedom2 Freiheitsgrade ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv">
      <MemberSignature Language="C#" Value="public double F_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16917)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrscheinlichkeit – Eine Wahrscheinlichkeit, die der kumulierten F-Verteilung zugeordnet ist.</param>
        <param name="Arg2">Deg_freedom1 : Die Freiheitsgrade des Zählers.</param>
        <param name="Arg3">Deg_freedom2 : Die Freiheitsgrade des Nenners.</param>
        <summary>Gibt die Umkehrung der F-Wahrscheinlichkeitsfunktion zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Argument nicht numerisch ist, <b>gibt F_Inv</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die &lt; Wahrscheinlichkeit 0 oder die Wahrscheinlichkeit &gt; 1 <b>ist, gibt F_Inv</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Freiheitsgrade1 oder Freiheitsgrade2 keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn deg_freedom1 &lt; 1 oder deg_freedom2 &lt; 1 ist, <b>gibt F_Inv</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Inv_RT">
      <MemberSignature Language="C#" Value="public double F_Inv_RT (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Inv_RT([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Inv_RT (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Inv_RT(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16918)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrsch – die zur kumulativen F-Verteilung gehörende Wahrscheinlichkeit.</param>
        <param name="Arg2">Freiheitsgrade1 – die Freiheitsgrade des Zählers.</param>
        <param name="Arg3">Freiheitsgrade2 – die Freiheitsgrade des Nenners.</param>
        <summary>Gibt die Umkehrung der rechtsseitigen F-Wahrscheinlichkeitsverteilung zurück. Wenn p = F.VERT.RE(x,...), dann ist F.INV.RE(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die F-Verteilung kann in F-Tests verwendet werden, bei denen die Streuungen zweier Datenmengen ins Verhältnis gesetzt werden. Zum Beispiel können Sie die Verteilung der in den USA und Kanada erzielten Einkommen daraufhin analysieren, ob in den beiden Ländern ähnliche Einkommensverteilungen vorliegen.</para>
          <para>Wenn ein Argument nicht numerisch ist, <b>gibt F_Inv_RT</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die &lt; Wahrscheinlichkeit 0 oder die Wahrscheinlichkeit &gt; 1 <b>ist, gibt F_Inv_RT</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Freiheitsgrade1 oder Freiheitsgrade2 keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn degrees_freedom1 &lt; 1 oder degrees_freedom1 ≥ 10^10 ist, <b>gibt F_Inv_RT</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn degrees_freedom2 &lt; 1 oder degrees_freedom2 ≥ 10^10 ist, <b>gibt F_Inv_RT</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para>
            <b>F_Inv_RT</b> kann verwendet werden, um kritische Werte aus der F-Verteilung zurückzukehren. Zum Beispiel umfasst die Ausgabe einer ANOVA-Berechnung häufig Daten für die F-Verteilung (F-Statistik), F-Wahrscheinlichkeit sowie den kritischen F-Wert beim Signifikanzniveau 0,05. Wenn Sie den kritischen Wert von F zurückgeben möchten, verwenden Sie die Signifikanzebene als Wahrscheinlichkeitsargument, <b>um</b>F_Inv_RT .</para>
          <para>Bei einem Wert für die Wahrscheinlichkeit <b>sucht F_Inv_RT</b> diesen Wert x so, dass F_DIST_RT(x, degrees_freedom1, degrees_freedom2) = Wahrsheitswahrscheinlichkeit. Daher hängt die Genauigkeit <b>der F_Inv_RT</b> von der Genauigkeit der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" /> ab. <b>F_Inv_RT</b> verwendet eine iterative Suchtechnik. Wenn die Suche nach 64 Iterationen nicht erfolgreich war, gibt die Funktion den Fehlerwert #N/A zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="F_Test">
      <MemberSignature Language="C#" Value="public double F_Test (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 F_Test([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function F_Test (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double F_Test(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16875)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 – das erste Array bzw. der erste Bereich von Daten.</param>
        <param name="Arg2">Array2 – das zweite Array bzw. der zweite Bereich von Daten.</param>
        <summary>Gibt das Ergebnis eines F-Tests zurück. Ein F-Test gibt die zweiseitige Wahrscheinlichkeit zurück, dass sich die Varianzen von Array1 und Array2 nicht signifikant unterscheiden. Mit dieser Funktion können Sie feststellen, ob zwei Stichproben unterschiedliche Varianzen haben. Sind beispielsweise die Prüfungsergebnisse öffentlicher und privater Schulen bekannt, können Sie ermitteln, ob bei diesen Schultypen ein unterschiedlich breites Notenspektrum üblich ist.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente müssen Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn die Anzahl der Datenpunkte in Array1 oder Array2 kleiner als 2 ist oder die Varianz von Array1 oder Array2 null ist, gibt <b>F_Test</b> den Wert #DIV/0! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fact">
      <MemberSignature Language="C#" Value="public double Fact (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fact([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fact(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fact (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fact(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16568)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die nicht negative Zahl, deren Fakultät bestimmt werden soll. Wenn Zahl keine ganze Zahl ist, wird sie gekürzt.</param>
        <summary>Gibt die Fakultät einer Zahl zurück. Die Factorialzahl einer Zahl ist gleich 1 *2* 3 *...* Zahl.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FactDouble">
      <MemberSignature Language="C#" Value="public double FactDouble (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FactDouble([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FactDouble(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FactDouble (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FactDouble(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16799)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – der Wert, für den die Fakultät mit Schrittlänge 2 zurückgegeben werden soll. Wenn Zahl keine ganze Zahl ist, wird sie gekürzt.</param>
        <summary>Gibt die Fakultät zu einer Zahl mit der Schrittlänge 2 zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn "Number" nicht numerisch ist, gibt <b>FactDouble</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn "Zahl" negativ ist, <b>gibt FactDouble</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die Zahl gleichmäßig ist: </para>
          <para>Abbildung 1: Gleichung für "gleichmäßig"</para>
          <para> </para>
          <para> </para>
          <para>Wenn die Zahl ungerade ist:</para>
          <para>Abbildung 2: Gleichung für ungerade</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FDist">
      <MemberSignature Language="C#" Value="public double FDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16665)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, bei dem die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Freiheitsgrade1 – die Freiheitsgrade des Zählers.</param>
        <param name="Arg3">Freiheitsgrade2 – die Freiheitsgrade des Nenners.</param>
        <summary>Gibt die F-Wahrscheinlichkeitsverteilung zurück. Mithilfe dieser Funktion können Sie bestimmen, ob zwei Datenmengen unterschiedliche Streuungsmengen aufweisen. Beispielsweise können Sie die Testergebnisse von Männern und Frauen bei der Aufnahme in die Hochschule untersuchen und ermitteln, ob sich die Variabilität bei den Frauen von der bei den Männern unterscheidet.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zu den neuen Funktionen finden Sie unter "Und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist_RT(System.Double,System.Double,System.Double)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> Methoden".</para>
          <para>Wenn ein Argument nicht numerisch ist, <b>gibt FDist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x negativ ist, <b>gibt FDist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Freiheitsgrade1 oder Freiheitsgrade2 keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn degrees_freedom1 &lt; 1 oder degrees_freedom1 ≥ 10^10 ist, gibt <b>FDist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn degrees_freedom2 &lt; 1 oder degrees_freedom2 ≥ 10^10 ist, gibt <b>FDist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>FDist</b> wird als FDIST=P( F x ) berechnet, wobei F eine zufällige Variable mit einer F-Verteilung mit degrees_freedom1 und &gt; degrees_freedom2 Freiheitsgrade ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterXML">
      <MemberSignature Language="C#" Value="public object FilterXML (string Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FilterXML([in]string Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FilterXML(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FilterXML (Arg1 As String, Arg2 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FilterXML(System::String ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16979)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Gültige XML-Zeichenfolge.</param>
        <param name="Arg2">XPath-Abfragezeichenfolge.</param>
        <summary>Rufen Sie bestimmte Daten aus dem zurückgegebenen XML ab, in der Regel von einem <b>WebService-Funktionsaufruf.</b></summary>
        <returns><b>VARIANT</b></returns>
        <remarks><para>Der Parameter "XPath" ist auf 1024 Zeichen beschränkt.</para>
          <para>Die <b>FILTERXML-Funktion</b> gibt Ergebnisse zurück, die über das vom Benutzer angegebene Daten locale analysiert werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public double Find (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Find([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16508)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Name des Arbeitsblatts.</param>
        <param name="Arg2">Der Name des Bereichs.</param>
        <param name="Arg3">Der Name eines Arguments zum Verfeinern der Suche.</param>
        <summary>Sucht spezifische Informationen in einem Arbeitsblatt.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindB">
      <MemberSignature Language="C#" Value="public double FindB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FindB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16589)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Suchtext – der zu suchende Text.</param>
        <param name="Arg2">Text – der Text, der den gesuchten Text enthält.</param>
        <param name="Arg3">Erstes_Zeichen – gibt das Zeichen an, bei dem die Suche begonnen werden soll. Das erste Zeichen in Text ist Zeichen Nummer 1. Wenn Sie Erstes_Zeichen auslassen, wird als Wert 1 angenommen.</param>
        <summary><see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> suchen <b>Sie eine</b> Textzeichenfolge innerhalb einer zweiten Textzeichenfolge, und geben Sie die Nummer der Startposition der ersten Textzeichenfolge aus dem ersten Zeichen der zweiten Textzeichenfolge zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Ist für die Verwendung mit Sprachen vorgesehen, die den <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> Single-Byte-Zeichensatz (Single-Byte Character Set, SBCS) verwenden, während <b>FindB</b> für die Verwendung mit Sprachen vorgesehen ist, die den Doppel-Byte-Zeichensatz (DOUBLE-Byte Character Set, DBCS) verwenden. Der Rückgabewert wird von der Standardspracheinstellung auf Ihrem Computer folgendermaßen beeinflusst:</para>
          <list type="bullet">
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> Zählt jedes Zeichen, ob Einzel- oder Doppel-Byte, immer als 1, unabhängig von der Standardspracheinstellung.</description>
            </item>
            <item>
              <description>
                <b>FindB</b> zählt jedes Doppel-Byte-Zeichen als 2 Zeichen, wenn Sie die Bearbeitung einer Sprache aktiviert haben, die DBCS unterstützt, und sie dann als Standardsprache festlegen. Andernfalls <b>zählt FindB</b> jedes Zeichen als 1.</description>
            </item>
          </list>
          <para>Zu den Sprachen, die DBCS unterstützen, zählen Japanisch, Chinesisch (vereinfacht), Chinesisch (traditionell) und Koreanisch. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> und <b>FindB</b> werden zwischen Klein- und Kleinschreibung beachtet und lassen keine Platzhalterzeichen zu. Wenn Sie keine Suche unter Schreibung von Kleinschreibung oder Platzhalterzeichen verwenden möchten, können Sie diese <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> verwenden. </para>
          <para>Wenn find_text "" (leerer Text) ist, entspricht dies dem ersten Zeichen in der Suchzeichenfolge (d. h. dem nummerierten <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> Zeichen start_num oder 1). </para>
          <para>Suchtext darf keine Platzhalterzeichen enthalten. </para>
          <para>If find_text does not appear in within_text, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> and <b>FindB</b> return the #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn start_num nicht größer als 0 ist und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>FindB</b> den Wert #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn start_num größer ist als die Länge des within_text, gibt <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> <b>FindB</b> den Wert #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Verwenden start_num, um eine angegebene Anzahl von Zeichen zu überspringen. Angenommen, Sie arbeiten mit der Textzeichenfolge <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> "AYF0093". YoungMensApparel". Um die Nummer des ersten "Y" im beschreibenden Teil der Textzeichenfolge zu finden, legen Sie start_num gleich 8 fest, damit der Teil der Seriennummer des Texts nicht durchsucht wird. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> beginnt mit Zeichen 8, findet find_text Zeichen am nächsten Zeichen und gibt die Zahl 9 zurück. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> Gibt immer die Anzahl der Zeichen ab dem Anfang des within_text zurück und zählt die Zeichen, die Sie überspringen, start_num größer als 1 ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FInv">
      <MemberSignature Language="C#" Value="public double FInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16666)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrsch – die zur kumulativen F-Verteilung gehörende Wahrscheinlichkeit.</param>
        <param name="Arg2">Freiheitsgrade1 – die Freiheitsgrade des Zählers.</param>
        <param name="Arg3">Freiheitsgrade2 – die Freiheitsgrade des Nenners.</param>
        <summary>Gibt die Umkehrung der F-Wahrscheinlichkeitsfunktion zurück. Wenn p = FDIST(x,...), dann ist FINV(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zu den neuen Funktionen finden Sie unter den <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv_RT(System.Double,System.Double,System.Double)" /> Methoden und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Inv(System.Double,System.Double,System.Double)" /> methoden.</para>
          <para>Die F-Verteilung kann in F-Tests verwendet werden, bei denen die Streuungen zweier Datenmengen ins Verhältnis gesetzt werden. Zum Beispiel können Sie die Verteilung der in den USA und Kanada erzielten Einkommen daraufhin analysieren, ob in den beiden Ländern ähnliche Einkommensverteilungen vorliegen.</para>
          <para>Wenn ein Argument nicht numerisch ist, <b>gibt FInv</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die &lt; Wahrscheinlichkeit 0 oder die Wahrscheinlichkeit &gt; 1 ist, gibt <b>FInv</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Freiheitsgrade1 oder Freiheitsgrade2 keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn degrees_freedom1 &lt; 1 oder degrees_freedom1 ≥ 10^10 ist, gibt <b>FInv</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn degrees_freedom2 &lt; 1 oder degrees_freedom2 ≥ 10^10 ist, gibt <b>FInv</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para>
            <b>FInv</b> kann verwendet werden, um kritische Werte aus der F-Verteilung zurückzukehren. Zum Beispiel umfasst die Ausgabe einer ANOVA-Berechnung häufig Daten für die F-Verteilung (F-Statistik), F-Wahrscheinlichkeit sowie den kritischen F-Wert beim Signifikanzniveau 0,05. Wenn Sie den kritischen Wert von F zurückgeben möchten, verwenden Sie die Signifikanzebene als Wahrscheinlichkeitsargument für <b>FInv</b>.</para>
          <para>Bei einem Wert für die Wahrscheinlichkeit sucht <b>FInv</b> diesen Wert x so, dass FDIST(x, degrees_freedom1, degrees_freedom2) = Wahrsch ist. Daher hängt die Genauigkeit von <b>FInv</b> von der Genauigkeit der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FDist(System.Double,System.Double,System.Double)" /> ab. <b>FInv verwendet</b> eine iterative Suchtechnik. Wenn die Suche nach 64 Iterationen nicht erfolgreich war, gibt die Funktion den Fehlerwert #N/A zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fisher">
      <MemberSignature Language="C#" Value="public double Fisher (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fisher([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fisher(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fisher (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Fisher(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16667)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">x – ein numerischer Wert, für den die Transformation ausgeführt werden soll.</param>
        <summary>Gibt die Fisher-Transformation für x zurück. Diese Transformation erzeugt eine Funktion, die normalverteilt ist und somit eine Schiefe von ungefähr Null besitzt. Mit dieser Funktion können Sie eine Hypothese bezüglich des Korrelationskoeffizienten prüfen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn x nicht numerisch ist, <b>gibt Fisher</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If x ≤ -1 or if x ≥ 1, <b>Fisher</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für die Fisher-Transformation lautet:</para>
          <para>Abbildung 1: Formel für die Fisher-Transformation</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FisherInv">
      <MemberSignature Language="C#" Value="public double FisherInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FisherInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FisherInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function FisherInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FisherInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16668)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">y – der Wert, für den die Umkehrung der Transformation ausgeführt werden soll.</param>
        <summary>Gibt die Umkehrung der Fisher-Transformation zurück. Mithilfe dieser Transformation können Sie die Korrelation zwischen Datenbereichen oder Datenarrays untersuchen. Ist y = FISHER(x), dann ist FISHERINV(y) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn y nicht numerisch ist, <b>gibt FisherInv</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für die Umkehrung der Fisher-Transformation lautet:</para>
          <para>Abbildung 1: Formel für die inverse Fisher-Transformation</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fixed">
      <MemberSignature Language="C#" Value="public string Fixed (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Fixed([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fixed(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fixed (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16398)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die Zahl die gerundet und in Text konvertiert werden soll.</param>
        <param name="Arg2">Dezimalstellen – die Anzahl der Stellen nach dem Komma.</param>
        <param name="Arg3">No_commas - ein Wahrheitswert, der bei <b>"true"</b>verhindert, dass <b>Fixed</b> Kommas in den zurückgegebenen Text einbindet.</param>
        <summary>Rundet eine Zahl auf die angegebene Anzahl von Dezimalstellen, formatiert die Zahl im Dezimalformat mit einem Komma und Punkten und gibt das Ergebnis als Text zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>In Microsoft Excel können Zahlen maximal 15 gültige Stellen haben, aber der größte zulässige Wert für Dezimalstellen ist 127.</para>
          <para>Ist Dezimalstellen negativ, werden die Stellen von Zahl links vom Dezimalkomma gerundet.</para>
          <para>Wenn Sie diesen Wert nicht angeben, wird 2 angenommen.</para>
          <para>Wenn no_commas falsch <b>oder</b> nicht angegeben ist, enthält der zurückgegebene Text wie gewohnt Kommas. </para>
          <para>Der Hauptunterschied zwischen dem Formatieren einer Zelle mit einer Zahl mit dem Befehl "Zellen" (Menü "Format") und dem direkten Formatieren einer Zahl mit der Funktion FIXED besteht in der Konvertierung des Ergebnisses in Text durch <b>Fixed.</b> Bei einer Zahl, die mit dem Befehl Zellen umgerechnet wurde, handelt es sich weiterhin um eine Zahl.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public double Floor (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Floor(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16669)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – der numerische Wert, der gerundet werden soll.</param>
        <param name="Arg2">Schritt – das Vielfache, auf das gerundet werden soll.</param>
        <summary>Rundet Zahl gegen Null ab, auf das nächste Vielfache von Schritt.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" /> Methode.</para>
          <para>Wenn eines der Argumente nicht numerisch ist, <b>gibt Floor</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Zahl und Signifikanz unterschiedliche Vorzeichen haben, gibt <b>Floor</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Unabhängig davon, welches Vorzeichen Zahl hat, wird ein Wert abgerundet, wenn die Anpassung von Null ausgehend erfolgt. Ist Zahl ein genaues Vielfaches von Schritt, erfolgt keine Rundung.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Math">
      <MemberSignature Language="C#" Value="public double Floor_Math (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Math([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Math(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Math (Arg1 As Double, Optional Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16976)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, den Sie runden möchten.</param>
        <param name="Arg2">Das Vielfache, auf das Gerundet werden soll.</param>
        <param name="Arg3">Wenn eine Zahl ungleich Null angegeben wird, wird diese Funktion in Richtung Null gerundet.</param>
        <summary>Rundet eine Zahl auf die nächste ganze Zahl oder auf das nächste Vielfache des Signifikanzwerts ab.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor_Precise">
      <MemberSignature Language="C#" Value="public double Floor_Precise (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Floor_Precise([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Floor_Precise(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Floor_Precise (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16931)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – der numerische Wert, der gerundet werden soll.</param>
        <param name="Arg2">Schritt – das Vielfache, auf das gerundet werden soll.</param>
        <summary>Rundet die angegebene Zahl auf das nächste Vielfache von Schritt.</summary>
        <returns>To be added.</returns>
        <remarks><para>Abhängig vom Vorzeichen der Zahl und der Schrittargumente, rundet die <b>Floor_Precise</b>-Methode entweder zu Null oder von Null.</para>
          <list type="table">
            <item>
              <term>-/-</term>
              <description>Aufrunden auf eine Stelle.</description>
            </item>
            <item>
              <term>+/+</term>
              <description>Runden in Richtung Null</description>
            </item>
            <item>
              <term>-/+</term>
              <description>Aufrunden auf eine Stelle.</description>
            </item>
            <item>
              <term>+/-</term>
              <description>Runden in Richtung Null</description>
            </item>
          </list>
          <para>Wenn eines der Argumente nicht numerisch ist, <b>generiert Floor_Precise</b> Methode einen Fehler. </para>
          <para>Wenn der Wert für Zahl bereits ein Vielfaches von Schritt darstellt, erfolgt keine Rundung.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Forecast">
      <MemberSignature Language="C#" Value="public double Forecast (double Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Forecast([in]float64 Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Forecast(System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Forecast (Arg1 As Double, Arg2 As Object, Arg3 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Forecast(double Arg1, System::Object ^ Arg2, System::Object ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16693)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Datenpunkt, für den ein Wert vorhergesagt werden soll.</param>
        <param name="Arg2">Bekannt_y – das abhängige Array bzw. der abhängige Bereich von Daten.</param>
        <param name="Arg3">Bekannt_x – das unabhängige Array bzw. der unabhängige Bereich von Daten.</param>
        <summary>Berechnet oder prognostiziert einen künftigen Wert auf der Grundlage vorhandener Werte. Der prognostizierte Wert ist ein y-Wert für einen gegebenen x-Wert. Die bekannten Werte sind vorhandene x-Werte und y-Werte, und der neue Wert wird mithilfe der linearen Regression vorhergesagt. Mithilfe dieser Funktion können Sie künftige Umsätze, Bestandsanforderungen oder Verbrauchertrends prognostizieren.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn x nicht numerisch ist, gibt <b>Forecast</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn known_y und known_x leer sind oder eine andere Anzahl von Datenpunkten enthalten, gibt <b>Forecast</b> den Fehlerwert #N/A zurück. </para>
          <para>Wenn die Varianz known_x null ist, gibt <b>Forecast</b> den Wert #DIV/0! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für <b>Forecast</b> ist a+bx, wobei: </para>
          <para>Abbildung 1: Formel für die Forecast -Methode</para>
          <para> </para>
          <para> </para>
          <para>Und:</para>
          <para>Abbildung 2: Formel für die Forecast -Methode</para>
          <para> </para>
          <para> </para>
          <para>und wobei x und y die Beispielwerte AVERAGE(known_x) und AVERAGE(bekannte y) sind.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public object Frequency (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Frequency([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Frequency(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Frequency (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Frequency(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16636)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Daten – ein Array von Werten oder ein Bezug auf eine Reihe von Werten, deren Häufigkeit gezählt werden soll. Wenn data_array keine Werte enthält, gibt <b>Frequency</b> ein Array von Nullen zurück.</param>
        <param name="Arg2">Klassen – Ein Array von Intervallen oder ein Bezug auf Intervalle, in denen die Werte in Daten gruppiert werden sollen. Wenn bins_array keine Werte enthält, gibt <b>Frequency</b> die Anzahl der Elemente in data_array.</param>
        <summary>Berechnet, wie oft Werte innerhalb eines Bereichs von Werten vorkommen und gibt anschließend ein vertikales Array von Zahlen zurück. Verwenden Sie z. B. <b>"Häufigkeit",</b> um die Anzahl der Testergebnisse zu zählen, die innerhalb des Punktebereichs liegen. Da <b>frequency</b> ein Array zurückgibt, muss es als Arrayformel eingegeben werden.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Die</b> Häufigkeit wird als Arrayformel eingegeben, nachdem Sie einen Bereich angrenzender Zellen ausgewählt haben, in dem die zurückgegebene Verteilung angezeigt werden soll. </para>
          <para>Die Anzahl der Elemente im zurückgegebenen Array entspricht der Anzahl der Elemente in Klassen plus 1. Das zusätzliche Element im zurückgegebenen Array gibt die Anzahl der Werte über dem höchsten Intervall zurück. Wenn Sie beispielsweise drei Wertebereiche (Intervalle) zählen, die in <b></b> drei Zellen eingegeben werden, müssen Sie die Häufigkeit in vier Zellen für die Ergebnisse eingeben. Die zusätzliche Zelle gibt die Anzahl der Werte in Daten zurück, die größer als der Wert des dritten Intervalls sind. </para>
          <para>
            <b>Bei der</b> Häufigkeit werden leere Zellen und Text ignoriert. </para>
          <para>Formeln, die Arrays zurückgeben, müssen als Arrayformeln eingegeben werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FTest">
      <MemberSignature Language="C#" Value="public double FTest (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FTest([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FTest(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FTest (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FTest(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16694)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 – das erste Array bzw. der erste Bereich von Daten.</param>
        <param name="Arg2">Array2 – das zweite Array bzw. der zweite Bereich von Daten.</param>
        <summary>Gibt das Ergebnis eines F-Tests zurück. Ein F-Test gibt die zweiseitige Wahrscheinlichkeit zurück, dass sich die Varianzen von Array1 und Array2 nicht signifikant unterscheiden. Mit dieser Funktion können Sie feststellen, ob zwei Stichproben unterschiedliche Varianzen haben. Sind beispielsweise die Prüfungsergebnisse öffentlicher und privater Schulen bekannt, können Sie ermitteln, ob bei diesen Schultypen ein unterschiedlich breites Notenspektrum üblich ist.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.F_Test(System.Object,System.Object)" /> Methode.</para>
          <para>Die Argumente müssen Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn die Anzahl der Datenpunkte in Array1 oder Array2 kleiner als 2 ist oder die Varianz von Array1 oder Array2 Null ist, gibt <b>FTest</b> den Wert #DIV/0! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Fv">
      <MemberSignature Language="C#" Value="public double Fv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Fv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Fv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16441)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zins – der Zinssatz pro Zeitraum.</param>
        <param name="Arg2">Zzr – die Gesamtzahl der Zahlungsperioden in einer Annuität.</param>
        <param name="Arg3">Rmz – die pro Zeitraum vorgenommene Zahlung; dies kann sich über die Dauer der Annuität nicht ändern. Typischerweise umfasst Rmz das Kapital und die Zinsen, jedoch keine anderen Gebühren oder Steuern. Wenn Rmz ausgelassen wird, müssen Sie das Argument Bw angeben.</param>
        <param name="Arg4">Bw – der Barwert oder der heutige Gesamtwert einer Reihe zukünftiger Zahlungen. Fehlt das Argument Bw, wird es als 0 (Null) angenommen, und Sie müssen das Argument Rmz angeben.</param>
        <param name="Arg5">F – die Zahl 0 oder 1, die die Fälligkeit von Zahlungen angibt. Wenn F ausgelassen wird, wird ein Wert von 0 angenommen.</param>
        <summary>Gibt den zukünftigen Wert einer Investition zurück. Die Berechnung basiert auf regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz.</summary>
        <returns>To be added.</returns>
        <remarks><para>Eine vollständigere Beschreibung der Argumente in <b>Fv und</b> weitere Informationen zu Annuitätsfunktionen finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> .</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>Zum Ende des Zeitraums</description>
            </item>
            <item>
              <term>1 </term>
              <description>Zum Anfang des Zeitraums</description>
            </item>
          </list>
          <para>Stellen Sie sicher, dass Sie die zur Angabe von Zins und Zzr verwendeten Einheiten einheitlich verwenden. Wenn Sie für eine vierjährige Anleihe mit jährlichen Zinsen von 12 Prozent monatliche Zahlungen tätigen, verwenden Sie 12%/12 für Zins und 4*12 für Zzr. Wenn Sie für dieselbe Anleihe jährliche Zahlungen tätigen, verwenden Sie 12% für Zins und 4 für Zzr.</para>
          <para>Für alle Argumente gilt, dass Geldbeträge, die Sie auszahlen (z. B. Spareinlagen), durch negative Zahlen und Geldbeträge, die Sie einnehmen (z. B. Dividenden), durch positive Zahlen dargestellt werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FVSchedule">
      <MemberSignature Language="C#" Value="public double FVSchedule (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 FVSchedule([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FVSchedule(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FVSchedule (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double FVSchedule(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16860)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Kapital – der gegenwärtige Wert.</param>
        <param name="Arg2">Zinsen – ein Array anzuwendender Zinssätze.</param>
        <summary>Gibt den aufgezinsten Wert des Anfangskapitals für eine Reihe periodisch unterschiedlicher Zinssätze zurück. Mit FVSCHEDULE können Sie den zukünftigen Wert einer Investition berechnen, für die ein variabler oder wechselnder Zinssatz vereinbart ist.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die werte im Zeitplan können Zahlen oder leere Zellen sein. Jeder andere Wert erzeugt die #VALUE! Fehlerwert für <b>FVSchedule</b>. Leere Zellen werden als Nullen (kein Interesse) verwendet.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma">
      <MemberSignature Language="C#" Value="public double Gamma (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16959)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, für den Gamma berechnet werden soll.</param>
        <summary>Gibt den Wert der Gammafunktion zurück.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Dist">
      <MemberSignature Language="C#" Value="public double Gamma_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16879)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, für den die Verteilung ausgewertet werden soll.</param>
        <param name="Arg2">Alpha – ein Parameter für die Verteilung.</param>
        <param name="Arg3">Beta – ein Parameter für die Verteilung. Wenn Beta = 1 <b>ist, gibt Gamma_Dist</b> die standard Gammaverteilung zurück.</param>
        <param name="Arg4">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn kumulativ <b>true</b>ist, <b>gibt Gamma_Dist</b> die kumulierte Verteilungsfunktion zurück. Wenn <b>false,</b>gibt sie die Wahrscheinlichkeitsdichtefunktion zurück.</param>
        <summary>Gibt die Gammaverteilung zurück. Mit dieser Funktion können Sie Variablen untersuchen, die eine schiefe Verteilung besitzen. Die Gammaverteilung wird häufig bei Warteschlangenanalysen verwendet.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn x, alpha oder beta nicht numerisch ist, <b>Gamma_Dist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x &lt; 0, <b>gibt Gamma_Dist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If alpha ≤ 0 or if beta ≤ 0, <b>Gamma_Dist</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für die Gamma-Wahrscheinlichkeitsdichte-Funktion ist: </para>
          <para>Abbildung 1: Gamma-Wahrscheinlichkeitsdichte-Funktion</para>
          <para> </para>
          <para> </para>
          <para>Die standardmäßige Gamma-Wahrscheinlichkeitsdichte-Funktion ist:</para>
          <para>Abbildung 2: Standardfunktion für Gammawahrscheinlichkeitsdichte</para>
          <para> </para>
          <para> </para>
          <para>Wenn alpha = 1 <b>ist, Gamma_Dist</b> die Exponentielle Verteilung mit:</para>
          <para>Abbildung 3: Formel</para>
          <para> </para>
          <para> </para>
          <para>Für eine positive ganze Zahl n, wenn Alpha = n/2, Beta = 2 und kumulativ = <b>true</b>ist, gibt <b>Gamma_Dist</b> (1 - CHIDIST(x)) mit n Freiheitsgrade zurück. </para>
          <para>Wenn alpha eine positive ganze Zahl ist, <b>Gamma_Dist</b> auch als Erlangverteilung bezeichnet.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gamma_Inv">
      <MemberSignature Language="C#" Value="public double Gamma_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gamma_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gamma_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gamma_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16880)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Warsch - Eine der Gammaverteilung zugeordnete Wahrscheinlichkeit.</param>
        <param name="Arg2">Alpha – ein Parameter für die Verteilung.</param>
        <param name="Arg3">Beta – ein Parameter für die Verteilung. Wenn Beta = 1 <b>ist, Gamma_Inv</b> die Standardmäßige Gammaverteilung zurückgegeben.</param>
        <summary>Gibt Perzentile der Gammaverteilung zurück. Wenn p = GAMMA.DIST(x,...), dann GAMMA.INV(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>Mit dieser Funktion können Sie Variablen untersuchen, die möglicherweise eine schiefe Verteilung besitzen.</para>
          <para>Wenn es sich bei einem Argument um <b>Text handelt, gibt Gamma_Inv</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die &lt; Wahrscheinlichkeit 0 oder die Wahrscheinlichkeit &gt; 1 <b>ist, gibt Gamma_Inv</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If alpha ≤ 0 or if beta ≤ 0, <b>Gamma_Inv</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para>Bei einem Wert für die Wahrscheinlichkeit <b>sucht Gamma_Inv</b> diesen Wert x so, dass GAMMA_DIST(x, alpha, beta, TRUE) = wahr ist. Daher hängt die Genauigkeit <b>der Gamma_Inv</b> von der Genauigkeit der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> ab. <b>Gamma_Inv</b> verwendet eine iterative Suchtechnik. Hat die Suche nach 100 Iterationen noch nicht konvergiert, gibt die Funktion den Fehlerwert #N/A zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaDist">
      <MemberSignature Language="C#" Value="public double GammaDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16670)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, für den die Verteilung ausgewertet werden soll.</param>
        <param name="Arg2">Alpha – ein Parameter für die Verteilung.</param>
        <param name="Arg3">Beta – ein Parameter für die Verteilung. Wenn Beta = 1 ist, <b>gibt GammaDist</b> die Standardmäßige Gammaverteilung zurück.</param>
        <param name="Arg4">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn der <b>Kumulierte Wert true</b>ist, gibt <b>GammaDist</b> die kumulierte Verteilungsfunktion zurück. Wenn <b>false,</b>gibt sie die Wahrscheinlichkeitsdichtefunktion zurück.</param>
        <summary>Gibt die Gammaverteilung zurück. Mit dieser Funktion können Sie Variablen untersuchen, die eine schiefe Verteilung besitzen. Die Gammaverteilung wird häufig bei Warteschlangenanalysen verwendet.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> Methode.</para>
          <para>Wenn x, alpha oder beta nicht numerisch ist, gibt <b>GammaDist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x &lt; 0, <b>gibt GammaDist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If alpha ≤ 0 or if beta ≤ 0, <b>GammaDist</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für die Gamma-Wahrscheinlichkeitsdichte-Funktion ist: </para>
          <para>Abbildung 1: Gamma-Wahrscheinlichkeitsdichte-Funktion</para>
          <para> </para>
          <para> </para>
          <para>Die standardmäßige Gamma-Wahrscheinlichkeitsdichte-Funktion ist:</para>
          <para>Abbildung 2: Standardfunktion für Gammawahrscheinlichkeitsdichte</para>
          <para> </para>
          <para> </para>
          <para>Wenn Alpha = 1 ist, <b>gibt GammaDist</b> die Exponentielle Verteilung mit:</para>
          <para>Abbildung 3: Formel</para>
          <para> </para>
          <para> </para>
          <para>Für eine positive ganze Zahl n, wenn Alpha = n/2, Beta = 2 und kumulativ = <b>true</b>ist, <b>gibt GammaDist</b> (1 - CHIDIST(x)) mit n Freiheitsgrade zurück. </para>
          <para>Wenn alpha eine positive ganze Zahl ist, wird <b>GammaDist</b> auch als Erlangverteilung bezeichnet.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaInv">
      <MemberSignature Language="C#" Value="public double GammaInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16671)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Warsch - Eine der Gammaverteilung zugeordnete Wahrscheinlichkeit.</param>
        <param name="Arg2">Alpha – ein Parameter für die Verteilung.</param>
        <param name="Arg3">Beta – ein Parameter für die Verteilung. Wenn Beta = 1 ist, <b>gibt GammaInv</b> die Standardmäßige Gammaverteilung zurück.</param>
        <summary>Gibt die Umkehrung der kumulierten Gammaverteilung zurück. Gilt p = GAMMADIST(x,...), dann gilt GAMMAINV(p,...) = x.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gamma_Inv(System.Double,System.Double,System.Double)" /> Methode.</para>
          <para>Mit dieser Funktion können Sie Variablen untersuchen, die möglicherweise eine schiefe Verteilung besitzen.</para>
          <para>Wenn es sich bei einem Argument um Text handelt, <b>gibt GammaInv</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die &lt; Wahrscheinlichkeit 0 oder die Wahrscheinlichkeit &gt; 1 ist, gibt <b>GammaInv</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn alpha ≤ 0 ist oder beta ≤ 0 ist, <b>gibt GammaInv</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para>Bei einem Wert für die Wahrscheinlichkeit sucht <b>GammaInv</b> diesen Wert x so, dass GAMMADIST(x, alpha, beta, TRUE) = Wahrsch ist. Daher hängt die Genauigkeit von <b>GammaInv</b> von der Genauigkeit von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaDist(System.Double,System.Double,System.Double,System.Boolean)" /> ab. <b>GammaInv verwendet</b> eine iterative Suchtechnik. Wenn die Suche nach 64 Iterationen nicht erfolgreich war, gibt die Funktion den Fehlerwert #N/A zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn">
      <MemberSignature Language="C#" Value="public double GammaLn (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16655)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, für den GAMMALN berechnet werden soll.</param>
        <summary>Gibt den natürlichen Logarithmus der Gammafunktion zurück, Γ(x).</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" /> Methode.</para>
          <para>Wenn x nicht numerisch ist, <b>gibt GammaLn</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x ≤ 0 ist, <b>gibt GammaLn</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Ein Potenzieren der Zahl e mit GAMMALN(i), wobei i eine ganze Zahl ist, führt zu dem gleichen Ergebnis wie (i - 1)!. </para>
          <para>
            <b>GammaLn</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Formel für die GammaLn-Methode</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>Abbildung 2: Formel</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaLn_Precise">
      <MemberSignature Language="C#" Value="public double GammaLn_Precise (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GammaLn_Precise([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GammaLn_Precise(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function GammaLn_Precise (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GammaLn_Precise(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16929)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, für den GAMMALN berechnet werden soll.</param>
        <summary>Gibt den natürlichen Logarithmus der Gammafunktion zurück, Γ(x).</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn x nicht numerisch ist, <b>generiert GammaLn_Precise</b> Methode einen Fehler. </para>
          <para>Wenn x ≤ 0 ist, <b>generiert GammaLn_Precise</b> Methode einen Fehler. </para>
          <para>Ein Potenzieren der Zahl e mit GAMMALN(i), wobei i eine ganze Zahl ist, führt zu dem gleichen Ergebnis wie (i - 1)!. </para>
          <para>GAMMALN wird wie folgt berechnet: </para>
          <para>Abbildung 1: Formel für die GammaLn_Precise A0</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>Abbildung 2: Formel</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Gauss">
      <MemberSignature Language="C#" Value="public double Gauss (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gauss([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gauss(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gauss (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Gauss(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16961)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Der Wert, für den die Verteilung verwendet werden soll.</param>
        <summary>Gibt 0,5 weniger als die standardmäßige normale kumulierte Verteilung zurück.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gcd">
      <MemberSignature Language="C#" Value="public double Gcd (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Gcd([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Gcd(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Gcd (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16857)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – 1 bis 29 Werte. Werte, die keine ganzen Zahlen sind, werden gekürzt.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den größten gemeinsamen Teiler von zwei oder mehr ganzen Zahlen zurück. Der größte gemeinsame Teiler ist die größte ganze Zahl, durch die sowohl Zahl1 als auch Zahl2 dividiert werden können, ohne dass ein Rest bleibt.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Argument nicht numerisch ist, gibt <b>Gcd</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn ein Argument kleiner als Null ist, gibt <b>Gcd</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>1 ist Teiler jeder Zahl (ohne Rest).</para>
          <para>Eine Primzahl hat nur sich selbst und 1 als Teiler.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GeoMean">
      <MemberSignature Language="C#" Value="public double GeoMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeoMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeoMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeoMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16703)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – 1 bis 30 Argumente, deren harmonisches Mittel berechnet werden soll. Anstelle der durch Kommas voneinander getrennten Argumente können Sie auch ein einzelnes Array oder einen Bezug auf ein Array angeben.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt das geometrische Mittel eines Arrays oder eines Bereichs positiver Zahlen zurück. Sie können beispielsweise mit GEOMEAN eine mittlere Wachstumsrate berechnen, wenn für periodisch unterschiedliche Zinssätze variable Zinssätze gegeben sind.</summary>
        <returns>To be added.</returns>
        <remarks><para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn ein Datenpunkt ≤ 0 ist, gibt <b>GeoMean</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für das geometrische Mittel lautet: 

 </para>
          <para>Abbildung 1: Gleichung für das geometrische Mittel</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="GeStep">
      <MemberSignature Language="C#" Value="public double GeStep (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GeStep([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.GeStep(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GeStep (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16803)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – der Wert, der gegen Schritt geprüft werden soll.</param>
        <param name="Arg2">Schritt – der Schwellenwert. Wenn Sie einen Wert für schritt auslassen, <b>verwendet GeStep</b> Null.</param>
        <summary>Gibt den Wert 1 zurück, wenn Zahl ≥ Schritt gilt; andernfalls gibt sie 0 (Null) zurück. Mit dieser Funktion können Sie eine Gruppe von Werten filtern. Wenn Sie beispielsweise mehrere <b>GeStep-Funktionen</b> summieren, berechnen Sie die Anzahl der Werte, die einen Schwellenwert überschreiten.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Argument nicht numerisch ist, <b>gibt GeStep</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Growth">
      <MemberSignature Language="C#" Value="public object Growth (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Growth([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Growth (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16436)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bekannte_y – die y-Werte, die Ihnen aus der jeweiligen Beziehung y = b*m^x bereits bekannt sind.</param>
        <param name="Arg2">Bekannt_x – eine optionale Gruppe von x-Werten, die Ihnen aus der Beziehung y = b*m^x eventuell bereits bekannt sind.</param>
        <param name="Arg3">New_x - neue x-Werte, für die <b>Growth</b> entsprechende y-Werte zurückgeben soll.</param>
        <param name="Arg4">Konstante – ein Wahrheitswert, mit dem angegeben wird, ob erzwungen werden soll, dass die Konstante b gleich 1 sein soll.</param>
        <summary>Berechnet das prognostizierte exponentielle Wachstum anhand vorhandener Daten. <b>Growth</b> gibt die y-Werte für eine Reihe neuer x-Werte zurück, die Sie mithilfe vorhandener x- und y-Werte angeben. Sie können auch die Arbeitsblattfunktion <b>"Wachstum"</b> verwenden, um eine exponentiale Kurve an vorhandene x- und y-Werte zu passen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn sich das Array Y_Werte in einer einzelnen Spalte befindet, wird jede Spalte mit X_Werte als separate Variable interpretiert.</para>
          <para>Wenn sich das Array Bekannt_y in einer einzelnen Zeile befindet, wird jede Zeile mit Bekannt_x als separate Variable interpretiert.</para>
          <para>Wenn eine der Zahlen in known_y 0 oder negativ ist, gibt <b>Growth</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Das Array Bekannt_x kann eine oder mehrere Gruppen mit Variablen enthalten. Wenn nur eine Variable verwendet wird, können Bekannt_y und Bekannt_x Bereiche beliebiger Form darstellen, solange sie gleiche Abmessungen aufweisen. Wenn mehrere Variablen verwendet werden, muss Bekannt_y einen Vektor darstellen (d. h. einen Bereich mit einer Höhe von einer Zeile oder einer Breite von einer Spalte).</para>
          <para>Wenn Bekannt_x ausgelassen wird, wird angenommen, dass dies dem Array {1,2,3,...} entspricht, das dieselbe Größe wie Bekannt_y aufweist.</para>
          <para>Neue_X_Werte muss genau wie Bekannt_x eine Spalte (oder Zeile) für jede unabhängige Variable enthalten. Demnach müssen Bekannt_x und Neue_X_Werte dieselbe Anzahl von Spalten aufweisen, wenn Bekannt_y sich in einer einzelnen Spalte befindet. Wenn sich Bekannt_y in einer einzelnen Zeile befindet, müssen Bekannt_x und Neue_X_Werte dieselbe Anzahl von Zeilen aufweisen. </para>
          <para>Wenn Neue_X_Werte ausgelassen wird, wird angenommen, dass dies Bekannt_x entspricht. </para>
          <para>Wenn sowohl known_x als auch new_x ausgelassen werden, wird davon ausgegangen, dass es sich um das Array {1,2,3,...} handelt. die die gleiche Größe wie known_y hat. </para>
          <para>Wenn Dies <b>der Fall ist oder</b> ausgelassen wird, wird b normal berechnet. </para>
          <para>Wenn Const false <b>ist,</b>wird b gleich 1 festgelegt, und die m-Werte werden so angepasst, dass y = m^x ist. </para>
          <para>Formeln, die ihre Ergebnisse als Arrays zurückgeben, müssen, nachdem die richtige Anzahl von Zellen markiert ist, als Arrayformeln eingegeben werden.</para>
          <para>Wenn Sie eine Arraykonstante für ein Argument wie Bekannt_x eingeben, verwenden Sie Kommas, um Werte in derselben Zeile zu trennen, und Semikolons, um Zeilen zu trennen.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HarMean">
      <MemberSignature Language="C#" Value="public double HarMean (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HarMean([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HarMean(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HarMean (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16704)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – 1 bis 30 Argumente, deren harmonisches Mittel berechnet werden soll. Anstelle der durch Kommas voneinander getrennten Argumente können Sie auch ein einzelnes Array oder einen Bezug auf ein Array angeben.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt das harmonische Mittel einer Datenmenge zurück. Ein harmonisches Mittel ist der Kehrwert eines aus Kehrwerten berechneten arithmetischen Mittels.</summary>
        <returns>To be added.</returns>
        <remarks><para>Das harmonische Mittel ist immer kleiner als das geometrische Mittel, das wiederum immer kleiner als das arithmetische Mittel ist.</para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn ein Datenpunkt ≤ 0 ist, <b>gibt HarMean</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. Die Formel für das harmonische Mittel lautet: 

 </para>
          <para>Abbildung 1: Gleichung für das harmonische Mittel</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Bin">
      <MemberSignature Language="C#" Value="public string Hex2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16768)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die hexadezimale Zahl, die umgewandelt werden soll. Zahl darf nicht mehr als 10 Zeichen enthalten. Das signifikanteste Bit von Zahl ist das Vorzeichenbit (40. Bit von rechts). Die verbleibenden 9 Bits sind Größenbits. Negative Zahlen werden in der Zweier-Komplement-Notation dargestellt.</param>
        <param name="Arg2">Stellen – die zu verwendende Anzahl von Zeichen. Wenn Stellen weggelassen werden, <b>verwendet Hex2Bin</b> die mindestens erforderliche Anzahl von Zeichen. Das Argument Stellen ist speziell dann hilfreich, wenn der jeweilige Rückgabewert mit führenden 0-en (Nullen) aufgefüllt werden soll.</param>
        <summary>Wandelt eine hexadezimale Zahl in eine binäre Zahl um.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn "Zahl" negativ ist, <b>ignoriert Hex2Bin</b> stellen und gibt eine 10 Zeichen große binäre Zahl zurück. </para>
          <para>Ist Zahl negativ, darf sie nicht kleiner als FFFFFFFE00 sein, und ist Zahl positiv, darf sie nicht größer als 1FF sein. </para>
          <para>Wenn es sich bei "Zahl" nicht um eine gültige Hexadezimalzahl handelt, gibt <b>Hex2Bin</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn <b>Hex2Bin</b> mehr Als-Stellen-Zeichen erfordert, wird die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn die Stellen nicht numerisch sind, <b>gibt Hex2Bin die</b> #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die Stellen negativ sind, <b>gibt Hex2Bin die</b> #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Dec">
      <MemberSignature Language="C#" Value="public string Hex2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Hex2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16769)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die hexadezimale Zahl, die umgewandelt werden soll. Zahl darf nicht mehr als 10 Zeichen (40 Bits) enthalten. Das signifikanteste Bit von Zahl ist das Vorzeichenbit. Die verbleibenden 39 Bits sind Größenbits. Negative Zahlen werden in der Zweier-Komplement-Notation dargestellt.</param>
        <summary>Wandelt eine hexadezimale Zahl in eine Dezimalzahl um.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn es sich bei "Zahl" nicht um eine gültige hexadezimale Zahl handelt, gibt <b>Hex2Dec</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Hex2Oct">
      <MemberSignature Language="C#" Value="public string Hex2Oct (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Hex2Oct([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Hex2Oct(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex2Oct (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16770)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die hexadezimale Zahl, die umgewandelt werden soll. Zahl darf nicht mehr als 10 Zeichen enthalten. Das signifikanteste Bit von Zahl ist das Vorzeichenbit. Die verbleibenden 39 Bits sind Größenbits. Negative Zahlen werden in der Zweier-Komplement-Notation dargestellt.</param>
        <param name="Arg2">Stellen – die zu verwendende Anzahl von Zeichen. Wenn Stellen weggelassen werden, <b>verwendet Hex2Oct</b> die mindestens erforderliche Anzahl von Zeichen. Das Argument Stellen ist speziell dann hilfreich, wenn der jeweilige Rückgabewert mit führenden 0-en (Nullen) aufgefüllt werden soll.</param>
        <summary>Wandelt eine hexadezimale Zahl in eine Oktalzahl um.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn "Zahl" negativ ist, <b>ignoriert Hex2Oct</b> Stellen und gibt eine oktale Zahl mit 10 Zeichen zurück. </para>
          <para>Ist Zahl negativ, darf der Wert nicht kleiner als FFE0000000 sein, und ist Zahl positiv, darf der Wert nicht größer als 1FFFFFFF sein. </para>
          <para>Wenn es sich bei "Zahl" nicht um eine gültige Hexadezimalzahl handelt, gibt <b>Hex2Oct</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn <b>Hex2Oct mehr</b> Als-Stellen-Zeichen erfordert, wird die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn die Stellen nicht numerisch sind, <b>gibt Hex2Oct</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die Stellen negativ sind, <b>gibt Hex2Oct</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HLookup">
      <MemberSignature Language="C#" Value="public object HLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object HLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16485)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Suchkriterium - der Wert, der in der ersten Zeile der Tabelle gefunden werden soll. Suchkriterium kann ein Wert, ein Bezug oder eine Zeichenfolge sein.</param>
        <param name="Arg2">Array - eine Tabelle mit Informationen, in der Daten gesucht werden. Verwenden Sie einen Bezug auf einen Bereich oder einen Bereichsnamen.</param>
        <param name="Arg3">Zeilenindex - ist die Nummer der Zeile in Array, aus der der entsprechende Wert zurückgegeben wird. Ein Zeilenindex von 1 gibt den ersten Zeilenwert in Array zurück, ein Zeilenindex von 2 gibt den zweiten Zeilenwert in Array zurück usw. Wenn row_index_num kleiner als 1 ist, <b>gibt HLookup</b> die #VALUE! Fehlerwert; Wenn row_index_num größer ist als die Anzahl der Zeilen in table_array, gibt <b>HLookup</b> den Wert #REF! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</param>
        <param name="Arg4">Range_lookup - ein Wahrheitswert, der angibt, ob <b>HLookup</b> eine genaue Übereinstimmung oder eine ungefähre Übereinstimmung finden soll. Bei <b>"true"</b> oder "omitted" wird eine ungefähre Übereinstimmung zurückgegeben. Anders ausgedrückt, wird der nächstgrößere Wert zurückgegeben, der kleiner als Suchkriterium ist, wenn keine genaue Entsprechung gefunden wird. Bei <b>"false"</b> <b>findet HLookup</b> eine genaue Übereinstimmung. Wenn keine Übereinstimmung gefunden wird, wird der Fehlerwert #N/A zurückgegeben.</param>
        <summary>Sucht in der obersten Zeile einer Tabelle oder eines Arrays nach Werten und gibt dann in der gleichen Spalte einen Wert aus einer Zeile zurück, die Sie in der Tabelle oder dem Array angeben. Verwenden Sie HLookup, wenn sich die Vergleichswerte in einer Zeile am oberen Rand einer Datentabelle befinden und Sie eine angegebene Anzahl von Zeilen nach unten suchen möchten. Wird verwendet, wenn sich die Vergleichswerte in einer Spalte links neben den daten befinden, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> die Sie suchen möchten.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn <b>HLookup</b> den Wert lookup_value und range_lookup <b>true</b>ist, wird der größte Wert verwendet, der kleiner als lookup_value. </para>
          <para>Wenn lookup_value kleiner als der kleinste Wert in der ersten Zeile table_array ist, gibt <b>HLookup</b> den Fehlerwert #N/A zurück. </para>
          <para>Wenn Bereich_Verweis FALSE ist und Suchkriterium Text ist, können Sie in Suchkriterium die Platzhalterzeichen Fragezeichen (?) und Sternchen (*) verwenden. Mit einem Fragezeichen erfolgt ein Abgleich mit jedem einzelnen Zeichen; mit einem Sternchen erfolgt ein Abgleich mit einer beliebigen Abfolge von Zeichen. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, geben Sie vor dem Zeichen eine Tilde (~) ein.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeom_Dist">
      <MemberSignature Language="C#" Value="public double HypGeom_Dist (double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]bool Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeom_Dist(double Arg1, double Arg2, double Arg3, double Arg4, bool Arg5);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16919)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Erfolge_S – die Anzahl der in der Stichprobe erzielten Erfolge.</param>
        <param name="Arg2">Umfang_S – der Umfang der Stichprobe.</param>
        <param name="Arg3">Erfolge_G – die Anzahl der in der Grundgesamtheit möglichen Erfolge.</param>
        <param name="Arg4">Umfang_G – der Umfang der Grundgesamtheit.</param>
        <param name="Arg5">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn der <b>Kumulierte Wert true</b>ist, gibt <b>HypGeom_Dist</b> die kumulierte Verteilungsfunktion zurück. wenn <b>false</b>, gibt sie die Wahrscheinlichkeits-Massenfunktion zurück.</param>
        <summary>Gibt die hypergeometrische Verteilung zurück. <b>HypGeom_Dist</b> gibt die Wahrscheinlichkeit einer bestimmten Anzahl von Beispielerfolgen zurück, wenn die Größe der Stichprobe, die Erfolge der Grundgesamtheit und die Größe der Grundgesamtheit angegeben sind. Verwenden <b>HypGeom_Dist</b> für Probleme mit einer begrenzten Grundgesamtheit, bei denen jede Beobachtung entweder ein Erfolg oder ein Fehler ist und bei der jede Teilmenge einer bestimmten Größe mit gleicher Wahrscheinlichkeit ausgewählt wird.</summary>
        <returns>To be added.</returns>
        <remarks><para>Alle Argumente werden zu ganzen Zahlen gekürzt. </para>
          <para>Wenn eines der Argumente nicht numerisch ist, <b>HypGeom_Dist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn sample_s 0 oder sample_s größer als der kleinere von number_sample oder population_s ist, gibt HypGeom_Dist den Wert &lt; #NUM! <b></b> Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn sample_s kleiner als 0 oder (number_sample - number_population + population_s) ist, gibt <b>HypGeom_Dist</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn number_sample ≤ 0 oder number_sample &gt; number_population, gibt <b>HypGeom_Dist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn population_s ≤ 0 oder population_s &gt; number_population, <b>gibt HypGeom_Dist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn number_population ≤ 0 ist, <b>gibt HypGeom_Dist</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für die hypergeometrische Verteilung ist: </para>
          <para>Abbildung 1: Gleichung für die hypergeometrische Verteilung</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>x = sample_s</para>
          <para>n = number_sample</para>
          <para>M = population_s</para>
          <para>N = number_population</para>
          <para>
            <b>HypGeom_Dist</b> wird bei Sampling ohne Ersatz aus einer begrenzten Grundgesamtheit verwendet.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HypGeomDist">
      <MemberSignature Language="C#" Value="public double HypGeomDist (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 HypGeomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeomDist(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function HypGeomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double HypGeomDist(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16673)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Erfolge_S – die Anzahl der in der Stichprobe erzielten Erfolge.</param>
        <param name="Arg2">Umfang_S – der Umfang der Stichprobe.</param>
        <param name="Arg3">Erfolge_G – die Anzahl der in der Grundgesamtheit möglichen Erfolge.</param>
        <param name="Arg4">Umfang_G – der Umfang der Grundgesamtheit.</param>
        <summary>Gibt die hypergeometrische Verteilung zurück. <b>HypGeomDist</b> gibt die Wahrscheinlichkeit einer bestimmten Anzahl von Beispielerfolgen zurück, wenn die Größe der Stichprobe, die Erfolge der Grundgesamtheit und die Grundgesamtheitsgröße angegeben sind. Verwenden <b>Sie HypGeomDist</b> für Probleme mit einer begrenzten Grundgesamtheit, bei denen jede Beobachtung entweder ein Erfolg oder ein Fehler ist und jede Teilmenge einer bestimmten Größe mit gleicher Wahrscheinlichkeit ausgewählt wird.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HypGeom_Dist(System.Double,System.Double,System.Double,System.Double,System.Boolean)" /> Methode.</para>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt. </para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>HypGeomDist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn sample_s 0 oder sample_s größer als der kleinere von number_sample oder population_s ist, gibt &lt; <b>HypGeomDist</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn sample_s kleiner als 0 oder (number_sample - number_population + population_s) ist, gibt <b>HypGeomDist</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn number_sample ≤ 0 oder number_sample &gt; number_population, gibt HYPGEOMDIST die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn population_s ≤ 0 oder population_s number_population, gibt &gt; <b>HypGeomDist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn number_population ≤ 0 ist, <b>gibt HypGeomDist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für die hypergeometrische Verteilung ist: </para>
          <para>Abbildung 1: Gleichung für die hypergeometrische Verteilung</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>x = sample_s</para>
          <para>n = number_sample</para>
          <para>M = population_s</para>
          <para>N = number_population</para>
          <para>
            <b>HypGeomDist</b> wird in Sampling ohne Ersatz aus einer begrenzten Grundgesamtheit verwendet.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IfError">
      <MemberSignature Language="C#" Value="public object IfError (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfError([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfError(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfError (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfError(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16864)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Value - das Argument, das auf einen Fehler überprüft wird.</param>
        <param name="Arg2">Value_if_error - der zurückzugebende Wert, wenn die Formel mit einem Fehler ausgewertet wird. Die folgenden Fehlertypen werden ausgewertet: #N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME? oder #NULL!.</param>
        <summary>Gibt einen angegebenen Wert zurück, wenn eine Formel mit einem Fehler ausgewertet wird; andernfalls wird das Ergebnis der Formel zurückgegeben. Verwenden Sie die <b>IfError-Funktion,</b> um Fehler in einer Formel zu auffangen und zu behandeln.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn wert oder value_if_error eine leere Zelle ist, behandelt <b>IfError</b> ihn als leeren Zeichenfolgenwert (""). </para>
          <para>Wenn es sich bei dem Wert um eine Arrayformel handelt, gibt <b>IfError</b> ein Array von Ergebnissen für jede Zelle im im Wert angegebenen Bereich zurück. Siehe das zweite der unten stehenden Beispiele.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IfNa">
      <MemberSignature Language="C#" Value="public object IfNa (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object IfNa([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IfNa(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IfNa (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ IfNa(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16974)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">wert: Ein beliebiger Wert oder Ausdruck oder Bezug.</param>
        <param name="Arg2">value_if_na: Ein beliebiger Wert oder Ausdruck oder Bezug.</param>
        <summary>Gibt den von Ihnen angegebenen Wert zurück, wenn der Ausdruck in #N/A aufgelöst wird, andernfalls wird das Ergebnis des Ausdrucks zurückgegeben.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImAbs">
      <MemberSignature Language="C#" Value="public string ImAbs (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImAbs([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImAbs(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImAbs (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImAbs(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16783)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, deren Absolutwert ermittelt werden soll.</param>
        <summary>Gibt den Absolutwert (Modulo) einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren. </para>
          <para>Der absolute Wert einer komplexen Zahl ist: </para>
          <para>Abbildung 1: Gleichung für den absoluten Wert einer komplexen Zahl</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>z = x + yi</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Imaginary">
      <MemberSignature Language="C#" Value="public double Imaginary (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Imaginary([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Imaginary(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Imaginary (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Imaginary(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16793)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – die komplexe Zahl, deren Imaginärteil bestimmt werden soll.</param>
        <summary>Gibt den Imaginärteil einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImArgument">
      <MemberSignature Language="C#" Value="public string ImArgument (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImArgument([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImArgument(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImArgument (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImArgument(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16791)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">"Inumber" ist eine komplexe Zahl, für die das Argument "theta" gelten soll.</param>
        <summary>Gibt das Argument (Theta) zurück, einen Winkel, der in Bogenmaß ausgedrückt wird, so, dass:</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren. </para>
          <para>
            <b>ImArgument</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Formel für die ImArgument -Methode</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>Abbildung 2: Formel</para>
          <para> </para>
          <para> </para>
          <para>und</para>
          <para>z = x + yi</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImConjugate">
      <MemberSignature Language="C#" Value="public string ImConjugate (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImConjugate([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImConjugate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImConjugate (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImConjugate(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16792)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, deren konjugierte Zahl bestimmt werden soll.</param>
        <summary>Gibt die konjugierte komplexe Zahl zu einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren. </para>
          <para>Die konjugierte Zahl einer komplexen Zahl wird wie folgt berechnet: </para>
          <para>Abbildung 1: Gleichung für das Konjugieren einer komplexen Zahl</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCos">
      <MemberSignature Language="C#" Value="public string ImCos (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCos([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCos(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCos (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCos(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16789)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, deren Kosinus berechnet werden soll.</param>
        <summary>Gibt den Kosinus einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren. </para>
          <para>Wenn "inumber" ein Wahrheitswert ist, gibt <b>ImCos</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Der Kosinus einer komplexen Zahl wird wie folgt berechnet: 

 </para>
          <para>Abbildung 1: Kosinus einer komplexen Zahl</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCosh">
      <MemberSignature Language="C#" Value="public string ImCosh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCosh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCosh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCosh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCosh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16978)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe Zahl, für die der hyperbolische Kosinus sein soll.</param>
        <summary>Gibt den hyperbolischen Kosinus einer komplexen Zahl zurück.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCot">
      <MemberSignature Language="C#" Value="public string ImCot (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCot([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCot(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCot (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCot(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16941)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe Zahl, für die der Gitterangens vorhanden sein soll.</param>
        <summary>Gibt den Cotangent einer komplexen Zahl zurück.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsc">
      <MemberSignature Language="C#" Value="public string ImCsc (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsc([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsc(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsc (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsc(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16942)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe Zahl, für die der Kosean verwendet werden soll.</param>
        <summary>Gibt den Koseisten einer komplexen Zahl zurück.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImCsch">
      <MemberSignature Language="C#" Value="public string ImCsch (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImCsch([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImCsch(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImCsch (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImCsch(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16943)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe Zahl, für die der hyperbolische Koseizant verwendet werden soll.</param>
        <summary>Gibt den hyperbolischen Kosegen einer komplexen Zahl zurück.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImDiv">
      <MemberSignature Language="C#" Value="public string ImDiv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImDiv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImDiv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImDiv (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImDiv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16781)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl1 – der komplexe Zähler oder Dividend.</param>
        <param name="Arg2">Komplexe_Zahl2 – der komplexe Nenner oder Divisor.</param>
        <summary>Gibt den Quotienten zweier komplexer Zahlen im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren. </para>
          <para>Der Quotient zweier komplexer Zahlen wird wie folgt berechnet: 

 </para>
          <para>Abbildung 1: Quotient zweier komplexer Zahlen</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImExp">
      <MemberSignature Language="C#" Value="public string ImExp (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImExp([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImExp(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImExp (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImExp(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16790)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, deren exponentieller Wert berechnet werden soll.</param>
        <summary>Gibt den exponentiellen Wert einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren. </para>
          <para>Der exponentielle Wert einer komplexen Zahl wird wie folgt berechnet: 

 </para>
          <para>Abbildung 1: Exponentiell einer komplexen Zahl</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLn">
      <MemberSignature Language="C#" Value="public string ImLn (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLn([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLn(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLn (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLn(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16785)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, deren natürlicher Logarithmus bestimmt werden soll.</param>
        <summary>Gibt den natürlichen Logarithmus einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren. </para>
          <para>Der natürliche Logarithmus einer komplexen Zahl ist: </para>
          <para>Abbildung 1: Natürlicher Logarithmus einer komplexen Zahl</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>Abbildung 2: Formel</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog10">
      <MemberSignature Language="C#" Value="public string ImLog10 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog10([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog10(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog10 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog10(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16787)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, deren gewöhnlicher Logarithmus bestimmt werden soll.</param>
        <summary>Gibt den gewöhnlichen Logarithmus einer komplexen Zahl zur Basis 10 im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren. </para>
          <para>Der gewöhnliche Logarithmus einer komplexen Zahl kann wie folgt aus dem natürlichen Logarithmus berechnet werden: 

 </para>
          <para>Abbildung 1: Gleichung für den allgemeinen Logarithmus einer komplexen Zahl</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImLog2">
      <MemberSignature Language="C#" Value="public string ImLog2 (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImLog2([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImLog2(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImLog2 (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImLog2(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16786)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, deren Logarithmus zur Basis 2 bestimmt werden soll.</param>
        <summary>Gibt den Logarithmus einer komplexen Zahl zur Basis 2 im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren. </para>
          <para>Der Logarithmus einer komplexen Zahl zur Basis 2 kann wie folgt aus dem natürlichen Logarithmus berechnet werden: 

 </para>
          <para>Abbildung 1: Gleichung für den Logarithmus der Basis 2 einer komplexen Zahl</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImPower">
      <MemberSignature Language="C#" Value="public string ImPower (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImPower([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImPower(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImPower (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImPower(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16782)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, die Sie in eine Potenz erheben möchten.</param>
        <param name="Arg2">Zahl – der Exponent, mit dem Sie die komplexe Zahl potenzieren möchten.</param>
        <summary>Gibt eine komplexe Zahl im Textformat x + yi oder x + yj zurück, die potenziert wurde.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren. </para>
          <para>Wenn die Zahl nicht numerisch ist, <b>gibt ImPower</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Zahl kann eine ganze Zahl, ein Bruch oder negativ sein. </para>
          <para>Eine komplexe Zahl, die auf eine Energie erhöht wird, wird wie folgt berechnet: </para>
          <para>Abbildung 1: Komplexe Formelnummer, die in eine Leistung gehoben wird</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>Abbildung 2: Formel</para>
          <para> </para>
          <para> </para>
          <para>und:</para>
          <para>Abbildung 3: Formel</para>
          <para> </para>
          <para> </para>
          <para>und:</para>
          <para>Abbildung 4: Formel</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImProduct">
      <MemberSignature Language="C#" Value="public string ImProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16797)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Inumber1, inumber2,... – 1 bis 29 miteinander zu multiplizierende komplexe Zahlen.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt das Produkt von 2 bis 29 komplexen Zahlen im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren. </para>
          <para>Das Produkt zweier komplexer Zahlen wird wie folgt berechnet:</para>
          <para>Abbildung 1: Produkt von zwei komplexen Zahlen</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImReal">
      <MemberSignature Language="C#" Value="public double ImReal (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ImReal([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImReal(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImReal (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ImReal(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16794)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – die komplexe Zahl, deren Realteil bestimmt werden soll.</param>
        <summary>Gibt den Realteil einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSec">
      <MemberSignature Language="C#" Value="public string ImSec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16944)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe Zahl, für die der hyperbolische Koseizant verwendet werden soll.</param>
        <summary>Gibt den hyperbolischen Kosegen einer komplexen Zahl zurück.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSech">
      <MemberSignature Language="C#" Value="public string ImSech (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSech([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSech(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSech (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSech(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16945)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe Zahl, für die der hyperbolische Sekant erstellt werden soll.</param>
        <summary>Gibt den Sekant einer komplexen Zahl zurück.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSin">
      <MemberSignature Language="C#" Value="public string ImSin (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSin([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSin(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSin (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSin(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16788)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – eine komplexe Zahl, deren Sinus berechnet werden soll.</param>
        <summary>Gibt den Sinus einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren. </para>
          <para>Der Sinus einer komplexen Zahl wird wie folgt berechnet: 

 </para>
          <para>Abbildung 1: Sinus einer komplexen Zahl</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSinh">
      <MemberSignature Language="C#" Value="public string ImSinh (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSinh([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSinh(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSinh (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSinh(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16977)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe Zahl, für die der hyperbolische Sinus sein soll.</param>
        <summary>Gibt den hyperbolischen Sinus einer komplexen Zahl zurück.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSqrt">
      <MemberSignature Language="C#" Value="public string ImSqrt (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSqrt([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSqrt(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSqrt (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSqrt(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16784)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl – die komplexe Zahl, deren Quadratwurzel Sie berechnen möchten.</param>
        <summary>Gibt die Quadratwurzel einer komplexen Zahl im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren. Die Quadratwurzel einer komplexen Zahl ist: </para>
          <para>Abbildung 1: Quadratwurzel einer komplexen Zahl</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>Abbildung 2: Formel</para>
          <para> </para>
          <para> </para>
          <para>und:</para>
          <para>Abbildung 3: Formel</para>
          <para> </para>
          <para> </para>
          <para>und:</para>
          <para>Abbildung 4: Formel</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSub">
      <MemberSignature Language="C#" Value="public string ImSub (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSub([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSub(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSub (Arg1 As Object, Arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImSub(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16780)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl1 – die komplexe Zahl, von der Komplexe_Zahl2 subtrahiert werden soll.</param>
        <param name="Arg2">Komplexe_Zahl2 – die komplexe Zahl, die von Komplexe_Zahl1 subtrahiert werden soll.</param>
        <summary>Gibt die Differenz zweier komplexer Zahlen im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren.</para>
          <para>Der Differenz zweier komplexer Zahlen wird wie folgt berechnet: 

</para>
          <para>Abbildung 1: Unterschied zweier komplexer Zahlen</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImSum">
      <MemberSignature Language="C#" Value="public string ImSum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImSum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImSum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16796)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe_Zahl1,Komplexe_Zahl2,... – 1 bis 29 komplexe Zahlen, die addiert werden sollen.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt die Summe komplexer Zahlen im Textformat x + yi oder x + yj zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wird <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Complex(System.Object,System.Object,System.Object)" /> verwendet, um reale und imaginäre Koeffizienten in eine komplexe Zahl zu konvertieren. </para>
          <para>Der Summe zweier komplexer Zahlen wird wie folgt berechnet: 

</para>
          <para>Abbildung 1: Summe von zwei komplexen Zahlen</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ImTan">
      <MemberSignature Language="C#" Value="public string ImTan (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImTan([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ImTan(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImTan (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ImTan(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16940)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Komplexe Zahl, für die sie den Tangens haben möchten.</param>
        <summary>Gibt den Tangens einer komplexen Zahl zurück.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public object Index (object Arg1, double Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Index([in]object Arg1, [in]float64 Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Index(System.Object,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Index (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16413)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array oder Bezug – ein Bereich von Zellen oder eine Arraykonstante. Für Bezüge ist dies der Bezug auf einen oder mehrere Bereiche von Zellen.</param>
        <param name="Arg2">Zeile – wählt die Zeile in Array aus, aus der ein Wert zurückgegeben werden soll. Wenn Zeile nicht angegeben wird, ist Spalte erforderlich. Für Bezüge ist dies die Nummer der Zeile in Bezug, aus der ein Bezug zurückgegeben werden soll.</param>
        <param name="Arg3">Spalte – wählt die Spalte in Array aus, aus der ein Wert zurückgegeben werden soll. Wenn Spalte nicht angegeben wird, ist Zeile erforderlich. Für Bezug ist dies die Nummer der Spalte in Bezug, aus der ein Bezug zurückgegeben werden soll.</param>
        <param name="Arg4">Bereich – wird nur beim Zurückgeben von Bezügen verwendet. Wählt einen Bereich in Bezug aus, aus dem die Schnittmenge von Zeile und Spalte zurückgegeben werden soll. Der erste ausgewählte oder eingegebene Bereich wird mit 1 nummeriert, der zweite mit 2, usw. Wenn area_num ausgelassen wird, verwendet <b>Index</b> Denkbereich 1.</param>
        <summary>Gibt einen Wert oder einen Bezug auf einen Wert aus einer Tabelle oder einem Bereich zurück. Es gibt zwei Formen der <b>Indexfunktion:</b> das Arrayformular und das Bezugsformular.</summary>
        <returns>To be added.</returns>
        <remarks><para>Arrayversion</para>
          <para>Gibt den Wert eines Elements in einer Tabelle oder einem Array zurück, ausgewählt anhand der Zeilen- und Spaltennummerindizes.</para>
          <para>Verwenden Sie die Arrayform, wenn das erste Argument von <b>Index</b> eine Arraykonstante ist.</para>
          <para>Wenn die Argumente row_num und column_num verwendet werden, gibt <b>Index</b> den Wert in der Zelle am Schnittpunkt von row_num und column_num. </para>
          <para>Wenn Sie den Wert row_num oder column_num 0 (Null) festlegen, gibt <b>Index</b> das Array der Werte für die gesamte Spalte bzw. Zeile zurück. Um die zurückgegebenen Werte als <b></b> Array zu verwenden, geben Sie die Indexfunktion als Arrayformel in einem horizontalen Zellbereich für eine Zeile und in einem vertikalen Zellbereich für eine Spalte ein. Drücken Sie die Tastenkombination STRG+UMSCHALT+EINGABE, um eine Arrayformel einzugeben. </para>
          <para>Row_num und column_num müssen auf eine Zelle innerhalb eines Arrays zeigen. andernfalls <b>gibt Index</b> die #REF! #REF! zurück. </para>
          <para>Referenzformular</para>
          <para>Gibt den Bezug der Zelle zurück, in der sich eine bestimmte Zeile und Spalte schneiden. Verbergen sich hinter dem Argument Bezug nicht zusammenhängende Markierungen, können Sie die Markierung angeben, die ausgewertet werden soll. Wenn jeder Bereich in Bezug nur eine Zeile bzw. Spalte enthält, ist das Argument Zeile bzw. Spalte optional. Verwenden Sie beispielsweise für einen Bezug mit einer einzigen Zeile INDEX(Bezug,,Spalte).</para>
          <para>Nachdem mit Bezug und Bereich ein bestimmter Bereich markiert wurde, wird von Zeile und Spalte eine bestimmte Zelle markiert: Zeile 1 ist die erste Zeile im Bereich, Spalte 1 ist die erste Spalte, usw. Der vom Index <b>zurückgegebene</b> Verweis ist der Schnittpunkt von row_num und column_num. </para>
          <para>Wenn Sie den Wert row_num oder column_num 0 (Null) festlegen, gibt <b>Index</b> den Verweis für die gesamte Spalte bzw. Zeile zurück.</para>
          <para>Row_num, column_num und area_num müssen auf eine Zelle innerhalb des Bezugs verweisen. andernfalls <b>gibt Index</b> die #REF! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. Wenn row_num und column_num ausgelassen werden, gibt <b>Index</b> den bereich zurück, der in Bezug auf die angegebene area_num. </para>
          <para>Das Ergebnis der <b>Indexfunktion</b> ist ein Verweis und wird von anderen Formeln als solche interpretiert. Abhängig von der jeweiligen Formel kann ein von INDEX zurückgegebener Wert als Bezug oder als Wert verwendet werden. Zum Beispiel ist die Formel CELL("Breite";INDEX(A1:B2;1;2)) identisch mit CELL("Breite";B1). Die CELL-Funktion verwendet den von INDEX zurückgegebenen Wert als Bezug auf eine Zelle. Andererseits übersetzt eine Formel wie 2*INDEX(A1:B2,1,2) den Rückgabewert von <b>Index</b> in die Zahl in Zelle B1.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Intercept">
      <MemberSignature Language="C#" Value="public double Intercept (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Intercept([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intercept (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Intercept(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16695)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bekannt_y – die Menge der abhängigen Beobachtungen oder Daten.</param>
        <param name="Arg2">Bekannt_x – die Menge der unabhängigen Beobachtungen oder Daten.</param>
        <summary>Berechnet den Punkt, an dem eine Gerade die Y-Achse unter Verwendung vorhandener x-Werte und y-Werte schneidet. Der Schnittpunkt basiert auf einer optimal angepassten Regressionsgeraden, die durch die bekannten x-Werte und y-Werte gezeichnet wird. Verwenden Sie <b>die Intercept-Funktion,</b> wenn Sie den Wert der abhängigen Variablen ermitteln möchten, wenn die unabhängige Variable 0 (null) ist. Sie können z. <b></b> B. die #A0 verwenden, um den elektrischen Widerstand eines Metal bei 0°C vorherzusagen, wenn Ihre Datenpunkte bei Raumtemperatur und höher aufgenommen wurden.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente müssen Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn known_y und known_x eine andere Anzahl von Datenpunkten oder keine Datenpunkte enthalten, gibt <b>Intercept</b> den Fehlerwert #N/A zurück. </para>
          <para>Die Formel für den Fangen der Regressionslinie, a, ist:</para>
          <para>Abbildung 1: Gleichung für den Fangen der Regressionslinie</para>
          <para> </para>
          <para> </para>
          <para>wobei die Neigung b wie folgt berechnet wird:</para>
          <para>Abbildung 2: Gleichung für die Neigung</para>
          <para> </para>
          <para> </para>
          <para>und wobei x und y die Beispielwerte AVERAGE(known_x) und AVERAGE(known_y) sind.</para>
          <para>Der zugrunde liegende Algorithmus, der in <b>"Intercept"</b> und "Functions" verwendet wird, ist anders als der zugrunde liegende <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> Algorithmus, der in der Funktion verwendet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> wird. Bei unbestimmten und kollinearen Daten kann der Unterschied zwischen diesen Algorithmen zu unterschiedlichen Ergebnissen führen. Wenn beispielsweise die Datenpunkte in Y_Werte den Wert 0 und die Datenpunkte in X_Werte den Wert 1 aufweisen, geschieht Folgendes: </para>
          <list type="bullet">
            <item>
              <description>
                <b>Intercept</b> and <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> return a #DIV/0! zurück. Intercept <b></b> und Algorithmus sind so konzipiert, dass sie nach einer einzigen Antwort suchen, und in diesem Fall kann es <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> mehrere Antworten geben. </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> gibt den Wert 0 zurück. Der Algorithmus ist so konzipiert, dass angemessene Ergebnisse für collineare Daten erzielt werden, und in diesem Fall kann mindestens <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> eine Antwort gefunden werden.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IntRate">
      <MemberSignature Language="C#" Value="public double IntRate (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IntRate([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IntRate(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IntRate (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16817)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Anlage – der in das Wertpapier investierte Betrag.</param>
        <param name="Arg4">Rückzahlung – der Betrag, der bei Fälligkeit zu erwarten ist.</param>
        <param name="Arg5">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt den Zinssatz eines voll investierten Wertpapiers zurück.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn abrechnung oder Fälligkeit kein gültiges Datum ist, <b>gibt IntRate</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If investment ≤ 0 or if redemption ≤ 0, <b>IntRate</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>gibt IntRate</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die ≥ ist, gibt <b>IntRate</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>IntRate</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Formel für die IntRate -Methode</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>B = Anzahl der Tage in einem Jahr, je nach Jahrbasis.</para>
          <para>DIM = Anzahl der Tage von Abrechnung bis Fälligkeit.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ipmt">
      <MemberSignature Language="C#" Value="public double Ipmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ipmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ipmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ipmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16551)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zins – der Zinssatz pro Zeitraum.</param>
        <param name="Arg2">Zr – der Zeitraum, für den Sie den Zinsbetrag berechnen möchten. Zr kann nur Werte im Bereich von 1 bis Zzr annehmen.</param>
        <param name="Arg3">Zzr – die Gesamtzahl der Zahlungsperioden in einer Annuität.</param>
        <param name="Arg4">Bw – der Barwert oder der heutige Gesamtwert einer Reihe zukünftiger Zahlungen.</param>
        <param name="Arg5">Zw – der zukünftige Wert oder der Kassenbestand, den Sie nach Tätigung der letzten Zahlung erzielen möchten. Wenn Zw ausgelassen wird, wird dafür der Wert 0 angenommen (der zukünftige Wert einer Anleihe beträgt beispielsweise 0).</param>
        <param name="Arg6">F – die Zahl 0 oder 1, die die Fälligkeit von Zahlungen angibt. Wenn F ausgelassen wird, wird ein Wert von 0 angenommen.</param>
        <summary>Gibt die Zinszahlung einer Investition für den angegebenen Zeitraum ausgehend von regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz zurück.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0</term>
              <description>Zum Ende des Zeitraums</description>
            </item>
            <item>
              <term>1 </term>
              <description>Zum Anfang des Zeitraums</description>
            </item>
          </list>
          <para>Stellen Sie sicher, dass Sie die zur Angabe von Zins und Zzr verwendeten Einheiten einheitlich verwenden. Wenn Sie für eine vierjährige Anleihe mit jährlichen Zinsen von 12 Prozent monatliche Zahlungen tätigen, verwenden Sie 12%/12 für Zins und 4*12 für Zzr. Wenn Sie für dieselbe Anleihe jährliche Zahlungen tätigen, verwenden Sie 12% für Zins und 4 für Zzr. </para>
          <para>Für alle Argumente gilt, dass Geldbeträge, die Sie auszahlen (z. B. Spareinlagen), durch negative Zahlen und Geldbeträge, die Sie einnehmen (z. B. Dividenden), durch positive Zahlen dargestellt werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Irr">
      <MemberSignature Language="C#" Value="public double Irr (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Irr([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Irr (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16446)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Werte – ein Array von Zellen oder ein Bezug auf Zellen, die Zahlen enthalten, für die Sie den internen Zinsfuß berechnen möchten.</param>
        <param name="Arg2">Schätzwert – eine geschätzte Zahl, die dem Ergebnis von IRR fast entspricht.</param>
        <summary>Gibt den internen Zinsfuß einer Investition für eine Reihe von Cashflows zurück, die durch die Zahlen in Werte angegeben werden. Diese Zahlungen müssen nicht gleich groß sein, wie dies bei Annuitätenzahlungen der Fall ist. Die Cashflows müssen jedoch in regelmäßigen Intervallen, monatlich oder jährlich, auftreten. Der interne Zinsfuß ist der Zinssatz, der für eine Investition erreicht wird, die aus Auszahlungen (negative Werte) und Einzahlungen (positive Werte) besteht, die in regelmäßigen Abständen erfolgen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Werte muss mindestens einen positiven und einen negativen Wert enthalten, damit ein interner Zinsfuß berechnet werden kann.</para>
          <para>IRR geht davon aus, dass die Zahlungen in der Reihenfolge erfolgen, in der sie in Werte angegeben sind. Sie sollten daher darauf achten, dass Sie die Ein- und Auszahlungen in der von Ihnen gewünschten Reihenfolge eingeben.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden die betreffenden Werte ignoriert.</para>
          <para>Microsoft Excel verwendet eine iterative Technik zum Berechnen von <b>Irr</b>. Beginnend mit <b>"Erraten"</b> durchfärbt Irr die Berechnung, bis das Ergebnis innerhalb von 0,00001 Prozent genau ist. Wenn <b>Irr</b> kein Ergebnis finden kann, das nach 20 Versuchen funktioniert, wird #NUM! zurückgegeben. </para>
          <para>In den meisten Fällen müssen Sie keine Erraten für die Berechnung <b>"Irr"</b> bereitstellen. Wenn Schätzwert nicht angegeben wird, wird ein Schätzwert von 0,1 (10 Prozent) angenommen. </para>
          <para>If <b>Irr</b> gives the #NUM! oder wenn das Ergebnis nicht dem erwarteten Wert nahe kommt, versuchen Sie es erneut mit einem anderen Wert für "Guess".</para>
          <para>
            <b>Irr</b> ist eng verwandt mit <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> der Net Present Value-Funktion. Der von Irr <b></b> berechnete Zinswert ist der Zinssatz, der einem Nettowert von 0 (null) entspricht. Die folgende Formel veranschaulicht, wie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> und <b>wie Irr</b> miteinander in Beziehung stehen:</para>
          <para>NPV(IRR(B1:B6),B1:B6) ist gleich 3,60E-08 [Innerhalb der Genauigkeit der Berechnung <b>irr</b> ist der Wert 3.60E-08 effektiv 0 (null).]</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsErr">
      <MemberSignature Language="C#" Value="public bool IsErr (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsErr([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsErr(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsErr (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsErr(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16510)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ des Werts und gibt <b>"true"</b> oder <b>"false"</b> zurück, je nachdem, ob der Wert auf einen Fehlerwert mit Ausnahme von #N/A verweist.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente Wert der IS-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, in denen eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 umgewandelt. In der Formel ISNUMBER("19") wird "19" jedoch nicht von einem Textwert konvertiert, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false zurück.</b> </para>
          <para>Die IS-Funktionen sind hilfreich in Formeln, mit denen das Ergebnis einer Berechnung getestet wird. In Kombination mit der FUNKTION IF stellen sie eine Methode zum Auffinden von Fehlern in Formeln zur Verfügung.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public bool IsError (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsError([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsError(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsError (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsError(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16387)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ des Werts und gibt <b>true</b> oder <b>false</b> zurück, je nachdem, ob der Wert auf fehlerwerte verweist (#N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME? oder #NULL!).</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente Wert der IS-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, in denen eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 umgewandelt. In der Formel ISNUMBER("19") wird "19" jedoch nicht von einem Textwert konvertiert, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false zurück.</b> </para>
          <para>Die IS-Funktionen sind hilfreich in Formeln, mit denen das Ergebnis einer Berechnung getestet wird. In Kombination mit der FUNKTION IF stellen sie eine Methode zum Auffinden von Fehlern in Formeln zur Verfügung.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEven">
      <MemberSignature Language="C#" Value="public bool IsEven (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEven([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsEven(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEven (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsEven(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16804)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ des Werts und gibt <b>true oder</b> <b>false zurück,</b> je nachdem, ob der Wert gleichmäßig ist.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente Wert der IS-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, in denen eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 umgewandelt. In der Formel ISNUMBER("19") wird "19" jedoch nicht von einem Textwert konvertiert, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false zurück.</b> </para>
          <para>Die IS-Funktionen sind hilfreich in Formeln, mit denen das Ergebnis einer Berechnung getestet wird. In Kombination mit der FUNKTION IF stellen sie eine Methode zum Auffinden von Fehlern in Formeln zur Verfügung.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFormula">
      <MemberSignature Language="C#" Value="public bool IsFormula (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsFormula([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsFormula(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsFormula (Arg1 As Range) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsFormula(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16973)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Verweis auf die Zelle, die Sie testen möchten. Der Bezug kann ein Zellbezug, eine Formel oder ein Name sein, der auf eine Zelle verweist.</param>
        <summary>Überprüft, ob ein Bezug auf eine Zelle mit einer Formel besteht, und gibt <b>TRUE oder</b> <b>FALSE zurück.</b></summary>
        <returns><b>BOOL</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLogical">
      <MemberSignature Language="C#" Value="public bool IsLogical (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsLogical([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsLogical(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLogical (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsLogical(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16582)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ des Werts und gibt <b>true oder</b> <b>false zurück,</b> je nachdem, ob der Wert auf einen Wahrheitswert verweist.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente Wert der IS-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, in denen eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 umgewandelt. In der Formel ISNUMBER("19") wird "19" jedoch nicht von einem Textwert konvertiert, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false zurück.</b> </para>
          <para>Die IS-Funktionen sind hilfreich in Formeln, mit denen das Ergebnis einer Berechnung getestet wird. In Kombination mit der FUNKTION IF stellen sie eine Methode zum Auffinden von Fehlern in Formeln zur Verfügung.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNA">
      <MemberSignature Language="C#" Value="public bool IsNA (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNA([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNA(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNA (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNA(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16386)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ des Werts und gibt <b>true</b> oder <b>false</b> zurück, je nachdem, ob der Wert auf den Fehlerwert #N/A (Wert nicht verfügbar) verweist.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente Wert der IS-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, in denen eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 umgewandelt. In der Formel ISNUMBER("19") wird "19" jedoch nicht von einem Textwert konvertiert, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false zurück.</b> </para>
          <para>Die IS-Funktionen sind hilfreich in Formeln, mit denen das Ergebnis einer Berechnung getestet wird. In Kombination mit der FUNKTION IF stellen sie eine Methode zum Auffinden von Fehlern in Formeln zur Verfügung.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNonText">
      <MemberSignature Language="C#" Value="public bool IsNonText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNonText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNonText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNonText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNonText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16574)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ des Werts und gibt <b>"true"</b> oder <b>"false"</b> zurück, je nachdem, ob der Wert auf ein Beliebiges Element verweist, bei dem es sich nicht um Text handelt. (Beachten Sie, dass diese Funktion <b>"true"</b> zurückgibt, wenn der Wert auf eine leere Zelle verweist.)</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente Wert der IS-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, in denen eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 umgewandelt. In der Formel ISNUMBER("19") wird "19" jedoch nicht von einem Textwert konvertiert, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false zurück.</b> </para>
          <para>Die IS-Funktionen sind hilfreich in Formeln, mit denen das Ergebnis einer Berechnung getestet wird. In Kombination mit der FUNKTION IF stellen sie eine Methode zum Auffinden von Fehlern in Formeln zur Verfügung.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public bool IsNumber (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNumber([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNumber (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNumber(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ des Werts und gibt <b>true oder</b> <b>false zurück,</b> je nachdem, ob der Wert auf eine Zahl verweist.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente Wert der IS-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, in denen eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 umgewandelt. In der Formel ISNUMBER("19") wird "19" jedoch nicht von einem Textwert konvertiert, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false zurück.</b> </para>
          <para>Die IS-Funktionen sind hilfreich in Formeln, mit denen das Ergebnis einer Berechnung getestet wird. In Kombination mit der FUNKTION IF stellen sie eine Methode zum Auffinden von Fehlern in Formeln zur Verfügung.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ISO_Ceiling">
      <MemberSignature Language="C#" Value="public double ISO_Ceiling (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ISO_Ceiling([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ISO_Ceiling(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ISO_Ceiling (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16907)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – Der wert, der gerundet werden soll.</param>
        <param name="Arg2">Signifikanz – Das optionale Vielfache, auf das die Zahl gerundet werden soll. Wenn die Signifikanz ausgelassen wird, ist der Standardwert 1.</param>
        <summary>Gibt eine Zahl zurück, die auf die nächste ganze Zahl oder auf das kleinste Vielfache von Schritt aufgerundet ist.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOdd">
      <MemberSignature Language="C#" Value="public bool IsOdd (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsOdd([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsOdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOdd (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOdd(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16805)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ des Werts und gibt <b>true oder</b> <b>false zurück,</b> je nachdem, ob der Wert ungerade ist.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente Wert der IS-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, in denen eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 umgewandelt. In der Formel ISNUMBER("19") wird "19" jedoch nicht von einem Textwert konvertiert, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false zurück.</b> </para>
          <para>Die IS-Funktionen sind hilfreich in Formeln, mit denen das Ergebnis einer Berechnung getestet wird. In Kombination mit der FUNKTION IF stellen sie eine Methode zum Auffinden von Fehlern in Formeln zur Verfügung.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsoWeekNum">
      <MemberSignature Language="C#" Value="public double IsoWeekNum (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 IsoWeekNum([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsoWeekNum(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsoWeekNum (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16968)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Datum-Uhrzeit-Code, der von Excel für die Datums- und Uhrzeitberechnung verwendet wird.</param>
        <param name="Arg2">Dieses Argument ist in der Funktion nicht verfügbar.</param>
        <summary>Gibt die Iso-Wochennummer des Jahres für ein bestimmtes Datum zurück.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks><para>Gibt die Ordnungszahl der [ISO8601]-Kalenderwoche im Jahr für das angegebene Datum zurück. ISO 8601 definiert die Kalenderwoche als Zeitintervall von sieben Kalendertagen, beginnend mit einem Montag, und die erste Kalenderwoche eines Jahres als die, die den ersten Donnerstag dieses Jahres enthält.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ispmt">
      <MemberSignature Language="C#" Value="public double Ispmt (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ispmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ispmt(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ispmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ispmt(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16734)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zins – der Zinssatz für die Investition.</param>
        <param name="Arg2">Zr – der Zeitraum, für den der Zinssatz bestimmt werden soll. Dieser muss zwischen 1 und Zzr liegen.</param>
        <param name="Arg3">Zzr – die Gesamtzahl der Zahlungsperioden für die Investition.</param>
        <param name="Arg4">Bw – der gegenwärtige Wert der Investition. Bei einem Kredit ist Bw die Kreditsumme.</param>
        <summary>Berechnet die während eines bestimmten Zeitraums für eine Investition gezahlten Zinsen. Diese Funktion wird aus Kompatibilitätsgründen mit Lotus 1-2-3 zur Verfügung gestellt.</summary>
        <returns>To be added.</returns>
        <remarks><para>Stellen Sie sicher, dass Sie die zur Angabe von Zins und Zzr verwendeten Einheiten einheitlich verwenden. Wenn Sie für eine vierjährige Anleihe mit jährlichen Zinsen von 12 Prozent monatliche Zahlungen tätigen, verwenden Sie 12%/12 für Zins und 4*12 für Zzr. Wenn Sie für dieselbe Anleihe jährliche Zahlungen tätigen, verwenden Sie 12% für Zins und 4 für Zzr.</para>
          <para>Für alle Argumente werden die Beträge, die Sie zahlen, beispielsweise Einlagen für Sparguthaben oder andere Abhebungen, durch negative Zahlen dargestellt; Beträge, die Sie erhalten, beispielsweise Dividendenzahlungen und andere Einlagen, werden durch positive Zahlen dargestellt.</para>
          <para>Weitere Informationen zu Finanzfunktionen finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> Funktion.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsText">
      <MemberSignature Language="C#" Value="public bool IsText (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsText([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsText(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsText (Arg1 As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsText(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16511)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wert – der zu testende Wert. Wert kann ein leerer Wert (leere Zelle), ein Fehlerwert, ein logischer Wert, ein Textwert, ein Zahlenwert oder ein Bezugswert sein, oder ein Name, der auf einen solchen zu testenden Wert verweist.</param>
        <summary>Überprüft den Typ des Werts und gibt <b>true oder</b> <b>false zurück,</b> je nachdem, ob der Wert auf Text verweist.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente Wert der IS-Funktionen werden nicht konvertiert. In den meisten anderen Funktionen, in denen eine Zahl erforderlich ist, wird beispielsweise der Textwert "19" in die Zahl 19 umgewandelt. In der Formel ISNUMBER("19") wird "19" jedoch nicht von einem Textwert konvertiert, und die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsNumber(System.Object)" /> Funktion gibt <b>false zurück.</b> </para>
          <para>Die IS-Funktionen sind hilfreich in Formeln, mit denen das Ergebnis einer Berechnung getestet wird. In Kombination mit der FUNKTION IF stellen sie eine Methode zum Auffinden von Fehlern in Formeln zur Verfügung.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThaiDigit">
      <MemberSignature Language="C#" Value="public bool IsThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.IsThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsThaiDigit (Arg1 As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16759)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kurt">
      <MemberSignature Language="C#" Value="public double Kurt (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Kurt([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Kurt(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Kurt (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16706)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – 1 bis 30 Argumente, für die Sie die Kurtosis berechnen möchten. Anstelle der durch Semikolons getrennten Argumente können Sie auch ein Array oder einen Bezug auf ein Array verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt die Kurtosis (Exzess) eines Datensatzes zurück. Die Kurtosis ist ein Maß für die Wölbung (d. h. wie spitz oder flach) einer Verteilung im Vergleich zu der Normalverteilung. Eine positive Kurtosis weist auf eine relativ schmale, spitze Verteilung hin. Eine negative Kurtosis weist auf eine relativ flache Verteilung hin.</summary>
        <returns>To be added.</returns>
        <remarks><para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn weniger als vier Datenpunkte enthalten sind oder die Standardabweichung der Stichprobe gleich Null ist, gibt <b>Kurt</b> den Wert #DIV/0! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Kurtosis ist definiert als: </para>
          <para>Abbildung 1: Kurtosis-Gleichung</para>
          <para> </para>
          <para> </para>
          <para>Wobei s die Standardabweichung der Stichprobe ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Large">
      <MemberSignature Language="C#" Value="public double Large (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Large([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Large(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Large (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Large(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16709)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrix – eine Matrix oder ein Bereich von Daten, für die bzw. den der k-größte Wert ermittelt werden soll.</param>
        <param name="Arg2">k – die Position (ausgehend vom größten Wert) in einer Matrix oder im Zellbereich der zurückzugebenden Daten.</param>
        <summary>Gibt den k-größten Wert in einem Datensatz zurück. Mit dieser Funktion können Sie einen Wert mit einer bestimmten relativen Bedeutung auswählen. Sie können z. B. <b>"Large"</b> verwenden, um den höchsten, zweit- oder dritten Rang zurückzukehren.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn array leer ist, <b>gibt Large</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn k ≤ 0 ist oder wenn k größer als die Anzahl der Datenpunkte <b>ist,</b> gibt Large den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para>Ist n die Anzahl der Datenpunkte in einem Bereich, gibt LARGE(Matrix,1) den größten und LARGE(Matrix,n) den kleinsten Wert zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Lcm">
      <MemberSignature Language="C#" Value="public double Lcm (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Lcm([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lcm(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lcm (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16859)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... sind -1 bis 29 Werte, deren kleinstes gemeinsames Vielfaches Sie berechnen möchten. Bei Werten, die keine ganzen Zahlen sind, werden deren Nachkommastellen abgeschnitten.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt das kleinste gemeinsame Vielfache der als Argumente angegebenen ganzen Zahlen zurück. Als kleinstes gemeinsames Vielfaches wird die kleinste positive ganze Zahl bezeichnet, die ein Vielfaches aller ganzzahligen Argumente Zahl1, Zahl2 und so weiter ist. LCM können Sie verwenden, wenn Sie Brüche addieren müssen, die unterschiedliche Nenner haben.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Argument nicht numerisch ist, <b>gibt Lcm</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn ein Argument kleiner als Null ist, gibt <b>Lcm</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LinEst">
      <MemberSignature Language="C#" Value="public object LinEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LinEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LinEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16433)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Y_Werte - die bereits bekannten y-Werte in der Beziehung y = mx + b.</param>
        <param name="Arg2">X_Werte - eine optionale Menge mit möglicherweise bereits bekannten x-Werten in der Beziehung y = mx + b.</param>
        <param name="Arg3">Konstante - ein Wahrheitswert, mit dem angegeben wird, ob erzwungen werden soll, dass die Konstante b gleich 0 sein soll.</param>
        <param name="Arg4">Stats - ein Wahrheitswert, der angibt, ob weitere Regressionskenngrößen zurückgegeben werden sollen.</param>
        <summary>Berechnet die Parameter eines linearen Trends unter Verwendung der Methode der kleinsten Quadrate, um eine passende Gerade zu berechnen und einen Array zurückzugeben, der die Gerade beschreibt. Da diese Funktion einen Array von Werten zurückgibt, muss sie als Arrayformel eingegeben werden.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Formel einer solchen Geraden lautet:</para>
          <para>y = mx + b oder</para>
          <para>y = m1x1 + m2x2 + ... + b (bei mehreren Bereichen mit x-Werten)</para>
          <para>Dabei ist der abhängige y-Wert eine Funktion der unabhängigen x-Werte. Die m-Werte sind Koeffizienten, die zu den jeweiligen x-Werten gehören, und b ist eine Konstante. Es ist zu beachten, dass y, x und m Vektoren sein können. Das Array, <b>das LinEst</b> zurückgibt, ist {mn,mn-1,...,m1,b}. <b>LinEst</b> kann auch zusätzliche Regressionsstatistiken zurückgeben.</para>
          <para>Wenn sich das Array Y_Werte in einer einzelnen Spalte befindet, wird jede Spalte mit X_Werte als separate Variable interpretiert.</para>
          <para>Wenn sich das Array Bekannt_y in einer einzelnen Zeile befindet, wird jede Zeile mit Bekannt_x als separate Variable interpretiert.</para>
          <para>Das Array Bekannt_x kann eine oder mehrere Gruppen mit Variablen enthalten. Wenn nur eine Variable verwendet wird, können Bekannt_y und Bekannt_x Bereiche beliebiger Form darstellen, solange sie gleiche Abmessungen aufweisen. Wenn mehrere Variablen verwendet werden, muss Bekannt_y einen Vektor darstellen (d. h. einen Bereich mit einer Höhe von einer Zeile oder einer Breite von einer Spalte).</para>
          <para>Wenn Bekannt_x ausgelassen wird, wird angenommen, dass dies dem Array {1,2,3,...} entspricht, das dieselbe Größe wie Bekannt_y aufweist.</para>
          <para>Wenn Dies <b>der Fall ist oder</b> ausgelassen wird, wird b normal berechnet. </para>
          <para>Wenn Const false <b>ist,</b>wird b gleich 0 festgelegt, und die m-Werte werden angepasst, um y = mx zu passen. </para>
          <para>Wenn stats <b>truuue</b>ist, gibt <b>LinEst</b> die zusätzliche Regressionsstatistik zurück, sodass das zurückgegebene Array {mn,mn-1,...,m1,b;sen,sen-1,...,se1,seb;r2,sey; F,df;ssreg,ssresid}. </para>
          <para>Wenn Stats falsch <b>oder</b> ausgelassen wird, gibt <b>LinEst</b> nur die m-Koeffizienten und die Konstante b zurück. </para>
          <para>Die folgenden Regressionskenngrößen können zusätzlich ermittelt werden:</para>
          <list type="table">
            <item>
              <term>se1,se2,...,sen</term>
              <description>Sind die Standardfehlerwerte der Koeffizienten m1;m2;...;mn.</description>
            </item>
            <item>
              <term>seb</term>
              <description>Der Standardfehlerwert für die Konstante b (seb = #N/A, wenn Konstante false <b>ist).</b></description>
            </item>
            <item>
              <term>r2</term>
              <description>Der Bestimmtheitskoeffizient. Vergleicht geschätzte und tatsächliche y-Werte und Wertebereiche von 0 bis 1. Wenn es 1 ist, gibt es eine perfekte Korrelation in der Stichprobe – es besteht kein Unterschied zwischen dem geschätzten y-Wert und dem tatsächlichen y-Wert. Wenn der Bestimmtheitskoeffizient 0 ist, ist die Regressionsformel beim anderen Extremwert nicht hilfreich, um einen y-Wert vorherzusagen. </description>
            </item>
            <item>
              <term>sey</term>
              <description>Der Standardfehler des Schätzwerts y (Prognosewert).</description>
            </item>
            <item>
              <term>F</term>
              <description>Die F-Statistik (oder der berechnete F-Wert). Anhand der F-Statistik können Sie entscheiden, ob die zwischen der abhängigen und der unabhängigen Variablen beobachtete Beziehung zufällig ist oder nicht.</description>
            </item>
            <item>
              <term>df</term>
              <description>Die Anzahl der Freiheitsgrade. Mit den Freiheitsgraden können Sie den jeweiligen kritischen F-Wert (Quantil F) aus einer entsprechenden statistischen Tabelle entnehmen. Vergleichen Sie die werte, die Sie in der Tabelle finden, mit der F-Statistik, die <b>von LinEst</b> zurückgegeben wird, um eine Konfidenzstufe für das Modell zu ermitteln. </description>
            </item>
            <item>
              <term>ssreg</term>
              <description>Die Regressionssumme der Quadrate.</description>
            </item>
            <item>
              <term>ssresid</term>
              <description>Die Residualsumme der Quadrate.</description>
            </item>
          </list>
          <para>Die folgende Abbildung zeigt, in welcher Reihenfolge die zusätzlichen Regressionskenngrößen zurückgegeben werden.</para>
          <para>Abbildung 1: Arbeitsblatt</para>
          <para> </para>
          <para> </para>
          <para>Sie können jede gerade Linie mit der Neigung und dem y-Intercept beschreiben: </para>
          <para>Neigung (m):</para>
          <para>
Um die Neigung einer Linie zu finden, die häufig als m geschrieben wird, nehmen Sie zwei Punkte auf der Linie ( x1,y1) und (x2,y2); Die Neigung ist gleich (y2 - y1)/(x2 - x1).</para>
          <para>Y-Intercept (b):</para>
          <para>
Der y-Intercept einer Linie, häufig als b geschrieben, ist der Wert von y an der Stelle, an der die Linie die Y-Achse kreuzt.</para>
          <para>Die Gleichung einer geraden Linie ist y = mx + b. Sobald Sie die Werte von m und b kennen, können Sie einen beliebigen Punkt in der Zeile berechnen, indem Sie den y- oder x-Wert in diese Formel einfügen. Sie können die Funktion auch <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" /> verwenden.</para>
          <para>Wenn Sie nur über eine unabhängige x-Variable verfügen, können Sie die Neigungs- und y-Intercept-Werte direkt mithilfe der folgenden Formeln abrufen: </para>
          <para>Neigung:</para>
          <para>
=INDEX(LINEST(known_y's,known_x's),1)</para>
          <para>Y-Intercept:</para>
          <para>
=INDEX(LINEST(Y_Werte,X_Werte),2)</para>
          <para>Die Genauigkeit der von <b>LineEst</b> berechneten Linie hängt vom Grad der Punkt punktierten Daten ab. Das <b>LineEst-Modell</b> ist genauer, wenn die Daten linearer sind. <b>LineEst</b> verwendet die Methode der geringsten Quadrate, um die beste Datenpassung zu ermitteln. Wenn nur eine unabhängige x-Variable vorliegt, werden m und b entsprechend der folgenden Formeln berechnet: </para>
          <para>Abbildung 2: Formel</para>
          <para> </para>
          <para> </para>
          <para>Abbildung 3: Formel</para>
          <para> </para>
          <para> </para>
          <para>, wobei x und y beispielhafte Mittelwerte sind, z. B. x = AVERAGE(X_Werte) und y = AVERAGE(Y_Werte).</para>
          <para>Die Linien- und Kurvenanpassungsfunktionen <b>lineEst</b> und können die beste gerade Linie oder exponentielle Kurve berechnen, die <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" /> Ihren Daten entspricht. Sie müssen dennoch entscheiden, welches der beiden Ergebnisse Ihren Daten eher entspricht. Bei einer Geraden können Sie TREND(Y_Werte, X_Werte) und bei einer Exponentialkurve GROWTH(Y_Werte, X_Werte) berechnen. Werden diese Funktionen ohne das Argument Neue_X_Werte verwendet, geben sie ein Array mit y-Werten zurück, die an den x-Werten Ihrer tatsächlichen Datenpunkte als Vorhersagewerte auf der Geraden oder Exponentialkurve liegen. Diese Vorhersagewerte können Sie mit den tatsächlichen Werten vergleichen. Um eine bessere Vergleichsmöglichkeit zu haben, kann es sinnvoll sein, die Werte in Diagrammen darzustellen. </para>
          <para>Bei der Regressionsanalyse berechnet Microsoft Excel für jeden Punkt das Quadrat der Differenz zwischen dem für diesen Punkt erwarteten y-Wert und dem entsprechenden tatsächlichen y-Wert. Die Summe dieser quadrierten Differenzen wird als Residual-Quadratsumme (ssresid) bezeichnet. Anschließend berechnet Microsoft Excel die Gesamtsumme der Abweichungsquadrate (sstotal). Wenn Const = <b>true</b>oder ausgelassen wird, ist die Summe der Quadrate die Summe der quadratierten Unterschiede zwischen den tatsächlichen y-Werten und dem Durchschnitt der y-Werte. Wenn Const = <b>false</b>ist, ist die Summe der Quadrate die Summe der Quadrate der tatsächlichen y-Werte (ohne subtrahieren den durchschnittlichen y-Wert von jedem einzelnen y-Wert). Anschließend kann die Regressions-Quadratsumme (ssreg) anhand der folgenden Formel berechnet werden: ssreg = sstotal - ssresid. Je kleiner die Residual-Quadratsumme im Vergleich zur Gesamtsumme der Abweichungsquadrate ist, desto größer ist der Wert des Bestimmtheitsmaßes (r2), das angibt, wie gut die aus der Regressionsanalyse resultierende Formel die zwischen den Variablen bestehende Beziehung beschreibt. r2 ist gleich ssreg/sstotal. </para>
          <para>In einigen Fällen hat eine oder mehrere der X-Spalten (davon aus, dass sich Y und X in Spalten befinden) möglicherweise keinen zusätzlichen Vorhersagewert im Vorhandensein der anderen X-Spalten. Mit anderen Worten, die Eliminierung einer oder mehrere x-Spalten kann zu vorhergesagten Y-Werten führen, die genauso genau sind. In diesem Fall sollten diese redundanten X-Spalten im Regressionsmodell weggelassen werden. Diese Ähnlichkeit wird als "Collinearität" bezeichnet, da jede redundante X-Spalte als Summe aus Mehreren der nicht redundanten X-Spalten ausgedrückt werden kann. <b>LinEst</b> überprüft die Collinearität und entfernt redundante X-Spalten aus dem Regressionsmodell, wenn diese identifiziert werden. Entfernte X-Spalten können in <b>der LinEst-Ausgabe</b> als 0 koeffizienten und 0 se erkannt werden. Wenn eine oder mehrere Spalten als redundant entfernt werden, ist df betroffen, da df von der Anzahl der X-Spalten abhängt, die tatsächlich zu Vorhersagezwecken verwendet werden. Wenn df geändert wird, weil redundante X-Spalten entfernt werden, sind auch die Werte sey und F betroffen. Die Kolinearität sollte in der Praxis relativ selten sein. Ein Fall, in dem es jedoch wahrscheinlicher ist, ist, dass einige X-Spalten nur 0 und 1 enthalten, um anzuzeigen, ob ein Subjekt in einem Experiment Mitglied einer bestimmten Gruppe ist oder nicht. Wenn Const = <b>true</b> oder ausgelassen wird, fügt <b>LinEst</b> effektiv eine zusätzliche X-Spalte aller 1 ein, um den Intercept zu modellieren. If you have a column with a 1 for each subject if male, or 0 if not, and you also have a column with a 1 for each subject if female, or 0 if not, this latter column is redundant because entries in it can be obtained from subtracting the entry in the "male indicator" column from the entry in the additional column of all 1's added by <b>LineEst</b>. </para>
          <para>df wird wie folgt berechnet, wenn aufgrund der Collinearität keine X-Spalten aus dem Modell entfernt werden: Wenn k Spalten von known_x und Const = <b>true</b> oder ausgelassen sind, dann df = n – k – 1. If const = <b>false</b>, then df = n - k. In beiden Fällen erhöht sich df um 1, wenn jede X-Spalte aufgrund der Collinearität entfernt wird. </para>
          <para>Formeln, die Arrays zurückgeben, müssen als Arrayformeln eingegeben werden. When entering an array constant such as known_x's as an argument, use commas to separate values in the same row and semicolons to separate rows. Trennzeichen können je nach Ihrer Ländereinstellung unter "Regional" und "Sprachoptionen" in der Systemsteuerung unterschiedlich sein. </para>
          <para>Beachten Sie, dass mithilfe einer Regressionsformel vorhergesagte y-Werte möglicherweise ungültig sind, wenn diese außerhalb des Bereichs der y-Werte liegen, die Sie zur Ermittlung der Formel verwendet haben. Der zugrunde liegende Algorithmus, der in der <b>LinEst -Funktion verwendet</b> wird, ist anders als der zugrunde liegende Algorithmus, der in der und den Funktionen <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> verwendet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> wird. Bei unbestimmten und kollinearen Daten kann der Unterschied zwischen diesen Algorithmen zu unterschiedlichen Ergebnissen führen. Wenn beispielsweise die Datenpunkte in Y_Werte den Wert 0 und die Datenpunkte in X_Werte den Wert 1 aufweisen, geschieht Folgendes: </para>
          <para>
            <b>LineEst</b> gibt den Wert 0 zurück. Der <b>Algorithmus LinEst</b> soll angemessene Ergebnisse für collineare Daten zurückgeben, und in diesem Fall kann mindestens eine Antwort gefunden werden. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> geben Sie #DIV/0 zurück! zurück. Der Algorithmus ist so konzipiert, dass er nach einer einzigen Antwort sucht, und in diesem Fall kann es <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> mehrere Antworten geben.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ln">
      <MemberSignature Language="C#" Value="public double Ln (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ln([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ln(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ln (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Ln(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16406)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die positive reelle Zahl, deren natürlichen Logarithmus Sie berechnen möchten.</param>
        <summary>Gibt den natürlichen Logarithmus einer Zahl zurück. Natürliche Logarithmen haben die Konstante e (2,71828182845904) als Basis.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Ln</b> ist die Umkehrung der EXP-Funktion.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public double Log (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log (Arg1 As Double, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16493)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die positive reelle Zahl, deren Logarithmus Sie berechnen möchten.</param>
        <param name="Arg2">Basis – die Basis des Logarithmus. Wenn das Argument Basis fehlt, wird es als 10 angenommen.</param>
        <summary>Gibt den Logarithmus einer Zahl zu der angegebenen Basis zurück.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public double Log10 (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Log10([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Log10 (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Log10(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16407)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die positive reelle Zahl, deren Logarithmus zur Basis 10 Sie berechnen möchten.</param>
        <summary>Gibt den Logarithmus einer Zahl zur Basis 10 zurück.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogEst">
      <MemberSignature Language="C#" Value="public object LogEst (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object LogEst([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogEst(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogEst (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16435)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bekannte_y – die y-Werte, die Ihnen aus der jeweiligen Beziehung y = b*m^x bereits bekannt sind.</param>
        <param name="Arg2">Bekannt_x – eine optionale Gruppe von x-Werten, die Ihnen aus der Beziehung y = b*m^x eventuell bereits bekannt sind.</param>
        <param name="Arg3">Konstante – ein Wahrheitswert, mit dem angegeben wird, ob erzwungen werden soll, dass die Konstante b gleich 1 sein soll.</param>
        <param name="Arg4">Stats - ein Wahrheitswert, der angibt, ob weitere Regressionskenngrößen zurückgegeben werden sollen.</param>
        <summary>In Regressionsanalysen berechnet diese Funktion eine Exponentialkurve, die möglichst gut an die von Ihnen bereitgestellten Daten angepasst ist, und gibt einen Array von Werten zurück, der diese Kurve beschreibt. Da diese Funktion einen Array von Werten zurückgibt, muss die Formel als Arrayformel eingegeben werden.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Formel der Kurve lautet:</para>
          <para>y = b*m^x oder</para>
          <para>y = (b *(m1^x1)*(m2^x2)*_) (wenn mehrere x-Werte enthalten sind)</para>
          <para>wobei der abhängige Y_Wert eine Funktion der unabhängigen X_Werte ist. Jeder m-Wert ist eine Basis, zu der ein entsprechender x-Wert als Exponent gehört, und b ist eine Konstante. Beachten Sie, dass y, x und m Vektoren sein können. Das von <b>LogEst zurückgegebene Array</b> ist {mn,mn-1,...,m1,b}.</para>
          <para>Wenn sich das Array Y_Werte in einer einzelnen Spalte befindet, wird jede Spalte mit X_Werte als separate Variable interpretiert.</para>
          <para>Wenn sich das Array Bekannt_y in einer einzelnen Zeile befindet, wird jede Zeile mit Bekannt_x als separate Variable interpretiert.</para>
          <para>Das Array Bekannt_x kann eine oder mehrere Gruppen mit Variablen enthalten. Wird nur eine Variable verwendet, können Y_Werte und X_Werte Bereiche beliebiger Form sein, solange sie dieselben Dimensionen haben. Werden mehrere Variablen verwendet, müssen Y_Werte als Zellbereiche vorliegen, wobei sich der Bereich nur über eine Zeile oder eine Spalte erstrecken darf (auch als "Vektor" bezeichnet). </para>
          <para>Wenn known_x ausgelassen wird, wird angenommen, dass es sich um das Array {1,2,3,...} handelt. die die gleiche Größe wie known_y hat. </para>
          <para>Wenn Dies <b>der Fall ist oder</b> ausgelassen wird, wird b normal berechnet.</para>
          <para>Wenn Const false <b>ist,</b>wird b gleich 1 festgelegt, und die m-Werte werden auf y = m^x festgelegt.</para>
          <para>Wenn stats <b>true</b>ist, <b>gibt LogEst</b> die zusätzliche Regressionsstatistik zurück, sodass das zurückgegebene Array {mn,mn-1,...,m1,b;sen,sen-1,...,se1,seb;r 2,sey; F,df;ssreg,ssresid}. </para>
          <para>Wenn Stats falsch <b>oder</b> ausgelassen wird, <b>gibt LogEst</b> nur die m-Koeffizienten und die Konstante b zurück. </para>
          <para>Weitere Informationen zu zusätzlichen Regressionsstatistiken finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> .</para>
          <para>Wenn ein Diagramm Ihrer Daten einer Exponentiellen Kurve ähnelt, desto besser passt die berechnete Linie zu Ihren Daten. Wie logEst gibt ein Array von Werten zurück, das eine Beziehung zwischen den Werten beschreibt, aber eine gerade <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> Linie zu Ihren Daten <b></b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> passt; <b>LogEst passt</b> zu einer Exponentialkurve. Weitere Informationen finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" />. </para>
          <para>Wenn Sie nur über eine unabhängige x-Variable verfügen, können Sie y-Intercept (b)-Werte direkt mithilfe der folgenden Formel abrufen: </para>
          <para>Y-Intercept (b):</para>
          <para>
INDEX(LOGEST(known_y's,known_x's),2)</para>
          <para>Sie können die Gleichung y = b*m^x verwenden, um zukünftige y-Werte vorherzusagen, aber Microsoft Excel stellt die Funktion zur Verfügung, um dies <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" /> für Sie zu tun. Weitere Informationen finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Growth(System.Object,System.Object,System.Object,System.Object)" />.</para>
          <para>Formeln, die Arrays zurückgeben, müssen als Arrayformeln eingegeben werden. </para>
          <para>When entering an array constant such as known_x's as an argument, use commas to separate values in the same row and semicolons to separate rows. Trennzeichen können je nach Ihrer Ländereinstellung unter "Regional" und "Sprachoptionen" in der Systemsteuerung unterschiedlich sein. </para>
          <para>Beachten Sie, dass mithilfe einer Regressionsformel vorhergesagte y-Werte möglicherweise ungültig sind, wenn diese außerhalb des Bereichs der y-Werte liegen, die Sie zur Ermittlung der Formel verwendet haben.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogInv">
      <MemberSignature Language="C#" Value="public double LogInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16675)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrsch – eine zur Lognormalverteilung gehörige Wahrscheinlichkeit.</param>
        <param name="Arg2">Mittelwert – der Mittelwert der Lognormalverteilung.</param>
        <param name="Arg3">Standabwn – die Standardabweichung der Lognormalverteilung.</param>
        <summary>Mit der Lognormalverteilung können Sie logarithmisch transformierte Daten analysieren.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" /> Methode.</para>
          <para>Wenn ein Argument nicht numerisch ist, <b>gibt LogInv</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die &lt; Wahrscheinlichkeit = 0 oder &gt; die Wahrscheinlichkeit = 1 ist, gibt <b>LogInv</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn standard_dev &lt; = 0 ist, <b>gibt LogInv</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Umkehrfunktion der Lognormalverteilung lautet: </para>
          <para>Abbildung 1: Umkehrung der Lognormalverteilungsfunktion</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Dist">
      <MemberSignature Language="C#" Value="public double LogNorm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16920)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - Der Wert, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Mean – Der Mittelwert von ln(x).</param>
        <param name="Arg3">Standard_dev - Die Standardabweichung von ln(x).</param>
        <param name="Arg4">Kumuliert – Ein logischer Wert, der die Form der Funktion bestimmt. Wenn <b>"kumulativ" auf "true"</b> <b>LogNorm_Dist</b> die kumulierte Verteilungsfunktion zurückgegeben; Wenn <b>false,</b>gibt sie die Wahrscheinlichkeitsdichtefunktion zurück.</param>
        <summary>Gibt Werte der lognormalverteilten Verteilung von x zurück, wobei ln(x) normalverteilt mit den Parametern Mittelwert und Standabwn ist. Mit dieser Funktion können Sie Daten analysieren, die logarithmisch transformiert wurden.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Argument nicht numerisch ist, <b>gibt LogNorm_Dist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If x ≤ 0 or if standard_dev ≤ 0, <b>LogNorm_Dist</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für die Verteilungsfunktion einer logarithmischen Normalverteilung lautet: </para>
          <para>Abbildung 1: Formel für die lognormale kumulierte Verteilung</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNorm_Inv">
      <MemberSignature Language="C#" Value="public double LogNorm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNorm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNorm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNorm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16921)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrscheinlichkeit – Eine der Lognormalverteilung zugeordnete Wahrscheinlichkeit.</param>
        <param name="Arg2">Mean – Der Mittelwert von ln(x).</param>
        <param name="Arg3">Standard_dev - Die Standardabweichung von ln(x).</param>
        <summary>Gibt die Umkehrung der lognormalen kumulierten Verteilungsfunktion zurück. Mit der Lognormalverteilung können Sie logarithmisch transformierte Daten analysieren.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Argument nicht numerisch ist, <b>gibt LogNorm_Inv</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die &lt; Wahrscheinlichkeit = 0 oder &gt; die Wahrscheinlichkeit = 1 <b>ist, gibt LogNorm_Inv</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn standard_dev &lt; = 0 <b>ist, gibt LogNorm_Inv</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Umkehrfunktion der Lognormalverteilung lautet: </para>
          <para>Abbildung 1: Umkehrung der Lognormalverteilungsfunktion</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="LogNormDist">
      <MemberSignature Language="C#" Value="public double LogNormDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 LogNormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNormDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogNormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double LogNormDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16674)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, bei dem die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Mittelwert – der Mittelwert der Lognormalverteilung.</param>
        <param name="Arg3">Standabwn – die Standardabweichung der Lognormalverteilung.</param>
        <summary>Gibt Werte der Verteilungsfunktion einer lognormalverteilten Zufallsvariable zurück. Mit dieser Funktion können Sie Daten analysieren, die logarithmisch transformiert wurden.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LogNorm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> Methode.</para>
          <para>Wenn ein Argument nicht numerisch ist, <b>gibt LogNormDist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x ≤ 0 ist oder standard_dev ≤ 0 ist, gibt <b>LogNormDist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für die Verteilungsfunktion einer logarithmischen Normalverteilung lautet: </para>
          <para>Abbildung 1: Formel für die lognormale kumulierte Verteilung</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public object Lookup (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Lookup([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Lookup (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16412)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Lookup_value – Ein Wert, nach dem <b>im</b> ersten Vektor nach gesucht wird. Lookup_value kann eine Zahl, ein Text, ein Wahrheitswert oder ein Name oder Bezug sein, der auf einen Wert verweist.</param>
        <param name="Arg2">Suchvektor oder Matrix – In der Vektorversion ein Bereich, der nur eine Zeile oder eine Spalte enthält. Zulässige Elemente von Suchvektor sind Zeichenfolgen (Texte), Zahlen oder Wahrheitswerte. In der Matrixversion ein Zellbereich, der Text, Zahlen oder Wahrheitswerte enthält, den Sie mit dem Suchwert vergleichen möchten.</param>
        <param name="Arg3">Ergebnisvektor – wird nur in der Vektorversion verwendet. Ein Bereich, der nur eine Zeile oder Spalte enthält. Dieser Vektor muss genauso viele Elemente umfassen wie Suchvektor.</param>
        <summary>Gibt einen Wert aus einem Vektor oder einer Matrix zurück. Für die LOOKUP-Funktion gibt es zwei Syntaxversionen: die Vektor- und die Matrixversion.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>Durchsuchen eines Bereichs in einer Zeile oder einer Spalte (auch als Vektor bezeichnet) nach einem Wert und Zurückgeben eines Werts von derselben Position in einem zweiten Bereich in einer Zeile oder einer Spalte</term>
              <description>Vektorversion</description>
              <description>Verwenden Sie die Vektorversion, wenn Sie eine umfangreiche Liste mit Werten durchsuchen möchten oder wenn sich die Werte im Lauf der Zeit ändern.</description>
            </item>
            <item>
              <term>Durchsuchen der ersten Zeile einer Matrix nach einem angegebenen Wert und Zurückgeben eines Werts von derselben Position in der letzten Zeile oder Spalte einer Matrix</term>
              <description>Matrixversion</description>
              <description>Verwenden Sie die Matrixversion, wenn Sie über eine kleine Liste mit Werten verfügen und die Werte konstant bleiben.</description>
            </item>
          </list>
          <para>
            <b>Hinweis:</b>Sie können die <b>Nachschlagefunktion</b> auch als Alternative zur Funktion IF für ausführliche Tests oder Tests für mehr als sieben Bedingungen verwenden. Sehen Sie sich dazu die Beispiele unter Matrixversion an.</para>
          <para>Vektorversion</para>
          <para>Ein Vektor ist ein Bereich in nur einer Zeile oder einer Spalte. Die Vektorform <b></b> der Suche sucht in einem Bereich mit einer Zeile oder einer Spalte (auch als Vektor bezeichnet) nach einem Wert und gibt einen Wert aus derselben Position in einem zweiten Bereich mit einer Zeile oder einer Spalte zurück. Verwenden Sie diese <b></b> Form der Nachschlagefunktion, wenn Sie den Bereich angeben möchten, der die Werte enthält, mit denen Sie übereinstimmen möchten. Die andere <b>Nachschlageform wird</b> automatisch in der ersten Spalte oder Zeile angezeigt.</para>
          <para>
            <b>Wichtig:</b>Die Werte in lookup_vector müssen in aufsteigender Reihenfolge platziert werden: ...,-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true</b>; andernfalls <b>gibt die Suche</b> möglicherweise nicht den richtigen Wert zurück. Groß- und Kleinbuchstaben sind gleichwertig.</para>
          <para>Kann die LOOKUP-Funktion keinen Wert finden, der mit dem jeweiligen Wert von Suchkriterium übereinstimmt, verwendet sie den Wert in Suchvektor, der bezogen auf den Wert von Suchkriterium kleiner oder gleich ist. </para>
          <para>Wenn lookup_value kleiner als der kleinste Wert in lookup_vector ist, gibt <b>die</b> Suche den #N/A-Fehlerwert an.</para>
          <para>Arrayform</para>
          <para>Die Arrayform <b>der</b> Suche sucht in der ersten Zeile oder Spalte eines Arrays nach dem angegebenen Wert und gibt einen Wert von derselben Position in der letzten Zeile oder Spalte des Arrays zurück. Verwenden Sie diese <b>Suchform,</b> wenn sich die Werte, die Sie koppeln möchten, in der ersten Zeile oder Spalte des Arrays befinden. Verwenden Sie die andere <b>Nachschlageform,</b> wenn Sie die Position der Spalte oder Zeile angeben möchten.</para>
          <para>
            <b>Tipp:</b>Im Allgemeinen ist es am besten, das oder die Funktion anstelle der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> Arrayform <b>von Lookup zu verwenden.</b> Diese Form der <b>Suche wird</b> aus Kompatibilitätsgründen mit anderen Tabellenkalkulationsprogrammen bereitgestellt.</para>
          <para>Wenn <b>der Suchwert</b> nicht lookup_value, wird der größte Wert im Array verwendet, der kleiner oder gleich dem Wert lookup_value.</para>
          <para>Wenn lookup_value kleiner als der kleinste Wert in der ersten Zeile oder Spalte ist (abhängig von den Arraydimensionen), gibt <b>Lookup</b> den Fehlerwert #N/A zurück.</para>
          <para>Die Arrayform <b>des Nachschlagefelds</b> ist der und den <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> Funktionen sehr <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> ähnlich. Der Unterschied besteht in der Suche nach lookup_value in der ersten Zeile, der Suche in der ersten Spalte und der Suche nach den Dimensionen <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> des Arrays. <b></b></para>
          <para>Wenn ein Array einen Bereich umfasst, der breiter als hoch ist (mehr Spalten als <b>Zeilen),</b> wird in der ersten Zeile nach lookup_value gesucht.</para>
          <para>Wenn das Array quadratisch oder höher als breit ist (mehr Zeilen als Spalten), sucht <b>die</b> Suche in der ersten Spalte.</para>
          <para>Mit und können Sie nach unten oder quer indizieren, aber nachschlage immer den letzten Wert <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> in der Zeile oder Spalte <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> auswählt. <b></b></para>
          <para>
            <b>Wichtig:</b>Die Werte im Array müssen in aufsteigender Reihenfolge platziert werden: ...,-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true</b>; andernfalls <b>gibt die Suche</b> möglicherweise nicht den richtigen Wert zurück. Groß- und Kleinbuchstaben sind gleichwertig.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public double Match (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Match([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Match(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Match (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16448)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Suchkriterium – der Wert, aufgrund dessen der gewünschte Wert in einer Tabelle gesucht wird.</param>
        <param name="Arg2">Suchmatrix – ein zusammenhängender Zellbereich mit möglichen Vergleichskriterien. Suchmatrix muss eine Matrix oder ein Bezug auf eine Matrix sein.</param>
        <param name="Arg3">Vergleichstyp – die Zahl -1, 0 oder 1. Vergleichstyp gibt an, auf welche Weise Microsoft Excel die Werte in einer Suchmatrix mit den Suchkriterien vergleicht.</param>
        <summary>Sucht Werte innerhalb eines Bezugs oder einer Matrix. Verwenden <b>Sie Match</b> anstelle einer der Funktionen, wenn Sie die Position eines Elements in einem Bereich anstelle des Elements selbst <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Lookup(System.Object,System.Object,System.Object)" /> benötigen.</summary>
        <returns>To be added.</returns>
        <remarks><para>„Lookup_value“ ist der Wert, den Sie in „lookup_array“ abgleichen möchten. Wenn Sie beispielsweise die Nummer einer Person in einem Telefonbuch nachschauen, verwenden Sie den Namen der Person als Suchwert, die Telefonnummer ist jedoch der wert, den Sie wünschen.</para>
          <para>Suchkriterium kann ein Wert (eine Zahl, eine Zeichenfolge oder ein Wahrheitswert) oder ein Bezug auf eine Zelle sein, die eine Zahl, eine Zeichenfolge oder einen Wahrheitswert enthält.</para>
          <para>Wenn match_type 1 ist, findet <b>Match</b> den größten Wert, der kleiner oder gleich lookup_value. Lookup_array muss in aufsteigender Reihenfolge platziert werden: ...-2, -1, 0, 1, 2, ..., A-Z, <b>false</b>, <b>true</b>.</para>
          <para>Wenn match_type 0 ist, findet <b>Match</b> den ersten Wert, der genau gleich lookup_value. Die Elemente der Suchmatrix dürfen in beliebiger Reihenfolge angeordnet sein.</para>
          <para>Wenn match_type -1 ist, findet <b>Match</b> den kleinsten Wert, der größer oder gleich lookup_value. Lookup_array muss in absteigender Reihenfolge platziert werden: <b>true,</b> <b>false,</b>Z-A, ... 2, 1, 0, -1, -2, ..., und so weiter. Wenn match_type ausgelassen wird, wird von 1 ausgegangen.</para>
          <para>
            <b>"Match"</b> gibt die Position des übereinstimmende Werts innerhalb lookup_array, nicht den Wert selbst zurück. Beispiel: MATCH("b",{"a","b","c"},0) gibt 2 zurück, die relative Position von "b" innerhalb des Arrays {"a","b","c"}. </para>
          <para>
            <b>Die</b> Übereinstimmung unterscheidet beim Abgleichen von Textwerten nicht zwischen Groß- und Kleinbuchstaben. </para>
          <para>Wenn <b>die Übereinstimmung</b> nicht gefunden werden kann, wird der Fehlerwert #N/A zurückgegeben. </para>
          <para>Ist Vergleichstyp gleich 0 und ist als Suchkriterium eine Zeichenfolge angegeben, können Sie im Suchkriterium Platzhalterzeichen, Fragezeichen und Sternchen (*) verwenden. Ein Fragezeichen ersetzt beim Abgleichen ein einzelnes Zeichen und ein Sternchen eine beliebige Zeichenfolge. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, müssen Sie eine Tilde (~) vor das zu suchende Zeichen setzen.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public double Max (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Max([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Max (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16391)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... - 1 bis 30 Zahlen, deren größten Wert Sie ermitteln möchten.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den größten Wert innerhalb einer Argumentliste zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn es sich bei einem Argument um ein Array oder einen Bezug handelt, werden nur Zahlen in diesem Array oder Bezug verwendet. Leere Zellen, Wahrheitswerte oder Text im Array oder Bezug werden ignoriert.</para>
          <para>Wenn die Argumente keine Zahlen enthalten, <b>gibt Max</b> 0 (Null) zurück. </para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht. </para>
          <para>Wenn Sie Wahrheitswerte und Textdarstellungen von Zahlen als Teil der Berechnung in einen Bezug verwenden möchten, verwenden Sie die <see cref="MAXA" /> Funktion.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDeterm">
      <MemberSignature Language="C#" Value="public double MDeterm (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDeterm([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDeterm(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDeterm (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MDeterm(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16547)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrix – eine quadratische Matrix (die Anzahl der Zeilen und Spalten ist identisch).</param>
        <summary>Gibt die Determinante einer Matrix zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Array kann als Zellbereich angegeben werden, z. B. A1:C3; als Arraykonstante, z. B. {1,2,3;4,5,6;7,8,9}; oder als Name für eine der folgenden. <b>MDeterm</b> gibt die #VALUE! fehler, wenn: </para>
          <para>Zellen in der Matrix sind leer oder enthalten Text.</para>
          <para>Die Matrix hat eine ungleiche Anzahl an Zeilen und Spalten.</para>
          <para>Die Größe der Matrix überschreitet 73 Spalten und 73 Zeilen.</para>
          <para>Die Determinante einer Matrix ist eine Zahl, die aus den Werten berechnet wird, die zu der jeweiligen Matrix gehören. Für eine aus drei Zeilen und drei Spalten bestehende Matrix (A1:C3) ist die Determinante wie folgt definiert: </para>
          <code>MDETERM(A1:C3)</code>
          <para>gleich</para>
          <code>A1*(B2*C3-B3*C2) + A2*(B3*C1-B1*C3) + A3*(B1*C2-B2*C1)</code>
          <para>Determinanten werden normalerweise dazu verwendet, Formelsysteme zu lösen, die mehrere Unbekannte (Variablen) haben. </para>
          <para>
            <b>MDeterm</b> wird mit einer Genauigkeit von ca. 16 Ziffern berechnet, was zu einem kleinen numerischen Fehler führen kann, wenn die Berechnung nicht abgeschlossen ist. Zum Beispiel kann die Determinante einer singulären Matrix um den Wert 1E-16 von 0 verschieden sein.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDuration">
      <MemberSignature Language="C#" Value="public double MDuration (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MDuration([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MDuration(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MDuration (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16843)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Nominalzins – der jährliche Couponzinssatz des Wertpapiers.</param>
        <param name="Arg4">Rendite – die jährliche Rendite des Wertpapiers.</param>
        <param name="Arg5">Häufigkeit – die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2 für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg6">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt die modifizierte Macauley-Dauer eines Wertpapiers mit einem angenommenen Nennwert von 100 $ zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Kupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Kupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Häufigkeit und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn für Abrechnung oder Fälligkeit kein gültiges Datum vorkommt, gibt <b>MDuration</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If yld &lt; 0 or if coupon &lt; 0, <b>MDuration</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die Häufigkeit eine andere Zahl als 1, 2 oder 4 ist, gibt <b>MDuration</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>gibt MDuration</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die ≥ ist, <b>gibt MDuration</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die modifizierte Dauer ist wie folgt definiert: 

 </para>
          <para>Abbildung 1: Formel für geänderte Dauer</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Median">
      <MemberSignature Language="C#" Value="public double Median (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Median([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Median (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16611)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... - 1 bis 30 Zahlen, deren Median Sie berechnen möchten.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den Median der angegebenen Zahlen zurück. Der Median ist die Zahl, die in der Mitte einer Zahlenreihe liegt.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn eine gleichmäßige Anzahl von Zahlen im Satz enthalten ist, berechnet <b>Median</b> den Durchschnitt der beiden Zahlen in der Mitte. Siehe zweite Formel im Beispiel.</para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>
            <b>Hinweis:</b>Die <b>Medianfunktion</b> misst die zentrale Tendenz, d. h. die Position des Mittelpunkts einer Gruppe von Zahlen in einer statistischen Verteilung. Die folgenden drei Maße der zentralen Tendenz sind am gebräuchlichsten:</para>
          <list type="bullet">
            <item>
              <description>Mittelwert. Dies ist das arithmetische Mittel, das berechnet wird, indem Zahlen addiert werden und die Summe dann durch die Anzahl der Summanden geteilt wird. Der Mittelwert von 2, 3, 3, 5, 7 und 10 beträgt beispielsweise 30 geteilt durch 6, also 5. </description>
            </item>
            <item>
              <description>Medianwert. Dies ist die mittlere Zahl in einer Gruppe von Zahlen. Dies bedeutet, dass die Hälfte der Zahlen größer als der Median und die Hälfte der Zahlen kleiner als der Median ist. Der Median von 2, 3, 3, 5, 7 und 10 ist beispielsweise 4.</description>
            </item>
            <item>
              <description>Modalwert. Dies ist die Zahl, die in einer Gruppe von Zahlen am häufigsten vorkommt. Der Modalwert von 2, 3, 3, 5, 7 und 10 ist beispielsweise 3.</description>
            </item>
          </list>
          <para>Bei einer symmetrischen Verteilung in einer Gruppe von Zahlen sind diese drei Arten der zentralen Tendenz gleich. Bei einer nicht symmetrischen Verteilung in einer Gruppe von Zahlen können die Werte unterschiedlich sein.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public double Min (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Min([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Min (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16390)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – 1 bis 30 Zahlen, deren kleinsten Wert Sie ermitteln möchten.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den kleinsten Wert innerhalb einer Wertemenge zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn es sich bei einem Argument um ein Array oder einen Bezug handelt, werden nur Zahlen in diesem Array oder Bezug verwendet. Leere Zellen, Wahrheitswerte oder Text im Array oder Bezug werden ignoriert.</para>
          <para>Wenn die Argumente keine Zahlen enthalten, <b>gibt Min</b> 0 zurück. </para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn Sie Wahrheitswerte und Zahlen in Textform in einen Bezug als Teil der Berechnung aufnehmen möchten, verwenden Sie die MINA-Funktion.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MInverse">
      <MemberSignature Language="C#" Value="public object MInverse (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MInverse([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MInverse(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MInverse (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MInverse(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16548)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrix – eine quadratische Matrix (die Anzahl der Zeilen und Spalten ist identisch).</param>
        <summary>Gibt die Inverse einer Matrix zurück (die zu einer Matrix gehörende Kehrmatrix).</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Größe des Arrays darf 52 spaltenweise 52 Zeilen nicht überschreiten. Andern falls, gibt die Funktion eine #VALUE! zurück. </para>
          <para>Matrix kann wie folgt angegeben werden: als Zellbereich (z. B. A1:C3), als Arraykonstante (z. B. {1.2.3;4.5.6;7.8.9} oder als Name, der einem Zellbereich oder einer Arraykonstanten zugeordnet ist.</para>
          <para>Wenn Zellen im Array leer sind oder Text enthalten, gibt <b>MInverse</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>MInverse</b> gibt auch die #VALUE! fehlerwert, wenn array nicht eine gleiche Anzahl von Zeilen und Spalten hat. </para>
          <para>Formeln, die einen Array zurückgeben, müssen als Arrayformel eingegeben werden.</para>
          <para>Inverse Matrizen werden ebenso wie Determinanten im Allgemeinen zur Lösung von mathematischen Formelsystemen mit mehreren Variablen verwendet. Das Produkt einer Matrix und ihrer Inverse ist die Einheitsmatrix, eine quadratische Matrix, in der die Elemente auf der Hauptdiagonalen gleich 1 und alle anderen Elemente gleich 0 sind.</para>
          <para>Nehmen Sie als Beispiel für die Berechnung einer Matrix aus zwei Zeilen und zwei Spalten an, dass der Bereich A1:B2 die Buchstaben a, b, c und d enthält, die vier beliebige Zahlen darstellen. Die folgende Tabelle zeigt die Inverse der Matrix A1:B2. </para>
          <list type="table">
            <item>
              <term>Zeile 1</term>
              <description>d/(a *d-b* c)</description>
              <description>b/(b *c-a* d)</description>
            </item>
            <item>
              <term>Zeile 2</term>
              <description>c/(b *c-a* d)</description>
              <description>a/(a *d-b* c)</description>
            </item>
          </list>
          <para>
            <b>MInverse</b> wird mit einer Genauigkeit von ca. 16 Ziffern berechnet, was zu einem kleinen numerischen Fehler führen kann, wenn der Abbruch nicht abgeschlossen ist. </para>
          <para>Für einige quadratische Matrizen kann keine Inverse ermittelt werden. fehlerwert mit <b>MInverse</b>. Die Determinante für eine nicht invertierbare Matrix ist 0.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MIrr">
      <MemberSignature Language="C#" Value="public double MIrr (object Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MIrr([in]object Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MIrr(System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIrr (Arg1 As Object, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MIrr(System::Object ^ Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16445)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Werte – eine Matrix oder ein Bezug auf Zellen, die Zahlen enthalten. Diese Zahlen entsprechen einer Reihe von Auszahlungen (negative Werte) sowie Einzahlungen (positive Werte), die in gleich langen Perioden erfolgen.</param>
        <param name="Arg2">Investition – der Zinssatz, den Sie für die gezahlten Gelder ansetzen.</param>
        <param name="Arg3">Reinvestition – ist der Zinssatz, den Sie für reinvestierte Gelder erzielen.</param>
        <summary>Gibt einen modifizierten internen Zinsfuß zurück, bei dem positive und negative Cashflows mit unterschiedlichen Zinssätzen finanziert werden. MIRR berücksichtigt sowohl die Kosten der jeweiligen Investition als auch die Zinsen, die sich aus der Reinvestition des Gelds ergeben.</summary>
        <returns>To be added.</returns>
        <remarks><para>Werte müssen mindestens einen positiven und einen negativen Wert enthalten, um die geänderte interne Zinsrate zu berechnen. Andernfalls <b>gibt MIrr</b> die #DIV/0! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>
            <b>MIrr</b> verwendet die Reihenfolge der Werte, um die Reihenfolge der Cashflows zu interpretieren. Sie müssen daher darauf achten, dass Sie die Ein- und Auszahlungen in der von Ihnen gewünschten Reihenfolge und mit den richtigen Vorzeichen eingeben (positive Werte für Geld, das Sie erhalten, und negative Werte für Geld, das Sie zahlen). </para>
          <para>Wenn n die Anzahl der Cashflows in Werten ist, Frate die finance_rate und rrate die reinvest_rate ist, ist die Formel für <b>MIrr:</b> </para>
          <para>Abbildung 1: Formel für die MIrr-Methode</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MMult">
      <MemberSignature Language="C#" Value="public object MMult (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MMult([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MMult(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MMult (Arg1 As Object, Arg2 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MMult(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16549)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrix1, Matrix2 – die Matrizen, die Sie multiplizieren möchten.</param>
        <param name="Arg2">Matrix1, Matrix2 – die Matrizen, die Sie multiplizieren möchten.</param>
        <summary>Gibt das Produkt zweier Matrizen zurück. Das Ergebnis ist eine Matrix, die dieselbe Anzahl von Zeilen wie Matrix1 und dieselbe Anzahl von Spalten wie Matrix2 hat.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Anzahl der Spalten von Matrix1 muss mit der Anzahl der Zeilen von Matrix2 übereinstimmen, und beide Matrizen dürfen nur Zahlen enthalten.</para>
          <para>Matrix1 und Matrix2 können als Zellbereiche, Matrixkonstanten oder Bezüge angegeben sein.</para>
          <para>
            <b>MMult</b> gibt die #VALUE! fehler, wenn: </para>
          <para>Zellen sind leer oder enthalten Text.</para>
          <para>Die Anzahl der Spalten in Matrix1 und die Anzahl der Zeilen in Matrix2 ist nicht identisch.</para>
          <para>Die Größe der sich daraus ergebenden Matrix ist größer oder gleich einer Gesamtsumme von 5.461 Zellen.</para>
          <para>Das Matrixproduktarray a von zwei Arrays b und c ist: </para>
          <para>Abbildung 1: Matrixproduktarray a von zwei Arrays b und c</para>
          <para> </para>
          <para> </para>
          <para>Dabei ist "i" die Zeilennummer und "j" die Spaltennummer.</para>
          <para>Formeln, die Arrays zurückgeben, müssen als Arrayformeln eingegeben werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public double Mode (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16714)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – 1 bis 30 Argumente, für die Sie das harmonische Mittel berechnen möchten. Anstelle der durch Semikolons getrennten Argumente können Sie auch ein Array oder einen Bezug auf ein Array verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den häufigsten Wert in einem Array oder Datenbereich zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zu den neuen Funktionen finden Sie unter den <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Methoden und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> methoden.</para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn der Datensatz keine doppelten Datenpunkte enthält, gibt <b>Mode</b> den #N/A-Fehlerwert zurück.</para>
          <para>
            <b>Hinweis:</b>Die <b>Modusfunktion</b> misst die zentrale Tendenz, d. h. die Position des Mittelpunkts einer Gruppe von Zahlen in einer statistischen Verteilung. Die folgenden drei Maße der zentralen Tendenz sind am gebräuchlichsten:</para>
          <list type="bullet">
            <item>
              <description>Mittelwert. Dies ist das arithmetische Mittel, das berechnet wird, indem Zahlen addiert werden und die Summe dann durch die Anzahl der Summanden geteilt wird. Der Mittelwert von 2, 3, 3, 5, 7 und 10 beträgt beispielsweise 30 geteilt durch 6, also 5. </description>
            </item>
            <item>
              <description>Medianwert. Dies ist die mittlere Zahl in einer Gruppe von Zahlen. Dies bedeutet, dass die Hälfte der Zahlen größer als der Median und die Hälfte der Zahlen kleiner als der Median ist. Der Median von 2, 3, 3, 5, 7 und 10 ist beispielsweise 4. </description>
            </item>
            <item>
              <description>Modalwert. Dies ist die Zahl, die in einer Gruppe von Zahlen am häufigsten vorkommt. Der Modalwert von 2, 3, 3, 5, 7 und 10 ist beispielsweise 3.</description>
            </item>
          </list>
          <para>Bei einer symmetrischen Verteilung in einer Gruppe von Zahlen sind diese drei Arten der zentralen Tendenz gleich. Bei einer nicht symmetrischen Verteilung in einer Gruppe von Zahlen können die Werte unterschiedlich sein.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Mult">
      <MemberSignature Language="C#" Value="public object Mode_Mult (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Mode_Mult([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Mult(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Mult (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16881)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1 – Das erste Zahlenargument, für das Sie den Modus berechnen möchten.</param>
        <param name="Arg2">Zahl2 bis Zahl30 - Zahlenargumente von 2 bis 30, für die Sie den Modus berechnen möchten. Sie können auch ein Array oder einen Bezug auf ein Array anstelle der durch Komma getrennten Argumente verwenden.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt ein vertikales Array der häufigsten Werte in einem Array oder Datenbereich zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn der Datensatz keine doppelten Datenpunkte enthält, <b>gibt Mode_Mult</b> den Fehlerwert #N/A zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode_Sngl">
      <MemberSignature Language="C#" Value="public double Mode_Sngl (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Mode_Sngl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Mode_Sngl(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mode_Sngl (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16882)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2... - 1 bis 30 Argumente, für die Sie den Modus berechnen möchten. Sie können auch ein Array oder einen Bezug auf ein Array anstelle der durch Komma getrennten Argumente verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den häufigsten Wert in einem Array oder Datenbereich zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn der Datensatz keine doppelten Datenpunkte enthält, <b>gibt Mode_Sngl</b> den Fehlerwert #N/A zurück.</para>
          <para>
            <b>Hinweis:</b>Die <b>Mode_Sngl</b> misst die zentrale Tendenz, d. h. die Position des Mittelpunkts einer Gruppe von Zahlen in einer statistischen Verteilung. Die folgenden drei Maße der zentralen Tendenz sind am gebräuchlichsten:</para>
          <list type="bullet">
            <item>
              <description>Mittelwert Das arithmetische Mittel und wird berechnet, indem eine Gruppe von Zahlen hinzugefügt und dann durch die Anzahl dieser Zahlen dividiert wird. Der Mittelwert von 2, 3, 3, 5, 7 und 10 beträgt beispielsweise 30 geteilt durch 6, also 5. </description>
            </item>
            <item>
              <description>Median Die mittlere Zahl einer Gruppe von Zahlen; Das heißt, die Hälfte der Zahlen hat Werte, die größer als der Median sind, und die Hälfte der Zahlen hat Werte, die kleiner als der Median sind. Der Median von 2, 3, 3, 5, 7 und 10 ist beispielsweise 4. </description>
            </item>
            <item>
              <description>Modus Die am häufigsten vorkommende Zahl in einer Gruppe von Zahlen. Der Modalwert von 2, 3, 3, 5, 7 und 10 ist beispielsweise 3.</description>
            </item>
          </list>
          <para>Bei einer symmetrischen Verteilung in einer Gruppe von Zahlen sind diese drei Arten der zentralen Tendenz gleich. Bei einer nicht symmetrischen Verteilung in einer Gruppe von Zahlen können die Werte unterschiedlich sein.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MRound">
      <MemberSignature Language="C#" Value="public double MRound (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MRound([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MRound(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MRound (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double MRound(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16806)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – Der zu rundende Wert.</param>
        <param name="Arg2">Vielfaches – das Vielfache, auf das Sie Zahl runden möchten.</param>
        <summary>Gibt eine auf das gewünschte Vielfache gerundete Zahl zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>MRound rundet</b> den Wert ab von Null auf, wenn der Rest der Division durch ein Vielfaches größer oder gleich der Hälfte des Mehrfachwerts ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiNomial">
      <MemberSignature Language="C#" Value="public double MultiNomial (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 MultiNomial([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.MultiNomial(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MultiNomial (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16858)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – 1 bis 29 Werte, deren Polynomialkoeffizienten Sie berechnen möchten.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den Polynominalkoeffizienten einer Gruppe von Zahlen zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Argument nicht numerisch ist, <b>gibt MultiNomial</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn ein Argument kleiner als Null ist, <b>gibt MultiNomial</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Der Polynomialkoeffizient lautet wie folgt: 

 </para>
          <para>Abbildung 1: Formel für multinomiale Methode</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Munit">
      <MemberSignature Language="C#" Value="public object Munit (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Munit([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Munit(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Munit (Arg1 As Double) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Munit(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16966)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ganze Zahl, die die Dimension der Einheitenmatrix an gibt, die Sie zurückgeben möchten.</param>
        <summary>Gibt die Einheitenmatrix für die angegebene Dimension zurück.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinom_Dist">
      <MemberSignature Language="C#" Value="public double NegBinom_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinom_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinom_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinom_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16922)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl_Misserfolge - Die Anzahl der Misserfolge.</param>
        <param name="Arg2">Zahl_Erfolge - Die Anzahl der Erfolge.</param>
        <param name="Arg3">Erfolgswahrsch - Die Wahrscheinlichkeit eines Erfolgs.</param>
        <param name="Arg4">Kumuliert – Ein logischer Wert, der die Form der Funktion bestimmt. Wenn kumulativ <b>true</b>ist, <b>gibt NegBinom_Dist</b> die kumulierte Verteilungsfunktion zurück. wenn <b>false,</b>gibt sie die Wahrscheinlichkeitsdichtefunktion zurück.</param>
        <summary>Gibt Wahrscheinlichkeiten einer negativbinomialverteilten Zufallsvariablen zurück. <b>NegBinom_Dist</b> gibt die Wahrscheinlichkeit zurück, dass es number_f Fehler vor dem number_s-th-Erfolg gibt, wenn die konstante Erfolgswahrscheinlichkeit probability_s. Die Vorgehensweise dieser Funktion unterscheidet sich von der Binomialverteilung nur dadurch, dass die Anzahl der Erfolge feststeht und die Anzahl der Versuche variabel ist. Analog zu einer Binomialverteilung wird vorausgesetzt, dass die jeweiligen Versuche voneinander unabhängig sind.</summary>
        <returns>To be added.</returns>
        <remarks><para>Zum Beispiel sollen Sie 5 Personen ausfindig machen, die hervorragende Reflexe haben, und Sie wissen, dass die Wahrscheinlichkeit, dass ein Kandidat diese Forderung erfüllt, 0,3 ist. <b>NegBinom_Dist</b> berechnet die Wahrscheinlichkeit, dass Sie eine bestimmte Anzahl nicht qualifizierter Kandidaten interviewen, bevor Sie alle 10 qualifizierten Kandidaten finden: </para>
          <para>Zahl_Misserfolge und Zahl_Erfolge werden zu ganzen Zahlen gekürzt, indem ihre Nachkommastellen abgeschnitten werden. </para>
          <para>Wenn ein Argument nicht numerisch ist, <b>gibt NegBinom_Dist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Ist probability_s &lt; 0 oder ist die Wahrscheinlichkeit &gt; 1, <b>gibt NegBinom_Dist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn number_f &lt; 0 oder number_s &lt; 1 ist, <b>gibt NegBinom_Dist</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für die negative Binomialverteilung ist: </para>
          <para>Abbildung 1: Gleichung für die negative Binomialverteilung</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>x is number_f, r is number_s, and p is probability_s.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NegBinomDist">
      <MemberSignature Language="C#" Value="public double NegBinomDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NegBinomDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinomDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NegBinomDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NegBinomDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16676)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl_Misserfolge - Die Anzahl der Misserfolge.</param>
        <param name="Arg2">Zahl_Erfolge - Die Anzahl der Erfolge.</param>
        <param name="Arg3">Erfolgswahrsch - Die Wahrscheinlichkeit eines Erfolgs.</param>
        <summary>Gibt Wahrscheinlichkeiten einer negativbinomialverteilten Zufallsvariablen zurück. NegBinomDist gibt die Wahrscheinlichkeit zurück, dass es number_f Fehler vor dem number_s-th-Erfolg gibt, wenn die konstante Erfolgswahrscheinlichkeit probability_s. Die Vorgehensweise dieser Funktion unterscheidet sich von der Binomialverteilung nur dadurch, dass die Anzahl der Erfolge feststeht und die Anzahl der Versuche variabel ist. Analog zu einer Binomialverteilung wird vorausgesetzt, dass die jeweiligen Versuche voneinander unabhängig sind.</summary>
        <returns>To be added.</returns>
        <remarks><para>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NegBinom_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> Methode.</para>
          <para>Zum Beispiel sollen Sie 5 Personen ausfindig machen, die hervorragende Reflexe haben, und Sie wissen, dass die Wahrscheinlichkeit, dass ein Kandidat diese Forderung erfüllt, 0,3 ist. <b>NegBinomDist</b> berechnet die Wahrscheinlichkeit, dass Sie eine bestimmte Anzahl nicht qualifizierter Kandidaten interviewen, bevor Sie alle 10 qualifizierten Kandidaten finden. </para>
          <para>Zahl_Misserfolge und Zahl_Erfolge werden zu ganzen Zahlen gekürzt, indem ihre Nachkommastellen abgeschnitten werden. </para>
          <para>Wenn ein Argument nicht numerisch ist, <b>gibt NegBinomDist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn probability_s &lt; 0 ist oder wenn die Wahrscheinlichkeit &gt; 1 ist, <b>gibt NegBinomDist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn number_f &lt; 0 oder number_s &lt; 1 ist, gibt <b>NegBinomDist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für die negative Binomialverteilung ist: </para>
          <para>Abbildung 1: Gleichung für die negative Binomialverteilung</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>x is number_f, r is number_s, and p is probability_s.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays">
      <MemberSignature Language="C#" Value="public double NetworkDays (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16856)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ausgangsdatum - ein Datum, das das Anfangsdatum darstellt.</param>
        <param name="Arg2">Enddatum - ein Datum, das das Enddatum darstellt.</param>
        <param name="Arg3">Freie_Tage - ein optionaler Bereich mit einem oder mehreren Datumswerten, die aus dem Arbeitskalender ausgeschlossen werden sollen, beispielsweise landesweite und bundeslandspezifische Feiertage sowie bewegliche Feiertage. Bei dem Bereich kann es sich entweder um einen Zellbereich, der die Datumsangaben enthält, oder um eine Matrixkonstante der fortlaufenden Zahlen handeln, die die Datumsangaben darstellen.</param>
        <summary>Gibt die Anzahl der Arbeitstage zwischen Ausgangsdatum und Enddatum zurück. Nicht zu den Arbeitstagen gezählt werden Wochenenden sowie die Tage, die als Feiertage angegeben sind. Verwenden <b>Sie NetworkDays,</b> um Mitarbeiterleistungen zu berechnen, die basierend auf der Anzahl der Tage, die während eines bestimmten Ausdrucks gearbeitet wurden, anfallen.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Wenn ein Argument kein gültiges Datum ist, gibt <b>NetworkDays</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkDays_Intl">
      <MemberSignature Language="C#" Value="public double NetworkDays_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NetworkDays_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NetworkDays_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NetworkDays_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16904)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date - Das Startdatum, für das die Differenz berechnet werden soll. Das Enddatum kann vor oder hinter dem Ausgangsdatum liegen oder diesem entsprechen.</param>
        <param name="Arg2">End_date - Das Enddatum, für das die Differenz berechnet werden soll. Das Enddatum kann vor oder hinter dem Ausgangsdatum liegen oder diesem entsprechen.</param>
        <param name="Arg3">Wochenende – Gibt die Wochentage an, die Wochenendtage sind und nicht in der Anzahl der ganzen Arbeitstage zwischen start_date und end_date. Wochenende ist eine Wochenendnummer oder -zeichenfolge, die angibt, wann Wochenenden vorliegen.</param>
        <param name="Arg4">Feiertage – Ein optionaler Satz von Einem oder mehreren Datumsangaben, die aus dem Arbeitstagkalender ausgeschlossen werden sollen. Bei Freie Tage kann es sich um einen Zellbereich, der die Datumswerte enthält, oder um eine Arraykonstante der fortlaufenden Zahlen handeln, die die Datumswerte darstellen. Die Reihenfolge der Datums- oder fortlaufenden Werte in Freie Tage ist beliebig.</param>
        <summary>Gibt die Anzahl der ganzen Arbeitstage zwischen zwei Datumsangaben mit Parametern zurück, um anzugeben, welche und wie viele Tage als Wochenendtage festgelegt sind. Wochenendtage sowie alle als Feiertag angegebenen Tage werden nicht als Arbeitstage gerechnet.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn Ausgangsdatum hinter Enddatum liegt, ist der Rückgabewert negativ, und der Wert entspricht der Anzahl ganzer Arbeitstage. </para>
          <para>Wenn start_date für den aktuellen Datumsbasiswert nicht im Bereich liegt, <b>gibt NetworkDays_Intl</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn end_date für den aktuellen Datumsbasiswert nicht im Bereich liegt, <b>gibt NetworkDays_Intl</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn eine Wochenendzeichenfolge eine ungültige Länge hat oder ungültige Zeichen enthält, <b>gibt NetworkDays_Intl</b> den Wert #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Nominal">
      <MemberSignature Language="C#" Value="public double Nominal (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Nominal([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Nominal(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Nominal (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Nominal(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16829)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Effektiver_Zins – die Effektivverzinsung.</param>
        <param name="Arg2">Perioden – die Anzahl der Zinszahlungen pro Jahr.</param>
        <summary>Gibt die jährliche Nominalverzinsung zurück, ausgehend vom effektiven Zinssatz sowie der Anzahl der Verzinsungsperioden innerhalb eines Jahrs.</summary>
        <returns>To be added.</returns>
        <remarks><para>Perioden wird auf eine ganze Zahl gekürzt. </para>
          <para>Wenn eines der Argumente nicht numerisch ist, gibt <b>Nominal</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If effect_rate ≤ 0 or if npery &lt; 1, <b>Nominal</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>Nominal</b> steht im Zusammenhang <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Effect(System.Object,System.Object)" /> mit der folgenden Gleichung: </para>
          <para>Abbildung 1: Formel</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Dist">
      <MemberSignature Language="C#" Value="public double Norm_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16883)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - Der Wert, dessen Verteilung bestimmt werden soll.</param>
        <param name="Arg2">Mittelwert - Das arithmetisches Mittel der Verteilung.</param>
        <param name="Arg3">Standabwn - Die Standardabweichung der Verteilung.</param>
        <param name="Arg4">Kumuliert – Ein logischer Wert, der die Form der Funktion bestimmt. Wenn kumulativ <b>true</b>ist, <b>gibt Norm_Dist</b> die kumulierte Verteilungsfunktion zurück. wenn <b>false</b>, gibt sie die Wahrscheinlichkeits-Massenfunktion zurück.</param>
        <summary>Gibt die Normalverteilung für den angegebenen Mittelwert und die angegebene Standardabweichung zurück. Diese Funktion hat viele Anwendungsgebiete innerhalb der Statistik, so unter anderem auch zum Testen von Hypothesen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn mittelwert oder standard_dev nicht numerisch ist, <b>gibt Norm_Dist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn standard_dev ≤ 0 ist, <b>gibt Norm_Dist</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If mean = 0, standard_dev = 1, and cumulative = <b>true</b>, <b>Norm_Dist</b> returns the standard normal distribution, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> . </para>
          <para>Die Formel für die Normale Dichtefunktion (kumulativ = <b>false)</b>ist: </para>
          <para>Abbildung 1: Gleichung für die Normale Dichtefunktion</para>
          <para> </para>
          <para> </para>
          <para>Wenn kumulativ = <b>true,</b>ist die Formel das Integral von negativer Unendlichkeit bis x der angegebenen Formel.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_Inv">
      <MemberSignature Language="C#" Value="public double Norm_Inv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_Inv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_Inv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_Inv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16884)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Warsch - Eine der Normalverteilung zugeordnete Wahrscheinlichkeit.</param>
        <param name="Arg2">Mittelwert - Das arithmetisches Mittel der Verteilung.</param>
        <param name="Arg3">Standabwn - Die Standardabweichung der Verteilung.</param>
        <summary>Gibt die Quantile der Normalverteilung für den angegebenen Mittelwert und die angegebene Standardabweichung zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Argument nicht numerisch ist, <b>gibt Norm_Inv</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die Wahrscheinlichkeit = 0 oder wenn die &lt; Wahrscheinlichkeit &gt; = 1 <b>ist, gibt Norm_Inv</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn standard_dev ≤ 0 ist, <b>gibt Norm_Inv</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If mean = 0 and standard_dev = 1, <b>Norm_Inv</b> uses the standard normal distribution (see <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" /> ).</para>
          <para>Bei einem Wert für die Wahrscheinlichkeit <b>sucht Norm_Inv</b> diesen Wert x so, dass NORM_DIST(x, mean, standard_dev, TRUE) = wahr ist. Daher hängt die Genauigkeit <b>der Norm_Inv</b> von der Genauigkeit der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> ab.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Dist">
      <MemberSignature Language="C#" Value="public double Norm_S_Dist (double Arg1, bool Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Dist([in]float64 Arg1, [in]bool Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Dist (Arg1 As Double, Arg2 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Dist(double Arg1, bool Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16923)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">Z - Der Wert, dessen Verteilung bestimmt werden soll.</param>
        <param name="Arg2">Kumuliert – Ein logischer Wert, der die Form der Funktion bestimmt. Wenn <b>"Kumuliert" auf "true"</b> <b>Norm_S_Dist</b> die kumulierte Verteilungsfunktion zurückgegeben. wenn <b>false</b>, gibt sie die Wahrscheinlichkeits-Massenfunktion zurück.</param>
        <summary>Gibt Werte der Verteilungsfunktion einer standardnormalverteilten Zufallsvariablen zurück. Die Standardnormalverteilung hat den Mittelwert 0 und die Standardabweichung 1. Sie können diese Funktion anstelle einer Tabelle verwenden, in der Werte der Verteilungsfunktion der Standardnormalverteilung zusammengestellt sind.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn z nicht numerisch <b>ist, gibt Norm_S_Dist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel der Dichtefunktion der standardisierten Normalverteilung lautet: 

 </para>
          <para>Abbildung 1: Gleichung für die standardnormale Dichtefunktion</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Norm_S_Inv">
      <MemberSignature Language="C#" Value="public double Norm_S_Inv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Norm_S_Inv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Norm_S_Inv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Norm_S_Inv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16924)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Warsch - Eine der Normalverteilung zugeordnete Wahrscheinlichkeit.</param>
        <summary>Gibt Quantile der Standardnormalverteilung zurück. Die Standardnormalverteilung hat den Mittelwert 0 und die Standardabweichung 1.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn die Wahrscheinlichkeit nicht numerisch <b>ist, gibt Norm_S_Inv</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Ist die &lt; Wahrscheinlichkeit 0 oder ist die Wahrscheinlichkeit &gt; 1, <b>gibt Norm_S_Inv</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para>Bei einem Wert für die Wahrscheinlichkeit <b>Norm_S_Inv</b> dieser Wert z so, dass NORM_S_DIST(z) = Wahrscheinlichkeit. Daher hängt die Genauigkeit <b>der Norm_S_Inv</b>von der Genauigkeit der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> ab. <b>Norm_S_Inv</b> verwendet eine iterative Suchtechnik. Hat die Suche nach 100 Iterationen noch nicht konvergiert, gibt die Funktion den Fehlerwert #N/A zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormDist">
      <MemberSignature Language="C#" Value="public double NormDist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormDist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormDist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16677)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x – der Wert, dessen Wahrscheinlichkeit Sie berechnen möchten.</param>
        <param name="Arg2">Mittelwert – das arithmetische Mittel der Verteilung.</param>
        <param name="Arg3">Standabwn – die Standardabweichung der Verteilung.</param>
        <param name="Arg4">Kumuliert – ein Wahrheitswert, der die Form der Funktion bestimmt. Wenn <b>"Cumulative" auf "true"</b>zutrifft, <b>gibt NormDist</b> die kumulierte Verteilungsfunktion zurück. wenn <b>false</b>, gibt sie die Wahrscheinlichkeits-Massenfunktion zurück.</param>
        <summary>Gibt die Normalverteilung für den angegebenen Mittelwert und die angegebene Standardabweichung zurück. Diese Funktion hat sehr viele Anwendungsgebiete innerhalb der Statistik, so unter anderem auch zum Testen von Hypothesen.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> Methode.</para>
          <para>Wenn mittelwert oder standard_dev nicht numerisch ist, gibt <b>NormDist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn standard_dev ≤ 0 ist, <b>gibt NormDist</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If mean = 0, standard_dev = 1, and cumulative = <b>true</b>, <b>NormDist</b> returns the standard normal distribution, <b>NormDist</b>. </para>
          <para>Die Formel für die Normale Dichtefunktion (kumulativ = <b>false)</b>ist: </para>
          <para>Abbildung 1: Gleichung für die Normale Dichtefunktion</para>
          <para> </para>
          <para> </para>
          <para>Wenn kumulativ = <b>true,</b>ist die Formel das Integral von negativer Unendlichkeit bis x der angegebenen Formel.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormInv">
      <MemberSignature Language="C#" Value="public double NormInv (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormInv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormInv(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormInv (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormInv(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16679)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrsch – die zur Normalverteilung gehörige Wahrscheinlichkeit.</param>
        <param name="Arg2">Mittelwert – das arithmetische Mittel der Verteilung.</param>
        <param name="Arg3">Standabwn – die Standardabweichung der Verteilung.</param>
        <summary>Gibt die Quantile der Normalverteilung für den angegebenen Mittelwert und die angegebene Standardabweichung zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_Inv(System.Double,System.Double,System.Double)" /> Methode.</para>
          <para>Wenn eines der Argumente nicht numerisch ist, <b>gibt NormInv</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die &lt; Wahrscheinlichkeit 0 oder die Wahrscheinlichkeit &gt; 1 ist, gibt <b>NormInv</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn standard_dev ≤ 0 ist, <b>gibt NormInv</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If mean = 0 and standard_dev = 1, <b>NormInv</b> uses the standard normal distribution (see <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" /> ). </para>
          <para>Bei einem Wert für die Wahrscheinlichkeit sucht <b>NormInv</b> diesen Wert x so, dass NORMDIST(x, mean, standard_dev, TRUE) = Wahrsch ist. Daher hängt die Genauigkeit von <b>NormInv</b> von der Genauigkeit von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormDist(System.Double,System.Double,System.Double,System.Boolean)" /> ab. <b>NormInv verwendet</b> eine iterative Suchtechnik. Hat die Suche nach 100 Iterationen noch nicht konvergiert, gibt die Funktion den Fehlerwert #N/A zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSDist">
      <MemberSignature Language="C#" Value="public double NormSDist (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSDist([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSDist (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSDist(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16678)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">z – der Wert, dessen Wahrscheinlichkeit Sie berechnen möchten.</param>
        <summary>Gibt Werte der Verteilungsfunktion einer standardnormalverteilten Zufallsvariablen zurück. Die Standardnormalverteilung hat den Mittelwert 0 und die Standardabweichung 1. Sie können diese Funktion anstelle einer Tabelle verwenden, in der Werte der Verteilungsfunktion der Standardnormalverteilung zusammengestellt sind.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Dist(System.Double,System.Boolean)" /> Methode.</para>
          <para>Wenn z nicht numerisch ist, <b>gibt NormSDist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel der Dichtefunktion der standardisierten Normalverteilung lautet: 

 </para>
          <para>Abbildung 1: Gleichung für die standardnormale Dichtefunktion</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NormSInv">
      <MemberSignature Language="C#" Value="public double NormSInv (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NormSInv([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSInv(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function NormSInv (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NormSInv(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16680)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrsch – die zur Normalverteilung gehörige Wahrscheinlichkeit.</param>
        <summary>Gibt Quantile der Standardnormalverteilung zurück. Die Standardnormalverteilung hat einen Mittelwert von 0 und eine Standardabweichung von 1.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Norm_S_Inv(System.Double)" /> Methode.</para>
          <para>Wenn die Wahrscheinlichkeit nicht numerisch ist, <b>gibt NormSInv</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn &lt; Wahrsch = 0 oder Wahrsch &gt; = 1 ist, gibt <b>NormSInv</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para>Bei einem Wert für die Wahrscheinlichkeit sucht <b>NormSInv</b> diesen Wert z so, dass NORMSDIST(z) = Wahrsch ist. Daher hängt die Genauigkeit von <b>NormSInv</b> von der Genauigkeit der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NormSDist(System.Double)" /> ab.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public double NPer (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NPer([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NPer(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16442)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zins – der Zinssatz pro Zeitraum.</param>
        <param name="Arg2">Rmz – der Betrag (Annuität), der in jeder Periode gezahlt wird. Dieser Betrag kann sich während der Laufzeit nicht ändern. Üblicherweise umfasst Rmz Tilgung und Zinsen, nicht jedoch sonstige Gebühren oder Steuern. (Rmz = Regelmäßige Zahlung)</param>
        <param name="Arg3">Bw – der Barwert oder der heutige Gesamtwert einer Reihe zukünftiger Zahlungen.</param>
        <param name="Arg4">Zw – der zukünftige Wert oder der Kassenbestand, den Sie nach Tätigung der letzten Zahlung erzielen möchten. Wenn Zw ausgelassen wird, wird dafür der Wert 0 angenommen (der zukünftige Wert einer Anleihe beträgt beispielsweise 0).</param>
        <param name="Arg5">F – die Zahl 0 oder 1, die die Fälligkeit von Zahlungen angibt.</param>
        <summary>Gibt die Anzahl der Zahlungsperioden einer Investition zurück, die auf periodischen, gleich bleibenden Zahlungen sowie einem konstanten Zinssatz basiert.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>Zum Ende des Zeitraums</description>
            </item>
            <item>
              <term>1 </term>
              <description>Zum Anfang des Zeitraums</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Npv">
      <MemberSignature Language="C#" Value="public double Npv (double Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Npv([in]float64 Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Npv (Arg1 As Double, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16395)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zins – der Abzinsungsfaktor für die Dauer einer Periode.</param>
        <param name="Arg2">Wert1, Wert2, ... – 1 bis 29 Argumente, die den Auszahlungen und den Einzahlungen entsprechen.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt den Nettobarwert (Kapitalwert) einer Investition auf der Basis eines Abzinsungsfaktors für eine Reihe periodischer Zahlungen zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wert1, Wert2, ... müssen als Zahlungsvorgänge in gleich bleibenden Zeitabständen erfolgen und sind jeweils am Ende einer Periode vorzunehmen. </para>
          <para>
            <b>Npv</b> verwendet die Reihenfolge von Wert1, Wert2, ... , um die Reihenfolge der Cashflows zu interpretieren. Achten Sie daher darauf, dass Sie die Auszahlungen und Einzahlungen in der richtigen Reihenfolge eingeben. </para>
          <para>Es werden alle Argumente berücksichtigt, bei denen es sich um Zahlen, leere Zellen, Wahrheitswerte oder Zahlen in Textform handelt. Argumente, die Fehlerwerte oder Text enthalten, der sich nicht in eine Zahl umwandeln lässt, werden ignoriert.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Die <b>Npv-Investition</b> beginnt einen Zeitraum vor dem Datum des Cashflows "Wert1" und endet mit dem letzten Cashflow in der Liste. Die <b>Npv-Berechnung</b> basiert auf zukünftigen Cashflows. Wenn der erste Cashflow zu Beginn der ersten Periode erfolgt, muss der erste Wert dem <b>Npv-Ergebnis</b> hinzugefügt werden, nicht in den Wertenargumenten. Weitere Informationen hierzu finden Sie in den nachfolgend aufgeführten Beispielen. </para>
          <para>Wenn n die Anzahl der Cashflows in der Werteliste ist, ist die Formel für <b>Npv:</b> </para>
          <para>Abbildung 1: Formel für die Npv-Methode</para>
          <para> </para>
          <para> </para>
          <para>
            <b>Npv</b> ist der Funktion <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> (Present Value) ähnlich. Der Hauptunterschied zwischen PV und <b>Npv</b> besteht in der Möglichkeit, dass Cashflows entweder am Ende oder am Anfang <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> des Zeitraums beginnen. Im Gegensatz zu <b>den variablen Npv-Cashflowwerten</b> müssen Cashflows während der gesamten <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> Investition konstant sein. Informationen zu Annuitäten und Finanzfunktionen finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> . </para>
          <para>
            <b>Npv steht</b> auch im Zusammenhang mit der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /> Funktion (interne Zinsrate). <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Irr(System.Object,System.Object)" /> ist die Rate, für die <b>Npv</b> gleich Null ist: NPV(IRR(...), ...) = 0.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberValue">
      <MemberSignature Language="C#" Value="public double NumberValue (string Arg1, string Arg2, string Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NumberValue([in]string Arg1, [in]string Arg2, [in]string Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.NumberValue(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function NumberValue (Arg1 As String, Arg2 As String, Arg3 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double NumberValue(System::String ^ Arg1, System::String ^ Arg2, System::String ^ Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16969)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zeichenfolge, die die zahl darstellt, die konvertiert werden soll.</param>
        <param name="Arg2">Zeichen, das als Dezimaltrennzeichen in der Zeichenfolge verwendet wird.</param>
        <param name="Arg3">Zeichen, das als Gruppentrennzeichen in der Zeichenfolge verwendet wird.</param>
        <summary>Konvertiert Text auf eine von einem Ortsunabhängigen Art und Weise in Eine Zahl.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Bin">
      <MemberSignature Language="C#" Value="public string Oct2Bin (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Bin([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Bin(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Bin (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16774)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die oktale Zahl, die Sie umwandeln möchten. Zahl darf aus höchstens 10 Zeichen bestehen. Das signifikante Bit von Zahl ist das Vorzeichenbit (entspricht dem 30. Bit von rechts). Die anderen 29 Bits sind Betragsbits. Negative Zahlen werden mit der Zweierkomplementschreibweise dargestellt.</param>
        <param name="Arg2">Stellen – die zu verwendende Anzahl von Zeichen. Wenn Stellen weggelassen werden, verwendet <b>Oct2Bin</b> die mindestens erforderliche Anzahl von Zeichen. Das Argument Stellen ist speziell dann hilfreich, wenn der jeweilige Rückgabewert mit führenden 0-en (Nullen) aufgefüllt werden soll.</param>
        <summary>Wandelt eine oktale Zahl in eine binäre Zahl (Dualzahl) um.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn die Zahl negativ ist, <b>ignoriert Oct2Bin</b> stellen und gibt eine 10 Zeichen binäre Zahl zurück. </para>
          <para>Ist Zahl negativ, darf sie nicht kleiner als 7777777000 sein, und ist Zahl positiv, darf sie nicht größer als 777 sein. </para>
          <para>Wenn es sich bei "Zahl" nicht um eine gültige oktale Zahl handelt, gibt <b>Oct2Bin</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn <b>Oct2Bin</b> mehr Als-Stellen-Zeichen erfordert, wird die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn die Stellen nicht numerisch sind, gibt <b>Oct2Bin</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die Stellen negativ sind, <b>gibt Oct2Bin</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Dec">
      <MemberSignature Language="C#" Value="public string Oct2Dec (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Dec([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Dec(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Dec (Arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Oct2Dec(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16776)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die oktale Zahl, die umgewandelt werden soll. Zahl darf nicht mehr als 10 oktale Zeichen (30 Bits) enthalten. Das signifikanteste Bit von Zahl ist das Vorzeichenbit. Die verbleibenden 29 Bits sind Größenbits. Negative Zahlen werden in der Zweierkomplementschreibweise dargestellt.</param>
        <summary>Wandelt eine oktale Zahl in eine dezimale Zahl um.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn es sich bei "Zahl" nicht um eine gültige oktale Zahl handelt, gibt <b>Oct2Dec</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Oct2Hex">
      <MemberSignature Language="C#" Value="public string Oct2Hex (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Oct2Hex([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Oct2Hex(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct2Hex (Arg1 As Object, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16775)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die oktale Zahl, die umgewandelt werden soll. Zahl darf nicht mehr als 10 oktale Zeichen (30 Bits) enthalten. Das signifikanteste Bit von Zahl ist das Vorzeichenbit. Die verbleibenden 29 Bits sind Größenbits. Negative Zahlen werden in der Zweierkomplementschreibweise dargestellt.</param>
        <param name="Arg2">Stellen – die zu verwendende Anzahl von Zeichen. Wenn Stellen weggelassen werden, verwendet <b>Oct2Hex</b> die mindestens erforderliche Anzahl von Zeichen. Das Argument Stellen ist speziell dann hilfreich, wenn der jeweilige Rückgabewert mit führenden 0-en (Nullen) aufgefüllt werden soll.</param>
        <summary>Wandelt eine oktale Zahl in eine hexadezimale Zahl um.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn "Zahl" negativ ist, ignoriert <b>Oct2Hex</b> die Stellen und gibt eine hexadezimale Zahl mit 10 Zeichen zurück. </para>
          <para>Wenn es sich bei "Zahl" nicht um eine gültige oktale Zahl handelt, gibt <b>Oct2Hex</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn <b>Oct2Hex</b> mehr Als-Stellen-Zeichen erfordert, wird die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Stellen keine ganze Zahl ist, wird die Zahl gekürzt. </para>
          <para>Wenn die Stellen nicht numerisch sind, gibt <b>Oct2Hex</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die Stellen negativ sind, <b>gibt Oct2Hex</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Odd">
      <MemberSignature Language="C#" Value="public double Odd (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Odd([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Odd(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Odd (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Odd(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16682)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – Der zu rundende Wert.</param>
        <summary>Rundet eine Zahl auf die nächste ungerade ganze Zahl auf.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn die Zahl nicht numerisch ist, <b>gibt Odd</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Unabhängig vom Vorzeichen von Zahl wird ein Wert aufgerundet. Wenn es sich bei Zahl bereits um eine ungerade ganze Zahl handelt, erfolgt keine Rundung.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFPrice">
      <MemberSignature Language="C#" Value="public double OddFPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16846)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Emission – das Datum der Wertpapieremission.</param>
        <param name="Arg4">Erster_Zinstermin – der erste Zinstermin des Wertpapiers.</param>
        <param name="Arg5">Zins – der Zinssatz des Wertpapiers.</param>
        <param name="Arg6">Rendite – die jährliche Rendite des Wertpapiers.</param>
        <param name="Arg7">Rückzahlung – der Rückkaufswert des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg8">Häufigkeit – die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2 für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg9">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt den Kurs pro 100 $ Nennwert eines Wertpapiers mit einem unregelmäßigen (kurzen oder langen) ersten Zinstermin zurück.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Ist/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Kupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Kupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Emission, Erster_Zinstermin und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn es sich bei Abrechnung, Fälligkeit, First_coupon oder First_coupon nicht um ein gültiges Datum handelt, gibt <b>OddFPrice</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Rate &lt; 0 oder yld &lt; 0 ist, <b>gibt OddFPrice</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>gibt OddFPrice</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die folgende Datumsbedingung muss erfüllt sein: andernfalls <b>gibt OddFPrice</b> die #NUM! Fehlerwert: </para>
          <para>&gt;Fälligkeitstermin first_coupon &gt; &gt; Abrechnungsausgabe</para>
          <para> </para>
          <para>
            <b>OddFPrice</b> wird wie folgt berechnet: Odd short first coupon:</para>
          <para>Abbildung 1: Ungerade kurzer erster Zinstermin</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>A = Anzahl der Tage vom Anfang des Zinstermins bis zum Abrechnungsdatum (aufgelaufene Tage).</para>
          <para>DSC = Anzahl der Tage vom Abrechnungstermin bis zum nächsten Zinstermin.</para>
          <para>DFC = Anzahl der Tage vom Anfang des ungeraden ersten Zinstermins bis zum ersten Zinstermin.</para>
          <para>E = Anzahl der Tage im Zinstermin.</para>
          <para>N = Anzahl der Zinstermine, die zwischen dem Abrechnungsdatum und dem Einlösungsdatum fällig sind. (Wenn diese Zahl einen Bruch enthält, wird sie auf die nächste ganze Zahl angehoben.)</para>
          <para>Ungerade langer erster Zinstermin:</para>
          <para>Abbildung 2: Ungerade langer erster Zinstermin</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>Ai = Anzahl der Tage ab dem Beginn des Ith- oder letzten Quasizinszeitraums innerhalb eines ungeraden Zeitraums.</para>
          <para>DCi = Anzahl der Tage vom Datum der Datumstermine (oder des Ausgabedatums) bis zum ersten Quasikupon (i = 1) oder Anzahl der Tage im Quasizins (i = 2,..., i = NC).</para>
          <para>DSC = Anzahl der Tage vom Abrechnungstermin bis zum nächsten Zinstermin.</para>
          <para>E = Anzahl der Tage im Zinstermin.</para>
          <para>N = Anzahl der Zinstermine zwischen dem ersten tatsächlichen Zinstermin und dem Einlösungsdatum. (Wenn diese Zahl einen Bruch enthält, wird sie auf die nächste ganze Zahl angehoben.)</para>
          <para>NC = Anzahl der Quasizinsperioden, die in einen ungeraden Zeitraum passen. (Wenn diese Zahl einen Bruch enthält, wird sie auf die nächste ganze Zahl angehoben.)</para>
          <para>NLi = normale Länge in Tagen nach dem vollständigen Ith oder dem letzten Quasikuponzeitraum innerhalb eines ungeraden Zeitraums.</para>
          <para>Nq = Anzahl der gesamten Quasizinsperioden zwischen Abrechnungsdatum und erstem Zinstermin.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddFYield">
      <MemberSignature Language="C#" Value="public double OddFYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddFYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddFYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Arg8 As Object, Optional Arg9 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16847)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Emission – das Datum der Wertpapieremission.</param>
        <param name="Arg4">Erster_Zinstermin – der erste Zinstermin des Wertpapiers.</param>
        <param name="Arg5">Zins – der Zinssatz des Wertpapiers.</param>
        <param name="Arg6">Kurs – der Preis des Wertpapiers.</param>
        <param name="Arg7">Rückzahlung – der Rückkaufswert des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg8">Häufigkeit – die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2 für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg9">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt die Rendite eines Wertpapiers mit einem unregelmäßigen (kurzen oder langen) ersten Zinstermin zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Ist/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Kupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Kupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Emission, Erster_Zinstermin und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn Für Abrechnung, Fälligkeit, First_coupon oder First_coupon kein gültiges Datum ist, gibt <b>OddFYield</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn rate &lt; 0 oder pr ≤ 0 ist, <b>gibt OddFYield</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>gibt OddFYield</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die folgende Datumsbedingung muss erfüllt sein: andernfalls <b>gibt OddFYield</b> die #NUM! Fehlerwert: </para>
          <para>&gt;Fälligkeitstermin first_coupon &gt; &gt; Abrechnungsproblem</para>
          <para>Excel verwendet eine iterative Technik, um <b>OddFYield zu berechnen.</b> Diese Funktion verwendet die Newton -Methode basierend auf der Formel, die für die Funktion verwendet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> wird. Die Rendite wird in bis zu 100 Iterationen so lange geändert, bis der berechnete Kurs (Kaufpreis) bei der vorgegebenen Rendite dem Kurs (Kaufpreis) nahe kommt. Sehen <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddFPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Sie sich die Formel an, die <b>OddFYield</b> verwendet.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLPrice">
      <MemberSignature Language="C#" Value="public double OddLPrice (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLPrice([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLPrice(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLPrice (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16844)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Letzter_Zinstermin – der letzte Zinstermin des Wertpapiers vor dem Fälligkeitstermin.</param>
        <param name="Arg4">Zins – der Zinssatz des Wertpapiers.</param>
        <param name="Arg5">Rendite – die jährliche Rendite des Wertpapiers.</param>
        <param name="Arg6">Rückzahlung – der Rückkaufswert des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg7">Häufigkeit – die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2 für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg8">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt den Kurs pro 100 $ Nennwert eines Wertpapiers mit einem unregelmäßigen letzten Zinstermin zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Ist/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Kupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Kupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Letzter_Zinstermin und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn abrechnung, Fälligkeit oder last_interest kein gültiges Datum ist, gibt <b>OddLPrice</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Rate &lt; 0 oder yld &lt; 0 ist, <b>gibt OddLPrice</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>gibt OddLPrice</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die folgende Datumsbedingung muss erfüllt sein: andernfalls <b>gibt OddLPrice</b> die #NUM! Fehlerwert: </para>
          <para>&gt; &gt; Fälligkeitsabrechnungs last_interest</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OddLYield">
      <MemberSignature Language="C#" Value="public double OddLYield (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 OddLYield([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.OddLYield(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function OddLYield (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Arg7 As Object, Optional Arg8 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16845)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Letzter_Zinstermin – der letzte Zinstermin des Wertpapiers vor dem Fälligkeitstermin.</param>
        <param name="Arg4">Zins – der Zinssatz des Wertpapiers.</param>
        <param name="Arg5">Kurs – der Preis des Wertpapiers.</param>
        <param name="Arg6">Rückzahlung – der Rückkaufswert des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg7">Häufigkeit – die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2 für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg8">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt die Rendite eines Wertpapiers mit einem unregelmäßigen letzten Zinstermin unabhängig von der Dauer zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Kupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Kupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Letzter_Zinstermin und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn abrechnung, Fälligkeit oder last_interest kein gültiges Datum ist, gibt <b>OddLYield</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn rate &lt; 0 oder pr ≤ 0 ist, <b>gibt OddLYield</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>gibt OddLYield</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die folgende Datumsbedingung muss erfüllt sein: andernfalls <b>gibt OddLYield</b> die #NUM! Fehlerwert: </para>
          <para>&gt; &gt; Fälligkeitsabrechnungs last_interest </para>
          <para>
            <b>OddLYield</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Formel für die OddLYield-Methode</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>Ai = Anzahl der aufgelaufenen Tage für den ith- oder letzten Quasizinszeitraum innerhalb eines ungeraden Zeitraums, der vorwärts ab dem letzten Zinstermin vor der Einlösung gezählt wird.</para>
          <para>DCi = Anzahl der Tage, die im ith- oder letzten Quasikuponzeitraum gezählt werden, getrennt durch die Länge des tatsächlichen Zinstermins.</para>
          <para>NC = Anzahl der Quasizinsperioden, die in einen ungeraden Zeitraum passen; Wenn diese Zahl einen Bruchteil enthält, wird sie auf die nächste ganze Zahl angehoben.</para>
          <para>NLi = normale Länge in Tagen des Ith- oder letzten Quasikuponzeitraums innerhalb eines ungeraden Zinstermins.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public bool Or (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Or([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Or(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Or (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16421)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Logical1,logical2,... - 1 to 30 conditions you want to test that can be <b>either true</b> or <b>false</b>.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt <b>true zurück,</b> wenn ein Argument true <b>ist;</b> gibt <b>false</b> zurück, wenn alle Argumente false <b>sind.</b></summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente müssen zu Wahrheitswerten wie <b>"true"</b> oder <b>"false"</b>oder in Arrays oder Verweisen ausgewertet werden, die Wahrheitswerte enthalten. </para>
          <para>Wenn ein Array- oder Bezugsargument Text oder leere Zellen enthält, werden diese Werte ignoriert. </para>
          <para>Wenn der angegebene Bereich keine Wahrheitswerte enthält, oder gibt <b>die</b> #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Sie können <b></b> eine Oder-Arrayformel verwenden, um zu sehen, ob ein Wert in einem Array auftritt. Drücken Sie die Tastenkombination STRG+UMSCHALT+EINGABE, um eine Arrayformel einzugeben.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.WorksheetFunction.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt das übergeordnete Objekt für das angegebene Objekt zurück. Schreibgeschützt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PDuration">
      <MemberSignature Language="C#" Value="public double PDuration (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PDuration([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PDuration(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function PDuration (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double PDuration(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16954)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zinssatz pro Zeitraum.</param>
        <param name="Arg2">Der Aktuelle Wert der Investition.</param>
        <param name="Arg3">Gewünschter zukünftiger Wert der Investition.</param>
        <summary>Gibt die Anzahl der Zeiträume zurück, die eine Investition benötigt, um einen angegebenen Wert zu erreichen.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pearson">
      <MemberSignature Language="C#" Value="public double Pearson (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pearson([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pearson (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pearson(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16696)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 – eine Reihe unabhängiger Werte.</param>
        <param name="Arg2">Array2 – eine Reihe abhängiger Werte.</param>
        <summary>Gibt den Pearsonschen Korrelationskoeffizienten r zurück. Dieser Koeffizient ist ein dimensionsloser Index mit dem Wertebereich -1,0 = r = 1,0 und ein Maß dafür, inwieweit zwischen zwei Datensätzen eine lineare Abhängigkeit besteht.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente müssen Zahlen oder Namen, Arraykonstanten oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn Array1 und Array2 leer sind oder eine andere Anzahl von Datenpunkten haben, gibt <b>Pearson</b> den Fehlerwert #N/A zurück. </para>
          <para>Die Formel für den Korrelationskoeffizienten des Pearson-Produktmoments, r, ist: </para>
          <para>Abbildung 1: Korrelationskoeffizient für den Pearson-Produktmoment</para>
          <para> </para>
          <para> </para>
          <para>Wobei x und y die Beispielwerte AVERAGE(Array1) und AVERAGE(Array2) sind.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile">
      <MemberSignature Language="C#" Value="public double Percentile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16712)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrix ist eine Matrix oder ein Datenbereich, die/der die relative Lage der Daten beschreibt.</param>
        <param name="Arg2">Alpha – der Perzentilwert aus dem geschlossenen Intervall von 0 bis 1.</param>
        <summary>Gibt das Alpha-Quantil einer Gruppe von Daten zurück. Mithilfe dieser Funktion können Sie einen Akzeptanzschwellenwert festlegen. So könnten Sie beispielsweise entscheiden, dass nur Kandidaten untersucht werden, deren Prüfungsergebnisse oberhalb des 90 %-Quantils liegen.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zu den neuen Funktionen finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" /> "and <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" /> method". </para>
          <para>Wenn das Array leer ist, <b>gibt Percentile</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn k nicht numerisch ist, gibt <b>Percentile</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn k &lt; 0 oder k &gt; 1 ist, gibt <b>Percentile</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn k kein Vielfaches von 1/(n - 1) ist, interpoliert <b>Percentile,</b> um den Wert am k-th-Perzentil zu bestimmen.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Exc">
      <MemberSignature Language="C#" Value="public double Percentile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16885)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - Das Array oder der Datenbereich, das/der die relative Lage bestimmt.</param>
        <param name="Arg2">K – Der Perzentilwert im Bereich 0..1( exklusiv).</param>
        <summary>Gibt das k-Quantil von Werten in einem Bereich zurück, wobei k im Bereich 0..1 ausschließlich liegt.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn das Array leer ist, <b>gibt Percentile_Exc</b> die #NUM! Fehlerwert </para>
          <para>Wenn k nicht numerisch <b>ist, gibt Percentile_Exc</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn k den Wert ≤ 0 hat oder wenn k ≥ 1 ist, <b>gibt Percentile_Exc</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn k kein Vielfaches von 1/(n - 1) ist, interpoliert <b>Percentile_Exc,</b> um den Wert am k-th-Perzentil zu bestimmen. </para>
          <para>
            <b>Percentile_Exc</b> interpoliert, wenn der Wert für das angegebene Perzentil zwischen zwei Werten im Array liegt. Wenn die Interpolation für das Perzentil k nicht möglich ist( k), gibt Excel #NUM! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Percentile_Inc">
      <MemberSignature Language="C#" Value="public double Percentile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Percentile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Percentile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Percentile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Percentile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16886)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - Das Array oder der Datenbereich, das/der die relative Lage bestimmt.</param>
        <param name="Arg2">k - Der Prozentwert im Intervall von 0 bis 1 einschließlich.</param>
        <summary>Gibt das k-Quantil von Werten in einem Bereich zurück. Mithilfe dieser Funktion können Sie einen Akzeptanzschwellenwert festlegen. So könnten Sie beispielsweise nur Kandidaten untersuchen, deren Prüfungsergebnisse oberhalb des 90 %-Quantils liegen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn das Array leer ist, <b>gibt Percentile_Inc</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn k nicht numerisch ist, <b>gibt Percentile_Inc</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn k &lt; 0 oder k &gt; 1 <b>ist, gibt Percentile_Inc</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn k kein Vielfaches von 1/(n - 1) ist, interpoliert <b>Percentile_Inc,</b> um den Wert am k-th-Perzentil zu bestimmen.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank">
      <MemberSignature Language="C#" Value="public double PercentRank (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16713)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Matrix – die Matrix oder der Bereich numerischer Daten, die/der die relative Position der Daten beschreibt.</param>
        <param name="Arg2">x – der Wert, dessen Rang Sie bestimmen möchten.</param>
        <param name="Arg3">Genauigkeit – ein optionaler Wert, der die Anzahl der Nachkommastellen des zurückgegebenen Quantilsrangs festlegt. Wenn sie nicht angegeben wird, <b>verwendet PercentRank</b> drei Ziffern (0.xxx).</param>
        <summary>Gibt den prozentualen Rang (Alpha) eines Werts zurück. Diese Funktion kann dazu verwendet werden, die relative Position zu ermitteln, die ein Wert innerhalb einer Datenmenge einnimmt. Sie können z. B. <b>PercentRank</b> verwenden, um die Bewertung eines Eignungstestergebnisses unter allen Bewertungen für den Test zu bewerten.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zu den neuen Funktionen finden Sie unter den <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" /> Methoden und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" /> methoden.</para>
          <para>Wenn das Array leer ist, <b>gibt PercentRank</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die &lt; Signifikanz 1 <b>ist, gibt PercentRank</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x keinem der Werte im Array entspricht, interpoliert <b>PercentRank,</b> um die richtige Prozentrangfolge zurück zu erhalten.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Exc">
      <MemberSignature Language="C#" Value="public double PercentRank_Exc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Exc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Exc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Exc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16887)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - Das Array oder der Datenbereich mit numerischen Werten, das/der die relative Lage bestimmt.</param>
        <param name="Arg2">X - Der Wert, dessen Rang Sie bestimmen möchten.</param>
        <param name="Arg3">Signifikanz – Ein Wert, der die Anzahl der signifikanten Stellen für den zurückgegebenen Prozentwert an identifiziert. Wenn sie nicht angegeben <b>wird, PercentRank_Exc</b> drei Ziffern (0.xxx).</param>
        <summary>Gibt den prozentualen Rang eines Werts in einem Dataset als Prozentsatz des Datasets (0..1 ausschließlich) zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn das Array leer ist, <b>gibt PercentRank_Exc</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die &lt; Signifikanz 1 <b>ist, PercentRank_Exc</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn "x" keinem der Werte <b></b> im Array PercentRank_Exc interpoliert, um den richtigen Prozentsatz zurück zu erhalten.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentRank_Inc">
      <MemberSignature Language="C#" Value="public double PercentRank_Inc (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PercentRank_Inc([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PercentRank_Inc(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PercentRank_Inc (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16888)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - Das Array oder der Datenbereich mit numerischen Werten, das/der die relative Lage bestimmt.</param>
        <param name="Arg2">X - Der Wert, dessen Rang Sie bestimmen möchten.</param>
        <param name="Arg3">Genauigkeit - Ein optionaler Wert, der die Anzahl der Nachkommastellen des zurückgegebenen Quantilsrangs festlegt. Wenn sie nicht <b>angegeben PercentRank_Inc,</b> werden drei Ziffern (0.xxx) verwendet.</param>
        <summary>Gibt den Rang eines Werts in einem Datensatz als Prozentsatz (0..1 einschließlich) des Datensatzes zurück. Diese Funktion kann dazu verwendet werden, die relative Position zu ermitteln, die ein Wert innerhalb einer Datenmenge einnimmt. Sie können z. B. <b>PercentRank_Inc,</b> um die Bewertung eines Eignungstestergebnisses unter allen Bewertungen für den Test zu bewerten.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn das Array leer ist, <b>gibt PercentRank_Inc</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die &lt; Signifikanz 1 <b>ist, gibt PercentRank_Inc</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn "x" keinem der Werte <b></b> im Array PercentRank_Inc interpoliert, um den richtigen Prozentsatz zurück zu erhalten.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Permut">
      <MemberSignature Language="C#" Value="public double Permut (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permut([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permut(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permut (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permut(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16683)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">n – eine ganze Zahl, die die Anzahl aller Elemente beschreibt.</param>
        <param name="Arg2">k – eine ganze Zahl, die angibt, aus wie vielen Elementen jede Variationsmöglichkeit bestehen soll.</param>
        <summary>Gibt die Anzahl der Möglichkeiten zurück, um k Elemente aus einer Menge von n Elementen ohne Zurücklegen zu ziehen. Eine Variation ist eine Menge von Elementen oder Ereignissen, deren interne Anordnung oder Reihenfolge relevant ist. Variationen unterscheiden sich von Kombinationen, für die die interne Anordnung nicht relevant ist. Verwenden Sie diese Funktion z. B. für die Berechnung von Wahrscheinlichkeiten bei Zahlenlotterien.</summary>
        <returns>To be added.</returns>
        <remarks><para>Beide Argumente werden zu ganzen Zahlen gekürzt. </para>
          <para>Wenn die Zahl oder number_chosen nicht numerisch ist, gibt <b>Permut</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die ≤ 0 ist oder number_chosen &lt; 0 ist, gibt <b>Permut</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die &lt; number_chosen ist, <b>gibt Permut</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel zur Berechnung der Anzahl der Variationen lautet: 

 </para>
          <para>Abbildung 1: Gleichung für die Anzahl der Permutationen</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Permutationa">
      <MemberSignature Language="C#" Value="public double Permutationa (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Permutationa([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Permutationa(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Permutationa (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Permutationa(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16951)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Gesamtanzahl der Objekte.</param>
        <param name="Arg2">Anzahl der Objekte in jeder Permutation.</param>
        <summary>Gibt die Anzahl der Permutationen für eine bestimmte Anzahl von Objekten (mit Wiederholungen) zurück, die aus den Gesamtobjekten ausgewählt werden können.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phi">
      <MemberSignature Language="C#" Value="public double Phi (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Phi([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phi(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phi (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Phi(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16962)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die Zahl, für die die Dichte der Standardnormalverteilung verwendet werden soll.</param>
        <summary>Gibt den Wert der Dichtefunktion für eine Standardnormalverteilung zurück.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetic">
      <MemberSignature Language="C#" Value="public string Phonetic (Microsoft.Office.Interop.Excel.Range Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Phonetic([in]class Microsoft.Office.Interop.Excel.Range Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Phonetic(Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function Phonetic (Arg1 As Range) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Phonetic(Microsoft::Office::Interop::Excel::Range ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16744)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bezug – eine Textzeichenfolge oder ein Verweis auf eine einzelne Zelle bzw. einen Zellbereich, die bzw. der eine Furigana-Textzeichenfolge enthält.</param>
        <summary>Extrahiert die phonetischen (Furigana-) Zeichen aus einer Textzeichenfolge.</summary>
        <returns>To be added.</returns>
        <remarks><para>Ist Bezug ein Zellbereich, wird die Furigana-Textzeichenfolge in der linken oberen Zelle des Bereichs zurückgegeben. </para>
          <para>Ist Bezug ein Bereich nicht angrenzender Zellen, wird der Fehler #N/A zurückgegeben.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Pi">
      <MemberSignature Language="C#" Value="public double Pi ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pi() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pi" />
      <MemberSignature Language="VB.NET" Value="Public Function Pi () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Pi();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16403)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Wert pi zurück, die mathematische Konstante (3,14159265358979) mit einer Genauigkeit von 15 Stellen.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public double Pmt (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pmt(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16443)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zins – der Zinssatz pro Periode (Zahlungszeitraum).</param>
        <param name="Arg2">Zzr gibt an, über wie viele Perioden die jeweilige Annuität (Rente) gezahlt wird. (Zzr = Anzahl der Zahlungszeiträume)</param>
        <param name="Arg3">Bw ist der Barwert oder der Gesamtbetrag, den eine Reihe zukünftiger Zahlungen zum gegenwärtigen Zeitpunkt wert ist. Dieser Wert wird auch "Kreditbetrag" genannt. (Bw = Barwert)</param>
        <param name="Arg4">Zw – der zukünftige Wert (Endwert) oder der Kassenbestand, den Sie nach der letzten Zahlung erreicht haben möchten. Fehlt das Argument Zw, wird der Wert 0 (Null) angenommen, d. h., der Endwert eines Kredits ist gleich 0. (Zw = Zukünftiger Wert)</param>
        <param name="Arg5">F kann den Wert 0 oder 1 annehmen und gibt an, wann Zahlungen fällig sind. (F = Fälligkeit)</param>
        <summary>Berechnet die konstante Zahlung einer Annuität pro Periode, wobei konstante Zahlungen und ein konstanter Zinssatz vorausgesetzt werden.</summary>
        <returns>To be added.</returns>
        <remarks><para>Eine vollständigere Beschreibung der Argumente in <b>Pmt</b>finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> Funktion.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>Zum Ende des Zeitraums</description>
            </item>
            <item>
              <term>1 </term>
              <description>Zum Anfang des Zeitraums</description>
            </item>
          </list>
          <para>Die von <b>Pmt</b> zurückgegebene Zahlung umfasst Kapital und Zinsen, aber keine Steuern, Rücklagen oder Gebühren, die manchmal mit Kosten verbunden sind. </para>
          <para>Stellen Sie sicher, dass Sie für Zins und Zzr zueinander passende Zeiteinheiten verwenden. Wenn Sie für einen Kredit mit vierjähriger Laufzeit und einem jährlichen Zinssatz von 12% monatliche Zahlungen leisten, müssen Sie für Zins 12%/12 und für Zzr 4*12 angeben. Wenn Sie für den gleichen Kredit jährliche Zahlungen leisten, müssen Sie für Zins 12 Prozent und für Zzr 4 angeben.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson">
      <MemberSignature Language="C#" Value="public double Poisson (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16684)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x – die Zahl der Fälle.</param>
        <param name="Arg2">Mittelwert – der erwartete Zahlenwert.</param>
        <param name="Arg3">Kumuliert – der Wahrheitswert, der den Typ der Funktion bestimmt. Ist Kumuliert TRUE, gibt POISSON den Wert der Verteilungsfunktion der jeweiligen Poissonverteilung zurück, also die Wahrscheinlichkeit, dass die Anzahl zufällig auftretender Ereignisse zwischen 0 und einschließlich x liegt. Ist Kumuliert FALSE, gibt POISSON den Wert der Wahrscheinlichkeitsfunktion zurück, also die Wahrscheinlichkeit, dass die Anzahl der Ereignisse genau x sein wird.</param>
        <summary>Gibt Wahrscheinlichkeiten einer poissonverteilten Zufallsvariablen zurück. Eine übliche Anwendung der Poissonverteilung ist die Modellierung der Anzahl der Ereignisse innerhalb eines bestimmten Zeitraums, beispielsweise die Anzahl der Bankkunden, die innerhalb einer Stunde an einem Geldautomaten eintreffen.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" /> Methode.</para>
          <para>Ist x keine ganze Zahl, werden die Nachkommastellen abgeschnitten. </para>
          <para>Wenn "x" oder "mean" nicht numerisch ist, gibt <b>Poisson</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x &lt; 0, <b>gibt Poisson</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn mittelwert ≤ 0 ist, <b>gibt Poisson</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>Poisson</b> wird wie folgt berechnet. </para>
          <para>Für kumulativ = <b>false</b>:</para>
          <para>Abbildung 1: Calcuation bei falscher Kumulierung</para>
          <para> </para>
          <para> </para>
          <para>Für kumulativ = <b>true</b>:</para>
          <para>Abbildung 2: Calcuation, wenn kumulativ "true" ist</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Poisson_Dist">
      <MemberSignature Language="C#" Value="public double Poisson_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Poisson_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Poisson_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Poisson_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Poisson_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16889)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">x - Die Anzahl der Fälle.</param>
        <param name="Arg2">Mittelwert - Der erwartete numerische Wert.</param>
        <param name="Arg3">Kumuliert – Ein logischer Wert, der die Form der zurückgegebenen Wahrscheinlichkeitsverteilung bestimmt. Wenn der kumulierte Wert <b>true</b>ist, <b>gibt Poisson_Dist</b> die kumulierte Poissonwahrscheinlichkeit zurück, dass die Anzahl der zufällig auftretenden Ereignisse zwischen 0 (null) und x (einschließlich) liegt. Wenn <b>false</b>, gibt sie die Poisson-Wahrscheinlichkeits-Massenfunktion zurück, dass die Anzahl der ereignisse, die auftreten, genau x ist.</param>
        <summary>Gibt Wahrscheinlichkeiten einer poissonverteilten Zufallsvariablen zurück. Eine übliche Anwendung der Poissonverteilung ist die Modellierung der Anzahl der Ereignisse innerhalb eines bestimmten Zeitraums, beispielsweise die Anzahl der Bankkunden, die innerhalb einer Stunde an einem Geldautomaten eintreffen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Ist x keine ganze Zahl, werden die Nachkommastellen abgeschnitten. </para>
          <para>Wenn "x" oder "Mean" nicht numerisch <b>ist, gibt Poisson_Dist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x &lt; 0, <b>gibt Poisson_Dist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn der mittelwert ≤ 0 <b>ist, gibt Poisson_Dist</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>Poisson_Dist</b> wird wie folgt berechnet. </para>
          <para>Für kumulativ = <b>false</b>:</para>
          <para>Abbildung 1: Calcuation bei falscher Kumulierung</para>
          <para> </para>
          <para> </para>
          <para>Für kumulativ = <b>true</b>:</para>
          <para>Abbildung 2: Calcuation, wenn kumulativ "true" ist</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public double Power (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Power([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Power(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Power (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Power(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16721)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die Zahl, die Sie mit dem Exponenten potenzieren möchten. Es sind alle reellen Zahlen zulässig.</param>
        <param name="Arg2">Potenz – der Exponent, mit dem Sie die Zahl potenzieren möchten.</param>
        <summary>Gibt als Ergebnis eine potenzierte Zahl zurück.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ppmt">
      <MemberSignature Language="C#" Value="public double Ppmt (double Arg1, double Arg2, double Arg3, double Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Ppmt([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ppmt(System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ppmt (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16552)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zins – der Zinssatz pro Zeitraum.</param>
        <param name="Arg2">Zr – gibt die Periode an und muss zwischen 1 und Zzr liegen. (Zr = Zahlungszeitraum)</param>
        <param name="Arg3">Zzr – die Gesamtzahl der Zahlungsperioden in einer Annuität.</param>
        <param name="Arg4">Bw – der aktuelle Wert – der Gesamtbetrag, dessen Wert eine Reihe von zukünftigen Zahlungen besitzt.</param>
        <param name="Arg5">Zw – der zukünftige Wert (Endwert) oder der Kassenbestand, den Sie nach der letzten Zahlung erreicht haben möchten. Fehlt das Argument Zw, wird der Wert 0 (Null) angenommen, d. h., der Endwert eines Kredits ist gleich 0. (Zw = Zukünftiger Wert)</param>
        <param name="Arg6">F – die Zahl 0 oder 1, die die Fälligkeit von Zahlungen angibt.</param>
        <summary>Gibt die Kapitalrückzahlung einer Investition für eine angegebene Periode zurück. Es werden konstante periodische Zahlungen und ein konstanter Zinssatz vorausgesetzt.</summary>
        <returns>To be added.</returns>
        <remarks><para>Eine vollständigere Beschreibung der Argumente in <b>Ppmt</b>finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> .</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>Zum Ende des Zeitraums</description>
            </item>
            <item>
              <term>1 </term>
              <description>Zum Anfang des Zeitraums</description>
            </item>
          </list>
          <para>Stellen Sie sicher, dass Sie die zur Angabe von Zins und Zzr verwendeten Einheiten einheitlich verwenden. Wenn Sie für eine vierjährige Anleihe mit jährlichen Zinsen von 12 Prozent monatliche Zahlungen tätigen, verwenden Sie 12%/12 für Zins und 4*12 für Zzr. Wenn Sie für dieselbe Anleihe jährliche Zahlungen tätigen, verwenden Sie 12% für Zins und 4 für Zzr.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Price">
      <MemberSignature Language="C#" Value="public double Price (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Price([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Price(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Price (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16825)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Zins – der jährliche Kuponzinssatz des Wertpapiers.</param>
        <param name="Arg4">Rendite – die jährliche Rendite des Wertpapiers.</param>
        <param name="Arg5">Rückzahlung – der Rückkaufswert des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg6">Häufigkeit – die Anzahl der Zinszahlungen pro Jahr. Bei jährlichen Zahlungen gilt Häufigkeit = 1, für halbjährliche Zahlungen Häufigkeit = 2 für vierteljährliche Zahlungen Häufigkeit = 4.</param>
        <param name="Arg7">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt den Kurs pro 100 $ Nennwert eines Wertpapiers zurück, das periodisch Zinsen auszahlt.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Ist/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Häufigkeit und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn der Abrechnungstermin oder die Fälligkeit kein gültiges Datum ist, gibt <b>Der Kurs</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn yld &lt; 0 oder wenn Kurs &lt; 0 ist, <b>gibt Price</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die ≤ 0 ist, <b>gibt der Preis</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die Häufigkeit eine andere Zahl als 1, 2 oder 4 ist, gibt <b>Price</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>gibt Price</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn der Abrechnungstermin ≥ ist, <b>gibt der Kurs</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. <b>Der</b> Preis wird wie folgt berechnet: </para>
          <para>Abbildung 1: Formel für die Preismethode</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>DSC = Anzahl der Tage vom Abrechnungstermin bis zum nächsten Zinstermin.</para>
          <para>E = Anzahl der Tage im Zinstermin, in die das Abrechnungsdatum fällt.</para>
          <para>N = Anzahl der Zinstermine zwischen Abrechnungsdatum und Einlösungsdatum.</para>
          <para>A = Anzahl der Tage vom Anfang des Zinstermins bis zum Abrechnungsdatum.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceDisc">
      <MemberSignature Language="C#" Value="public double PriceDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16820)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Disagio – der Abzinsungsfaktor (Disagio) des Wertpapiers.</param>
        <param name="Arg4">Rückzahlung – der Rückkaufswert des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg5">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt den Kurs pro 100 $ Nennwert eines unverzinslichen Wertpapiers zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn abrechnung oder Fälligkeit kein gültiges Datum ist, <b>gibt PriceDisc</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If discount ≤ 0 or if redemption ≤ 0, <b>PriceDisc</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>gibt PriceDisc</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die ≥ ist, <b>gibt PriceDisc die</b> #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>PriceDisc</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Formel für die Methode "PriceDisc"</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>B = Anzahl der Tage im Jahr, je nach Jahr.</para>
          <para>DSM = Anzahl der Tage von Abrechnung bis Fälligkeit.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PriceMat">
      <MemberSignature Language="C#" Value="public double PriceMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 PriceMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.PriceMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PriceMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16815)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Emission – das Ausgabedatum des Wertpapiers, das als fortlaufende Zahl angegeben wird.</param>
        <param name="Arg4">Zins – ist der Zinssatz des Wertpapiers am Ausgabetag.</param>
        <param name="Arg5">Rendite – die jährliche Rendite des Wertpapiers.</param>
        <param name="Arg6">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt den Kurs pro 100 $ Nennwert eines Wertpapiers zurück, das Zinsen am Fälligkeitsdatum auszahlt.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Emission und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn abrechnung, Fälligkeit oder Issue kein gültiges Datum ist, <b>gibt PriceMat</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn rate &lt; 0 oder yld &lt; 0 ist, <b>gibt PriceMat</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>gibt PriceMat</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn der Abrechnungstermin ≥ ist, <b>gibt PriceMat</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. <b>PriceMat</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Formel für die Methode "PriceMat"</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>B = Anzahl der Tage im Jahr, je nach Jahr.</para>
          <para>DSM = Anzahl der Tage von Abrechnung bis Fälligkeit.</para>
          <para>DIM = Anzahl der Tage von der Ausgabe bis zur Fälligkeit.</para>
          <para>A = Anzahl der Tage vom Problem bis zum Abrechnungswert.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Prob">
      <MemberSignature Language="C#" Value="public double Prob (object Arg1, object Arg2, double Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Prob([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Prob(System.Object,System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prob (Arg1 As Object, Arg2 As Object, Arg3 As Double, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16701)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Beob_Werte – ein Bereich von Realisationen der Zufallsvariablen, denen Wahrscheinlichkeiten zugeordnet sind.</param>
        <param name="Arg2">Beob_Wahrsch – die Wahrscheinlichkeiten zu den beobachteten Werten.</param>
        <param name="Arg3">Untergrenze – die untere Grenze der Werte, deren Wahrscheinlichkeit berechnet werden soll.</param>
        <param name="Arg4">Obergrenze – die optionale obere Grenze der Werte, deren Wahrscheinlichkeit berechnet werden soll.</param>
        <summary>Gibt die Wahrscheinlichkeit für ein von zwei Werten eingeschlossenes Intervall zurück. Ist das Argument Obergrenze nicht angegeben, berechnet diese Funktion die Wahrscheinlichkeit, dass zu Beob_Werte gehörige Werte gleich dem Wert von Untergrenze sind.</summary>
        <returns>To be added.</returns>
        <remarks><para>If any value in prob_range ≤ 0 or if any value in prob_range &gt; 1, <b>Prob</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If the sum of the values in prob_range ¹ 1, <b>Prob</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn upper_limit ausgelassen wird, <b>gibt Prob</b> die Wahrscheinlichkeit zurück, dass sie gleich lower_limit. </para>
          <para>Wenn x_range und prob_range eine andere Anzahl von Datenpunkten enthalten, gibt <b>Prob</b> den Fehlerwert #N/A zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Product">
      <MemberSignature Language="C#" Value="public double Product (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Product([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Product(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Product (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16567)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – 1 bis 30 Zahlen, die Sie multiplizieren möchten.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Multipliziert die Argumente und gibt das Produkt zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Berücksichtigt werden nur Argumente, die Zahlen, Wahrheitswerte oder Zahlen in Textform sind. Als Fehlerwerte oder Text angegebene Argumente, die nicht in Zahlen umgewandelt werden können, führen zu Fehlern. </para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Proper">
      <MemberSignature Language="C#" Value="public string Proper (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Proper([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Proper(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Proper (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Proper(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16498)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text – in Anführungszeichen eingeschlossener Text, eine Formel, die Text zurückgibt, oder ein Bezug auf eine Zelle, die den Text enthält, den Sie teilweise groß schreiben möchten.</param>
        <summary>Wandelt den ersten Buchstaben aller Wörter einer Zeichenfolge in Großbuchstaben um. Wandelt alle anderen Buchstaben in Kleinbuchstaben um.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pv">
      <MemberSignature Language="C#" Value="public double Pv (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Pv([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pv (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16440)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zins – der Zinssatz pro Periode (Zahlungszeitraum). Wenn Sie beispielsweise für die Anschaffung eines Autos einen Kredit mit einem jährlichen Zinssatz von 10 Prozent aufnehmen und diesen Kredit in monatlichen Raten zurückzahlen, beträgt der monatliche Zinssatz 10 %/12 oder 0,83 %. Für den Zinssatz müssten Sie also einen der Werte 10 %/12 oder 0,83 % oder 0,0083 in die Formel eingeben.</param>
        <param name="Arg2">Zzr – gibt an, über wie viele Perioden die jeweilige Annuität (Rente) gezahlt wird. (Zzr = Anzahl der Zahlungszeiträume). Wenn Sie beispielsweise zur Finanzierung eines Autos einen Kredit mit einer Laufzeit von 4 Jahren aufnehmen, den Sie in monatlichen Raten zurückzahlen, hat der Kredit eine Laufzeit von 4*12 (oder 48) Perioden. Für Zzr müssten Sie also 48 eingeben.</param>
        <param name="Arg3">Rmz – der Betrag (die Annuität), der in jeder Periode gezahlt wird. Dieser Betrag bleibt während der Laufzeit konstant. Üblicherweise umfasst Rmz das Kapital und die Zinsen, nicht jedoch sonstige Gebühren oder Steuern. (Rmz = Regelmäßige Zahlung). Beispielsweise müssen Sie für einen Autokredit, der bei einem Zinssatz von 12 Prozent eine Laufzeit von vier Jahren hat, monatlich 263,33 € zurückzahlen. Für Rmz müssten Sie also -263,33 angeben. Wenn für Zins kein Wert angegeben wird, muss ein Wert für Zw angegeben werden.</param>
        <param name="Arg4">Zw – der zukünftige Wert (Endwert) oder der Kassenbestand, den Sie nach der letzten Zahlung erreicht haben möchten. Fehlt das Argument Zw, wird es als 0 angenommen (beispielsweise ist der Endwert eines Kredits gleich 0). (Zw = Zukünftiger Wert). Wenn Sie als Beispiel 50.000 € ansparen möchten, um in 18 Jahren ein bestimmtes Projekt finanzieren zu können, ist der zugehörige Endwert 50.000 €. Mit einer vorsichtigen Schätzung des Zinssatzes können Sie nun ausrechnen, wie viel Sie jeden Monat sparen müssen. Wenn für Zw kein Wert angegeben wird, muss ein Wert für Rmz angegeben werden.</param>
        <param name="Arg5">F – die Zahl 0 oder 1, die die Fälligkeit von Zahlungen angibt.</param>
        <summary>Gibt den Barwert einer Investition zurück. Der Barwert ist der Gesamtbetrag, den eine Reihe zukünftiger Zahlungen zum gegenwärtigen Zeitpunkt wert ist. Wenn Sie beispielsweise einen Kredit aufnehmen, ist die Summe dieses Kredits für den Kreditgeber gleich dem Barwert.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>Zum Ende des Zeitraums</description>
            </item>
            <item>
              <term>1 </term>
              <description>Zum Anfang des Zeitraums</description>
            </item>
          </list>
          <para>Stellen Sie sicher, dass Sie die zur Angabe von Zins und Zzr verwendeten Einheiten einheitlich verwenden. Wenn Sie für eine vierjährige Anleihe mit jährlichen Zinsen von 12 Prozent monatliche Zahlungen tätigen, verwenden Sie 12%/12 für Zins und 4*12 für Zzr. Wenn Sie für dieselbe Anleihe jährliche Zahlungen tätigen, verwenden Sie 12% für Zins und 4 für Zzr. </para>
          <para>Die folgenden Funktionen gelten für Annuitäten: </para>
          <list type="table">
            <item>
              <term>CUMIPMT</term>
              <description>PPMT</description>
            </item>
            <item>
              <term>CUMPRINC</term>
              <description>BW</description>
            </item>
            <item>
              <term>ZW</term>
              <description>RATE</description>
            </item>
            <item>
              <term>FVSCHEDULE</term>
              <description>XIRR</description>
            </item>
            <item>
              <term>IPMT</term>
              <description>XNPV</description>
            </item>
            <item>
              <term>PMT</term>
              <description />
            </item>
          </list>
          <para>Eine Annuität ist eine Reihe konstanter Zahlungen, die über einen kontinuierlichen Zeitraum vorgenommen werden. So wird beispielsweise ein Autokredit oder eine Hypothek in Form einer Annuität zurückgezahlt. Weitere Informationen finden Sie in den Beschreibungen der einzelnen Annuitätenfunktionen. </para>
          <para>Für die Annuitätenfunktionen gilt, dass alle Zahlungen, die Sie tätigen (so z. B. Spareinlagen), durch negative Zahlen, und alle Geldbeträge, die Sie einnehmen (z. B. Dividenden), durch positive Zahlen dargestellt werden. Beispielsweise würde eine Spareinlage von 1.000 € durch das Argument -1000 dargestellt, wenn Sie der Einzahler sind, und durch das Argument 1000, wenn Sie die Bank sind. </para>
          <para>Microsoft Excel löst ein finanzielles Argument im Hinblick auf die anderen Argumente. Wenn die Rate nicht 0 ist, gilt: </para>
          <para>Abbildung 1: Formel, wenn die Rate nicht 0 ist</para>
          <para> </para>
          <para> </para>
          <para>Wenn die Rate 0 ist, gilt:</para>
          <para>(pmt * nper) + pv + fv = 0</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile">
      <MemberSignature Language="C#" Value="public double Quartile (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16711)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array – das Array oder der Zellbereich mit numerischen Werten, für das bzw. den Sie den Quartilswert ermitteln möchten.</param>
        <param name="Arg2">Quart – gibt an, welcher Wert zurückgegeben werden soll.</param>
        <summary>Gibt das Quartil eines Datensatzes zurück. Quartile werden häufig in Verkaufsdaten und Umfragedaten verwendet, um Grundgesamtheiten in Gruppen zu unterteilen. Sie können z. B. <b>Quartile</b> verwenden, um die obersten 25 Prozent der Einkommen in einer Grundgesamtheit zu finden.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zu den neuen Funktionen finden Sie unter den <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" /> Methoden und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" /> methoden.</para>
          <list type="table">
            <item>
              <term>0</term>
              <description>Kleinster Wert</description>
            </item>
            <item>
              <term>1 </term>
              <description>Erstes Quartil (25. Perzentil)</description>
            </item>
            <item>
              <term>2 </term>
              <description>Mittlerer Wert (50. Perzentil)</description>
            </item>
            <item>
              <term>3</term>
              <description>Drittes Quartil (75. Perzentil)</description>
            </item>
            <item>
              <term>4 </term>
              <description>Größter Wert</description>
            </item>
          </list>
          <para>Wenn array leer ist, <b>gibt Quartile</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Quart keine ganze Zahl darstellt, wird die Zahl gekürzt. </para>
          <para>Wenn Quart &lt; 0 oder Quart &gt; 4 ist, gibt <b>Quartile</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, und geben Sie denselben Wert wie Quartile zurück, wenn <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Quart gleich 0 (Null), 2 <b></b> bzw. 4 ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Exc">
      <MemberSignature Language="C#" Value="public double Quartile_Exc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Exc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Exc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Exc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Exc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16890)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array – Das Array oder der Zellbereich numerischer Werte, für die der Quartilwert angegeben werden soll.</param>
        <param name="Arg2">Quartile - Der zurückzugebende Wert.</param>
        <summary>Gibt die Quartile eines Datasets zurück, basierend auf Perzentilwerten von 0..1 ausschließlich.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn das Array leer ist, <b>gibt Quartile_Exc</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Quart keine ganze Zahl darstellt, wird die Zahl gekürzt. </para>
          <para>Wenn Quart ≤ 0 ist oder wenn Quart ≥ 4 ist, <b>gibt Quartile_Exc</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, und geben Sie denselben Wert wie Quartile_Exc, wenn <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Quart gleich 0 (Null), 2 <b></b> bzw. 4 ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quartile_Inc">
      <MemberSignature Language="C#" Value="public double Quartile_Inc (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quartile_Inc([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quartile_Inc(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quartile_Inc (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quartile_Inc(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16891)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array – das Array oder der Zellbereich mit numerischen Werten, für das bzw. den Sie den Quartilswert ermitteln möchten.</param>
        <param name="Arg2">Quartile - Der zurückzugebende Wert.</param>
        <summary>Gibt die Quartile eines Datasets basierend auf Perzentilwerten von 0..1 einschließlich zurück. Quartile werden häufig in Verkaufsdaten und Umfragedaten verwendet, um Grundgesamtheiten in Gruppen zu unterteilen. Beispielsweise können Sie mit QUARTILE.INC die obersten 25 % an Einkommenswerten in einer Grundgesamtheit ermitteln.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn das Array leer ist, <b>gibt Quartile_Inc</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Quart keine ganze Zahl darstellt, wird die Zahl gekürzt. </para>
          <para>Wenn Quart &lt; 0 oder Quart &gt; 4 ist, <b>gibt Quartile_Inc</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Min(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />, und geben Sie denselben Wert wie Quartile_Inc, wenn <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Median(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Max(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Quart gleich 0 (Null), 2 <b></b> bzw. 4 ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Quotient">
      <MemberSignature Language="C#" Value="public double Quotient (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Quotient([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Quotient(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Quotient (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Quotient(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16801)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zähler – der Dividend.</param>
        <param name="Arg2">Nenner – der Divisor.</param>
        <summary>Gibt den ganzzahligen Teil einer Division zurück. Mit dieser Funktion können Sie den Restbetrag einer Division verwerfen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn eines der Argumente nicht numerisch ist, gibt <b>Quotient</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Radians">
      <MemberSignature Language="C#" Value="public double Radians (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Radians([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Radians(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Radians (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Radians(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16726)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Winkel – ein Winkel in Grad, der umgerechnet werden soll.</param>
        <summary>Rechnet Grad in Bogenmaß um.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandBetween">
      <MemberSignature Language="C#" Value="public double RandBetween (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RandBetween([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RandBetween(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RandBetween (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RandBetween(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16848)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Unten – die kleinste von RANDBETWEEN zurückzugebende ganze Zahl.</param>
        <param name="Arg2">Oben – die größte von RANDBETWEEN zurückzugebende ganze Zahl.</param>
        <summary>Gibt eine zufällige ganze Zahl zwischen den von Ihnen angegebenen Zahlen zurück. Bei jeder Berechnung des Arbeitsblatts wird eine neue zufällige ganze Zahl zurückgegeben.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank">
      <MemberSignature Language="C#" Value="public double Rank (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16600)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die Zahl, deren Rang ermittelt werden soll.</param>
        <param name="Arg2">Bezug – ein Array von oder ein Bezug auf eine Liste von Zahlen. Nichtnumerische Werte in Bezug werden ignoriert.</param>
        <param name="Arg3">Reihenfolge – eine Zahl, mit der angegeben wird, wie der Rang einer Zahl ermittelt werden soll.</param>
        <summary>Gibt den Rang einer Zahl in einer Liste von Zahlen zurück. Der Rang einer Zahl entspricht ihrer Größe im Verhältnis zu anderen Werten in einer Liste. (Wenn die Liste sortiert werden würde, entspräche der Rang der Nummer der Position.)</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zu den neuen Funktionen finden Sie unter den <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> Methoden und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" /> methoden.</para>
          <para>Wenn Reihenfolge mit 0 (Null) angegeben oder ausgelassen wird, wird der Rang von Zahl in Microsoft Excel so ermittelt, als wenn Bezug eine in absteigender Reihenfolge sortierte Liste darstellt.</para>
          <para>Wenn Reihenfolge einem Wert ungleich Null entspricht, wird der Rang von Zahl in Microsoft Excel so ermittelt, als wenn Bezug eine in aufsteigender Reihenfolge sortierte Liste darstellt.</para>
          <para>
            <b>Rang</b> gibt doppelten Zahlen denselben Rang. Das Vorhandensein von doppelten Zahlen beeinflusst jedoch den Rang der nachfolgenden Zahlen. Wenn beispielsweise in einer Liste von aufsteigend sortierten ganzen Zahlen die Zahl 10 zweimal vorkommt und sich auf Rang 5 befindet, dann befindet sich 11 auf Rang 7 (keine Zahl befindet sich auf Rang 6).</para>
          <para>Für einige Zwecke kann eine Definition des Rangs verwendet werden, bei der Bindungen berücksichtigt werden. Im vorherigen Beispiel sollte der Rang 5,5 für die Zahl 10 überarbeitet werden. Dies kann durch Hinzufügen des folgenden Korrekturfaktors zu dem von Rank zurückgegebenen <b>Wert geschehen.</b> Dieser Korrekturfaktor ist sowohl für den Fall geeignet, dass die Rangfolge in absteigender Reihenfolge (Reihenfolge = 0 oder ausgelassen) oder in aufsteigender Reihenfolge (Reihenfolge = Wert ungleich Null) berechnet wird.</para>
          <para>Korrekturfaktor für verknüpfte Rangfolge=[COUNT(ref) + 1 – RANK(number, ref, 0) – RANK(number, ref, 1)]/2.</para>
          <para>Im folgenden Beispiel ist RANK(A2,A1:A5,1) gleich 3. Der Korrekturfaktor ist (5 + 1 – 2 – 3)/2 = 0,5, und die überarbeitete Rangfolge, die Bindungen berücksichtigt, ist 3 + 0,5 = 3,5. Wenn die Zahl nur einmal in Bezug auftritt, ist der Korrekturfaktor 0, da <b>rang</b> für einen Gleichstand nicht angepasst werden muss.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Avg">
      <MemberSignature Language="C#" Value="public double Rank_Avg (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Avg([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Avg(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Avg (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16892)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl - Die Zahl, deren Rang ermittelt werden soll.</param>
        <param name="Arg2">Bezug - Ein Array von oder ein Bezug auf eine Liste mit Zahlen. Nicht numerische Werte im Bezug werden ignoriert.</param>
        <param name="Arg3">Reihenfolge – Eine Zahl, die angibt, wie eine Zahl eingeordnet werden soll. Wenn Reihenfolge 0 ist oder weggelassen wird, versieht Microsoft Excel Zahl mit einem Rang, als wäre der Bezug eine in absteigender Reihenfolge sortierte Liste. Wenn Reihenfolge einem Wert ungleich Null entspricht, wird der Rang von Zahl in Microsoft Excel so ermittelt, als wäre Bezug eine in aufsteigender Reihenfolge sortierte Liste.</param>
        <summary>Gibt den Rang zurück, den eine Zahl innerhalb einer Liste von Zahlen einnimmt, d. h. die Größe relativ zu anderen Werten in der Liste. Wenn mehrere Werte die gleiche Rangzahl aufweisen, wird die durchschnittliche Rangzahl zurückgegeben.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rank_Eq">
      <MemberSignature Language="C#" Value="public double Rank_Eq (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rank_Eq([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rank_Eq(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rank_Eq (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16893)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl - Die Zahl, deren Rang ermittelt werden soll.</param>
        <param name="Arg2">Bezug - Ein Array von oder ein Bezug auf eine Liste mit Zahlen. Nicht numerische Werte im Bezug werden ignoriert.</param>
        <param name="Arg3">Reihenfolge - Ein Wert, der bestimmt, welchen Rang eine Zahl einnehmen soll.</param>
        <summary>Gibt den Rang einer Zahl in einer Liste von Zahlen zurück. Der Rang einer Zahl entspricht ihrer Größe im Verhältnis zu anderen Werten in einer Liste. (Wenn die Liste sortiert werden würde, entspräche der Rang der Nummer der Position.)</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn Reihenfolge 0 ist oder weggelassen wird, versieht Microsoft Excel Zahl mit einem Rang, als wäre der Bezug eine in absteigender Reihenfolge sortierte Liste.</para>
          <para>Wenn Reihenfolge einem Wert ungleich Null entspricht, wird der Rang von Zahl in Microsoft Excel so ermittelt, als wäre Bezug eine in aufsteigender Reihenfolge sortierte Liste.</para>
          <para>
            <b>Rank_Eq</b> gibt doppelten Zahlen denselben Rang. Das Vorhandensein von doppelten Zahlen beeinflusst jedoch den Rang der nachfolgenden Zahlen. Wenn beispielsweise in einer Liste von aufsteigend sortierten ganzen Zahlen die Zahl 10 zweimal vorkommt und sich auf Rang 5 befindet, dann befindet sich 11 auf Rang 7 (keine Zahl befindet sich auf Rang 6).</para>
          <para>Für einige Zwecke sollten Sie eine Definition des Rangs verwenden, die Bindungen berücksichtigt. Im vorherigen Beispiel würden Sie einen überarbeiteten Rang von 5,5 für die Zahl 10 wünschen. Fügen Sie dazu den folgenden Korrekturfaktor zu dem wert hinzu, der von der <b>Rank_Eq.</b> Dieser Korrekturfaktor ist sowohl für den Fall geeignet, dass die Rangfolge in absteigender Reihenfolge (Reihenfolge = 0 oder ausgelassen) oder in aufsteigender Reihenfolge (Reihenfolge = Wert ungleich Null) berechnet wird.</para>
          <para>Korrekturfaktor für verknüpfte Rangzahlen=[COUNT(ref) + 1 – RANK_EQ(number, ref, 0) – RANK_EQ(number, ref, 1)]/2.Im folgenden Beispiel ist RANK_EQ(A2,A1:A5,1) gleich 3. Der Korrekturfaktor ist (5 + 1 – 2 – 3)/2 = 0,5, und die überarbeitete Rangfolge, die Bindungen berücksichtigt, ist 3 + 0,5 = 3,5. Wenn die Zahl nur einmal in Bezug auftritt, ist <b></b> der Korrekturfaktor 0, da Rank_Eq für einen Gleichstand nicht angepasst werden müsste.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public double Rate (double Arg1, double Arg2, double Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rate([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rate(System.Double,System.Double,System.Double,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (Arg1 As Double, Arg2 As Double, Arg3 As Double, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16444)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zzr – die Gesamtzahl der Zahlungsperioden in einer Annuität.</param>
        <param name="Arg2">Rmz – die pro Zeitraum vorgenommene Zahlung; dies kann sich über die Dauer der Annuität nicht ändern. Typischerweise umfasst Rmz das Kapital und die Zinsen, jedoch keine anderen Gebühren oder Steuern. Wenn Rmz ausgelassen wird, müssen Sie das Argument Zw angeben.</param>
        <param name="Arg3">Bw – der aktuelle Wert – der Gesamtbetrag, dessen Wert eine Reihe von zukünftigen Zahlungen besitzt.</param>
        <param name="Arg4">Zw – der zukünftige Wert oder der Kassenbestand, den Sie nach Tätigung der letzten Zahlung erzielen möchten. Wenn Zw ausgelassen wird, wird dafür der Wert 0 angenommen (der zukünftige Wert einer Anleihe beträgt beispielsweise 0).</param>
        <param name="Arg5">F – die Zahl 0 oder 1, die die Fälligkeit von Zahlungen angibt.</param>
        <param name="Arg6">Guess – Ihre Schätze, wie die Rate sein wird.</param>
        <summary>Gibt den Zinssatz pro Zeitabschnitt einer Annuität zurück. RATE wird nach Iteration berechnet und kann Null oder mehrere Lösungen ergeben. Wenn die aufeinanderfolgenden Ergebnisse von RATE sich nach 20 Iterationen nicht bis auf 0,0000001 nähern, gibt RATE den Fehlerwert #NUM! zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Eine vollständige Beschreibung der Argumente "nper", "pmt", "pv", "fv" und "type" finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pv(System.Double,System.Double,System.Double,System.Object,System.Object)" /> .</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>Zum Ende des Zeitraums</description>
            </item>
            <item>
              <term>1 </term>
              <description>Zum Anfang des Zeitraums</description>
            </item>
          </list>
          <para>Wenn Sie Schätzwert nicht angeben, wird ein Wert von 10 Prozent vorausgesetzt.</para>
          <para>Wenn <b>die Rate</b> nicht konvergent wird, versuchen Sie es mit anderen Werten. <b>Die Rate</b> wird in der Regel konvergiert, wenn die Rate zwischen 0 und 1 liegt.</para>
          <para>Stellen Sie sicher, dass Sie die zur Angabe von Schätzwert und Zzr verwendeten Einheiten einheitlich verwenden. Wenn Sie für eine vierjährige Anleihe mit jährlichen Zinsen von 12 Prozent monatliche Zahlungen tätigen, verwenden Sie 12%/12 für Schätzwert und 4*12 für Zzr. Wenn Sie für dieselbe Anleihe jährliche Zahlungen tätigen, verwenden Sie 12% für Schätzwert und 4 für Zzr.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Received">
      <MemberSignature Language="C#" Value="public double Received (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Received([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Received(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Received (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16818)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Anlage – der in das Wertpapier investierte Betrag.</param>
        <param name="Arg4">Disagio – der Abzinsungsfaktor (Disagio) des Wertpapiers.</param>
        <param name="Arg5">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt den bei Fälligkeit für ein vollständig angelegtes Wertpapier erhaltenen Betrag zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn abrechnung oder Fälligkeit kein gültiges Datum ist, gibt <b>Received</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If investment ≤ 0 or if discount ≤ 0, <b>Received</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, gibt <b>Received</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn der Abrechnungstermin ≥ ist, gibt Received die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. <b>"Received"</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Methode "Formel für Empfangen"</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>B = Anzahl der Tage in einem Jahr, abhängig von der Jahresbasis.</para>
          <para>DIM = Anzahl der Tage von der Ausgabe bis zur Fälligkeit.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Replace([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16503)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text (die Zeichenfolge), in dem (der) Sie einige Zeichen ersetzen möchten.</param>
        <param name="Arg2">Die Position des Zeichens, das <paramref name="Arg1" /> durch ersetzt werden <paramref name="Arg4" /> soll.</param>
        <param name="Arg3">Die Anzahl der Zeichen, in <paramref name="Arg1" /> der die Methode durch ersetzt werden <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <paramref name="Arg4" /> soll.</param>
        <param name="Arg4">Text, der Zeichen in <paramref name="Arg1" /> ersetzt.</param>
        <summary>Ersetzt auf der Grundlage der angegebenen Anzahl von Zeichen einen Teil einer Zeichenfolge durch eine andere Zeichenfolge.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceB">
      <MemberSignature Language="C#" Value="public string ReplaceB (string Arg1, double Arg2, double Arg3, string Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReplaceB([in]string Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]string Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplaceB (Arg1 As String, Arg2 As Double, Arg3 As Double, Arg4 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReplaceB(System::String ^ Arg1, double Arg2, double Arg3, System::String ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16591)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Alter_Text – der Text, in dem Sie einige Zeichen ersetzen möchten.</param>
        <param name="Arg2">Erstes_Zeichen – die Position des Zeichens in Alter_Text, den Sie durch Neuer_Text ersetzen möchten.</param>
        <param name="Arg3">Anzahl_Zeichen – die Anzahl der Zeichen in Alter_Text, die mittels REPLACE durch Neuer_Text ersetzt werden sollen.</param>
        <param name="Arg4">Neuer_Text – der Text, durch den die Zeichen in Alter_Text ersetzt werden.</param>
        <summary>REPLACEB ersetzt einen Teil einer Textzeichenfolge anhand der von Ihnen angegebenen Anzahl von Bytes durch eine andere Textzeichenfolge.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Ist für die Verwendung mit Sprachen vorgesehen, die den <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> Single-Byte-Zeichensatz (Single-Byte Character Set, SBCS) verwenden, während <b>ReplaceB</b> für die Verwendung mit Sprachen vorgesehen ist, die den Doppel-Byte-Zeichensatz (Double-Byte Character Set, DBCS) verwenden. Der Rückgabewert wird von der Standardspracheinstellung auf Ihrem Computer folgendermaßen beeinflusst:</para>
          <para>
            <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> Zählt jedes Zeichen, ob Einzel- oder Doppel-Byte, immer als 1, unabhängig von der Standardspracheinstellung. </para>
          <para>
            <b>ReplaceB</b> zählt jedes Doppel-Byte-Zeichen als 2 Zeichen, wenn Sie die Bearbeitung einer Sprache aktiviert haben, die DBCS unterstützt, und sie dann als Standardsprache festlegen. Andernfalls <b>zählt ReplaceB</b> jedes Zeichen als 1. </para>
          <para>Zu den Sprachen, die DBCS unterstützen, zählen Japanisch, Chinesisch (vereinfacht), Chinesisch (traditionell) und Koreanisch. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rept">
      <MemberSignature Language="C#" Value="public string Rept (string Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Rept([in]string Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rept(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rept (Arg1 As String, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Rept(System::String ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16414)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text – der Text, der wiederholt werden soll.</param>
        <param name="Arg2">Zahl_Wiederholungen – eine positive Zahl, mit der angegeben wird, wie oft der Text wiederholt werden soll.</param>
        <summary>Wiederholt Text so oft wie angegeben. Mit REPT können Sie eine Zelle mit einer Anzahl von Vorkommen einer Textzeichenfolge füllen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn number_times 0 (Null) ist, <b>gibt Rept</b> "" (leerer Text) zurück. </para>
          <para>Wenn Zahl_Wiederholungen keine ganze Zahl darstellt, wird die Zahl gekürzt. </para>
          <para>Das Ergebnis der <b>Funktion Rept</b> darf nicht länger als 32.767 Zeichen sein, oder <b>Rept</b> gibt #VALUE! zurück. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Roman">
      <MemberSignature Language="C#" Value="public string Roman (double Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Roman([in]float64 Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Roman(System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Roman (Arg1 As Double, Optional Arg2 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16738)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die arabische Ziffer, die konvertiert werden soll.</param>
        <param name="Arg2">Format – eine Zahl, mit der die Art der gewünschten römischen Ziffer angegeben wird. Das Format für römische Ziffern reicht von klassisch bis vereinfacht und wird mit größeren Werten für Format prägnanter.</param>
        <summary>Konvertiert eine arabische Zahl in eine römische Zahl als Text.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>Klassisch.</description>
            </item>
            <item>
              <term>1 </term>
              <description>Prägnanter.</description>
            </item>
            <item>
              <term>2 </term>
              <description>Prägnanter.</description>
            </item>
            <item>
              <term>3</term>
              <description>Prägnanter.</description>
            </item>
            <item>
              <term>4 </term>
              <description>Vereinfacht.</description>
            </item>
            <item>
              <term>
                <b>true</b>
              </term>
              <description>Klassisch.</description>
            </item>
            <item>
              <term>
                <b>false</b>
              </term>
              <description>Vereinfacht.</description>
            </item>
          </list>
          <para>Wenn Zahl negativ ist, wird der Fehlerwert #VALUE! zurückgegeben.</para>
          <para>Wenn Zahl größer als 3999 ist, wird der Fehlerwert #VALUE! zurückgegeben.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public double Round (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Round([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Round (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Round(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16411)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die zu rundende Zahl.</param>
        <param name="Arg2">Anzahl_Stellen – gibt die Anzahl der Stellen an, bis auf die Zahl gerundet werden soll.</param>
        <summary>Rundet eine Zahl auf eine angegebene Anzahl von Stellen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn Anzahl_Stellen größer als 0 (Null) ist, wird Anzahl auf die angegebene Anzahl von Dezimalstellen gerundet. </para>
          <para>Wenn Anzahl_Stellen 0 ist, wird Zahl auf die nächste ganze Zahl gerundet. </para>
          <para>Wenn Anzahl_Stellen kleiner als 0 ist, wird Zahl an der linken Stelle neben dem Dezimalkomma gerundet.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtDown">
      <MemberSignature Language="C#" Value="public double RoundBahtDown (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtDown([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtDown(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtDown (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtDown(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16760)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für interne Zwecke vorbehalten. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundBahtUp">
      <MemberSignature Language="C#" Value="public double RoundBahtUp (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundBahtUp([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundBahtUp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundBahtUp (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundBahtUp(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16761)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für interne Zwecke vorbehalten.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundDown">
      <MemberSignature Language="C#" Value="public double RoundDown (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundDown([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundDown(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundDown (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundDown(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16597)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – eine beliebige reelle Zahl, die abgerundet werden soll.</param>
        <param name="Arg2">Anzahl_Stellen - die Anzahl der Stellen, bis auf die Zahl gerundet werden soll.</param>
        <summary>Rundet eine Zahl in Richtung Null ab.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>RoundDown</b> verhält sich wie , mit der Ausnahme, dass eine <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" /> Zahl immer nach unten gerundet wird. </para>
          <para>Wenn Anzahl_Stellen größer als 0 (Null) ist, wird Zahl auf die angegebene Anzahl von Dezimalstellen abgerundet.</para>
          <para>Wenn Anzahl_Stellen 0 ist, wird Zahl auf die nächste ganze Zahl abgerundet.</para>
          <para>Wenn Anzahl_Stellen kleiner als 0 ist, wird Zahl an der linken Stelle neben dem Dezimalkomma abgerundet.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundUp">
      <MemberSignature Language="C#" Value="public double RoundUp (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RoundUp([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RoundUp(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function RoundUp (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RoundUp(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16596)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl - eine beliebige reelle Zahl, die aufgerundet werden soll.</param>
        <param name="Arg2">Anzahl_Stellen - die Anzahl der Stellen, bis auf die Zahl gerundet werden soll.</param>
        <summary>Rundet eine Zahl in entgegengesetzter Richtung zu 0 (Null) auf.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>RoundUp</b> verhält sich wie <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Round(System.Double,System.Double)" /> , außer dass es immer eine Zahl aufrundet. </para>
          <para>Wenn Anzahl_Stellen größer als 0 (Null) ist, wird Zahl auf die angegebene Anzahl von Dezimalstellen aufgerundet.</para>
          <para>Wenn Anzahl_Stellen 0 ist, wird Zahl auf die nächste ganze Zahl aufgerundet.</para>
          <para>Wenn Anzahl_Stellen kleiner als 0 ist, wird Zahl an der linken Stelle neben dem Dezimalkomma aufgerundet.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rri">
      <MemberSignature Language="C#" Value="public double Rri (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Rri([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Rri(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rri (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Rri(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16963)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Anzahl der Zeiträume für die Investition.</param>
        <param name="Arg2">Der Aktuelle Wert der Investition.</param>
        <param name="Arg3">Zukünftiger Wert der Investition.</param>
        <summary>Gibt einen entsprechenden Zinssatz für das Wachstum einer Investition zurück.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RSq">
      <MemberSignature Language="C#" Value="public double RSq (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 RSq([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RSq(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSq (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double RSq(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16697)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bekannt_y – ein Array oder ein Bereich von Datenpunkten.</param>
        <param name="Arg2">Bekannt_x – ein Array oder ein Bereich von Datenpunkten.</param>
        <summary>Gibt das Quadrat des Pearsonschen Korrelationskoeffizienten über Datenpunkte in Bekannt_y und Bekannt_x zurück. Weitere Informationen finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Pearson(System.Object,System.Object)" />. Der R-quadrierte Wert kann als Teil der Varianz in Y interpretiert werden, der auf die Varianz in X zurückzuführen ist.</summary>
        <returns>To be added.</returns>
        <remarks><para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn known_y und known_x leer sind oder eine andere Anzahl von Datenpunkten haben, gibt <b>RSq</b> den Fehlerwert #N/A zurück. </para>
          <para>Wenn known_y und known_x nur 1 Datenpunkt enthalten, gibt <b>RSq</b> den Wert #DIV/0! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für den Korrelationskoeffizienten des Pearson-Produktmoments, r, ist: </para>
          <para>Abbildung 1: Korrelationskoeffizient für den Pearson-Produktmoment</para>
          <para> </para>
          <para> </para>
          <para>Wobei x und y die Beispielwerte AVERAGE(known_x) und AVERAGE(known_y) sind.</para>
          <para>
            <b>RSq gibt</b> r2 zurück, das Quadrat dieses Korrelationskoeffizienten.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RTD">
      <MemberSignature Language="C#" Value="public object RTD (object progID, object server, object topic1, object topic2, object topic3, object topic4, object topic5, object topic6, object topic7, object topic8, object topic9, object topic10, object topic11, object topic12, object topic13, object topic14, object topic15, object topic16, object topic17, object topic18, object topic19, object topic20, object topic21, object topic22, object topic23, object topic24, object topic25, object topic26, object topic27, object topic28);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RTD([in]object progID, [in]object server, [in]object topic1, [in]object topic2, [in]object topic3, [in]object topic4, [in]object topic5, [in]object topic6, [in]object topic7, [in]object topic8, [in]object topic9, [in]object topic10, [in]object topic11, [in]object topic12, [in]object topic13, [in]object topic14, [in]object topic15, [in]object topic16, [in]object topic17, [in]object topic18, [in]object topic19, [in]object topic20, [in]object topic21, [in]object topic22, [in]object topic23, [in]object topic24, [in]object topic25, [in]object topic26, [in]object topic27, [in]object topic28) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.RTD(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTD (progID As Object, server As Object, topic1 As Object, Optional topic2 As Object, Optional topic3 As Object, Optional topic4 As Object, Optional topic5 As Object, Optional topic6 As Object, Optional topic7 As Object, Optional topic8 As Object, Optional topic9 As Object, Optional topic10 As Object, Optional topic11 As Object, Optional topic12 As Object, Optional topic13 As Object, Optional topic14 As Object, Optional topic15 As Object, Optional topic16 As Object, Optional topic17 As Object, Optional topic18 As Object, Optional topic19 As Object, Optional topic20 As Object, Optional topic21 As Object, Optional topic22 As Object, Optional topic23 As Object, Optional topic24 As Object, Optional topic25 As Object, Optional topic26 As Object, Optional topic27 As Object, Optional topic28 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16763)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.Object" />
        <Parameter Name="server" Type="System.Object" />
        <Parameter Name="topic1" Type="System.Object" />
        <Parameter Name="topic2" Type="System.Object" />
        <Parameter Name="topic3" Type="System.Object" />
        <Parameter Name="topic4" Type="System.Object" />
        <Parameter Name="topic5" Type="System.Object" />
        <Parameter Name="topic6" Type="System.Object" />
        <Parameter Name="topic7" Type="System.Object" />
        <Parameter Name="topic8" Type="System.Object" />
        <Parameter Name="topic9" Type="System.Object" />
        <Parameter Name="topic10" Type="System.Object" />
        <Parameter Name="topic11" Type="System.Object" />
        <Parameter Name="topic12" Type="System.Object" />
        <Parameter Name="topic13" Type="System.Object" />
        <Parameter Name="topic14" Type="System.Object" />
        <Parameter Name="topic15" Type="System.Object" />
        <Parameter Name="topic16" Type="System.Object" />
        <Parameter Name="topic17" Type="System.Object" />
        <Parameter Name="topic18" Type="System.Object" />
        <Parameter Name="topic19" Type="System.Object" />
        <Parameter Name="topic20" Type="System.Object" />
        <Parameter Name="topic21" Type="System.Object" />
        <Parameter Name="topic22" Type="System.Object" />
        <Parameter Name="topic23" Type="System.Object" />
        <Parameter Name="topic24" Type="System.Object" />
        <Parameter Name="topic25" Type="System.Object" />
        <Parameter Name="topic26" Type="System.Object" />
        <Parameter Name="topic27" Type="System.Object" />
        <Parameter Name="topic28" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="progID">Eine Zeichenfolge, die den programmgesteuerten Bezeichner des Echtzeitservers darstellt.</param>
        <param name="server">Servername, <b>Nullzeichenfolge</b> oder <b>vbNullString-Konstante.</b></param>
        <param name="topic1"><paramref name="topic1" /> – <paramref name="topic28" /> Eine <b>Zeichenfolge,</b> die ein Thema darstellt.</param>
        <param name="topic2">To be added.</param>
        <param name="topic3">To be added.</param>
        <param name="topic4">To be added.</param>
        <param name="topic5">To be added.</param>
        <param name="topic6">To be added.</param>
        <param name="topic7">To be added.</param>
        <param name="topic8">To be added.</param>
        <param name="topic9">To be added.</param>
        <param name="topic10">To be added.</param>
        <param name="topic11">To be added.</param>
        <param name="topic12">To be added.</param>
        <param name="topic13">To be added.</param>
        <param name="topic14">To be added.</param>
        <param name="topic15">To be added.</param>
        <param name="topic16">To be added.</param>
        <param name="topic17">To be added.</param>
        <param name="topic18">To be added.</param>
        <param name="topic19">To be added.</param>
        <param name="topic20">To be added.</param>
        <param name="topic21">To be added.</param>
        <param name="topic22">To be added.</param>
        <param name="topic23">To be added.</param>
        <param name="topic24">To be added.</param>
        <param name="topic25">To be added.</param>
        <param name="topic26">To be added.</param>
        <param name="topic27">To be added.</param>
        <param name="topic28">To be added.</param>
        <summary>Diese Methode stellt eine Verbindung zu einer Quelle her, um Echtzeitdaten abzurufen.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Search">
      <MemberSignature Language="C#" Value="public double Search (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Search([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Search(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Search (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16466)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Suchtext – der zu suchende Text.</param>
        <param name="Arg2">Text – der Text, in dem nach Suchtext gesucht werden soll.</param>
        <param name="Arg3">Erstes_Zeichen – die Nummer des Zeichens in Text, an deren Position mit der Suche begonnen werden soll.</param>
        <summary><b>Suchen</b> Sie eine Textzeichenfolge innerhalb einer zweiten Textzeichenfolge, und geben Sie die Nummer der Startposition der ersten Textzeichenfolge aus dem ersten Zeichen der zweiten <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> Textzeichenfolge zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Die Suche ist für die Verwendung mit Sprachen vorgesehen, die den Single-Byte-Zeichensatz (Single-Byte Character Set, SBCS) verwenden, während die Suche für die Verwendung mit Sprachen vorgesehen ist, die den Doppel-Byte-Zeichensatz <b></b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> (Double-Byte Character Set, DBCS) verwenden. Die Standardspracheinstellung auf Ihrem Computer wirkt sich wie folgt auf den Rückgabewert<b>aus:</b> Die Suche zählt jedes Zeichen, ob Einzel- oder Doppel-Byte, immer als 1, unabhängig von der Standardspracheinstellung. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> Zählt jedes Doppel-Byte-Zeichen als 2, wenn Sie die Bearbeitung einer Sprache aktiviert haben, die DBCS unterstützt, und dann als Standardsprache festlegen. Zählt <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> andernfalls jedes Zeichen als 1.</para>
          <para>Zu den Sprachen, die DBCS unterstützen, zählen Japanisch, Chinesisch (vereinfacht), Chinesisch (traditionell) und Koreanisch. </para>
          <para>Verwenden <b>Sie die</b> Suche, und bestimmen Sie die Position eines Zeichens oder einer Textzeichenfolge innerhalb einer anderen Textzeichenfolge, sodass Sie die MID- und MIDB- oder -Funktionen zum Ändern des <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> Texts verwenden <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> können. </para>
          <para>
            <b>Suche</b> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> Schreibung wird nicht beachtet. Wenn Sie eine Suche unter Schreibung unter Schreibung verwenden möchten, können Sie diese <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" /> verwenden. </para>
          <para>In Suchtext können Sie die Platzhalterzeichen Sternchen (*) und Fragezeichen (?) verwenden. Mit einem Fragezeichen erfolgt ein Abgleich mit jedem einzelnen Zeichen; mit einem Sternchen erfolgt ein Abgleich mit einer beliebigen Abfolge von Zeichen. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, geben Sie vor dem Zeichen eine Tilde (~) ein.</para>
          <para>Wenn Suchtext nicht gefunden wird, wird der Fehlerwert #VALUE! zurückgegeben.</para>
          <para>Wenn Anzahl_Stellen ausgelassen wird, wird davon ausgegangen, dass dafür der Wert 1 vorliegt.</para>
          <para>Wenn Anzahl_Stellen nicht größer als 0 (Null) bzw. größer als die Länge von Text ist, wird der Fehlerwert #VALUE! zurückgegeben.</para>
          <para>Verwenden start_num, um eine angegebene Anzahl von Zeichen zu überspringen. <b>Angenommen,</b> Sie arbeiten mit der Textzeichenfolge "AYF0093". YoungMensApparel". Um die Nummer des ersten "Y" im beschreibenden Teil der Textzeichenfolge zu finden, legen Sie start_num gleich 8 fest, damit der Teil der Seriennummer des Texts nicht durchsucht wird. <b>Die</b> Suche beginnt mit Zeichen 8, findet find_text nächsten Zeichen und gibt die Zahl 9 zurück. <b>Die</b> Suche gibt immer die Anzahl der Zeichen ab dem Anfang des within_text zurück und zählt die Zeichen, die Sie überspringen, start_num größer als 1 ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchB">
      <MemberSignature Language="C#" Value="public double SearchB (string Arg1, string Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SearchB([in]string Arg1, [in]string Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchB (Arg1 As String, Arg2 As String, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16590)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Suchtext – der zu suchende Text.</param>
        <param name="Arg2">Text – der Text, in dem nach Suchtext gesucht werden soll.</param>
        <param name="Arg3">Erstes_Zeichen – die Nummer des Zeichens in Text, an deren Position mit der Suche begonnen werden soll.</param>
        <summary>SEARCH und SEARCHB finden eine Textzeichenfolge innerhalb einer zweiten Zeichenfolge und geben die Zahl für die Startposition der ersten Textzeichenfolge anhand des ersten Zeichens der zweiten Zeichenfolge zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Die Suche ist für die Verwendung mit Sprachen vorgesehen, die den Single-Byte-Zeichensatz (Single-Byte Character Set, SBCS) verwenden, während die Suche für die Verwendung mit Sprachen vorgesehen ist, die den Doppel-Byte-Zeichensatz <b></b> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> (Double-Byte Character Set, DBCS) verwenden. Die Standardspracheinstellung auf Ihrem Computer wirkt sich wie folgt auf den Rückgabewert<b>aus:</b> Die Suche zählt jedes Zeichen, ob Einzel- oder Doppel-Byte, immer als 1, unabhängig von der Standardspracheinstellung. <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> zählt jedes Doppel-Byte-Zeichen als 2 Zeichen, wenn Sie die Bearbeitung einer Sprache aktiviert haben, die DBCS unterstützt, und dann als Standardsprache festgelegt haben. Zählt <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> andernfalls jedes Zeichen als 1.</para>
          <para>Zu den Sprachen, die DBCS unterstützen, zählen Japanisch, Chinesisch (vereinfacht), Chinesisch (traditionell) und Koreanisch. </para>
          <para>Verwenden <b>Sie die</b> Suche, und bestimmen Sie die Position eines Zeichens oder einer Textzeichenfolge innerhalb einer anderen Textzeichenfolge, sodass Sie die MID- und MIDB- oder -Funktionen zum Ändern des <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> Texts verwenden <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Replace(System.String,System.Double,System.Double,System.String)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ReplaceB(System.String,System.Double,System.Double,System.String)" /> können. </para>
          <para>
            <b>Suche</b> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SearchB(System.String,System.String,System.Object)" /> Schreibung wird nicht beachtet. Wenn Sie eine Suche unter Schreibung unter Schreibung verwenden möchten, können Sie diese <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Find(System.String,System.String,System.Object)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.FindB(System.String,System.String,System.Object)" /> verwenden. </para>
          <para>In Suchtext können Sie die Platzhalterzeichen Sternchen (*) und Fragezeichen (?) verwenden. Mit einem Fragezeichen erfolgt ein Abgleich mit jedem einzelnen Zeichen; mit einem Sternchen erfolgt ein Abgleich mit einer beliebigen Abfolge von Zeichen. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, geben Sie vor dem Zeichen eine Tilde (~) ein.</para>
          <para>Wenn Suchtext nicht gefunden wird, wird der Fehlerwert #VALUE! zurückgegeben.</para>
          <para>Wenn Anzahl_Stellen ausgelassen wird, wird davon ausgegangen, dass dafür der Wert 1 vorliegt.</para>
          <para>Wenn Anzahl_Stellen nicht größer als 0 (Null) bzw. größer als die Länge von Text ist, wird der Fehlerwert #VALUE! zurückgegeben.</para>
          <para>Verwenden start_num, um eine angegebene Anzahl von Zeichen zu überspringen. <b>Angenommen,</b> Sie arbeiten mit der Textzeichenfolge "AYF0093". YoungMensApparel". Um die Nummer des ersten "Y" im beschreibenden Teil der Textzeichenfolge zu finden, legen Sie start_num gleich 8 fest, damit der Teil der Seriennummer des Texts nicht durchsucht wird. <b>Die</b> Suche beginnt mit Zeichen 8, findet find_text nächsten Zeichen und gibt die Zahl 9 zurück. <b>Die</b> Suche gibt immer die Anzahl der Zeichen ab dem Anfang des within_text zurück und zählt die Zeichen, die Sie überspringen, start_num größer als 1 ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sec">
      <MemberSignature Language="C#" Value="public double Sec (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sec([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sec(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sec (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sec(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16938)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Winkel in Bogenmaß, für den die Sekante erstellt werden soll.</param>
        <summary>Gibt den Sekant eines Winkels zurück.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sech">
      <MemberSignature Language="C#" Value="public double Sech (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sech([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sech(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sech (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sech(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16939)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Winkel in Bogenmaß, für den sie den hyperbolischen Sekant haben möchten.</param>
        <summary>Gibt den hyperbolischen Sekant eines Winkels zurück.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeriesSum">
      <MemberSignature Language="C#" Value="public double SeriesSum (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SeriesSum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SeriesSum(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SeriesSum (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SeriesSum(System::Object ^ Arg1, System::Object ^ Arg2, System::Object ^ Arg3, System::Object ^ Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16798)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Eingabewert für die Potenzreihe.</param>
        <param name="Arg2">N – die Ausgangspotenz, die für X gelten soll.</param>
        <param name="Arg3">M – der Schritt, um den N für jeden Ausdruck in der Reihe erhöht werden soll.</param>
        <param name="Arg4">Koeffizienten – eine Reihe von Koeffizienten, mit denen jede nachfolgende Potenz von X multipliziert wird. Durch die Anzahl der Werte in Koeffizienten wird die Anzahl der Ausdrücke in der Potenzreihe bestimmt. Wenn in den Koeffizienten beispielsweise drei Werte vorhanden sind, sind drei Ausdrücke in der Potenzreihe vorhanden.</param>
        <summary>Gibt die Summe einer Leistungsreihe basierend auf der Formel zurück: SERIES(x,n,m,a)= a1xn+a2x(n+m)+a3x(n+2m)+...+aix(n+(i-1)m)</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Argument nicht numerisch ist, <b>gibt SeriesSum</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public double Sinh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sinh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sinh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sinh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16613)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl entspricht einer beliebigen reellen Zahl.</param>
        <summary>Gibt den hyperbolischen Sinus einer Zahl zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Formel für den hyperbolischen Sinus lautet:</para>
          <para>Abbildung 1: Formel für den hyperbolischen Sinus</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew">
      <MemberSignature Language="C#" Value="public double Skew (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16707)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2 ... – Zwischen 1 und 30 Argumente, für die die Schiefe berechnet werden soll. Anstelle von Argumenten, die durch Semikolons getrennt sind, können Sie auch ein einzelnes Array oder einen Bezug auf ein Array verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt die Schiefe einer Verteilung zurück. Mit der Schiefe wird der Grad der Asymmetrie einer Verteilung um den Durchschnittswert charakterisiert. Mit positiver Schiefe wird eine Verteilung mit einer asymmetrischen Erweiterung angegeben, die auf mehr positive Werten hinweist. Mit negativer Schiefe wird eine Verteilung mit einer asymmetrischen Erweiterung angegeben, die auf mehr negative Werte hinweist.</summary>
        <returns>To be added.</returns>
        <remarks><para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn weniger als drei Datenpunkte enthalten sind oder die Standardabweichung der Stichprobe 0 ist, gibt <b>Skew</b> den Wert #DIV/0! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für die Schiefe ist folgendermaßen definiert: 

 </para>
          <para>Abbildung 1: Gleichung für Schiefe</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Skew_p">
      <MemberSignature Language="C#" Value="public double Skew_p (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Skew_p([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Skew_p(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Skew_p (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16960)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg2">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg3">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg4">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg5">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg6">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg7">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg8">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg9">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg10">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg11">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg12">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg13">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg14">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg15">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg16">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg17">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg18">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg19">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg20">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg21">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg22">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg23">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg24">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg25">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg26">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg27">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg28">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg29">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <param name="Arg30">1 bis 254 Zahlen oder Namen, Arrays oder Bezüge, die Zahlen enthalten, für die die Schiefe der Grundgesamtheit verwendet werden soll.</param>
        <summary>Gibt die Schiefe einer Verteilung basierend auf einer Grundgesamtheit zurück: eine Zeichenisierung des Asymmetrisches einer Verteilung um ihren Mittelwert.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sln">
      <MemberSignature Language="C#" Value="public double Sln (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sln([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sln(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sln (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Sln(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16526)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ansch_Wert – die Anlagekosten für den Vermögenswert.</param>
        <param name="Arg2">Restwert – der Wert zum Ende der Abschreibung (gelegentlich wird er als "Restwert" des Vermögenswerts bezeichnet).</param>
        <param name="Arg3">Nutzungsdauer – die Anzahl der Zeiträume, über die der Vermögenswert abgeschrieben wird (dies wird gelegentlich als "Nutzungsdauer" des Vermögenswerts bezeichnet).</param>
        <summary>Gibt die lineare Abschreibung eines Vermögenswerts für einen Zeitraum zurück.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slope">
      <MemberSignature Language="C#" Value="public double Slope (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Slope([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Slope(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slope (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Slope(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16699)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bekannt_y – ein Array oder ein Zellbereich mit numerisch abhängigen Datenpunkten.</param>
        <param name="Arg2">Bekannt_x – die unabhängigen Datenpunkte.</param>
        <summary>Gibt die Steigung der Regressionsgeraden durch Datenpunkte in Bekannt_y und Bekannt_x zurück. Die Steigung ist der vertikale Abstand, der durch den horizontalen Abstand zwischen beliebigen zwei Punkten auf der Geraden dividiert wird. Dies stellt die Änderungsrate entlang der Regressionsgeraden dar.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente müssen Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn known_y und known_x leer sind oder eine andere Anzahl von Datenpunkten haben, gibt <b>Slope</b> den Fehlerwert #N/A zurück. </para>
          <para>Die Formel für die Neigung der Regressionslinie ist: </para>
          <para>Abbildung 1: Formel für die Neigung der Regressionslinie</para>
          <para> </para>
          <para> </para>
          <para>Der zugrunde liegende Algorithmus, der in <b>der Slope</b> und den Funktionen verwendet wird, ist anders als der zugrunde liegende <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> Algorithmus, der in der Funktion verwendet <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> wird. Bei unbestimmten und kollinearen Daten kann der Unterschied zwischen diesen Algorithmen zu unterschiedlichen Ergebnissen führen. Wenn beispielsweise die Datenpunkte in Y_Werte den Wert 0 und die Datenpunkte in X_Werte den Wert 1 aufweisen, geschieht Folgendes: </para>
          <list type="bullet">
            <item>
              <description>
                <b>Slope</b> and <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> return a #DIV/0! zurück. Die <b>Slope</b> und der Algorithmus sind so konzipiert, dass sie nach einer einzigen Antwort suchen, und in diesem Fall kann es <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Intercept(System.Object,System.Object)" /> mehrere Antworten geben. </description>
            </item>
            <item>
              <description>
                <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> gibt den Wert 0 zurück. Der Algorithmus ist so konzipiert, dass angemessene Ergebnisse für collineare Daten erzielt werden, und in diesem Fall kann mindestens <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> eine Antwort gefunden werden.</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Small">
      <MemberSignature Language="C#" Value="public double Small (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Small([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Small(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Small (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Small(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16710)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array – ein Array oder Bereich von numerischen Daten, für das bzw. den der k-kleinste Wert ermittelt werden soll.</param>
        <param name="Arg2">K – die Position (ausgehend vom kleinsten Wert) im Array oder im Bereich der zurückzugebenden Daten.</param>
        <summary>Gibt den k-kleinsten Wert in einem Datensatz zurück. Mit dieser Funktion können Sie Werte mit einer bestimmten relativen Bedeutung in einem Datensatz zurückgeben.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn das Array leer ist, <b>gibt Small</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn k ≤ 0 ist oder wenn k die Anzahl der Datenpunkte überschreitet, gibt <b>Small</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn N die Anzahl der Datenpunkte in Array darstellt, entspricht SMALL(Array,1) dem kleinsten Wert, und SMALL(Array,n) entspricht dem größten Wert.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SqrtPi">
      <MemberSignature Language="C#" Value="public double SqrtPi (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SqrtPi([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SqrtPi(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SqrtPi (Arg1 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SqrtPi(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16800)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – die Zahl, mit der Pi multipliziert wird.</param>
        <summary>Gibt die Quadratwurzel von (Zahl * Pi) zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn die &lt; Zahl 0 ist, <b>gibt SqrtPi</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Standardize">
      <MemberSignature Language="C#" Value="public double Standardize (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Standardize([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Standardize(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Standardize (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Standardize(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16681)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, der normalisiert werden soll.</param>
        <param name="Arg2">Mittelwert – das arithmetische Mittel der Verteilung.</param>
        <param name="Arg3">Standabwn – die Standardabweichung der Verteilung.</param>
        <summary>Gibt einen normalisierten Wert aus einer Verteilung zurück, die durch Mittelwert und Standabwn charakterisiert wird.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn standard_dev ≤ 0 ist, <b>gibt Standardize</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für den normalisierten Wert lautet: 

 </para>
          <para>Abbildung 1: Gleichung für den normalisierten Wert</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev">
      <MemberSignature Language="C#" Value="public double StDev (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16396)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2 ... – Zwischen 1 und 30 Zahlenargumente, die einer Stichprobe einer Grundgesamtheit entsprechen. Anstelle von Argumenten, die durch Semikolons getrennt sind, können Sie auch ein einzelnes Array oder einen Bezug auf ein Array verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Schätzt die Standardabweichung auf der Grundlage einer Stichprobe. Bei der Standardabweichung handelt es sich um ein Maß dafür, wie weit Werte vom Durchschnittswert (Mittelwert) gestreut sind.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Methode.</para>
          <para>
            <b>StDev geht</b> davon aus, dass es sich bei den Argumenten um eine Stichprobe der Grundgesamtheit handelt. Wenn Ihre Daten die gesamte Grundgesamtheit darstellt, berechnen Sie die Standardabweichung mithilfe <b>von StDev</b>. </para>
          <para>Die Standardabweichung wird mithilfe der "Methode ohne Vorannahmen" (n-1) berechnet. </para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>
            <b>StDev verwendet</b> die folgende Formel: </para>
          <para>Abbildung 1: Formel für die "StDev"-Methode</para>
          <para> </para>
          <para> </para>
          <para>Dabei ist x der Mittelwert des Beispiels AVERAGE(Zahl1,Zahl2,...) und n die Beispielgröße.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_P">
      <MemberSignature Language="C#" Value="public double StDev_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16895)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2... - 1 bis 30 Zahlenargumente, die einer Grundgesamtheit entsprechen. Sie können auch ein Array oder einen Bezug auf ein Array anstelle der durch Komma getrennten Argumente verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Berechnet die Standardabweichung auf der Grundlage der angegebenen, vollständigen Grundgesamtheit als Argumente. Bei der Standardabweichung handelt es sich um ein Maß dafür, wie weit Werte vom Durchschnittswert (Mittelwert) gestreut sind.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>StDev_P</b> wird davon ausgegangen, dass es sich bei den Argumenten um die gesamte Grundgesamtheit handelt. Wenn Ihre Daten eine Stichprobe der Grundgesamtheit darstellt, berechnen Sie die Standardabweichung <b>mithilfe</b>StDev_P . </para>
          <para>Bei großen Beispielgrößen geben <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> StDev_P ungefähr gleiche Werte zurück. <b></b> </para>
          <para>Die Standardabweichung wird mithilfe der "Methode mit Vorannahmen" (n) berechnet. </para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>
            <b>StDev_P</b> verwendet die folgende Formel: </para>
          <para>Abbildung 1: Formel für die StDev_P A0</para>
          <para> </para>
          <para> </para>
          <para>Dabei ist x der Mittelwert des Beispiels AVERAGE(Zahl1,Zahl2,...) und n die Beispielgröße. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev_S">
      <MemberSignature Language="C#" Value="public double StDev_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDev_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDev_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16894)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2 ... – Zwischen 1 und 30 Zahlenargumente, die einer Stichprobe einer Grundgesamtheit entsprechen. Anstelle von Argumenten, die durch Semikolons getrennt sind, können Sie auch ein einzelnes Array oder einen Bezug auf ein Array verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Schätzt die Standardabweichung auf der Grundlage einer Stichprobe. Bei der Standardabweichung handelt es sich um ein Maß dafür, wie weit Werte vom Durchschnittswert (Mittelwert) gestreut sind.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>StDev_S</b> wird davon ausgegangen, dass es sich bei den Argumenten um eine Stichprobe der Grundgesamtheit handelt. Wenn Ihre Daten die gesamte Grundgesamtheit darstellt, berechnen Sie die Standardabweichung mit <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Die Standardabweichung wird mithilfe der "Methode ohne Vorannahmen" (n-1) berechnet. </para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>
            <b>StDev_S</b> wird die folgende Formel verwendet: </para>
          <para>Abbildung 1: Formel für die StDev_S A0</para>
          <para> </para>
          <para> </para>
          <para>Dabei ist x der Mittelwert des Beispiels AVERAGE(Zahl1,Zahl2,...) und n die Beispielgröße.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StDevP">
      <MemberSignature Language="C#" Value="public double StDevP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StDevP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDevP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StDevP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16577)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2 ... – Zwischen 1 und 30 Zahlenargumente, die einer Stichprobe einer Grundgesamtheit entsprechen. Anstelle von Argumenten, die durch Semikolons getrennt sind, können Sie auch ein einzelnes Array oder einen Bezug auf ein Array verwenden.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Berechnet die Standardabweichung auf der Grundlage der angegebenen, vollständigen Grundgesamtheit als Argumente. Bei der Standardabweichung handelt es sich um ein Maß dafür, wie weit Werte vom Durchschnittswert (Mittelwert) gestreut sind.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Methode.</para>
          <para>
            <b>StDevP geht</b> davon aus, dass es sich bei den Argumenten um die gesamte Grundgesamtheit handelt. Wenn Ihre Daten eine Stichprobe der Grundgesamtheit darstellt, berechnen Sie die Standardabweichung mit <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Bei großen Beispielgrößen gibt <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StDev(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> <b>StDevP</b> ungefähr gleiche Werte zurück. </para>
          <para>Die Standardabweichung wird mithilfe der "Methode mit Vorannahmen" (n) berechnet. Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen. </para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht. <b>StDevP</b> verwendet die folgende Formel: </para>
          <para>Abbildung 1: Formel für die Methode "StDevP"</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="StEyx">
      <MemberSignature Language="C#" Value="public double StEyx (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 StEyx([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.StEyx(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StEyx (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double StEyx(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16698)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bekannt_y – ein Array oder ein Bereich von abhängigen Datenpunkten.</param>
        <param name="Arg2">Bekannt_x – ein Array oder ein Bereich von unabhängigen Datenpunkten.</param>
        <summary>Gibt den Standardfehler des geschätzten y-Werts für jedes X in der Regression zurück. Der Standardfehler ist ein Maß für die Anzahl von Fehlern in der Prognose eines Y für ein einzelnes X.</summary>
        <returns>To be added.</returns>
        <remarks><para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Wenn known_y und known_x eine andere Anzahl von Datenpunkten haben, gibt <b>StEyx</b> den Fehlerwert #N/A zurück. </para>
          <para>Wenn known_y und known_x leer sind oder weniger als drei Datenpunkte haben, gibt <b>StEyx</b> den Wert #DIV/0! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Gleichung für den Standardfehler des vorhergesagten y ist: </para>
          <para>Abbildung 1: Gleichung für den Standardfehler des vorhergesagten y</para>
          <para> </para>
          <para> </para>
          <para>Dabei sind x und y die Beispielwerte AVERAGE(known_x) und AVERAGE(known_y) und n ist die Beispielgröße.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Substitute">
      <MemberSignature Language="C#" Value="public string Substitute (string Arg1, string Arg2, string Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Substitute([in]string Arg1, [in]string Arg2, [in]string Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Substitute(System.String,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substitute (Arg1 As String, Arg2 As String, Arg3 As String, Optional Arg4 As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
        <Parameter Name="Arg2" Type="System.String" />
        <Parameter Name="Arg3" Type="System.String" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text - der Text oder der Bezug auf eine Zelle mit Text, für die Sie Zeichen ersetzen möchten.</param>
        <param name="Arg2">Alter_Text - der zu ersetzende Text.</param>
        <param name="Arg3">Neuer_Text - der Text, durch den Sie Alter_Text ersetzen möchten.</param>
        <param name="Arg4">ntes_Auftreten - gibt an, welches Vorkommen von Alter_Text durch Neuer_Text ersetzt werden soll. Wenn Sie ntes_Auftreten angeben, wird nur diese Instanz von Alter_Text ersetzt. Andernfalls wird jedes Vorkommen von Alter_Text in Text zu Neuer_Text geändert.</param>
        <summary>Ersetzt in einer Textzeichenfolge Alter_Text durch Neuer_Text. Verwenden Sie SUBSTITUTE, wenn Sie einen bestimmten Text in einer Textzeichenfolge ersetzen möchten; verwenden Sie REPLACE, wenn Sie jeden Text ersetzen möchten, der an einer bestimmten Stelle in einer Textzeichenfolge vorkommt.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtotal">
      <MemberSignature Language="C#" Value="public double Subtotal (double Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Subtotal([in]float64 Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Subtotal(System.Double,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtotal (Arg1 As Double, Arg2 As Range, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16728)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine Zahl, die die von der Methode zu verwendende Aggregationsfunktion angibt.</param>
        <param name="Arg2">Das erste <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekt, für das ein Teilsumme berechnet werden soll.</param>
        <param name="Arg3"><paramref name="Arg3" /> – <paramref name="Arg30" /> Nachfolgende <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekte, für die ein Teilsumme berechnet werden soll.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Generiert Teilergebnisse.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public double Sum (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Sum([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Sum(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sum (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16388)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... - zwischen 1 und 30 Argumente, für die Sie den Gesamtwert bzw. die Summe ermitteln möchten.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Addiert alle Zahlen in einem Zellbereich.</summary>
        <returns>To be added.</returns>
        <remarks><para>Zahlen, Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt. </para>
          <para>Wenn ein Argument ein Array oder ein Verweis ist, werden nur Zahlen in diesem Array oder Verweis verwendet. Leere Zellen, Wahrheitswerte oder Text im Array oder Bezug werden ignoriert. </para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIf">
      <MemberSignature Language="C#" Value="public double SumIf (Microsoft.Office.Interop.Excel.Range Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIf([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIf(Microsoft.Office.Interop.Excel.Range,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIf (Arg1 As Range, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16729)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Bereich – der Zellbereich, der anhand von Kriterien ausgewertet werden soll.</param>
        <param name="Arg2">Kriterien – die Kriterien in Form einer Zahl, eines Ausdrucks oder Texts, mit dem definiert wird, welche Zellen addiert werden. Kriterien können beispielsweise als 32, "32", " &gt; 32" oder "Äpfel" ausgedrückt werden.</param>
        <param name="Arg3">Summe_Bereich – die tatsächlich zu addierenden Zellen, wenn die entsprechenden Zellen in Bereich auf Kriterien zutreffen. Wenn Summe_Bereich ausgelassen wird, werden die Zellen im Bereich sowohl nach Kriterien ausgewertet als auch addiert, sofern sie Kriterien entsprechen.</param>
        <summary>Addiert die nach einem bestimmten Kriterium angegebenen Zellen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Summe_Bereich muss nicht dieselbe Größe und Form wie Bereich aufweisen. Die tatsächlich zu addierenden Zellen werden bestimmt, indem die linke obere Zelle in Summe_Bereich als Anfangszelle verwendet wird und dann die Zellen einbezogen werden, die Bereich hinsichtlich Größe und Form entsprechen. Beispiel:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para>In Kriterien können Sie die Platzhalterzeichen Sternchen (*) und Fragezeichen (?) verwenden. Mit einem Fragezeichen erfolgt ein Abgleich mit jedem einzelnen Zeichen; mit einem Sternchen erfolgt ein Abgleich mit einer beliebigen Abfolge von Zeichen. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, geben Sie vor dem Zeichen eine Tilde (~) ein.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumIfs">
      <MemberSignature Language="C#" Value="public double SumIfs (Microsoft.Office.Interop.Excel.Range Arg1, Microsoft.Office.Interop.Excel.Range Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumIfs([in]class Microsoft.Office.Interop.Excel.Range Arg1, [in]class Microsoft.Office.Interop.Excel.Range Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumIfs(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.Range,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumIfs (Arg1 As Range, Arg2 As Range, Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16866)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg2" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Sum_range - the range to sum.</param>
        <param name="Arg2">Criteria_range1, criteria_range2, ... - einen oder mehrere Bereiche, in denen die zugeordneten Kriterien ausgewertet werden.</param>
        <param name="Arg3">Criteria1, criteria2, ... - ein oder mehrere Kriterien in Form einer Zahl, eines Ausdrucks, eines Zellbezugs oder Texts, die definieren, welche Zellen hinzugefügt werden. Kriterien können beispielsweise als 32, "32", " &gt; 32", "Äpfel" oder B4 ausgedrückt werden.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <summary>Addiert die Zellen in einem Bereich, die mehreren Kriterien entsprechen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Each cell in sum_range is summed only if all of the corresponding criteria specified are true for that cell. </para>
          <para>Zellen in sum_range, die <b>"True" enthalten,</b> werden als 1 ausgewertet. Zellen in sum_range, die <b>"false" enthalten,</b> werden als 0 (Null) ausgewertet. </para>
          <para>You can use the wildcard characters, question mark (?) and asterisk (*), in criteria. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.</para>
          <para>Each criteria_range does not have to be the same size and shape as sum_range. The actual cells that are added are determined by using the top, left cell in that criteria_range as the beginning cell, and then including cells that correspond in size and shape to sum_range. For example:</para>
          <list type="table">
            <item>
              <term>A1:A5</term>
              <description>B1:B5</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:A5</term>
              <description>B1:B3</description>
              <description>B1:B5</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:D4</description>
              <description>C1:D4</description>
            </item>
            <item>
              <term>A1:B4</term>
              <description>C1:C2</description>
              <description>C1:D4</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumProduct">
      <MemberSignature Language="C#" Value="public double SumProduct (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumProduct([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumProduct(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumProduct (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16612)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1, Array2, Array3, ... – zwischen 2 und 30 Arrays, deren Bestandteile Sie multiplizieren und anschließend addieren möchten.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Multipliziert einander entsprechende Bestandteile in den angegebenen Arrays und gibt die Summe dieser Produkte zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Arrayargumente müssen die gleichen Dimensionen haben. Andern falls nicht, <b>gibt SumProduct</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>SumProduct</b> behandelt Arrayeinträge, die nicht numerisch sind, als wären sie Nullen.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumSq">
      <MemberSignature Language="C#" Value="public double SumSq (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumSq([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumSq(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumSq (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16705)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2, ... – zwischen 1 und 30 Argumente, für die Sie die Summe der Quadrate ermitteln möchten. Sie können auch ein einzelnes Array oder einen Bezug auf ein Array anstelle von Argumenten verwenden, die durch Semikolons getrennt sind.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Gibt die Summe der Quadrate der Argumente zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen. </para>
          <para>Zahlen, Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt. </para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert. </para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2MY2">
      <MemberSignature Language="C#" Value="public double SumX2MY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2MY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2MY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2MY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2MY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16688)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x – das erste Array bzw. der erste Wertebereich.</param>
        <param name="Arg2">Array_y – das zweite Array bzw. der zweite Wertebereich.</param>
        <summary>Gibt die Summe der Differenz von Quadraten einander entsprechender Werte in zwei Arrays zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente müssen Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn array_x und array_y eine andere Anzahl von Werten haben, gibt <b>SumX2MY2 den</b> #N/A-Fehlerwert zurück. </para>
          <para>Die Formel für die Summe der Differenz von Quadraten lautet: 

 </para>
          <para>Abbildung 1: Formel für die Summe der Differenz von Quadraten</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumX2PY2">
      <MemberSignature Language="C#" Value="public double SumX2PY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumX2PY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumX2PY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumX2PY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumX2PY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16689)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x – das erste Array bzw. der erste Wertebereich.</param>
        <param name="Arg2">Array_y – das zweite Array bzw. der zweite Wertebereich.</param>
        <summary>Gibt die Summe der Summe von Quadraten einander entsprechender Werte in zwei Arrays zurück. Die Summe der Summe von Quadraten stellt einen gebräuchlichen Ausdruck in vielen statistischen Berechnungen dar.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente müssen Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn array_x und array_y eine andere Anzahl von Werten haben, gibt <b>SumX2PY2</b> den Fehlerwert #N/A zurück. </para>
          <para>Die Formel für die Summe der Summe von Quadraten lautet: 

 </para>
          <para>Abbildung 1: Formel für die Summe der Summe von Quadraten</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SumXMY2">
      <MemberSignature Language="C#" Value="public double SumXMY2 (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 SumXMY2([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.SumXMY2(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SumXMY2 (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double SumXMY2(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16687)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array_x – das erste Array bzw. der erste Wertebereich.</param>
        <param name="Arg2">Array_y – das zweite Array bzw. der zweite Wertebereich.</param>
        <summary>Gibt die Summe der Quadrate von Differenzen einander entsprechender Werte in zwei Arrays zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Argumente müssen Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wenn ein Array- oder Bezugsargument Text, Wahrheitswerte oder leere Zellen enthält, werden diese Werte ignoriert; Zellen mit dem Wert Null werden jedoch berücksichtigt.</para>
          <para>Wenn array_x und array_y eine andere Anzahl von Werten haben, gibt <b>SumXMY2</b> den Fehlerwert #N/A zurück. </para>
          <para>Die Formel für die Summe von Differenzen im Quadrat lautet: 

 </para>
          <para>Abbildung 1: Formel für die Summe der quadratischen Unterschiede</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Syd">
      <MemberSignature Language="C#" Value="public double Syd (double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Syd([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Syd(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Syd (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Syd(double Arg1, double Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16527)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ansch_Wert – die Anlagekosten für den Vermögenswert.</param>
        <param name="Arg2">Restwert – der Wert zum Ende der Abschreibung (gelegentlich wird er als "Restwert" des Vermögenswerts bezeichnet).</param>
        <param name="Arg3">Nutzungsdauer – die Anzahl der Zeiträume, über die der Vermögenswert abgeschrieben wird (dies wird gelegentlich als "Nutzungsdauer" des Vermögenswerts bezeichnet).</param>
        <param name="Arg4">Zr – der Zeitraum; hierfür müssen die gleichen Einheiten wie für Nutzungsdauer verwendet werden.</param>
        <summary>Gibt die Abschreibung eines Vermögenswerts im Hinblick auf die Zahlen der Jahressumme für einen bestimmten Zeitraum zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Syd</b> wird wie folgt berechnet:</para>
          <para>Abbildung 1: Formel für die Syd-Methode</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist">
      <MemberSignature Language="C#" Value="public double T_Dist (double Arg1, double Arg2, bool Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist([in]float64 Arg1, [in]float64 Arg2, [in]bool Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist(double Arg1, double Arg2, bool Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16896)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - Der Wert, für den die Verteilung ausgewertet werden soll.</param>
        <param name="Arg2">Deg_freedom - Eine ganze Zahl, die die Anzahl der Freiheitsgrade angibt.</param>
        <param name="Arg3">Kumuliert – Ein logischer Wert, der die Form der Funktion bestimmt. Wenn kumulativ <b>true</b>ist, <b>gibt T_Dist</b> die kumulierte Verteilungsfunktion zurück. Wenn <b>false,</b>gibt sie die Wahrscheinlichkeitsdichtefunktion zurück.</param>
        <summary>Gibt die Student-t-Verteilung zurück, wobei ein numerischer Wert (x) einem berechneten Wert von t entspricht, für den die Prozentpunkte berechnet werden.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Argument nicht numerisch ist, <b>gibt T_Dist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn deg_freedom &lt; 1 ist, <b>gibt T_Dist</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x &lt; 0, gibt <b>T_Dist</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_2T">
      <MemberSignature Language="C#" Value="public double T_Dist_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16897)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - Der Wert, für den die Verteilung ausgewertet werden soll.</param>
        <param name="Arg2">Deg_freedom - Eine ganze Zahl, die die Anzahl der Freiheitsgrade angibt.</param>
        <summary>Gibt die zweiseitige (Student) t-Verteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Argument nicht numerisch ist, <b>gibt T_Dist_2T</b> den Wert #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn deg_freedom &lt; 1 ist, <b>gibt T_Dist_2T</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x &lt; 0, gibt <b>T_Dist_2T</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Dist_RT">
      <MemberSignature Language="C#" Value="public double T_Dist_RT (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Dist_RT([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Dist_RT (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Dist_RT(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16898)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - Der Wert, für den die Verteilung ausgewertet werden soll.</param>
        <param name="Arg2">Freiheitsgrade - Eine ganze Zahl zum Angeben der Freiheitsgrade.</param>
        <summary>Gibt die rechtsseitige (Student) t-Verteilung zurück, wobei ein numerischer Wert (x) dem berechneten Wert t entspricht, für den die Prozentpunkte berechnet werden sollen. Die t-Verteilung wird in der Hypothesenüberprüfung von kleinen Beispieldatensätzen verwendet. Verwenden Sie diese Funktion anstelle einer Tabelle mit kritischen Werten für die t-Verteilung.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn ein Argument nicht numerisch ist, <b>gibt T_Dist_RT</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn degrees_freedom &lt; 1 ist, <b>gibt T_Dist_RT</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Argumente Freiheitsgrade und Seiten werden zu ganzen Zahlen gekürzt. </para>
          <para>Wenn "Tails" einen anderen Wert als 1 oder 2 T_Dist_RT gibt <b>#NUM!</b> Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x &lt; 0, gibt <b>T_Dist_RT</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn "Tails" = 1 <b>ist, T_Dist_RT</b> als T_DIST_RT = P( X x ) berechnet, wobei X eine zufällige Variable ist, die auf die &gt; t-Verteilung folgt. Wenn "Tails" = 2 <b>ist, T_Dist_RT</b> als T_DIST_RT = P(| X| &gt; x) = P(X &gt; x oder X &lt; -x). </para>
          <para>Da x 0 nicht zulässig ist, beachten Sie für die Verwendung von T_Dist_RT bei &lt; x 0, dass <b></b> &lt; T_DIST_RT(-x,df) = 1 – T_DIST_RT(x,df) = P(X &gt; -x) und T_DIST_2T(-x,df) = T_DIST_2T(x df) = P(|) X| &gt;x).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv">
      <MemberSignature Language="C#" Value="public double T_Inv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16899)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrscheinlichkeit – Die Der Student-t-Verteilung zugeordnete Wahrscheinlichkeit.</param>
        <param name="Arg2">Deg_freedom - Die Anzahl der Freiheitsgrade, mit denen die Verteilung gekennzeichnet werden soll.</param>
        <summary>Gibt Werte der linksseitigen Umkehrung der Student-t-Verteilung zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn eines der Argumente nicht numerisch ist, <b>gibt T_Inv</b> den Wert #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die &lt; Wahrscheinlichkeit 0 oder die Wahrscheinlichkeit &gt; 1 <b>ist, gibt T_Inv</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Freiheitsgrade keine ganze Zahl darstellt, wird die Zahl gekürzt. </para>
          <para>Wenn deg_freedom &lt; 1 ist, <b>gibt T_Inv</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Inv_2T">
      <MemberSignature Language="C#" Value="public double T_Inv_2T (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Inv_2T([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Inv_2T (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Inv_2T(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16900)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Warsch - Die zweiseitig zur Student-t-Verteilung gehörige Wahrscheinlichkeit.</param>
        <param name="Arg2">Freiheitsgrade - Die Anzahl der Freiheitsgrade, durch die die Verteilung charakterisiert wird.</param>
        <summary>Gibt den t-Wert der Student-t-Verteilung als Funktion der Wahrscheinlichkeit und der Freiheitsgrade zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn eines der Argumente nicht numerisch ist, <b>gibt T_Inv_2T</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Ist die &lt; Wahrscheinlichkeit 0 oder ist die Wahrscheinlichkeit &gt; 1, <b>gibt T_Inv_2T</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. Wenn der Wert für Freiheitsgrade keine ganze Zahl darstellt, wird die Zahl gekürzt. </para>
          <para>Wenn degrees_freedom &lt; 1 ist, <b>gibt T_Inv_2T</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>T_Inv_2T</b> gibt diesen Wert t zurück, so dass P(| X| t) = Wahrscheinlichkeit, wenn X eine zufällige Variable ist, die &gt; auf die t-Verteilung und P(| X| &gt; t) = P(X &lt; -t oder X &gt; t). </para>
          <para>Ein einwertiger t-Wert kann zurückgegeben werden, indem die Wahrscheinlichkeit durch 2 *Wahrscheinlichkeit ersetzt wird. Bei einer Wahrscheinlichkeit von 0,05 und Freiheitsgrade von 10 wird der zweieckige Wert mit T_INV_2T(0,05,10) berechnet, der 2,28139 zurückgibt.* Der eineckige Wert für die gleiche Wahrscheinlichkeit und die gleichen Freiheitsgrade kann mit T_INV_2T(2 0,05,10) berechnet werden, der 1,812462 zurückgibt. </para>
          <para>
            <b>Hinweis:</b>In einigen Tabellen wird die Wahrscheinlichkeit als (1-p) beschrieben.</para>
          <para>Wenn ein Wert für die Wahrscheinlichkeit <b>T_Inv_2T</b> sucht der Wert x so, dass T_DIST_RT(x, degrees_freedom, 2) = Wahrscheinlichkeit. Daher hängt die Genauigkeit <b>der T_Inv_2T</b> von der Genauigkeit der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" /> ab. <b>T_Inv_2T</b> verwendet eine iterative Suchtechnik. Hat die Suche nach 100 Iterationen noch nicht konvergiert, gibt die Funktion den Fehlerwert #N/A zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="T_Test">
      <MemberSignature Language="C#" Value="public double T_Test (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 T_Test([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function T_Test (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double T_Test(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16925)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 - Das erste Dataset.</param>
        <param name="Arg2">Array2 - Das zweite Dataset.</param>
        <param name="Arg3">Seiten - Gibt die Anzahl der Verteilungsseiten an. Wenn "Tails" = 1 <b>ist, T_Test</b> die Verteilung mit einer Zahl verwendet. Wenn "Tails" = 2 <b>ist, T_Test</b> die Verteilung mit zwei Enden verwendet.</param>
        <param name="Arg4">Typ - Die Art des durchzuführenden T-Tests.</param>
        <summary>Gibt die Wahrscheinlichkeit zurück, die mit einem Student-t-Test verbunden ist. Verwenden Sie TTEST, um zu ermitteln, ob zwei Stichproben wahrscheinlich aus denselben zwei zugrunde liegenden Grundgesamtheiten stammen, die denselben Mittelwert besitzen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn Array1 und Array2 eine andere Anzahl von Datenpunkten haben und der Typ = 1 (gekoppelt) ist, gibt <b>T_Test</b> den Fehlerwert #N/A zurück. </para>
          <para>Die Erweiterungen und Typargumente werden zu ganzen Zahlen gekürzt. </para>
          <para>Wenn "Tails" oder "Type" nicht numerisch <b>ist, T_Test</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn "Tails" einen anderen Wert als 1 oder 2 T_Test gibt <b>#NUM!</b> Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>T_Test</b> verwendet die Daten in Array1 und Array2, um eine nicht negative t-Statistik zu berechnen. Wenn "Tails" =1 ist, <b>gibt T_Test</b> die Wahrscheinlichkeit eines höheren Werts der t-Statistik unter der Annahme zurück, dass Array1 und Array2 Stichproben aus Grundgesamtheiten mit demselben Mittelwert sind. Der von <b>T_Test</b> zurückgegebene Wert, wenn "tails=2" den doppelten Wert hat, der zurückgegeben wird, wenn "Tails=1" ist, und entspricht der Wahrscheinlichkeit eines höheren absoluten Werts der t-Statistik unter der Annahme "gleiche Grundgesamtheit".</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public double Tanh (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Tanh([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Tanh (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Tanh(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16615)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl – eine beliebige reelle Zahl</param>
        <summary>Gibt den hyperbolischen Tangens einer Zahl zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die Formel für den hyperbolischen Tangens lautet:</para>
          <para>Abbildung 1: Formel für den hyperbolischen Tangens</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillEq">
      <MemberSignature Language="C#" Value="public double TBillEq (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillEq([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillEq(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillEq (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16822)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Schatzwechsels. Das Abrechnungsdatum des Schatzwechsels entspricht dem Datum nach dem Emissionsdatum, mit dem das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für den Schatzwechsel. Das Fälligkeitsdatum entspricht dem Datum, mit dem die Gültigkeit des Schatzwechsels abläuft.</param>
        <param name="Arg3">ImportantDates sollte mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden. Diskon – Der Abzinsungssatz des Schatzwechsels.</param>
        <summary>Gibt die Rendite eines Schatzwechsels zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Abrechnung und Fälligkeit werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn abrechnung oder Fälligkeit kein gültiges Datum ist, <b>gibt TBillEq</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn der ≤ 0 ist, <b>gibt TBillEq</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die Abrechnungsfälligkeit oder die Fälligkeit mehr als ein Jahr nach dem Abrechnungstermin liegt, gibt &gt; <b>TBillEq</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>TBillEq</b> wird als TBILLEQ = (365 x Rate)/(360-(Rate x DSM)) berechnet, wobei DSM die Anzahl der Tage zwischen Abrechnung und Fälligkeit ist, die gemäß der Basis von 360 Tagen pro Jahr berechnet werden.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillPrice">
      <MemberSignature Language="C#" Value="public double TBillPrice (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillPrice([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillPrice(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillPrice (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16823)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Schatzwechsels. Das Abrechnungsdatum des Schatzwechsels entspricht dem Datum nach dem Emissionsdatum, mit dem das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für den Schatzwechsel. Das Fälligkeitsdatum entspricht dem Datum, mit dem die Gültigkeit des Schatzwechsels abläuft.</param>
        <param name="Arg3">Disagio – der Abzinsungsfaktor (Disagio) des Schatzwechsels.</param>
        <summary>Gibt den Nennwert des Preises pro 100 $ für einen Schatzwechsel zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Abrechnung und Fälligkeit werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn abrechnung oder Fälligkeit kein gültiges Datum ist, <b>gibt TBillPrice</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn der ≤ 0 ist, <b>gibt TBillPrice</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die Abrechnungsfälligkeit oder die Fälligkeit mehr als ein Jahr nach dem Abrechnungstermin liegt, gibt &gt; <b>TBillPrice</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>TBillPrice</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Formel für die TBillPrice-Methode</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>DSM = Anzahl der Tage von Abrechnung bis Fälligkeit, mit Ausnahme eines Fälligkeitsdatums, das mehr als ein Kalenderjahr nach dem Abrechnungsdatum liegt.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TBillYield">
      <MemberSignature Language="C#" Value="public double TBillYield (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TBillYield([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TBillYield(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TBillYield (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16824)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Schatzwechsels. Das Abrechnungsdatum des Schatzwechsels entspricht dem Datum nach dem Emissionsdatum, mit dem das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für den Schatzwechsel. Das Fälligkeitsdatum entspricht dem Datum, mit dem die Gültigkeit des Schatzwechsels abläuft.</param>
        <param name="Arg3">Kurs – der Nennwert des Schatzwechsels als Preis pro 100 $.</param>
        <summary>Gibt die Rendite für einen Schatzwechsel zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Abrechnung und Fälligkeit werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn abrechnung oder Fälligkeit kein gültiges Datum ist, <b>gibt TBillYield</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn pr ≤ 0 ist, <b>gibt TBillYield</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die ≥ oder wenn die Fälligkeit mehr als ein Jahr nach dem Abrechnungstermin liegt, gibt <b>TBillYield</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>TBillYield</b> wird wie folgt berechnet: </para>
          <para>Abbildung 1: Formel für die TBillYield-Methode</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>DSM = Anzahl der Tage von Abrechnung bis Fälligkeit, mit Ausnahme eines Fälligkeitsdatums, das mehr als ein Kalenderjahr nach dem Abrechnungsdatum ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TDist">
      <MemberSignature Language="C#" Value="public double TDist (double Arg1, double Arg2, double Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TDist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TDist(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TDist (Arg1 As Double, Arg2 As Double, Arg3 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TDist(double Arg1, double Arg2, double Arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16685)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der numerische Wert, für den die Verteilung ausgewertet werden soll.</param>
        <param name="Arg2">Freiheitsgrade – eine ganze Zahl, mit der die Anzahl der Freiheitsgrade angegeben wird.</param>
        <param name="Arg3">Seiten – gibt die zurückzugebende Anzahl von Verteilungserweiterungen an. Wenn Seiten = 1, gibt TDIST die Verteilung mit einer Erweiterung zurück. Wenn Seiten = 2, gibt TDIST die Verteilung mit zwei Erweiterungen zurück.</param>
        <summary>Gibt die Prozentpunkte (die Wahrscheinlichkeit) für die Student-t-Verteilung zurück, wobei ein numerischer Wert (x) einem berechneten Wert von t entspricht, für den die Prozentpunkte berechnet werden sollen. Die t-Verteilung wird in der Hypothesenüberprüfung von kleinen Beispieldatensätzen verwendet. Verwenden Sie diese Funktion anstelle einer Tabelle mit kritischen Werten für die t-Verteilung.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zu den neuen Funktionen finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_RT(System.Double,System.Double)" /> ", <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist(System.Double,System.Double,System.Boolean)" /> und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Dist_2T(System.Double,System.Double)" /> Methoden.</para>
          <para>Wenn ein Argument nicht numerisch ist, gibt <b>TDist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn degrees_freedom &lt; 1 ist, <b>gibt TDist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Argumente Freiheitsgrade und Seiten werden zu ganzen Zahlen gekürzt. </para>
          <para>Wenn "Tails" einen anderen Wert als 1 oder 2 hat, gibt <b>TDist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x &lt; 0, gibt <b>TDist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn "Tails" = 1 ist, wird <b>TDist</b> als TDIST = P( X x ) berechnet, wobei X eine zufällige Variable ist, die auf die &gt; t-Verteilung folgt. Wenn "Tails" = 2 ist, wird <b>TDist</b> als TDIST = P(| X| &gt; x) = P(X &gt; x oder X &lt; -x). </para>
          <para>Da x 0 nicht zulässig ist, sollten Sie &lt; <b>TDist</b> bei x 0 verwenden, beachten Sie, dass &lt; TDIST(-x,df,1) = 1 – TDIST(x,df,1) = P(X &gt; -x) und TDIST(-x,df,2) = TDIST(x df,2) = P(| X| &gt; x).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text (object Arg1, string Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Text([in]object Arg1, [in]string Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Text(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Text (Arg1 As Object, Arg2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Text(System::Object ^ Arg1, System::String ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16432)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ein numerischer Wert, eine Formel, die einen numerischen Wert ergibt, oder ein Bezug auf eine Zelle, die einen numerischen Wert enthält.</param>
        <param name="Arg2">Ein Zahlenformat in Textform im Dialogfeld Zellen formatieren auf der Registerkarte Zahl im Feld Kategorie.</param>
        <summary>Konvertiert einen Wert in Text in einem bestimmten Zahlenformat.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDayOfWeek">
      <MemberSignature Language="C#" Value="public string ThaiDayOfWeek (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDayOfWeek([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDayOfWeek(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDayOfWeek (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDayOfWeek(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16753)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für interne Zwecke vorbehalten. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiDigit">
      <MemberSignature Language="C#" Value="public string ThaiDigit (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiDigit([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiDigit(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiDigit (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiDigit(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16754)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für interne Zwecke vorbehalten.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiMonthOfYear">
      <MemberSignature Language="C#" Value="public string ThaiMonthOfYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiMonthOfYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiMonthOfYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiMonthOfYear (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiMonthOfYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16755)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für interne Zwecke vorbehalten.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumSound">
      <MemberSignature Language="C#" Value="public string ThaiNumSound (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumSound([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumSound(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumSound (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumSound(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16756)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für interne Zwecke vorbehalten.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiNumString">
      <MemberSignature Language="C#" Value="public string ThaiNumString (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ThaiNumString([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiNumString(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiNumString (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ThaiNumString(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16757)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für interne Zwecke vorbehalten.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiStringLength">
      <MemberSignature Language="C#" Value="public double ThaiStringLength (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiStringLength([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiStringLength(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiStringLength (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiStringLength(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16758)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für interne Zwecke vorbehalten.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThaiYear">
      <MemberSignature Language="C#" Value="public double ThaiYear (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ThaiYear([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ThaiYear(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function ThaiYear (Arg1 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ThaiYear(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16762)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">To be added.</param>
        <summary>Für interne Zwecke vorbehalten.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TInv">
      <MemberSignature Language="C#" Value="public double TInv (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TInv([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TInv (Arg1 As Double, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TInv(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16716)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Wahrsch – die Wahrscheinlichkeit, die der Student-t-Verteilung mit zwei Erweiterungen zugeordet ist.</param>
        <param name="Arg2">Freiheitsgrade – die Anzahl der Freiheitsgrade, mit der die Verteilung charakterisiert werden soll.</param>
        <summary>Gibt den t-Wert der Student-t-Verteilung als Funktion der Wahrscheinlichkeit und der Freiheitsgrade zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zu den neuen Funktionen finden Sie unter den <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TInv(System.Double,System.Double)" /> Methoden und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Inv_2T(System.Double,System.Double)" /> methoden.</para>
          <para>Wenn eines der Argumente nicht numerisch ist, gibt <b>TInv</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die &lt; Wahrscheinlichkeit 0 oder die Wahrscheinlichkeit &gt; 1 ist, gibt <b>TInv</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn der Wert für Freiheitsgrade keine ganze Zahl darstellt, wird die Zahl gekürzt. </para>
          <para>Wenn degrees_freedom &lt; 1 ist, <b>gibt TInv</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>TInv</b> gibt diesen Wert t zurück, so dass P(| X| t) = Wahrscheinlichkeit, wenn X eine zufällige Variable ist, die &gt; auf die t-Verteilung und P(| X| &gt; t) = P(X &lt; -t oder X &gt; t). </para>
          <para>Ein Ein-Tail-t-Wert kann zurückgegeben werden, indem die Wahrscheinlichkeit durch 2 *Wahrscheinlichkeit ersetzt wird. Bei einer Wahrscheinlichkeit von 0,05 und Freiheitsgrade von 10 wird der zweieckige Wert mit TINV(0,05,10) berechnet, der 2,28139 zurückgibt.* Der eineckige Wert für die gleiche Wahrscheinlichkeit und die gleichen Freiheitsgrade kann mit TINV(2 0,05,10) berechnet werden, der 1,812462 zurückgibt. </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Transpose">
      <MemberSignature Language="C#" Value="public object Transpose (object Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Transpose([in]object Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Transpose(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transpose (Arg1 As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Transpose(System::Object ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16467)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - an array or range of cells on a worksheet that you want to transpose. The transpose of an array is created by using the first row of the array as the first column of the new array, the second row of the array as the second column of the new array, and so on.</param>
        <summary>Gibt einen vertikalen Zellbereich als horizontalen Bereich zurück oder umgekehrt. TRANSPOSE muss als Arrayformel in einem Bereich eingegeben werden, der jeweils dieselbe Anzahl von Zeilen und Spalten besitzt wie ein Array. Verwenden Sie TRANSPOSE, um zwischen der vertikalen und horizontalen Ausrichtung eines Arrays auf einem Arbeitsblatt zu wechseln.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trend">
      <MemberSignature Language="C#" Value="public object Trend (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Trend([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trend(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trend (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16434)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Y_Werte - die bereits bekannten y-Werte in der Beziehung y = mx + b.</param>
        <param name="Arg2">X_Werte - eine optionale Menge mit möglicherweise bereits bekannten x-Werten in der Beziehung y = mx + b.</param>
        <param name="Arg3">Neue_X_Werte – neue x-Werte, für die TREND entsprechende y-Werte zurückgeben soll.</param>
        <param name="Arg4">Konstante - ein Wahrheitswert, mit dem angegeben wird, ob erzwungen werden soll, dass die Konstante b gleich 0 sein soll.</param>
        <summary>Gibt die Werte einer linearen Entwicklung zurück. Entspricht einer Geraden (wenn die Methode der kleinsten Quadrate verwendet wird) für die Arrays Bekannt_y und Bekannt_x. Gibt die y-Werte dieser Geraden für das von Ihnen angegebene Array von Neue_X_Werte zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn sich das Array Y_Werte in einer einzelnen Spalte befindet, wird jede Spalte mit X_Werte als separate Variable interpretiert.</para>
          <para>Wenn sich das Array Bekannt_y in einer einzelnen Zeile befindet, wird jede Zeile mit Bekannt_x als separate Variable interpretiert.</para>
          <para>Das Array Bekannt_x kann eine oder mehrere Gruppen mit Variablen enthalten. Wenn nur eine Variable verwendet wird, können Bekannt_y und Bekannt_x Bereiche beliebiger Form darstellen, solange sie gleiche Abmessungen aufweisen. Wenn mehrere Variablen verwendet werden, muss Bekannt_y einen Vektor darstellen (d. h. einen Bereich mit einer Höhe von einer Zeile oder einer Breite von einer Spalte).</para>
          <para>Wenn Bekannt_x ausgelassen wird, wird angenommen, dass dies dem Array {1,2,3,...} entspricht, das dieselbe Größe wie Bekannt_y aufweist.</para>
          <para>Neue_X_Werte muss genau wie Bekannt_x eine Spalte (oder Zeile) für jede unabhängige Variable enthalten. Demnach müssen Bekannt_x und Neue_X_Werte dieselbe Anzahl von Spalten aufweisen, wenn Bekannt_y sich in einer einzelnen Spalte befindet. Wenn sich Bekannt_y in einer einzelnen Zeile befindet, müssen Bekannt_x und Neue_X_Werte dieselbe Anzahl von Zeilen aufweisen. </para>
          <para>Wenn Sie Neue_X_Werte auslassen, wird dafür der Wert von Bekannt_x angenommen. </para>
          <para>Wenn Sie sowohl known_x als auch new_x auslassen, wird angenommen, dass es sich um das Array {1,2,3,...} handelt. die die gleiche Größe wie known_y hat. </para>
          <para>Wenn Dies <b>der Fall ist oder</b> ausgelassen wird, wird b normal berechnet. </para>
          <para>Wenn Const <b>false</b>ist, wird b gleich 0 (Null) festgelegt, und die m-Werte werden so angepasst, dass y = mx ist. </para>
          <para>Informationen dazu, wie Microsoft Excel eine Zeile zu Daten passt, finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.LinEst(System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Sie können <b>Trend</b> für die Polynomkurvenanpassung verwenden, indem Sie sich gegen dieselbe Variable regressieren, die auf unterschiedliche Leistungskraften angehoben wird. Angenommen, Spalte A enthält y-Werte und Spalte B x-Werte. Sie können x^2 in Spalte C, x^3 in Spalte D und so weiter eingeben und dann die Spalten B bis D gegen Spalte A ändern. </para>
          <para>Formeln, die Arrays zurückgeben, müssen als Arrayformeln eingegeben werden.</para>
          <para>Wenn Sie eine Arraykonstante für ein Argument wie Bekannt_x eingeben, verwenden Sie Kommas, um Werte in derselben Zeile zu trennen, und Semikolons, um Zeilen zu trennen.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Trim([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (Arg1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16502)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Text – der Text, aus dem Leerzeichen entfernt werden sollen.</param>
        <summary>Entfernt alle Leerzeichen aus Text, nur keine einzelnen Leerzeichen zwischen Wörtern. Verwenden Sie TRIM für Text, den Sie aus einer anderen Anwendung erhalten haben, in der möglicherweise eine unregelmäßige Verwendung von Leerzeichen vorliegt.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Die <b>Trim</b> -Funktion wurde entwickelt, um das 7-Bit-ASCII-Leerzeichen (Wert 32) aus Text zu kürzen. Im Unicode-Zeichensatz gibt es ein zusätzliches Leerzeichen (das so genannte geschützte Leerzeichen), das den Dezimalwert 160 besitzt. Dieses Zeichen wird häufig in Webseiten als #A0 <b> &amp; nbsp; verwendet.</b> Allein entfernt die <b>Trim</b> -Funktion dieses unzersschutzende Leerzeichen nicht.</para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimMean">
      <MemberSignature Language="C#" Value="public double TrimMean (object Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TrimMean([in]object Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TrimMean(System.Object,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimMean (Arg1 As Object, Arg2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TrimMean(System::Object ^ Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16715)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array – das Array oder der Wertebereich, der gekürzt und für den der Durchschnitt ermittelt werden soll.</param>
        <param name="Arg2">Prozent – der Prozentsatz der Datenpunkte, die aus der Berechnung ausgeschlossen werden sollen. Wenn beispielsweise Prozent = 0,2 gilt, werden 4 Punkte aus einem Datensatz aus 20 Punkten herausgenommen (20 x 0,2): 2 aus dem oberen Bereich und 2 aus dem unteren Bereich des Datensatzes.</param>
        <summary>Gibt den Mittelwert des inneren Bereichs eines Datensatzes zurück. TRIMMEAN berechnet den Mittelwert, der sich durch Ausschließen eines prozentualen Anteils von Datenpunkten von den oberen und unteren Erweiterungen eines Datensatzes ergibt. Sie können diese Funktion verwenden, wenn Sie nicht zugehörige Daten aus Ihrer Analyse ausschließen möchten.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn Prozent &lt; 0 oder Prozent &gt; 1 ist, <b>gibt TrimMean</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>TrimMean</b> rundet die Anzahl der ausgeschlossenen Datenpunkte auf das nächste Vielfache von 2 ab. Wenn Prozent = 0,1 ist, entsprechen 10 Prozent von 30 Datenpunkten 3 Punkten. Aus Symmetrisch <b>schließt TrimMean</b> einen einzelnen Wert vom oberen und unteren Rand des Datensets aus.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TTest">
      <MemberSignature Language="C#" Value="public double TTest (object Arg1, object Arg2, double Arg3, double Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TTest([in]object Arg1, [in]object Arg2, [in]float64 Arg3, [in]float64 Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.TTest(System.Object,System.Object,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function TTest (Arg1 As Object, Arg2 As Object, Arg3 As Double, Arg4 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double TTest(System::Object ^ Arg1, System::Object ^ Arg2, double Arg3, double Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16700)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array1 – der erste Datensatz.</param>
        <param name="Arg2">Array2 – der zweite Datensatz.</param>
        <param name="Arg3">Seiten – gibt die Anzahl von Verteilungserweiterungen an. Wenn Seiten = 1, verwendet TTEST die Verteilung mit einer Erweiterung. Wenn Seiten = 2, verwendet TTEST die Verteilung mit zwei Erweiterungen.</param>
        <param name="Arg4">F – die Art des auszuführenden t-Tests.</param>
        <summary>Gibt die Wahrscheinlichkeit zurück, die mit einem Student-t-Test verbunden ist. Verwenden Sie TTEST, um zu ermitteln, ob zwei Stichproben wahrscheinlich aus denselben zwei zugrunde liegenden Grundgesamtheiten stammen, die denselben Mittelwert besitzen.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.T_Test(System.Object,System.Object,System.Double,System.Double)" /> Methode.</para>
          <list type="table">
            <item>
              <term>1 </term>
              <description>Gekoppelt</description>
            </item>
            <item>
              <term>2 </term>
              <description>Zwei Stichproben mit gleicher Varianz (homoskedastisch)</description>
            </item>
            <item>
              <term>3</term>
              <description>Zwei Stichproben mit ungleicher Varianz (heteroskedastisch)</description>
            </item>
          </list>
          <para>Wenn Array1 und Array2 eine andere Anzahl von Datenpunkten haben und der Typ = 1 (gekoppelt) ist, gibt <b>TTest</b> den #N/A-Fehlerwert zurück. </para>
          <para>Die Erweiterungen und Typargumente werden zu ganzen Zahlen gekürzt. </para>
          <para>Wenn "Tails" oder "Type" nicht numerisch ist, gibt <b>TTest</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn "Tails" einen anderen Wert als 1 oder 2 hat, gibt <b>TTest</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>
            <b>TTest</b> verwendet die Daten in Array1 und Array2, um eine nicht negative t-Statistik zu berechnen. Wenn "Tails" =1 ist, gibt <b>TTest</b> die Wahrscheinlichkeit eines höheren Werts der t-Statistik unter der Annahme zurück, dass Array1 und Array2 Stichproben aus Grundgesamtheiten mit demselben Mittelwert sind. Der von <b>TTest</b> zurückgegebene Wert, wenn "tails=2" =2 ist, ist doppelt so hoch wie der wert, der zurückgegeben wird, wenn "Tails= 1" ist, und entspricht der Wahrscheinlichkeit eines höheren absoluten Werts der t-Statistik unter der Annahme "gleiche Grundgesamtheitsmittel".</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Unichar">
      <MemberSignature Language="C#" Value="public string Unichar (double Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Unichar([in]float64 Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unichar(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unichar (Arg1 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Unichar(double Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16964)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Unicode-Zahl, die ein Zeichen darstellt.</param>
        <summary>Gibt das Unicode-Zeichen zurück, auf das durch den angegebenen numerischen Wert verwiesen wird.</summary>
        <returns><b>STRING</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unicode">
      <MemberSignature Language="C#" Value="public double Unicode (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Unicode([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Unicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Unicode (Arg1 As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Unicode(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16965)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zeichen, für das der Wert für Unicode verwendet werden soll.</param>
        <summary>Gibt die Zahl (Codepunkt) zurück, die dem ersten Zeichen des Texts entspricht.</summary>
        <returns><b>DOUBLE</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="USDollar">
      <MemberSignature Language="C#" Value="public string USDollar (double Arg1, double Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string USDollar([in]float64 Arg1, [in]float64 Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.USDollar(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function USDollar (Arg1 As Double, Arg2 As Double) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ USDollar(double Arg1, double Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16588)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ein Verweis auf eine Zelle mit einer Zahl oder einer Formel, die als Zahl ausgewertet wird.</param>
        <param name="Arg2">Die Anzahl der Stellen rechts vom Dezimalkomma. Wenn Arg2 negativ ist, wird die Zahl links vom Dezimalkomma gerundet. Wenn Sie diesen Wert nicht angeben, wird 2 angenommen.</param>
        <summary>Konvertiert eine Zahl in Textformat und wendet ein Währungssymbol an. Der Name der Funktion (und das angewendete Symbol) ist abhängig von den Spracheinstellungen.</summary>
        <returns>To be added.</returns>
        <remarks><para>Die <b>USDollar -Methode</b> wandelt eine Zahl mithilfe des Währungsformats in Text um, und die Dezimalstellen werden auf die angegebene Stelle gerundet. Das verwendete Format ist $#,##0.00_);($#,##0.00).</para>
          <para>Der Hauptunterschied zwischen dem Formatieren einer Zelle, die eine Zahl mit dem Befehl "Zellen formatieren" enthält, und dem direkten Formatieren einer Zahl mit der Methode besteht in der Konvertierung des <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> Ergebnisses in Text. Eine Zahl, die mit dem Befehl Format Cells formatiert wurde, ist immer noch eine Zahl. Sie können weiterhin Zahlen verwenden, die in Formeln formatiert sind, da Excel bei der Berechnung als Textwerte eingegebene Zahlen <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Dollar(System.Double,System.Object)" /> in Zahlen konvertiert.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var">
      <MemberSignature Language="C#" Value="public double Var (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16430)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2... - 1 bis 30 Zahlenargumente, die einer Stichprobe einer Grundgesamtheit entsprechen.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Schätzt die Varianz anhand einer Stichprobe.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var</b> geht davon aus, dass es sich bei den Argumenten um eine Stichprobe der Grundgesamtheit handelt. Wenn Ihre Daten die gesamte Grundgesamtheit darstellt, berechnen Sie die Varianz mithilfe von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>
            <b>Var</b> verwendet die folgende Formel: </para>
          <para>Abbildung 1: Formel für die Var -Methode</para>
          <para> </para>
          <para> </para>
          <para>Dabei ist x der Mittelwert des Beispiels AVERAGE(Zahl1,Zahl2,...) und n die Beispielgröße.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_P">
      <MemberSignature Language="C#" Value="public double Var_P (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_P([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_P (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16902)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2... - 1 bis 30 Zahlenargumente, die einer Grundgesamtheit entsprechen.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Berechnet die Varianz anhand der Grundgesamtheit.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var_P</b> wird davon ausgegangen, dass es sich bei den Argumenten um die gesamte Grundgesamtheit handelt. Wenn Ihre Daten eine Stichprobe der Grundgesamtheit darstellt, berechnen Sie die Varianz mithilfe von <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> . </para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Die Formel für <b>Var_P:</b> </para>
          <para>Abbildung 1: Formel für die Var_P A0</para>
          <para> </para>
          <para> </para>
          <para>Dabei ist x der Mittelwert des Beispiels AVERAGE(Zahl1,Zahl2,...) und n die Beispielgröße.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Var_S">
      <MemberSignature Language="C#" Value="public double Var_S (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Var_S([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_S(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Var_S (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16901)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2... - 1 bis 30 Zahlenargumente, die einer Stichprobe einer Grundgesamtheit entsprechen.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Schätzt die Varianz anhand einer Stichprobe.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Var_S</b> wird davon ausgegangen, dass es sich bei den Argumenten um eine Stichprobe der Grundgesamtheit handelt. Wenn Ihre Daten die gesamte Grundgesamtheit darstellt, berechnen Sie die Varianz mithilfe <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> von . </para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>
            <b>Var_S</b> wird die folgende Formel verwendet: </para>
          <para>Abbildung 1: Formel für die Var_S A0</para>
          <para> </para>
          <para> </para>
          <para>Dabei ist x der Mittelwert des Beispiels AVERAGE(Zahl1,Zahl2,...) und n die Beispielgröße.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VarP">
      <MemberSignature Language="C#" Value="public double VarP (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 VarP([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VarP(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VarP (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16578)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Zahl1, Zahl2 ... – Zwischen 1 und 30 Zahlenargumente, die einer Grundgesamtheit entsprechen.</param>
        <param name="Arg2">To be added.</param>
        <param name="Arg3">To be added.</param>
        <param name="Arg4">To be added.</param>
        <param name="Arg5">To be added.</param>
        <param name="Arg6">To be added.</param>
        <param name="Arg7">To be added.</param>
        <param name="Arg8">To be added.</param>
        <param name="Arg9">To be added.</param>
        <param name="Arg10">To be added.</param>
        <param name="Arg11">To be added.</param>
        <param name="Arg12">To be added.</param>
        <param name="Arg13">To be added.</param>
        <param name="Arg14">To be added.</param>
        <param name="Arg15">To be added.</param>
        <param name="Arg16">To be added.</param>
        <param name="Arg17">To be added.</param>
        <param name="Arg18">To be added.</param>
        <param name="Arg19">To be added.</param>
        <param name="Arg20">To be added.</param>
        <param name="Arg21">To be added.</param>
        <param name="Arg22">To be added.</param>
        <param name="Arg23">To be added.</param>
        <param name="Arg24">To be added.</param>
        <param name="Arg25">To be added.</param>
        <param name="Arg26">To be added.</param>
        <param name="Arg27">To be added.</param>
        <param name="Arg28">To be added.</param>
        <param name="Arg29">To be added.</param>
        <param name="Arg30">To be added.</param>
        <summary>Berechnet die Varianz anhand der Grundgesamtheit.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var_P(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> Methode.</para>
          <para>
            <b>VarP</b> geht davon aus, dass es sich bei den Argumenten um die gesamte Grundgesamtheit handelt. Wenn Ihre Daten eine Stichprobe der Grundgesamtheit darstellt, berechnen Sie die Varianz mithilfe <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Var(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> von . </para>
          <para>Argumente können Zahlen oder Namen, Arrays oder Bezüge mit Zahlen darstellen.</para>
          <para>Wahrheitswerte und Textdarstellungen von Zahlen, die Sie direkt in die Liste der Argumente eingeben, werden gezählt.</para>
          <para>Wenn ein Argument ein Array oder einen Bezug darstellt, werden ausschließlich die Zahlen in diesem Array bzw. Bezug gezählt. Leere Zellen, Wahrheitswerte, Text und Fehlerwerte im Array bzw. im Bezug werden ignoriert.</para>
          <para>Durch Argumente, die Fehlerwerte darstellen, oder Text, der nicht in Zahlen umgewandelt werden kann, werden Fehler verursacht.</para>
          <para>Die Gleichung <b>für VarP</b> ist: </para>
          <para>Abbildung 1: Formel für die VarP-Methode</para>
          <para> </para>
          <para> </para>
          <para>Dabei ist x der Mittelwert des Beispiels AVERAGE(Zahl1,Zahl2,...) und n die Beispielgröße.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Vdb">
      <MemberSignature Language="C#" Value="public double Vdb (double Arg1, double Arg2, double Arg3, double Arg4, double Arg5, object Arg6, object Arg7);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Vdb([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]float64 Arg4, [in]float64 Arg5, [in]object Arg6, [in]object Arg7) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Vdb(System.Double,System.Double,System.Double,System.Double,System.Double,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Vdb (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Double, Arg5 As Double, Optional Arg6 As Object, Optional Arg7 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16606)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Double" />
        <Parameter Name="Arg5" Type="System.Double" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ansch_Wert – die Anlagekosten für den Vermögenswert.</param>
        <param name="Arg2">Restwert – der Wert zum Ende der Abschreibung (gelegentlich wird er als "Restwert" des Vermögenswerts bezeichnet). Dieser Wert kann 0 entsprechen.</param>
        <param name="Arg3">Nutzungsdauer – die Anzahl der Zeiträume, über die der Vermögenswert abgeschrieben wird (dies wird gelegentlich als "Nutzungsdauer" des Vermögenswerts bezeichnet).</param>
        <param name="Arg4">Anfang – der Ausgangszeitraum, für den Sie die Abschreibung berechnen möchten. Für Anfang müssen dieselben Einheiten wie für Nutzungsdauer verwendet werden.</param>
        <param name="Arg5">Ende – der Endzeitraum, für den Sie die Abschreibung berechnen möchten. Für Ende müssen dieselben Einheiten wie für Nutzungsdauer verwendet werden.</param>
        <param name="Arg6">Faktor – die Rate für die Abschreibung. Wenn Faktor ausgelassen wird, wird dafür der Wert 2 angenommen (Methode der doppelten Restwertabschreibung). Ändern Sie Faktor, wenn Sie die Methode der doppelten Restwertabschreibung nicht verwenden möchten. Eine Beschreibung der Methode zur doppelten Degklierung des Saldos finden Sie unter <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Ddb(System.Double,System.Double,System.Double,System.Double,System.Object)" /> .</param>
        <param name="Arg7">Nicht_wechseln – ein Wahrheitswert, mit dem angegeben wird, ob zur linearen Abschreibung gewechselt werden soll, wenn die Abschreibung größer ist als die Berechnung der Restwertabschreibung.</param>
        <summary>Gibt die Abschreibung eines Vermögenswerts für einen beliebigen angegebenen Zeitraum und Teilzeiträume zurück. Dabei wird die Methode der doppelten Restwertabschreibung oder eine andere von Ihnen angegebene Methode verwendet. VDB steht für variable Restwertabschreibung.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn no_switch wahr <b>ist,</b>wechselt Microsoft Excel nicht zur geraden Abschreibung, auch wenn die Abschreibung größer als die Berechnung des schwindenden Saldos ist. </para>
          <para>Wenn no_switch <b>falsch</b> oder nicht angegeben ist, wechselt Excel zur geraden Abschreibung, wenn die Abschreibung größer als die Berechnung des schwindenden Saldos ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VLookup">
      <MemberSignature Language="C#" Value="public object VLookup (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object VLookup([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function VLookup (Arg1 As Object, Arg2 As Object, Arg3 As Object, Optional Arg4 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16486)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Suchkriterium - Der in der ersten Spalte der Tabellenmatrix zu suchende Wert. Suchkriterium kann einen Wert oder einen Bezug darstellen. Wenn Suchkriterium kleiner als der kleinste Wert in der ersten Spalte von Matrix ist, wird von SVERWEIS der Fehlerwert #NV zurückgegeben.</param>
        <param name="Arg2">Tabellenmatrix - Mindestens zwei Datenspalten. Verwenden Sie einen Bezug auf einen Bereich oder einen Bereichsnamen. Die Werte in der ersten Spalte von Matrix sind die von Suchkriterium gesuchten Werte und können Zeichenfolgen (Texte), Zahlen oder Wahrheitswerte darstellen. Bei Zeichenfolgen (Texten) wird nicht zwischen Groß- und Kleinbuchstaben unterschieden.</param>
        <param name="Arg3">Spaltenindex - Die Spaltennummer in Matrix, aus der der entsprechende Wert zurückgegeben werden muss. Der Spaltenindex 1 gibt den Wert in der ersten Spalte in Matrix zurück. Der Spaltenindex 2 gibt den Wert in der zweiten Spalte in Matrix zurück usw.</param>
        <param name="Arg4">Range_lookup - ein Wahrheitswert, der angibt, ob die Methode eine genaue Übereinstimmung oder eine ungefähre <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.VLookup(System.Object,System.Object,System.Object,System.Object)" /> Übereinstimmung finden soll:</param>
        <summary>Sucht in der ersten Spalte einer Tabellenmatrix nach einem Wert und gibt in der gleichen Zeile einen Wert aus einer anderen Spalte in der Tabellenmatrix zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>Das "V" in <b>VLookup</b> steht für "vertikal". Verwenden Sie <b>die VLookup -Methode</b> anstelle der Methode, wenn sich die Vergleichswerte in einer Spalte links neben den daten befinden, <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.HLookup(System.Object,System.Object,System.Object,System.Object)" /> die Sie suchen möchten.</para>
          <para>Wenn "Col_index_num" kleiner als 1 ist, generiert die <b>VLookup</b>-Methode einen Fehler.</para>
          <para>Wenn "Col_index_num" größer als die Anzahl der Spalten in "table_array" ist, generiert die <b>VLookup</b>-Methode einen Fehler.</para>
          <para>Wenn Range_lookup true <b>oder</b> ausgelassen wird, wird eine genaue oder ungefähre Übereinstimmung zurückgegeben. Wenn keine genaue Übereinstimmung gefunden wurde, wird der nächsthöhere Wert zurückgegeben, der kleiner als Suchkriterium ist. </para>
          <para>Die Werte in der ersten Spalte von Tabellenmatrix müssen in aufsteigender Sortierreihenfolge geordnet sein, andernfalls gibt die Methode  <b>VLookup</b> möglicherweise nicht den richtigen Wert zurück.</para>
          <para>Wenn Range_lookup <b>false</b>ist, findet die <b>VLookup -Methode</b> nur eine genaue Übereinstimmung. In diesem Fall müssen die Werte in der ersten Spalte von "Tabellenmatrix" nicht sortiert werden. Wenn in der ersten Spalte von "Tabellenmatrix" mindestens zwei Werte vorhanden sind, die dem "Suchkriterium" entsprechen, wird der erste gefundene Wert verwendet. Wenn keine genaue Entsprechung gefunden wird, wird ein Fehler generiert.</para>
          <para>Stellen Sie beim Durchsuchen von Textwerten in der ersten Spalte von table_array sicher, dass die Daten in der ersten Spalte von table_array keine führenden Leerzeichen, nachgestellten Leerzeichen, inkonsistente Verwendung von geraden ( ' oder " ) und geschweiften ( ' oder ") Anführungszeichen oder nicht druckenden Zeichen enthalten. In diesen Fällen gibt die <b>VLookup -Methode</b> möglicherweise einen falschen oder unerwarteten Wert zurück. Informationen zum Bereinigen oder Kürzen von Werten finden Sie unter den <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Clean(System.String)" /> Methoden und <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Trim(System.String)" /> methoden. Bei der Suche nach Zahlen oder Datumswerten müssen Sie sicherstellen, dass die Daten in der ersten Spalte von Matrix nicht als Textwerte gespeichert werden. In diesem Fall gibt die Methode <b>VLookup</b> möglicherweise einen falschen oder unerwarteten Wert zurück. </para>
          <para>Wenn range_lookup <b>falsch</b> und lookup_value Text ist, können Sie die Platzhalterzeichen Fragezeichen (?) und Sternchen (*) in der lookup_value. Ein Fragezeichen ersetzt beim Abgleichen ein einzelnes Zeichen und ein Sternchen eine beliebige Zeichenfolge. Wenn Sie nach einem Fragezeichen oder Sternchen suchen möchten, müssen Sie eine Tilde (~) vor dem zu suchenden Zeichen eingeben.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WebService">
      <MemberSignature Language="C#" Value="public object WebService (string Arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object WebService([in]string Arg1) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WebService(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WebService (Arg1 As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ WebService(System::String ^ Arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16980)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Arg1">Die URL des Webdiensts, an den die HTTP-GET-Anforderung gesendet werden soll.</param>
        <summary>Zugrunde liegende Funktion, die den Webdienst asynchron mithilfe einer HTTP -GET-Anforderung aufruft und die Antwort zurückgibt.</summary>
        <returns><b>VARIANT</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public double Weekday (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weekday([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weekday(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weekday (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16454)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Fortlaufende_Zahl – eine fortlaufende Zahl, die das Datum für den gesuchten Tag darstellt. Datumswerte sollten mithilfe der DATE-Funktion eingegeben werden oder als Ergebnisse von anderen Formeln oder Funktionen. Verwenden Sie beispielsweise DATE(2008,5,23) für den 23. Mai 2008. Es können Probleme auftreten, wenn Datumswerte als Text eingegeben werden.</param>
        <param name="Arg2">Zahl_Typ – eine Zahl, mit der der Typ des Rückgabewerts bestimmt wird.</param>
        <summary>Gibt den Wochentag zurück, der einem Datum entspricht. Der Tag wird als ganze Zahl angegeben, die in der Standardeinstellung zwischen 1 (Sonntag) und 7 (Samstag) liegt.</summary>
        <returns>To be added.</returns>
        <remarks><list type="table">
            <item>
              <term>1 (oder Auslassung)</term>
              <description>Zahlen von 1 (Sonntag) bis 7 (Samstag). Verhält sich wie in früheren Versionen von Microsoft Excel.</description>
            </item>
            <item>
              <term>2 </term>
              <description>Zahlen von 1 (Montag) bis 7 (Sonntag).</description>
            </item>
            <item>
              <term>3</term>
              <description>Zahlen von 0 (Montag) bis 6 (Sonntag).</description>
            </item>
            <item>
              <term>11 </term>
              <description>Zahlen von 1 (Montag) bis 7 (Sonntag).</description>
            </item>
            <item>
              <term>12 </term>
              <description>Zahlen von 1 (Dienstag) bis 7 (Montag)</description>
            </item>
            <item>
              <term>13 </term>
              <description>Zahlen von 1 (Mittwoch) bis 7 (Dienstag)</description>
            </item>
            <item>
              <term>14 </term>
              <description>Zahlen von 1 (Donnerstag) bis 7 (Mittwoch)</description>
            </item>
            <item>
              <term>15 </term>
              <description>Zahlen von 1 (Freitag) bis 7 (Donnerstag)</description>
            </item>
            <item>
              <term>16 </term>
              <description>Zahlen von 1 (Samstag) bis 7 (Freitag)</description>
            </item>
            <item>
              <term>17 </term>
              <description>Zahlen von 1 (Sonntag) bis 7 (Samstag)</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WeekNum">
      <MemberSignature Language="C#" Value="public double WeekNum (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WeekNum([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WeekNum(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WeekNum (Arg1 As Object, Optional Arg2 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16849)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Serial_num - a date within the week. Dates should be entered by using the DATE function, or as results of other formulas or functions. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</param>
        <param name="Arg2">Return_type - a number that determines on which day the week begins. The default is 1.</param>
        <summary>Gibt eine Zahl zurück, mit der angegeben wird, an welche Stelle innerhalb eines Jahres die Woche numerisch fällt.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Die <b>WeekNum-Funktion</b> betrachtet die Woche, die den 1. Januar enthält, als erste Woche des Jahres. Es gibt jedoch einen europäischen Standard, der die erste Woche als die Woche definiert, bei der die Meisten Tage (vier oder mehr) im neuen Jahr fallen. Dies bedeutet, dass die <b>WeekNum-Funktion</b> für Jahre, in denen es in der ersten Januarwoche drei oder weniger Tage gibt, Wochenzahlen zurückgibt, die gemäß dem europäischen Standard falsch sind.</para>
          <list type="table">
            <item>
              <term>1 </term>
              <description>Die Woche beginnt am Sonntag. Die Wochentage sind von 1 bis 7 nummeriert.</description>
            </item>
            <item>
              <term>2 </term>
              <description>Die Woche beginnt am Montag. Die Wochentage sind von 1 bis 7 nummeriert.</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull">
      <MemberSignature Language="C#" Value="public double Weibull (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16686)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X – der Wert, bei dem die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Alpha – ein Parameter für die Verteilung.</param>
        <param name="Arg3">Beta – ein Parameter für die Verteilung.</param>
        <param name="Arg4">Kumuliert – bestimmt die Form der Funktion.</param>
        <summary>Gibt die Weibull-Verteilung zurück. Verwenden Sie diese Verteilung in der Zuverlässigkeitsanalyse, beispielsweise für die Berechnung der mittleren Zeit bis zum ersten Ausfall eines Geräts.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" /> Methode.</para>
          <para>Wenn x, alpha oder beta nichtnumerisch ist, <b>gibt Weibull</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. Wenn x &lt; 0, <b>gibt Weibull</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If alpha ≤ 0 or if beta ≤ 0, <b>Weibull</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für die kumulative Weibull-Verteilungsfunktion lautet: 

 </para>
          <para>Abbildung 1: Formel für die kumulierte Verteilung von Weibull</para>
          <para> </para>
          <para> </para>
          <para>Die Formel für die Weibull-Wahrscheinlichkeitswert der Dichtefunktion lautet: 

</para>
          <para>Abbildung 2: Gleichung für die Dichte der Weibull-Wahrscheinlichkeit</para>
          <para> </para>
          <para> </para>
          <para>Wenn Alpha = 1 ist, <b>gibt Weibull</b> die Exponentialverteilung mit:</para>
          <para>Abbildung 3: Formel</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Weibull_Dist">
      <MemberSignature Language="C#" Value="public double Weibull_Dist (double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Weibull_Dist([in]float64 Arg1, [in]float64 Arg2, [in]float64 Arg3, [in]bool Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Weibull_Dist(System.Double,System.Double,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Weibull_Dist (Arg1 As Double, Arg2 As Double, Arg3 As Double, Arg4 As Boolean) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Weibull_Dist(double Arg1, double Arg2, double Arg3, bool Arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16903)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Double" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Double" />
        <Parameter Name="Arg4" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Arg1">X - Der Wert, für den die Funktion ausgewertet werden soll.</param>
        <param name="Arg2">Alpha - Ein Parameter der Verteilung.</param>
        <param name="Arg3">Beta - Ein Parameter der Verteilung.</param>
        <param name="Arg4">Kumuliert - Bestimmt die Form der Funktion.</param>
        <summary>Gibt die Weibull-Verteilung zurück. Verwenden Sie diese Verteilung in der Zuverlässigkeitsanalyse, beispielsweise für die Berechnung der mittleren Zeit bis zum ersten Ausfall eines Geräts.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn x, alpha oder beta nicht numerisch ist, <b>gibt Weibull_Dist</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn x &lt; 0, <b>gibt Weibull_Dist</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If alpha ≤ 0 or if beta ≤ 0, <b>Weibull_Dist</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Die Formel für die kumulative Weibull-Verteilungsfunktion lautet: 

 </para>
          <para>Abbildung 1: Formel für die kumulierte Verteilung von Weibull</para>
          <para> </para>
          <para> </para>
          <para>Die Formel für die Weibull-Wahrscheinlichkeitswert der Dichtefunktion lautet: 

</para>
          <para>Abbildung 2: Gleichung für die Dichte der Weibull-Wahrscheinlichkeit</para>
          <para> </para>
          <para> </para>
          <para>Wenn alpha = 1 <b>ist, Weibull_Dist</b> die Exponentielle Verteilung mit:</para>
          <para>Abbildung 3: Formel</para>
          <para> </para>
          <para> </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay">
      <MemberSignature Language="C#" Value="public double WorkDay (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16855)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ausgangsdatum - ein Datum, das das Anfangsdatum darstellt.</param>
        <param name="Arg2">Tage - die Anzahl der Tage vor oder hinter Ausgangsdatum, die nicht zu Wochenenden oder Feiertagen zählen. Mit einem positiven Wert für Tage wird ein Datum in der Zukunft ausgegeben; mit einem negativen Wert wird ein Datum in der Vergangenheit ausgegeben.</param>
        <param name="Arg3">Freie_Tage - eine optionale Liste mit einem oder mehreren Datumswerten, die aus dem Arbeitskalender ausgeschlossen werden sollen, beispielsweise landesweite und bundeslandspezifische Feiertage sowie bewegliche Feiertage. Die Liste kann einen Zellbereich darstellen, in dem die Datumswerte enthalten sind, oder eine Arraykonstante der laufenden Zahlen, die die Datumswerte darstellen.</param>
        <summary>Gibt eine Zahl zurück, die ein Datum darstellt, das der angegebenen Anzahl von Arbeitstagen vor oder hinter einem Datum (dem Ausgangsdatum) entspricht. Zu Arbeitstagen zählen keine Wochenenden oder Datumswerte, die als Feiertage gelten. Verwenden Sie WORKDAY, um Wochenenden und Feiertage auszuschließen, wenn Sie Datumswerte für die Fälligkeit von Rechnungen, erwartete Lieferzeiten oder die Anzahl der Tage der geleisteten Arbeit berechnen möchten.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Probleme können auftreten, wenn Datumsangaben als Text eingegeben werden.</para>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Wenn ein Argument kein gültiges Datum ist, gibt <b>WorkDay</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn start_date Plustage ein ungültiges Datum ergibt, gibt <b>WorkDay</b> die #NUM! zurück. </para>
          <para>Wenn Tage keine ganze Zahl darstellt, wird die Zahl gekürzt.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkDay_Intl">
      <MemberSignature Language="C#" Value="public double WorkDay_Intl (object Arg1, object Arg2, object Arg3, object Arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 WorkDay_Intl([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.WorkDay_Intl(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function WorkDay_Intl (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16905)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Start_date - Das Startdatum, gekürzt auf ganze Zahl.</param>
        <param name="Arg2">Tage – Die Anzahl der Arbeitstage vor oder nach dem start_date. Ein positiver Wert ergibt ein zukünftiges Datum. Ein negativer Wert ergibt ein vergangenes Datum; Ein Wert von 0 (Null) liefert die start_date. Der Tagesoffset wird auf eine ganze Zahl gekürzt.</param>
        <param name="Arg3">Wochenende – Gibt die Wochentage an, die Wochenendtage sind und nicht als Arbeitstage betrachtet werden. Wochenende ist eine Wochenendnummer oder -zeichenfolge, die angibt, wann Wochenenden vorliegen.</param>
        <param name="Arg4">Feiertage – Ein optionaler Satz von Einem oder mehreren Datumsangaben, die aus dem Arbeitstagkalender ausgeschlossen werden sollen. Bei Freie Tage kann es sich um einen Zellbereich, der die Datumswerte enthält, oder um eine Arraykonstante der fortlaufenden Zahlen handeln, die die Datumswerte darstellen. Die Reihenfolge der Datums- oder fortlaufenden Werte in Freie Tage ist beliebig.</param>
        <summary>Gibt die fortlaufende Zahl des Datums vor oder nach einer angegebenen Anzahl von Arbeitstagen mit benutzerdefinierten Wochenendparametern zurück. Wochenendparameter geben an, welche und wie viele Tage als Wochenendtage festgelegt sind. Wochenendtage sowie alle als Feiertag angegebenen Tage werden nicht als Arbeitstage gerechnet.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn start_date für den aktuellen Datumsbasiswert nicht im Bereich liegt, <b>gibt WorkDay_Intl</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn ein Datum in Feiertagen für den aktuellen Datumsbasiswert nicht im Bereich liegt, <b>gibt WorkDay_Intl</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn start_date Plustagversatz ein ungültiges Datum ergibt, <b>gibt WorkDay_Intl</b> den Wert #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn eine Wochenendenzeichenfolge eine ungültige Länge hat oder ungültige Zeichen enthält, <b>WorkDay_Intl</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xirr">
      <MemberSignature Language="C#" Value="public double Xirr (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xirr([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xirr(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xirr (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16813)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Werte – eine Folge von Cashflows, die einem Zahlungszeitplan mit Datumswerten entspricht. Die erste Zahlung ist optional und entspricht Kosten oder einer Zahlung, die zu Beginn der Anlage angefallen ist. Wenn als erster Wert Kosten oder eine Zahlung angegeben ist, muss dieser Wert negativ sein. Alle nachfolgenden Zahlungen werden auf der Grundlage eines Jahres mit 365 Tagen diskontiert. Die Folge von Werten muss mindestens einen positiven und einen negativen Wert aufweisen.</param>
        <param name="Arg2">Zeitpkte – ein Zeitplan mit Datumswerten für die Zahlung, die den Cashflow-Zahlungen entsprechen. Das erste Zahlungsdatum gibt den Beginn des Zahlungszeitplans an. Alle anderen Daten müssen hinter diesem Datum liegen; sie können jedoch in beliebiger Reihenfolge angegeben sein. Datumswerte sollten mithilfe der DATE-Funktion oder als Ergebnis anderer Formeln oder Funktionen eingegeben werden. Verwenden Sie beispielsweise DATE(2008,5,23) für den 23. Mai 2008. Es können Probleme auftreten, wenn Datumswerte als Text eingegeben werden.</param>
        <param name="Arg3">Guess – Eine Zahl, die Sie erraten, ist nah am Ergebnis von <b>Xirr</b>.</param>
        <summary>Gibt den internen Zinsfuß für einen Zeitplan der Cashflows, der nicht unbedingt periodisch ist, zurück. Wenn Sie den den internen Zinsfuß für eine Folge regelmäßiger Cashflows berechnen möchten, verwenden Sie die Funktion IRR.</summary>
        <returns>To be added.</returns>
        <remarks><para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Zahlen in Datumswerten werden zu ganzen Zahlen gekürzt.</para>
          <para>
            <b>Xirr erwartet</b> mindestens einen positiven Cashflow und einen negativen Cashflow. andernfalls <b>gibt Xirr</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn eine beliebige Zahl in Datumsangaben kein gültiges Datum ist, gibt <b>Xirr</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn eine beliebige Zahl in Datumsangaben vor dem Startdatum liegt, gibt <b>Xirr</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Werte und Datumsangaben eine andere Anzahl von Werten enthalten, gibt <b>Xirr</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>In den meisten Fällen müssen Sie keine Erraten für die <b>Xirr-Berechnung</b> bereitstellen. Wenn Schätzwert nicht angegeben wird, wird ein Schätzwert von 0,1 (10 Prozent) angenommen. </para>
          <para>
            <b>Xirr</b> ist eng verwandt mit <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" /> der Net Present Value-Funktion. Der von <b>Xirr</b> berechnete Zinswert ist der Zinssatz, der XNPV = 0 entspricht. </para>
          <para>Excel verwendet eine iterative Technik zum Berechnen von <b>Xirr</b>. Bei Verwendung einer Änderungsrate (beginnend mit "Erraten"), durchzyklen <b>Xirr</b> die Berechnung, bis das Ergebnis innerhalb von 0,000001 Prozent genau ist. Wenn <b>Xirr</b> nach 100 Versuchen kein Ergebnis finden kann, wird #NUM! zurückgegeben. Die Rate wird geändert, bis: </para>
          <para>Abbildung 1: Formel</para>
          <para> </para>
          <para> </para>
          <para>Dabei gilt:</para>
          <para>di = das ith- oder letzte Zahlungsdatum.</para>
          <para>d1 = das 0. Zahlungsdatum.</para>
          <para>Pi = die ith- oder letzte Zahlung.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xnpv">
      <MemberSignature Language="C#" Value="public double Xnpv (object Arg1, object Arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Xnpv([in]object Arg1, [in]object Arg2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xnpv(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xnpv (Arg1 As Object, Arg2 As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double Xnpv(System::Object ^ Arg1, System::Object ^ Arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16814)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Eine Folge von Cashflows, die einem Zahlungszeitplan mit Datumswerten entspricht. Die erste Zahlung ist optional und entspricht Kosten oder einer Zahlung, die zu Beginn der Anlage angefallen sind.</param>
        <param name="Arg2">Ein Zeitplan mit Datumswerten für die Zahlung, die den Cashflow-Zahlungen entsprechen. Das erste Zahlungsdatum gibt den Beginn des Zahlungszeitplans an. Alle anderen Datumsangaben müssen nach diesem Datum liegen, ihre Reihenfolge ist jedoch beliebig.</param>
        <summary>Gibt den Nettobarwert für einen Zeitplan der Cashflows, der nicht unbedingt periodisch ist, zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Die <b>Xnpv-Methode</b> stellt keinen Parameter zur Verfügung, der dem Satzargument entspricht, das für die entsprechende XNPV-Funktion (=XNPV(Rate, Werte, Datumsangaben)) erforderlich ist. Um diese Einschränkung im VBA-Code zu umgehen, rufen Sie die XNPV-Funktion mithilfe der Methode auf, anstatt die <b>Xpnv-Methode</b> zu <see cref="M:Microsoft.Office.Interop.Excel._Application.Evaluate(System.Object)" /> verwenden.</para>
          <para>Verwenden Sie die Methode, um den Nettowert für eine Reihe periodischer Cashflows zu <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Npv(System.Double,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> berechnen.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public bool Xor (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Xor([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Xor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Xor (Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16953)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg2">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg3">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg4">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg5">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg6">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg7">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg8">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg9">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg10">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg11">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg12">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg13">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg14">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg15">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg16">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg17">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg18">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg19">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg20">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg21">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg22">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg23">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg24">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg25">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg26">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg27">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg28">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg29">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <param name="Arg30">1 bis 254 Bedingungen, die Sie testen möchten, die <b>entweder TRUE</b> oder <b>FALSE</b> sein können und Wahrheitswerte, Arrays oder Verweise sein können.</param>
        <summary>Gibt ein logisches exklusives OR aller Argumente zurück.</summary>
        <returns><b>BOOL</b></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="YearFrac">
      <MemberSignature Language="C#" Value="public double YearFrac (object Arg1, object Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YearFrac([in]object Arg1, [in]object Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YearFrac(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YearFrac (Arg1 As Object, Arg2 As Object, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16835)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Ausgangsdatum - ein Datum, das das Anfangsdatum darstellt.</param>
        <param name="Arg2">Enddatum - ein Datum, das das Enddatum darstellt.</param>
        <param name="Arg3">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Berechnet den Anteil des Jahres, der durch die Anzahl voller Tage zwischen zwei Datumswerten (Ausgangsdatum und Enddatum) dargestellt wird. Mithilfe der Arbeitsblattfunktion YEARFRAC können Sie den proportionalen Anteil für Zuschüsse und Verpflichtungen bezogen auf ein Jahr ermitteln, die einem bestimmten Zeitraum zugeordnet sind.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Actual/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Alle Argumente werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn start_date oder end_date ungültige Datumsangaben sind, gibt <b>YearFrac</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>gibt YearFrac</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldDisc">
      <MemberSignature Language="C#" Value="public double YieldDisc (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldDisc([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldDisc(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldDisc (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Optional Arg5 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16821)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Kurs – ist der Preis des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg4">Rückzahlung – der Rückkaufswert des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg5">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt die Jahresrendite für ein diskontiertes Wertpapier zurück.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/Ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Ist/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn es sich bei der Abrechnung oder Fälligkeit nicht um ein gültiges Datum handelt, gibt <b>YieldDisc</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If pr ≤ 0 or if redemption ≤ 0, <b>YieldDisc</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, <b>gibt YieldDisc</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die ≥ ist, gibt <b>YieldDisc</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="YieldMat">
      <MemberSignature Language="C#" Value="public double YieldMat (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 YieldMat([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.YieldMat(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function YieldMat (Arg1 As Object, Arg2 As Object, Arg3 As Object, Arg4 As Object, Arg5 As Object, Optional Arg6 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16816)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Abrechnung – das Abrechnungsdatum des Wertpapiers. Das Abrechnungsdatum des Wertpapiers ist das Datum nach dem Emissionsdatum, wenn das Wertpapier an den Käufer gehandelt wird.</param>
        <param name="Arg2">Fälligkeit – das Fälligkeitsdatum für das Wertpapier. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit des Wertpapiers abläuft.</param>
        <param name="Arg3">Emission – das Ausgabedatum des Wertpapiers, das als fortlaufende Zahl angegeben wird.</param>
        <param name="Arg4">Zins – ist der Zinssatz des Wertpapiers am Ausgabetag.</param>
        <param name="Arg5">Kurs – ist der Preis des Wertpapiers pro 100 $-Nennwert.</param>
        <param name="Arg6">Basis – die Art der zu verwendenden Basis für die Zählung der Zinstage.</param>
        <summary>Gibt die Jahresrendite für ein Wertpapier zurück, für das Zinsen bei Fälligkeit gezahlt werden.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Datumsangaben sollten mithilfe der Funktion DATE oder als Ergebnisse anderer Formeln oder Funktionen eingegeben werden. For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.</para>
          <list type="table">
            <item>
              <term>0 (oder Auslassung)</term>
              <description>US (NASD) 30/360</description>
            </item>
            <item>
              <term>1 </term>
              <description>Ist/ist</description>
            </item>
            <item>
              <term>2 </term>
              <description>Ist/360</description>
            </item>
            <item>
              <term>3</term>
              <description>Actual/365</description>
            </item>
            <item>
              <term>4 </term>
              <description>Europäisch 30/360</description>
            </item>
          </list>
          <para>In Microsoft Excel werden Datumswerte als laufende Zahlen gespeichert, damit sie in Berechnungen verwendet werden können. In der Standardeinstellung entspricht der 1. Januar der laufenden Zahl 1, und der 1. Januar 2008 entspricht der laufenden Zahl 39448, da er 39.448 Tage hinter dem 1. Januar 1900 liegt. In Microsoft Excel für Macintosh wird ein anderes Datumssystem als Standardeinstellung verwendet.</para>
          <para>Das Abrechnungsdatum ist das Datum, zu dem ein Käufer einen Coupon (z. B. ein festverzinsliches Wertpapier) erwirbt. Das Fälligkeitsdatum ist das Datum, zu dem die Gültigkeit eines Coupons abläuft. Angenommen, ein 30-jähriges Wertpapier wird am 1. Januar 2008 emittiert und sechs Monate später von einem Käufer erworben. Das Emissionsdatum wäre in diesem Fall der 1. Januar 2008, das Abrechnungsdatum wäre der 1. Juli 2008, und das Fälligkeitsdatum wäre der 1. Januar 2038, d. h. 30 Jahre nach dem Emissionsdatum vom 1. Januar 2008.</para>
          <para>Abrechnung, Fälligkeit, Emission und Basis werden zu ganzen Zahlen gekürzt.</para>
          <para>Wenn für Abrechnung, Fälligkeit oder Issue kein gültiges Datum vorkommt, gibt <b>YieldMat</b> die #VALUE! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>If rate &lt; 0 or if pr ≤ 0, <b>YieldMat</b> returns the #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn Basis &lt; 0 oder Basis &gt; 4 ist, gibt <b>YieldMat</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück. </para>
          <para>Wenn die ≥ ist, gibt <b>YieldMat</b> die #NUM! Ist dies nicht der Fall, gibt INDEX den Fehlerwert #REF! zurück.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Z_Test">
      <MemberSignature Language="C#" Value="public double Z_Test (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 Z_Test([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Z_Test (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16926)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - Das Array oder der Datenbereich, mit dem zum Testen des Mittelwerts einer vorhandenen angenommenen Grundgesamtheit ein Abgleich erfolgt.</param>
        <param name="Arg2">Der zu testende Wert.</param>
        <param name="Arg3">Sigma - Die bekannte Standardabweichung der Grundgesamtheit. Ohne Angabe wird die Standardabweichung der Stichprobe verwendet.</param>
        <summary>Gibt den Wahrscheinlichkeitswert für einen einseitigen z-Test zurück. Für den Mittelwert einer vorhandenen angenommenen Grundgesamtheit gibt Z.TEST die Wahrscheinlichkeit zurück, dass der Mittelwert für das Beispiel größer ist als der Durchschnittswert der Beobachtungen in der Datengruppe (Array), d. h. dem beobachteten Mittelwert für das Beispiel.</summary>
        <returns>To be added.</returns>
        <remarks><para>Wenn das Array leer ist, <b>gibt Z_Test</b> den #N/A-Fehlerwert zurück. </para>
          <para>
            <b>Z_Test</b> wird wie folgt berechnet, wenn kein Wert ausgelassen wird: </para>
          <para>Abbildung 1: Gleichung für Z_Test, wenn kein Verr nkungsf?n ausgelassen wird</para>
          <para> </para>
          <para> </para>
          <para>oder wenn sie ausgelassen wird:</para>
          <para>Abbildung 2: Gleichung für Z_Test, wenn sie nicht angegeben wird</para>
          <para> </para>
          <para> </para>
          <para>Wobei x der Mittelwert des Beispiels AVERAGE(Array) ist; s ist die Beispielstandardabweichung STDEV_S(Array); und n ist die Anzahl der Beobachtungen im Beispiel COUNT(Array).</para>
          <para>
            <b>Z_Test</b> stellt die Wahrscheinlichkeit dar, dass der Mittelwert der Stichprobe größer als der beobachtete Wert AVERAGE(Array) wäre, wenn der Mittelwert der zugrunde liegenden Grundgesamtheit μ0 ist. Wenn average(array) μ0 ist, gibt Z_Test der Symmetrisch der Normalverteilung einen Wert größer &lt; als 0,5 zurück. <b></b></para>
          <para>Die folgende Excel-Formel kann verwendet werden, um die Zwei-Seiten-Wahrscheinlichkeit zu berechnen, dass der Mittelwert des Beispiels weiter von μ0 (in beide Richtungen) als AVERAGE(Array) liegt, wenn der Mittelwert der zugrunde liegenden Grundgesamtheit μ0 ist:</para>
          <para>=2 * MIN(Z_TEST(array,μ0,auf), 1 - Z_TEST(array,μ0,auf)).</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ZTest">
      <MemberSignature Language="C#" Value="public double ZTest (object Arg1, double Arg2, object Arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ZTest([in]object Arg1, [in]float64 Arg2, [in]object Arg3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.WorksheetFunction.ZTest(System.Object,System.Double,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ZTest (Arg1 As Object, Arg2 As Double, Optional Arg3 As Object) As Double" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(16708)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Double" />
        <Parameter Name="Arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Array - Das Array oder der Datenbereich, mit dem zum Testen des Mittelwerts einer vorhandenen angenommenen Grundgesamtheit ein Abgleich erfolgt.</param>
        <param name="Arg2">Der zu testende Wert.</param>
        <param name="Arg3">Sigma – die (bekannte) Standardabweichung der Grundgesamtheit. Falls der Wert Sigma weggelassen wird, wird die Standardabweichung für das Beispiel verwendet.</param>
        <summary>Gibt den Wahrscheinlichkeitswert für einen einseitigen z-Test zurück. Für den Mittelwert einer vorhandenen angenommenen Grundgesamtheit gibt ZTEST die Wahrscheinlichkeit zurück, dass der Mittelwert für das Beispiel größer ist als der Durchschnittswert der Beobachtungen in der Datengruppe (Array) – d. h. dem beobachteten Mittelwert für das Beispiel.</summary>
        <returns>To be added.</returns>
        <remarks><para>
            <b>Wichtig:</b>Diese Funktion wurde durch eine oder mehrere neue Funktionen ersetzt, die möglicherweise eine höhere Genauigkeit bieten und deren Namen ihre Verwendung besser widerspiegeln. Diese Funktion ist aus Kompatibilitätsgründen mit früheren Versionen von Excel weiterhin verfügbar. Wenn jedoch keine Abwärtskompatibilität erforderlich ist, sollten Sie ab jetzt die Verwendung der neuen Funktionen in Betracht ziehen, da sie deren Funktionalität genauer beschreiben. Weitere Informationen zur neuen Funktion finden Sie in der <see cref="M:Microsoft.Office.Interop.Excel.WorksheetFunction.Z_Test(System.Object,System.Double,System.Object)" /> Methode.</para>
          <para>Wenn das Array leer ist, gibt <b>ZTest</b> den #N/A-Fehlerwert zurück. </para>
          <para>
            <b>ZTest</b> wird wie folgt berechnet, wenn kein Wert ausgelassen wird: </para>
          <para>Abbildung 1: Gleichung für ZTest, wenn kein Gleichungswert ausgelassen wird</para>
          <para> </para>
          <para> </para>
          <para>oder wenn sie ausgelassen wird:</para>
          <para>Abbildung 2: Gleichung für ZTest, wenn die Formel nicht angegeben wird</para>
          <para> </para>
          <para> </para>
          <para>Wobei x der Mittelwert des Beispiels AVERAGE(Array) ist; s ist die Beispielstandardabweichung STDEV(Array); und n ist die Anzahl der Beobachtungen im Beispiel COUNT(Array).</para>
          <para>
            <b>ZTest</b> stellt die Wahrscheinlichkeit dar, dass der Mittelwert der Stichprobe größer als der beobachtete Wert AVERAGE(Array) wäre, wenn der Mittelwert der zugrunde liegenden Grundgesamtheit μ0 ist. Aus der Symmetrisch der Normalverteilung gibt ZTEST bei MITTELWERT(Array) μ0 einen Wert größer &lt; als 0,5 zurück.</para>
          <para>Die folgende #A0 kann verwendet werden, um die Zwei-Seiten-Wahrscheinlichkeit zu berechnen, dass der Mittelwert des Beispiels weiter von μ0 (in beide Richtungen) als AVERAGE(Array) liegt, wenn der Mittelwert der zugrunde liegenden Grundgesamtheit μ0:=2 * MIN(ZTEST(array,μ0,array), 1 - ZTEST(array,μ0,array)) ist.</para>
          <para> </para></remarks>
      </Docs>
    </Member>
  </Members>
</Type>