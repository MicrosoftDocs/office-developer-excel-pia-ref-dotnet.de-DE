<Type Name="Protection" FullName="Microsoft.Office.Interop.Excel.Protection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f9996163076ffe6bcb7674a54fe7b673141d992b" /><Meta Name="ms.sourcegitcommit" Value="f58b07bd9753015d401a69461f61bc174edee843" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="de-DE" /><Meta Name="ms.lasthandoff" Value="01/27/2021" /><Meta Name="ms.locfileid" Value="50010794" /></Metadata><TypeSignature Language="C#" Value="public interface Protection" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract Protection" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.Protection" />
  <TypeSignature Language="VB.NET" Value="Public Interface Protection" />
  <TypeSignature Language="C++ CLI" Value="public interface class Protection" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00024467-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d3cfa-101">Stellt die verschiedenen Arten von Schutzoptionen dar, die für ein Arbeitsblatt zur Verfügung stehen.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-101">Represents the various types of protection options available for a worksheet.</span></span></summary>
    <remarks><para><span data-ttu-id="d3cfa-102">Verwenden Sie <see cref="P:Microsoft.Office.Interop.Excel._Worksheet.Protection" /> die Eigenschaft des <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> Objekts, um ein Protection <b>-Objekt zurückzukehren.</b></span><span class="sxs-lookup"><span data-stu-id="d3cfa-102">Use the <see cref="P:Microsoft.Office.Interop.Excel._Worksheet.Protection" /> property of the <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> object to return a <b>Protection</b> object.</span></span></para>
      <para><span data-ttu-id="d3cfa-103">Nachdem ein <b>Protection -Objekt</b> zurückgegeben wurde, können Sie die folgenden Eigenschaften verwenden, um Schutzoptionen festlegen oder zurückgeben:</span><span class="sxs-lookup"><span data-stu-id="d3cfa-103">Once a <b>Protection</b> object is returned, you can use the following properties to set or return protection options:</span></span></para>
      <list type="bullet">
        <item>
          <description>
            <see cref="P:Microsoft.Office.Interop.Excel.Protection.AllowDeletingColumns" />
          </description>
        </item>
        <item>
          <description>
            <see cref="P:Microsoft.Office.Interop.Excel.Protection.AllowDeletingRows" />
          </description>
        </item>
        <item>
          <description>
            <see cref="P:Microsoft.Office.Interop.Excel.Protection.AllowFiltering" />
          </description>
        </item>
        <item>
          <description>
            <see cref="P:Microsoft.Office.Interop.Excel.Protection.AllowFormattingCells" />
          </description>
        </item>
        <item>
          <description>
            <see cref="P:Microsoft.Office.Interop.Excel.Protection.AllowFormattingColumns" />
          </description>
        </item>
        <item>
          <description>
            <see cref="P:Microsoft.Office.Interop.Excel.Protection.AllowFormattingRows" />
          </description>
        </item>
        <item>
          <description>
            <see cref="P:Microsoft.Office.Interop.Excel.Protection.AllowInsertingColumns" />
          </description>
        </item>
        <item>
          <description>
            <see cref="P:Microsoft.Office.Interop.Excel.Protection.AllowInsertingHyperlinks" />
          </description>
        </item>
        <item>
          <description>
            <see cref="P:Microsoft.Office.Interop.Excel.Protection.AllowInsertingRows" />
          </description>
        </item>
        <item>
          <description>
            <see cref="P:Microsoft.Office.Interop.Excel.Protection.AllowSorting" />
          </description>
        </item>
        <item>
          <description>
            <see cref="P:Microsoft.Office.Interop.Excel.Protection.AllowUsingPivotTables" />
          </description>
        </item>
      </list>
      <para> </para></remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowDeletingColumns">
      <MemberSignature Language="C#" Value="public bool AllowDeletingColumns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDeletingColumns" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Protection.AllowDeletingColumns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowDeletingColumns As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDeletingColumns { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2038)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2038)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3cfa-104">Gibt <b>True</b> zurück, wenn das Löschen von Spalten in einem geschützten Arbeitsblatt zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-104">Returns <b>True</b> if the deletion of columns is allowed on a protected worksheet.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="d3cfa-105">Die <b>Eigenschaft "AllowDeletingColumns"</b> kann mithilfe der Methodenargumente <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-105">The <b>AllowDeletingColumns</b> property can be set by using the <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> method arguments.</span></span></para>
          <para><span data-ttu-id="d3cfa-106">Die Sperre für die Spalten, die die zu löschenden Zellen enthält, muss aufgehoben werden, wenn das Blatt geschützt ist.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-106">The columns containing the cells to be deleted must be unlocked when the sheet is protected.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDeletingRows">
      <MemberSignature Language="C#" Value="public bool AllowDeletingRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDeletingRows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Protection.AllowDeletingRows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowDeletingRows As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDeletingRows { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2039)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2039)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3cfa-107">Gibt <b>True</b> zurück, wenn das Löschen von Zeilen in einem geschützten Arbeitsblatt zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-107">Returns <b>True</b> if the deletion of rows is allowed on a protected worksheet.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="d3cfa-108">Die <b>Eigenschaft "AllowDeletingRows"</b> kann mithilfe der Methodenargumente <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-108">The <b>AllowDeletingRows</b> property can be set by using the <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> method arguments.</span></span></para>
          <para><span data-ttu-id="d3cfa-109">Die Sperre für die Zeilen, die die zu löschenden Zellen enthalten, muss aufgehoben werden, wenn das Blatt geschützt ist.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-109">The rows containing the cells to be deleted must be unlocked when the sheet is protected.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowEditRanges">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.AllowEditRanges AllowEditRanges { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.AllowEditRanges AllowEditRanges" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Protection.AllowEditRanges" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowEditRanges As AllowEditRanges" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::AllowEditRanges ^ AllowEditRanges { Microsoft::Office::Interop::Excel::AllowEditRanges ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2236)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2236)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.AllowEditRanges</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3cfa-110">Gibt ein Objekt <see cref="T:Microsoft.Office.Interop.Excel.AllowEditRanges" /> zurück.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-110">Returns an <see cref="T:Microsoft.Office.Interop.Excel.AllowEditRanges" /> object.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowFiltering">
      <MemberSignature Language="C#" Value="public bool AllowFiltering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowFiltering" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Protection.AllowFiltering" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowFiltering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowFiltering { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2041)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2041)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3cfa-111">Gibt <b>True</b> zurück, wenn Benutzer einen AutoFilter verwenden dürfen, der erstellt wurde, bevor das Blatt geschützt wurde.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-111">Returns <b>True</b> if the user is allowed to make use of an AutoFilter that was created before the sheet was protected.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="d3cfa-112">Die <b>Eigenschaft AllowFiltering</b> kann mithilfe der Methodenargumente <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-112">The <b>AllowFiltering</b> property can be set by using the <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> method arguments.</span></span></para>
          <para><span data-ttu-id="d3cfa-p101">Die <b>AllowFiltering</b>-Eigenschaft ermöglicht es dem Benutzer, die Filterkriterien für einen vorhandenen AutoFilter zu ändern. Der Benutzer kann für ein geschütztes Arbeitsblatt keinen AutoFilter erstellen oder entfernen.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-p101">The <b>AllowFiltering</b> property allows the user to change filter criteria on an existing AutoFilter. The user cannot create or remove an AutoFilter on a protected worksheet.</span></span></para>
          <para><span data-ttu-id="d3cfa-115">Die Sperre für die zu filternden Zellen muss aufgehoben werden, wenn das Blatt geschützt ist.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-115">The cells to be filtered must be unlocked when the sheet is protected.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowFormattingCells">
      <MemberSignature Language="C#" Value="public bool AllowFormattingCells { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowFormattingCells" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Protection.AllowFormattingCells" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowFormattingCells As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowFormattingCells { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2032)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2032)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3cfa-116">Gibt <b>True</b> zurück, wenn das Formatieren von Zellen in geschützten Arbeitsblättern zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-116">Returns <b>True</b> if the formatting of cells is allowed on a protected worksheet.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="d3cfa-117">Die <b>AllowFormattingCells -Eigenschaft</b> kann mithilfe der Methodenargumente <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-117">The <b>AllowFormattingCells</b> property can be set by using the <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> method arguments.</span></span></para>
          <para><span data-ttu-id="d3cfa-118">Durch die Verwendung dieser Eigenschaft wird die Registerkarte "Schutz" deaktiviert, sodass der Benutzer alle Formate ändern kann, bereiche jedoch nicht entsperren oder ein-ein-/ausdieren kann.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-118">Use of this property disables the protection tab, allowing the user to change all formats but not to unlock or unhide ranges.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowFormattingColumns">
      <MemberSignature Language="C#" Value="public bool AllowFormattingColumns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowFormattingColumns" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Protection.AllowFormattingColumns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowFormattingColumns As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowFormattingColumns { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2033)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2033)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3cfa-119">Gibt <b>True</b> zurück, wenn das Formatieren von Spalten in geschützten Arbeitsblättern zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-119">Returns <b>True</b> if the formatting of columns is allowed on a protected worksheet.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="d3cfa-120">Die <b>AllowFormattingColumns -Eigenschaft</b> kann mithilfe der Methodenargumente <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-120">The <b>AllowFormattingColumns</b> property can be set by using the <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> method arguments.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowFormattingRows">
      <MemberSignature Language="C#" Value="public bool AllowFormattingRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowFormattingRows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Protection.AllowFormattingRows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowFormattingRows As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowFormattingRows { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2034)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2034)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3cfa-121">Gibt <b>True</b> zurück, wenn das Formatieren von Zeilen in geschützten Arbeitsblättern zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-121">Returns <b>True</b> if the formatting of rows is allowed on a protected worksheet.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="d3cfa-122">Die <b>AllowFormattingRows -Eigenschaft</b> kann mithilfe der Methodenargumente <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-122">The <b>AllowFormattingRows</b> property can be set by using the <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> method arguments.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowInsertingColumns">
      <MemberSignature Language="C#" Value="public bool AllowInsertingColumns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowInsertingColumns" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Protection.AllowInsertingColumns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowInsertingColumns As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowInsertingColumns { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2035)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2035)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3cfa-123">Gibt <b>True</b> zurück, wenn das Einfügen von Spalten in geschützten Arbeitsblättern zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-123">Returns <b>True</b> if the insertion of columns is allowed on a protected worksheet.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="d3cfa-p102">Eine eingefügte Spalte übernimmt ihre Formatierung (standardmäßig) von der Spalte, die links von ihr steht. Das bedeutet, dass diese möglicherweise über gesperrte Zellen verfügt und die Benutzer vielleicht nicht in der Lage sind, die von ihnen eingefügten Spalten wieder zu löschen.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-p102">An inserted column inherits its formatting (by default) from the column to its left, which means that it may have locked cells. In other words, users may not be able to delete columns that they have inserted.</span></span></para>
          <para><span data-ttu-id="d3cfa-126">Die <b>AllowInsertingColumns -Eigenschaft</b> kann mithilfe der Methodenargumente <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-126">The <b>AllowInsertingColumns</b> property can be set by using the <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> method arguments.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowInsertingHyperlinks">
      <MemberSignature Language="C#" Value="public bool AllowInsertingHyperlinks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowInsertingHyperlinks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Protection.AllowInsertingHyperlinks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowInsertingHyperlinks As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowInsertingHyperlinks { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2037)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2037)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3cfa-127">Gibt <b>True</b> zurück, wenn das Einfügen von Hyperlinks in geschützten Arbeitsblättern zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-127">Returns <b>True</b> if the insertion of hyperlinks is allowed on a protected worksheet.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="d3cfa-128">Hyperlinks können nur in Zellen eines geschützten Arbeitsblatts eingefügt werden, die ungeschützt sind oder keine Sperre besitzen.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-128">Hyperlinks can only be inserted in unlocked or unprotected cells on a protected worksheet.</span></span></para>
          <para><span data-ttu-id="d3cfa-129">Die <b>AllowInsertingHyperlinks -Eigenschaft</b> kann mithilfe der Methodenargumente <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-129">The <b>AllowInsertingHyperlinks</b> property can be set by using the <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> method arguments.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowInsertingRows">
      <MemberSignature Language="C#" Value="public bool AllowInsertingRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowInsertingRows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Protection.AllowInsertingRows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowInsertingRows As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowInsertingRows { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2036)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2036)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3cfa-130">Gibt <b>True</b> zurück, wenn das Einfügen von Zeilen in geschützten Arbeitsblättern zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-130">Returns <b>True</b> if the insertion of rows is allowed on a protected worksheet.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="d3cfa-131">Die <b>AllowInsertingRows -Eigenschaft</b> kann mithilfe der Methodenargumente <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-131">The <b>AllowInsertingRows</b> property can be set by using the <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> method arguments.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowSorting">
      <MemberSignature Language="C#" Value="public bool AllowSorting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowSorting" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Protection.AllowSorting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowSorting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowSorting { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2040)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2040)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3cfa-132">Gibt <b>True</b> zurück, wenn die Sortieroption für ein geschütztes Arbeitsblatt zulässig ist.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-132">Returns <b>True</b> if the sorting option is allowed on a protected worksheet.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="d3cfa-133">In einem geschützten Arbeitsblatt kann die Sortierung nur für nicht gesperrte oder nicht geschützte Zellen ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-133">In a protected worksheet, sorting can only be performed on unlocked or unprotected cells.</span></span></para>
          <para><span data-ttu-id="d3cfa-134">Die <b>Eigenschaft AllowSorting</b> kann mithilfe der Methodenargumente <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-134">The <b>AllowSorting</b> property can be set by using the <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> method arguments.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUsingPivotTables">
      <MemberSignature Language="C#" Value="public bool AllowUsingPivotTables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUsingPivotTables" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Protection.AllowUsingPivotTables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowUsingPivotTables As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUsingPivotTables { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2042)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2042)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d3cfa-135">Gibt <b>True zurück,</b> wenn der Benutzer PivotTables in einem geschützten Arbeitsblatt bearbeiten darf.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-135">Returns <b>True</b> if the user is allowed to manipulate pivot tables on a protected worksheet.</span></span></summary>
        <value>To be added.</value>
        <remarks><para><span data-ttu-id="d3cfa-136">Die <b>AllowUsingPivotTables</b>-Eigenschaft gilt für Nicht-OLAP-Quelldaten.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-136">The <b>AllowUsingPivotTables</b> property applies to non-OLAP source data.</span></span></para>
          <para><span data-ttu-id="d3cfa-137">Die <b>Eigenschaft "AllowUsingPivotTables"</b> kann mithilfe der Methodenargumente <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> festgelegt werden.</span><span class="sxs-lookup"><span data-stu-id="d3cfa-137">The <b>AllowUsingPivotTables</b> property can be set by using the <see cref="M:Microsoft.Office.Interop.Excel._Workbook.Protect(System.Object,System.Object,System.Object)" /> method arguments.</span></span></para>
          <para> </para></remarks>
      </Docs>
    </Member>
  </Members>
</Type>