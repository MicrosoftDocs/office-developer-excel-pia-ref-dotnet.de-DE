<Type Name="ListObjects" FullName="Microsoft.Office.Interop.Excel.ListObjects">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c26d759231e55f2d7cd0214bee3fb3636fe79db1" />
    <Meta Name="ms.sourcegitcommit" Value="e7d3480b6ad64431c29c74a1b422c662de0b511d" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="09/03/2018" />
    <Meta Name="ms.locfileid" Value="20580941" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ListObjects : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ListObjects implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.ListObjects" />
  <TypeSignature Language="VB.NET" Value="Public Interface ListObjects&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ListObjects : System::Collections::IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00024470-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ea112-101">Eine Auflistung aller der <see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> Objekte auf einem Arbeitsblatt.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ea112-101">A collection of all the <see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> objects on a worksheet.</span>
      </span>
      <span data-ttu-id="ea112-102">Jede <see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> Objekt stellt eine Liste im Arbeitsblatt dar.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ea112-102">Each <see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> object represents a list in the worksheet.</span>
      </span>
    </summary>
    <remarks>
      <span data-ttu-id="ea112-103">
        <para>Verwendung der <see cref="P:Microsoft.Office.Interop.Excel._Worksheet.ListObjects" /> -Eigenschaft des der <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> Objekts, um die <b>ListObjects</b> -Auflistung zurückzugeben.</para>
        <para></para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="ea112-103">
          <para>Use the <see cref="P:Microsoft.Office.Interop.Excel._Worksheet.ListObjects" /> property of the <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> object to return the <b>ListObjects</b> collection.</para>
          <para></para>
        </span>
      </span>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="_Default">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ListObject this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ListObject _Default(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.ListObjects._Default(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property _Default(Index As Object) As ListObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::ListObject ^ default[System::Object ^] { Microsoft::Office::Interop::Excel::ListObject ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ListObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">To be added.</param>
        <summary>
          <span data-ttu-id="ea112-104">Für die interne Verwendung reserviert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-104">Reserved for internal use.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ListObject Add (Microsoft.Office.Interop.Excel.XlListObjectSourceType SourceType = Microsoft.Office.Interop.Excel.XlListObjectSourceType.xlSrcRange, object Source, object LinkSource, Microsoft.Office.Interop.Excel.XlYesNoGuess XlListObjectHasHeaders = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlGuess, object Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.ListObject Add([in]valuetype Microsoft.Office.Interop.Excel.XlListObjectSourceType SourceType, [in]object Source, [in]object LinkSource, [in]valuetype Microsoft.Office.Interop.Excel.XlYesNoGuess XlListObjectHasHeaders, [in]object Destination) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.ListObjects.Add(Microsoft.Office.Interop.Excel.XlListObjectSourceType,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlYesNoGuess,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (Optional SourceType As XlListObjectSourceType = Microsoft.Office.Interop.Excel.XlListObjectSourceType.xlSrcRange, Optional Source As Object, Optional LinkSource As Object, Optional XlListObjectHasHeaders As XlYesNoGuess = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlGuess, Optional Destination As Object) As ListObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2085)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ListObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceType" Type="Microsoft.Office.Interop.Excel.XlListObjectSourceType" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="LinkSource" Type="System.Object" />
        <Parameter Name="XlListObjectHasHeaders" Type="Microsoft.Office.Interop.Excel.XlYesNoGuess" />
        <Parameter Name="Destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="SourceType">
          <span data-ttu-id="ea112-105">Optional <b>XlListObjectSourceType-Wert</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-105">Optional <b>XlListObjectSourceType</b>.</span>
          </span>
          <span data-ttu-id="ea112-106">Gibt die Quellenart für die Abfrage an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-106">Indicates the kind of source for the query.</span>
          </span>
          <span data-ttu-id="ea112-107">Kann eine der folgenden <b>XlListObjectSourceType</b> -Konstanten sein: <b>XlSrcExternal</b> oder <b>XlSrcRange</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-107">Can be one of the following <b>XlListObjectSourceType</b> constants: <b>xlSrcExternal</b> or <b>xlSrcRange</b>.</span>
          </span>
          <span data-ttu-id="ea112-108">Wenn Length angegeben, die <paramref name="SourceType" /> Standardwert <b>XlSrcRange</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-108">If omitted, the <paramref name="SourceType" /> will default to <b>xlSrcRange</b>.</span>
          </span>
        </param>
        <param name="Source">
          <span data-ttu-id="ea112-109">Optional, wenn <paramref name="SourceType" /><b>XlSrcRange</b>ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-109">Optional when <paramref name="SourceType" /> is <b>xlSrcRange</b>.</span>
          </span>
          <span data-ttu-id="ea112-110">Ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das die Datenquelle darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-110">A <see cref="T:Microsoft.Office.Interop.Excel.Range" /> object representing the data source.</span>
          </span>
          <span data-ttu-id="ea112-111">Wenn Length angegeben, die <paramref name="Source" /> wird standardmäßig der Bereich mithilfe der Liste Bereich Erkennungscode zurückgegeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-111">If omitted, the <paramref name="Source" /> will default to the range returned by list range detection code.</span>
          </span>
          <span data-ttu-id="ea112-112">Erforderlich, wenn <paramref name="SourceType" /><b>XlSrcExternal</b>ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-112">Required when <paramref name="SourceType" /> is <b>xlSrcExternal</b>.</span>
          </span>
          <span data-ttu-id="ea112-113">Ein Array mit <b>String</b> -Werten, die eine Verbindung mit der Datenquelle angibt. Element #Contents0URL zu SharePoint-Website 1ListName 2ViewGUID</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-113">An array of <b>String</b> values specifying a connection to the source.Element#Contents0URL to SharePoint site 1ListName 2ViewGUID</span>
          </span>
        </param>
        <param name="LinkSource">
          <span data-ttu-id="ea112-114">Optionaler <b>Boolean</b>-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-114">Optional <b>Boolean</b>.</span>
          </span>
          <span data-ttu-id="ea112-115">Gibt an, ob eine externe Datenquelle ist, das <b>ListObject</b> -Objekt verknüpft werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-115">Indicates whether an external data source is to be linked to the <b>ListObject</b> object.</span>
          </span>
          <span data-ttu-id="ea112-116">Wenn <paramref name="SourceType" /><b>XlSrcExternal</b>, ist der Standardwert ist <b>True</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-116">If <paramref name="SourceType" /> is <b>xlSrcExternal</b>, default is <b>True</b>.</span>
          </span>
          <span data-ttu-id="ea112-117">Ungültige If <paramref name="SourceType" /><b>XlSrcRange</b>ist, und gibt einen Fehler zurück, wenn nicht ausgelassen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-117">Invalid if <paramref name="SourceType" /> is <b>xlSrcRange</b>, and will return an error if not omitted.</span>
          </span>
        </param>
        <param name="XlListObjectHasHeaders">
          <span data-ttu-id="ea112-118">Optionales- <b>Objekt</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-118">Optional <b>Object</b>.</span>
          </span>
          <span data-ttu-id="ea112-119">Ein <see cref="T:Microsoft.Office.Interop.Excel.XlYesNoGuess" /> -Konstante, die angibt, ob die zu importierenden Daten Spaltenüberschriften verfügt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-119">An <see cref="T:Microsoft.Office.Interop.Excel.XlYesNoGuess" /> constant that indicates whether the data being imported has column labels.</span>
          </span>
          <span data-ttu-id="ea112-120">Wenn die Datenquelle keine Kopfzeilen enthält, generiert Excel automatisch Kopfzeilen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-120">If the Source does not contain headers, Excel will automatically generate headers.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="ea112-121">Optionales- <b>Objekt</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-121">Optional <b>Object</b>.</span>
          </span>
          <span data-ttu-id="ea112-122">Ein <b>Range</b> -Objekt, Bezug auf eine einzelne Zelle als Ziel für die linke obere Ecke des neuen Listenobjekts angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-122">A <b>Range</b> object specifying a single-cell reference as the destination for the top-left corner of the new list object.</span>
          </span>
          <span data-ttu-id="ea112-123">Wenn das <b>Range</b> -Objekt auf mehrere Zellen bezieht, wird ein Fehler generiert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-123">If the <b>Range</b> object refers to more than one cell, an error is generated.</span>
          </span>
          <span data-ttu-id="ea112-124">Die <paramref name="Destination" /> Argument muss angegebenen <paramref name="SourceType" /> auf <b>XlSrcExternal</b>festgelegt ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-124">The <paramref name="Destination" /> argument must be specified when <paramref name="SourceType" /> is set to <b>xlSrcExternal</b>.</span>
          </span>
          <span data-ttu-id="ea112-125">Die <paramref name="Destination" /> Argument wird ignoriert, wenn <paramref name="SourceType" /><b>xlSrcRange</b>festgelegt ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-125">The <paramref name="Destination" /> argument is ignored if <paramref name="SourceType" /> is set to <b>xlSrcRange</b>.</span>
          </span>
          <span data-ttu-id="ea112-126">Der Zielbereich muss sich auf dem Arbeitsblatt, das das angegebene enthält <see cref="T:Microsoft.Office.Interop.Excel.ListObjects" /> Auflistung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-126">The destination range must be on the worksheet that contains the specified <see cref="T:Microsoft.Office.Interop.Excel.ListObjects" /> collection.</span>
          </span>
          <span data-ttu-id="ea112-127">Neue Spalten werden eingefügt werden, an die <paramref name="Destination" /> auf die neue Liste passt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-127">New columns will be inserted at the <paramref name="Destination" /> to fit the new list.</span>
          </span>
          <span data-ttu-id="ea112-128">Aus diesem Grund werden vorhandene Daten nicht überschrieben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-128">Therefore, existing data will not be overwritten.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ea112-129">Erstellt ein neues Listenobjekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-129">Creates a new list object.</span>
          </span>
          <span data-ttu-id="ea112-130">Gibt eine <see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-130">Returns a <see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> object.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <span data-ttu-id="ea112-131">
            <para>, Wenn die Liste Kopfzeilen, die erste Zeile mit Zellen verfügt wird werden in <b>Text</b>konvertiert, wenn nicht bereits auf Text festgelegt. Die Konvertierung basiert auf den angezeigten Text für die Zelle. Dies bedeutet, dass ist ein Date-Wert mit <b>einem Datumsformat, das mit dem Gebietsschema geändert wird</b> , der Konvertierung zu einer Liste abhängig vom aktuellen Gebietsschema Systems unterschiedliche Ergebnisse entstehen. Darüber hinaus treten die Kopfzeile zwei Zellen mit demselben sichtbaren Text enthält, eine inkrementelle <b>ganze Zahl</b> wird angehängt werden, um jede Spaltenüberschrift eindeutig ist.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-131">
              <para>When the list has headers, the first row of cells will be converted to <b>Text</b>, if not already set to text. The conversion will be based on the visible text for the cell. This means that if there is a date value with a <b>Date</b> format that changes with locale, the conversion to a list might produce different results depending on the current system locale. Moreover, if there are two cells in the header row that have the same visible text, an incremental <b>Integer</b> will be appended to make each column header unique.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEx">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ListObject AddEx (Microsoft.Office.Interop.Excel.XlListObjectSourceType SourceType = Microsoft.Office.Interop.Excel.XlListObjectSourceType.xlSrcRange, object Source, object LinkSource, Microsoft.Office.Interop.Excel.XlYesNoGuess XlListObjectHasHeaders = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlGuess, object Destination, object TableStyleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.ListObject AddEx([in]valuetype Microsoft.Office.Interop.Excel.XlListObjectSourceType SourceType, [in]object Source, [in]object LinkSource, [in]valuetype Microsoft.Office.Interop.Excel.XlYesNoGuess XlListObjectHasHeaders, [in]object Destination, [in]object TableStyleName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.ListObjects.AddEx(Microsoft.Office.Interop.Excel.XlListObjectSourceType,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlYesNoGuess,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddEx (Optional SourceType As XlListObjectSourceType = Microsoft.Office.Interop.Excel.XlListObjectSourceType.xlSrcRange, Optional Source As Object, Optional LinkSource As Object, Optional XlListObjectHasHeaders As XlYesNoGuess = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlGuess, Optional Destination As Object, Optional TableStyleName As Object) As ListObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(181)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ListObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceType" Type="Microsoft.Office.Interop.Excel.XlListObjectSourceType" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="LinkSource" Type="System.Object" />
        <Parameter Name="XlListObjectHasHeaders" Type="Microsoft.Office.Interop.Excel.XlYesNoGuess" />
        <Parameter Name="Destination" Type="System.Object" />
        <Parameter Name="TableStyleName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="SourceType">To be added.</param>
        <param name="Source">To be added.</param>
        <param name="LinkSource">To be added.</param>
        <param name="XlListObjectHasHeaders">To be added.</param>
        <param name="Destination">To be added.</param>
        <param name="TableStyleName">To be added.</param>
        <summary>
          <span data-ttu-id="ea112-132">Für die interne Verwendung reserviert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-132">Reserved for internal use.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.ListObjects.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ea112-133">Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Application" /> -Objekt, das die Anwendung Microsoft Excel darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-133">Returns an <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object that represents the Microsoft Excel application.</span>
          </span>
          <span data-ttu-id="ea112-134">Schreibgeschützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-134">Read-only.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.ListObjects.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(118)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(118)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ea112-135">Gibt die Anzahl der Objekte in der Auflistung zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-135">Returns the number of objects in the collection.</span>
          </span>
          <span data-ttu-id="ea112-136">Schreibgeschützter <b>Integer</b>-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-136">Read-only <b>Integer</b>.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.ListObjects.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ea112-137">Gibt eine 32-Bit-Ganzzahl, die die Anwendung angibt, in der das Objekt erstellt wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-137">Returns a 32-bit integer that indicates the application in which this object was created.</span>
          </span>
          <span data-ttu-id="ea112-138">Wenn das Objekt in Microsoft Excel erstellt wurde, gibt diese Eigenschaft die Zeichenfolge XCEL zurück, dies entspricht die hexadezimale Zahl 5843454 c ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-138">If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C.</span>
          </span>
          <span data-ttu-id="ea112-139">Read-only <see cref="T:Microsoft.Office.Interop.Excel.XlCreator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-139">Read-only <see cref="T:Microsoft.Office.Interop.Excel.XlCreator" />.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="ea112-140">
            <para>Die <b>Creator</b> -Eigenschaft wurde in Microsoft Excel für den Macintosh verwendet werden, in dem jede Anwendung einen Erstellercode aus vier Zeichen verfügt über entwickelt. Microsoft Excel verfügt beispielsweise über den erstellten Code XCEL.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-140">
              <para>The <b>Creator</b> property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.ListObjects.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-4)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ListObject Item[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ListObject Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.ListObjects.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item(Index As Object) As ListObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::ListObject ^ Item[System::Object ^] { Microsoft::Office::Interop::Excel::ListObject ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ListObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="ea112-141">
            <b>Objekt</b>erforderlich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-141">Required <b>Object</b>.</span>
          </span>
          <span data-ttu-id="ea112-142">Der Name oder die Indexnummer des Objekts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-142">The name or index number of the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ea112-143">Gibt ein einzelnes Objekt aus einer Auflistung zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-143">Returns a single object from a collection.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.ListObjects.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ea112-p112">Gibt das übergeordnete Objekt für das angegebene Objekt zurück. Schreibgeschützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ea112-p112">Returns the parent object for the specified object. Read-only.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>