<Type Name="Validation" FullName="Microsoft.Office.Interop.Excel.Validation">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="083a06403ed93601b1e670cd7b0f4d2f6291f627" />
    <Meta Name="ms.sourcegitcommit" Value="e7d3480b6ad64431c29c74a1b422c662de0b511d" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="09/03/2018" />
    <Meta Name="ms.locfileid" Value="20575803" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface Validation" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract Validation" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.Validation" />
  <TypeSignature Language="VB.NET" Value="Public Interface Validation" />
  <TypeSignature Language="C++ CLI" Value="public interface class Validation" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("0002442F-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="31a63-101">Stellt die Datenüberprüfung eines Arbeitsblattbereichs dar.</span>
      <span class="sxs-lookup">
        <span data-stu-id="31a63-101">Represents data validation for a worksheet range.</span>
      </span>
    </summary>
    <remarks>
      <span data-ttu-id="31a63-102">
        <para>Verwendung der <see cref="P:Microsoft.Office.Interop.Excel.Range.Validation" /> Eigenschaft, um das <b>Validation</b> -Objekt zurückzugeben.</para>
        <para>Verwendung der <see cref="M:Microsoft.Office.Interop.Excel.Validation.Add(Microsoft.Office.Interop.Excel.XlDVType,System.Object,System.Object,System.Object,System.Object)" /> -Methode, um einen Bereich Validierung hinzu, und erstellen ein neues <b>Validation</b> -Objekt.</para>
        <para></para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="31a63-102">
          <para>Use the <see cref="P:Microsoft.Office.Interop.Excel.Range.Validation" /> property to return the <b>Validation</b> object.</para>
          <para>Use the <see cref="M:Microsoft.Office.Interop.Excel.Validation.Add(Microsoft.Office.Interop.Excel.XlDVType,System.Object,System.Object,System.Object,System.Object)" /> method to add data validation to a range and create a new <b>Validation</b> object.</para>
          <para></para>
        </span>
      </span>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (Microsoft.Office.Interop.Excel.XlDVType Type, object AlertStyle, object Operator, object Formula1, object Formula2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add([in]valuetype Microsoft.Office.Interop.Excel.XlDVType Type, [in]object AlertStyle, [in]object Operator, [in]object Formula1, [in]object Formula2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Validation.Add(Microsoft.Office.Interop.Excel.XlDVType,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (Type As XlDVType, Optional AlertStyle As Object, Optional Operator As Object, Optional Formula1 As Object, Optional Formula2 As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(181)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlDVType" />
        <Parameter Name="AlertStyle" Type="System.Object" />
        <Parameter Name="Operator" Type="System.Object" />
        <Parameter Name="Formula1" Type="System.Object" />
        <Parameter Name="Formula2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">
          <span data-ttu-id="31a63-103">Erforderliche <see cref="T:Microsoft.Office.Interop.Excel.XlDVType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-103">Required <see cref="T:Microsoft.Office.Interop.Excel.XlDVType" />.</span>
          </span>
          <span data-ttu-id="31a63-104">Der Überprüfungstyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-104">The validation type.</span>
          </span>
        </param>
        <param name="AlertStyle">
          <span data-ttu-id="31a63-105">Optionales- <b>Objekt</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-105">Optional <b>Object</b>.</span>
          </span>
          <span data-ttu-id="31a63-106">Der Stil der Überprüfungswarnung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-106">The validation alert style.</span>
          </span>
          <span data-ttu-id="31a63-107">Kann eine der folgenden <see cref="T:Microsoft.Office.Interop.Excel.XlDVAlertStyle" /> Konstanten: <b>XlValidAlertInformation</b>, <b>XlValidAlertStop</b>oder <b>XlValidAlertWarning</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-107">Can be one of the following <see cref="T:Microsoft.Office.Interop.Excel.XlDVAlertStyle" /> constants: <b>xlValidAlertInformation</b>, <b>xlValidAlertStop</b>, or <b>xlValidAlertWarning</b>.</span>
          </span>
        </param>
        <param name="Operator">
          <span data-ttu-id="31a63-108">Optionales- <b>Objekt</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-108">Optional <b>Object</b>.</span>
          </span>
          <span data-ttu-id="31a63-109">Der Operator für die Datenüberprüfung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-109">The data validation operator.</span>
          </span>
          <span data-ttu-id="31a63-110">Kann eine der folgenden <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionOperator" /> Konstanten: <b>XlBetween</b>, <b>XlEqual</b>, <b>XlGreater</b>, <b>XlGreaterEqual</b>, <b>XlLess</b>, <b>XlLessEqual</b>, <b>XlNotBetween</b>oder <b>XlNotEqual</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-110">Can be one of the following <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionOperator" /> constants: <b>xlBetween</b>, <b>xlEqual</b>, <b>xlGreater</b>, <b>xlGreaterEqual</b>, <b>xlLess</b>, <b>xlLessEqual</b>, <b>xlNotBetween</b>, or <b>xlNotEqual</b>.</span>
          </span>
        </param>
        <param name="Formula1">
          <span data-ttu-id="31a63-111">Optionales- <b>Objekt</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-111">Optional <b>Object</b>.</span>
          </span>
          <span data-ttu-id="31a63-112">Der erste Teil der Datenüberprüfungsgleichung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-112">The first part of the data validation equation.</span>
          </span>
        </param>
        <param name="Formula2">
          <span data-ttu-id="31a63-113">Optionales- <b>Objekt</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-113">Optional <b>Object</b>.</span>
          </span>
          <span data-ttu-id="31a63-114">Im zweiten Teil der datenüberprüfung, wenn <paramref name="Operator" /> handelt es sich <b>um XlBetween</b> oder <b>XlNotBetween</b> (andernfalls wird dieses Argument ignoriert).</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-114">The second part of the data validation when <paramref name="Operator" /> is <b>xlBetween</b> or <b>xlNotBetween</b> (otherwise, this argument is ignored).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="31a63-115">Fügt dem angegebenen Bereich eine Datenüberprüfung hinzu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-115">Adds data validation to the specified range.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="31a63-116">
            <para>Der Add-Methode erfordert, abhängig vom Gültigkeitstyp, verschiedene Argumente, wie in der folgenden Tabelle dargestellt.</para>
            <list type="table">
              <item>
                <term>
                  <b>XlValidateCustom</b>
                </term>
                <description>
                  <paramref name="Formula1" /> ist erforderlich; <paramref name="Formula2" /> wird ignoriert. <paramref name="Formula1" /> muss einen Ausdruck, der <b>true,</b> Wenn die Dateneingabe gültig ist und <b>False</b> ausgewertet wird, wenn die Dateneingabe ungültig ist enthalten.</description>
              </item>
              <item>
                <term>
                  <b>XlInputOnly</b>
                </term>
                <description>
                  <paramref name="AlertStyle" />, <paramref name="Formula1" />, oder <paramref name="Formula2" /> dienen.</description>
              </item>
              <item>
                <term>
                  <b>um XlValidateList</b>
                </term>
                <description>
                  <paramref name="Formula1" /> ist erforderlich; <paramref name="Formula2" /> wird ignoriert. <paramref name="Formula1" /> muss eine durch Trennzeichen getrennte Liste von Werten oder ein Verweis auf diese Liste Arbeitsblatt enthalten.</description>
              </item>
              <item>
                <term>
                  <b>XlValidateWholeNumber</b>, <b>XlValidateDate</b>, <b>XlValidateDecimal</b>, <b>XlValidateTextLength</b>, oder <b>XlValidateTime</b></term>
                <description>eine entweder <paramref name="Formula1" /> oder <paramref name="Formula2" /> muss angegeben werden, oder beides kann angegeben werden.</description>
              </item>
            </list>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-116">
              <para>The Add method requires different arguments, depending on the validation type, as shown in the following table.</para>
              <list type="table">
                <item>
                  <term>
                    <b>xlValidateCustom</b>
                  </term>
                  <description>
                    <paramref name="Formula1" /> is required; <paramref name="Formula2" /> is ignored. <paramref name="Formula1" /> must contain an expression that evaluates to <b>True</b> when data entry is valid and <b>False</b> when data entry is invalid.</description>
                </item>
                <item>
                  <term>
                    <b>xlInputOnly</b>
                  </term>
                  <description>
                    <paramref name="AlertStyle" />, <paramref name="Formula1" />, or <paramref name="Formula2" /> are used.</description>
                </item>
                <item>
                  <term>
                    <b>xlValidateList</b>
                  </term>
                  <description>
                    <paramref name="Formula1" /> is required; <paramref name="Formula2" /> is ignored. <paramref name="Formula1" /> must contain either a comma-delimited list of values or a worksheet reference to this list.</description>
                </item>
                <item>
                  <term>
                    <b>xlValidateWholeNumber</b>, <b>xlValidateDate</b>, <b>xlValidateDecimal</b>, <b>xlValidateTextLength</b>, or <b>xlValidateTime</b></term>
                  <description>One of either <paramref name="Formula1" /> or <paramref name="Formula2" /> must be specified, or both may be specified.</description>
                </item>
              </list>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AlertStyle">
      <MemberSignature Language="C#" Value="public int AlertStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AlertStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.AlertStyle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AlertStyle As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AlertStyle { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1605)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1605)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-117">Gibt die überprüfungswarnung zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-117">Returns the validation alert style.</span>
          </span>
          <span data-ttu-id="31a63-118">Read-only <see cref="T:Microsoft.Office.Interop.Excel.XlDVAlertStyle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-118">Read-only <see cref="T:Microsoft.Office.Interop.Excel.XlDVAlertStyle" />.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="31a63-119">
            <para>Verwendung der <see cref="M:Microsoft.Office.Interop.Excel.Validation.Add(Microsoft.Office.Interop.Excel.XlDVType,System.Object,System.Object,System.Object,System.Object)" /> -Methode, um der Warnungsstil für einen Bereich festlegen. Wenn der Bereich bereits mit einer datenüberprüfung versehen, verwenden Sie die <see cref="M:Microsoft.Office.Interop.Excel.Validation.Modify(System.Object,System.Object,System.Object,System.Object,System.Object)" /> -Methode zum Ändern des Warnungsstil.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-119">
              <para>Use the <see cref="M:Microsoft.Office.Interop.Excel.Validation.Add(Microsoft.Office.Interop.Excel.XlDVType,System.Object,System.Object,System.Object,System.Object)" /> method to set the alert style for a range. If the range already has data validation, use the <see cref="M:Microsoft.Office.Interop.Excel.Validation.Modify(System.Object,System.Object,System.Object,System.Object,System.Object)" /> method to change the alert style.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-120">Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Application" /> -Objekt, das die Anwendung Microsoft Excel darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-120">Returns an <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object that represents the Microsoft Excel application.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-121">Gibt eine 32-Bit-Ganzzahl, die die Anwendung angibt, in der das Objekt erstellt wurde.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-121">Returns a 32-bit integer that indicates the application in which this object was created.</span>
          </span>
          <span data-ttu-id="31a63-122">Wenn das Objekt in Microsoft Excel erstellt wurde, gibt diese Eigenschaft die Zeichenfolge XCEL zurück, dies entspricht die hexadezimale Zahl 5843454 c ist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-122">If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C.</span>
          </span>
          <span data-ttu-id="31a63-123">Read-only <see cref="T:Microsoft.Office.Interop.Excel.XlCreator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-123">Read-only <see cref="T:Microsoft.Office.Interop.Excel.XlCreator" />.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="31a63-124">
            <para>Die <b>Creator</b> -Eigenschaft wurde in Microsoft Excel für den Macintosh verwendet werden, in dem jede Anwendung einen Erstellercode aus vier Zeichen verfügt über entwickelt. Microsoft Excel verfügt beispielsweise über den erstellten Code XCEL.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-124">
              <para>The <b>Creator</b> property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code. For example, Microsoft Excel has the creator code XCEL.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Validation.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(117)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="31a63-125">Löscht das Objekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-125">Deletes the object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorMessage">
      <MemberSignature Language="C#" Value="public string ErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorMessage" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.ErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Property ErrorMessage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorMessage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1609)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1609)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1609)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-p108">Gibt die Fehlermeldung zur Validierung zurück oder legt sie fest. <b>String</b>-Wert mit Lese-/Schreibzugriff.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-p108">Returns or sets the data validation error message. Read/write <b>String</b>.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorTitle">
      <MemberSignature Language="C#" Value="public string ErrorTitle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorTitle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.ErrorTitle" />
      <MemberSignature Language="VB.NET" Value="Public Property ErrorTitle As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorTitle { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1610)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1610)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1610)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-p109">Gibt den Titel des Dialogfelds zu Fehlern bei der Datenüberprüfung zurück oder legt ihn fest. <b>String</b>-Wert mit Lese-/Schreibzugriff.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-p109">Returns or sets the title of the data-validation error dialog box. Read/write <b>String</b>.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Formula1">
      <MemberSignature Language="C#" Value="public string Formula1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Formula1" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.Formula1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Formula1 As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Formula1 { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1579)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1579)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-130">Gibt den Wert oder ein Ausdruck, der das bedingte Format oder Daten Validierung zugeordnet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-130">Returns the value or expression associated with the conditional format or data validation.</span>
          </span>
          <span data-ttu-id="31a63-131">Hierbei kann es sich um einen konstanten Wert, einen String-Wert, ein Zellbezug oder eine Formel sein.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-131">Can be a constant value, a string value, a cell reference, or a formula.</span>
          </span>
          <span data-ttu-id="31a63-132">Schreibgeschützter <b>String</b>-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-132">Read-only <b>String</b>.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Formula2">
      <MemberSignature Language="C#" Value="public string Formula2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Formula2" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.Formula2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Formula2 As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Formula2 { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1580)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1580)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-133">Gibt den Wert oder ein Ausdruck, der zweite Teil des eine bedingte Format oder Daten Validierung zugeordnet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-133">Returns the value or expression associated with the second part of a conditional format or data validation.</span>
          </span>
          <span data-ttu-id="31a63-134">Schreibgeschützter <b>String</b>-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-134">Read-only <b>String</b>.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="31a63-135">
            <para>Ist diese Eigenschaft nur, wenn die Daten Validierung bedingte format verwendet <see cref="P:Microsoft.Office.Interop.Excel.Validation.Operator" /> -Eigenschaft ist <b>XlBetween</b> oder <b>XlNotBetween</b>. Es kann sein, einen konstanten Wert, einen String-Wert, ein Zellbezug oder eine Formel.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-135">
              <para>This property is used only when the data validation conditional format <see cref="P:Microsoft.Office.Interop.Excel.Validation.Operator" /> property is <b>xlBetween</b> or <b>xlNotBetween</b>. It can be a constant value, a string value, a cell reference, or a formula.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreBlank">
      <MemberSignature Language="C#" Value="public bool IgnoreBlank { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreBlank" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.IgnoreBlank" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreBlank As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreBlank { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1606)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1606)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1606)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-p112">
            <b>True</b>, wenn leere Werte durch die Validierung des Bereichs erlaubt sind. <b>Boolean</b>-Wert mit Lese-/Schreibzugriff.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-p112">
              <b>True</b> if blank values are permitted by the range data validation. Read/write <b>Boolean</b>.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="31a63-138">
            <para>Wenn die <b>IgnoreBlank</b> -Eigenschaft auf <b>True</b>festgelegt ist, Zellendaten als gültig betrachtet, wenn die Zelle leer ist, oder wenn eine Zelle, die durch entweder die <see cref="P:Microsoft.Office.Interop.Excel.ListDataFormat.MinNumber" /> oder <see cref="P:Microsoft.Office.Interop.Excel.ListDataFormat.MaxNumber" /> -Eigenschaft ist leer.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-138">
              <para>If the <b>IgnoreBlank</b> property is <b>True</b>, cell data is considered valid if the cell is blank, or if a cell referenced by either the <see cref="P:Microsoft.Office.Interop.Excel.ListDataFormat.MinNumber" /> or <see cref="P:Microsoft.Office.Interop.Excel.ListDataFormat.MaxNumber" /> property is blank.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IMEMode">
      <MemberSignature Language="C#" Value="public int IMEMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IMEMode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.IMEMode" />
      <MemberSignature Language="VB.NET" Value="Public Property IMEMode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IMEMode { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1607)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1607)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1607)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-139">Gibt zurück oder legt die Beschreibung der japanischen Eingaberegeln fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-139">Returns or sets the description of the Japanese input rules.</span>
          </span>
          <span data-ttu-id="31a63-140">Kann eine der der <see cref="T:Microsoft.Office.Interop.Excel.XlIMEMode" /> Konstanten.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-140">Can be one of the <see cref="T:Microsoft.Office.Interop.Excel.XlIMEMode" /> constants.</span>
          </span>
          <span data-ttu-id="31a63-141">Lese-/Schreibzugriff <b>Integer</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-141">Read/write <b>Integer</b>.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="31a63-142">
            <para>Beachten, dass diese Eigenschaft nur, wenn japanische sprachunterstützung installiert und aktiviert wurde festgelegt werden kann.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-142">
              <para>Note that this property can be set only when Japanese language support has been installed and selected.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InCellDropdown">
      <MemberSignature Language="C#" Value="public bool InCellDropdown { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InCellDropdown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.InCellDropdown" />
      <MemberSignature Language="VB.NET" Value="Public Property InCellDropdown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InCellDropdown { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1608)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1608)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1608)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-p114">
            <b>True</b>, wenn die Validierung ein Dropdown-Listenfeld mit gültigen Werten anzeigt. <b>Boolean</b>-Wert mit Lese-/Schreibzugriff.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-p114">
              <b>True</b> if data validation displays a drop-down list that contains acceptable values. Read/write <b>Boolean</b>.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="31a63-145">
            <para>Diese Eigenschaft wird ignoriert, wenn die Gültigkeitstyp nicht <b>um XlValidateList</b>handelt.</para>
            <para>Verwendung der <paramref name="Minimum" /> -Argument der der <see cref="M:Microsoft.Office.Interop.Excel.Validation.Add(Microsoft.Office.Interop.Excel.XlDVType,System.Object,System.Object,System.Object,System.Object)" /> oder <see cref="M:Microsoft.Office.Interop.Excel.Validation.Modify(System.Object,System.Object,System.Object,System.Object,System.Object)" /> -Methode des der <see cref="T:Microsoft.Office.Interop.Excel.Validation" /> Objekts, um den Bereich anzugeben, die gültige Daten enthält.</para>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-145">
              <para>This property is ignored if the validation type isn’t <b>xlValidateList</b>.</para>
              <para>Use the <paramref name="Minimum" /> argument of the <see cref="M:Microsoft.Office.Interop.Excel.Validation.Add(Microsoft.Office.Interop.Excel.XlDVType,System.Object,System.Object,System.Object,System.Object)" /> or <see cref="M:Microsoft.Office.Interop.Excel.Validation.Modify(System.Object,System.Object,System.Object,System.Object,System.Object)" /> method of the <see cref="T:Microsoft.Office.Interop.Excel.Validation" /> object to specify the range that contains valid data.</para>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputMessage">
      <MemberSignature Language="C#" Value="public string InputMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InputMessage" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.InputMessage" />
      <MemberSignature Language="VB.NET" Value="Public Property InputMessage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InputMessage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1611)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1611)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1611)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-p115">Gibt die Eingabemeldung der Validierung zurück oder legt sie fest. <b>String</b>-Wert mit Lese-/Schreibzugriff.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-p115">Returns or sets the data validation input message. Read/write <b>String</b>.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputTitle">
      <MemberSignature Language="C#" Value="public string InputTitle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InputTitle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.InputTitle" />
      <MemberSignature Language="VB.NET" Value="Public Property InputTitle As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InputTitle { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1612)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1612)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1612)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-p116">Gibt den Titel des Dialogfelds zur Eingabe der Gültigkeitsprüfung zurück oder legt ihn fest. <b>String</b>-Wert mit Lese-/Schreibzugriff.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-p116">Returns or sets the title of the data-validation input dialog box. Read/write <b>String</b>.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modify">
      <MemberSignature Language="C#" Value="public void Modify (object Type, object AlertStyle, object Operator, object Formula1, object Formula2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Modify([in]object Type, [in]object AlertStyle, [in]object Operator, [in]object Formula1, [in]object Formula2) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Validation.Modify(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Modify (Optional Type As Object, Optional AlertStyle As Object, Optional Operator As Object, Optional Formula1 As Object, Optional Formula2 As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1581)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="System.Object" />
        <Parameter Name="AlertStyle" Type="System.Object" />
        <Parameter Name="Operator" Type="System.Object" />
        <Parameter Name="Formula1" Type="System.Object" />
        <Parameter Name="Formula2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">
          <span data-ttu-id="31a63-150">Erforderliche <see cref="T:Microsoft.Office.Interop.Excel.XlDVType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-150">Required <see cref="T:Microsoft.Office.Interop.Excel.XlDVType" />.</span>
          </span>
          <span data-ttu-id="31a63-151">Der Überprüfungstyp.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-151">The validation type.</span>
          </span>
        </param>
        <param name="AlertStyle">
          <span data-ttu-id="31a63-152">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlDVAlertStyle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-152">Optional <see cref="T:Microsoft.Office.Interop.Excel.XlDVAlertStyle" />.</span>
          </span>
          <span data-ttu-id="31a63-153">Der Stil der Überprüfungswarnung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-153">The validation alert style.</span>
          </span>
        </param>
        <param name="Operator">
          <span data-ttu-id="31a63-154">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionOperator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-154">Optional <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionOperator" />.</span>
          </span>
          <span data-ttu-id="31a63-155">Der Operator für die Datenüberprüfung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-155">The data validation operator.</span>
          </span>
        </param>
        <param name="Formula1">
          <span data-ttu-id="31a63-156">Optionales- <b>Objekt</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-156">Optional <b>Object</b>.</span>
          </span>
          <span data-ttu-id="31a63-157">Der erste Teil der Datenüberprüfungsgleichung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-157">The first part of the data validation equation.</span>
          </span>
        </param>
        <param name="Formula2">
          <span data-ttu-id="31a63-158">Optionales- <b>Objekt</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-158">Optional <b>Object</b>.</span>
          </span>
          <span data-ttu-id="31a63-159">Im zweiten Teil der datenüberprüfung, wenn <paramref name="Operator" /> handelt es sich <b>um XlBetween</b> oder <b>XlNotBetween</b> (andernfalls wird dieses Argument ignoriert).</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-159">The second part of the data validation when <paramref name="Operator" /> is <b>xlBetween</b> or <b>xlNotBetween</b> (otherwise, this argument is ignored).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="31a63-160">Ändert die Datenüberprüfung für einen Bereich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-160">Modifies data validation for a range.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="31a63-161">
            <para>Die <b>Modify</b> -Methode erfordert, abhängig vom Gültigkeitstyp, verschiedene Argumente, wie in der folgenden Tabelle dargestellt.</para>
            <list type="table">
              <item>
                <term>
                  <b>XlInputOnly</b>
                </term>
                <description>
                  <paramref name="AlertStyle" />, <paramref name="Formula1" />, und <paramref name="Formula2" /> werden nicht verwendet.</description>
              </item>
              <item>
                <term>
                  <b>XlValidateCustom</b>
                </term>
                <description>
                  <paramref name="Formula1" /> ist erforderlich; <paramref name="Formula2" /> wird ignoriert. <paramref name="Formula1" /> muss einen Ausdruck, der <b>true,</b> Wenn die Dateneingabe gültig ist und <b>False</b> ausgewertet wird, wenn die Dateneingabe ungültig ist enthalten.</description>
              </item>
              <item>
                <term>
                  <b>um XlValidateList</b>
                </term>
                <description>
                  <paramref name="Formula1" /> ist erforderlich; <paramref name="Formula2" /> wird ignoriert. <paramref name="Formula1" /> muss eine durch Trennzeichen getrennte Liste von Werten oder einen Verweis auf die Liste ein Arbeitsblatt enthalten.</description>
              </item>
              <item>
                <term>
                  <b>XlValidateDate</b>, <b>XlValidateDecimal</b>, <b>XlValidateTextLength</b>, <b>XlValidateTime</b>, oder <b>XlValidateWholeNumber</b></term>
                <description>
                  <paramref name="Formula1" /> oder <paramref name="Formula2" />, oder beide müssen angegeben werden.</description>
              </item>
            </list>
            <para></para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-161">
              <para>The <b>Modify</b> method requires different arguments, depending on the validation type, as shown in the following table.</para>
              <list type="table">
                <item>
                  <term>
                    <b>xlInputOnly</b>
                  </term>
                  <description>
                    <paramref name="AlertStyle" />, <paramref name="Formula1" />, and <paramref name="Formula2" /> are not used.</description>
                </item>
                <item>
                  <term>
                    <b>xlValidateCustom</b>
                  </term>
                  <description>
                    <paramref name="Formula1" /> is required; <paramref name="Formula2" /> is ignored. <paramref name="Formula1" /> must contain an expression that evaluates to <b>True</b> when data entry is valid and <b>False</b> when data entry is invalid.</description>
                </item>
                <item>
                  <term>
                    <b>xlValidateList</b>
                  </term>
                  <description>
                    <paramref name="Formula1" /> is required; <paramref name="Formula2" /> is ignored. <paramref name="Formula1" /> must contain either a comma-delimited list of values or a worksheet reference to the list.</description>
                </item>
                <item>
                  <term>
                    <b>xlValidateDate</b>, <b>xlValidateDecimal</b>, <b>xlValidateTextLength</b>, <b>xlValidateTime</b>, or <b>xlValidateWholeNumber</b></term>
                  <description>
                    <paramref name="Formula1" /> or <paramref name="Formula2" />, or both, must be specified.</description>
                </item>
              </list>
              <para></para>
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Operator">
      <MemberSignature Language="C#" Value="public int Operator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Operator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.Operator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Operator As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Operator { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(797)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(797)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-162">Gibt den Operator für das bedingte Format oder Daten Validierung zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-162">Returns the operator for the conditional format or data validation.</span>
          </span>
          <span data-ttu-id="31a63-163">Schreibgeschützter <b>Integer</b>-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-163">Read-only <b>Integer</b>.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-p123">Gibt das übergeordnete Objekt für das angegebene Objekt zurück. Schreibgeschützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-p123">Returns the parent object for the specified object. Read-only.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowError">
      <MemberSignature Language="C#" Value="public bool ShowError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.ShowError" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowError { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1613)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1613)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1613)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-p124">
            <b>True</b>, falls die Fehlermeldung der Datenüberprüfung immer angezeigt wird, wenn der Benutzer ungültige Daten eingibt. <b>Boolean</b>-Wert mit Lese-/Schreibzugriff.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-p124">
              <b>True</b> if the data validation error message will be displayed whenever the user enters invalid data. Read/write <b>Boolean</b>.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowInput">
      <MemberSignature Language="C#" Value="public bool ShowInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowInput" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.ShowInput" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowInput { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1614)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1614)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1614)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-p125">
            <b>True</b>, falls die Eingabemeldung der Datenüberprüfung immer angezeigt wird, wenn der Benutzer eine Zelle im Datenüberprüfungsbereich markiert. <b>Boolean</b>-Wert mit Lese-/Schreibzugriff.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-p125">
              <b>True</b> if the data validation input message will be displayed whenever the user selects a cell in the data validation range. Read/write <b>Boolean</b>.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public int Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Type" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Type { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(108)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(108)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-170">Gibt die Überprüfung des Datentyps für einen Bereich zurück.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-170">Returns data type validation for a range.</span>
          </span>
          <span data-ttu-id="31a63-171">Nur-Lese- <b>Ganzzahl</b> , die eine der Konstanten der sein können <see cref="T:Microsoft.Office.Interop.Excel.XlDVType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-171">Read-only <b>Integer</b> that can be one of the constants of <see cref="T:Microsoft.Office.Interop.Excel.XlDVType" />.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public bool Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Value" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Validation.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Value { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="31a63-172">
            <b>True,</b> Wenn alle Gültigkeitskriterien erfüllt werden (d. h., wenn der Bereich gültige Daten enthält).</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-172">
              <b>True</b> if all the validation criteria are met (that is, if the range contains valid data).</span>
          </span>
          <span data-ttu-id="31a63-173">Schreibgeschützter <b>Boolean</b>-Wert.</span>
          <span class="sxs-lookup">
            <span data-stu-id="31a63-173">Read-only <b>Boolean</b>.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>