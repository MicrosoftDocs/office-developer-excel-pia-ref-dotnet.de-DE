<Type Name="Range" FullName="Microsoft.Office.Interop.Excel.Range">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e87541caefc40cd684f69da1a8301eb9348e7fbc" />
    <Meta Name="ms.sourcegitcommit" Value="e7d3480b6ad64431c29c74a1b422c662de0b511d" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20584966" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface Range : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract Range implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.Range" />
  <TypeSignature Language="VB.NET" Value="Public Interface Range&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class Range : System::Collections::IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00020846-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine Zelle, eine Zeile, eine Spalte, eine Auswahl von Zellen aus einem oder mehreren zusammenhängenden Zellblöcken oder einen 3D-Bereich dar.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="_Default">
      <MemberSignature Language="C#" Value="public object this[object RowIndex, object ColumnIndex] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object _Default(object, object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range._Default(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property _Default(Optional RowIndex As Object, Optional ColumnIndex As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^, System::Object ^] { System::Object ^ get(System::Object ^ RowIndex, System::Object ^ ColumnIndex); void set(System::Object ^ RowIndex, System::Object ^ ColumnIndex, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowIndex" Type="System.Object" />
        <Parameter Name="ColumnIndex" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowIndex">To be added.</param>
        <param name="ColumnIndex">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_PasteSpecial">
      <MemberSignature Language="C#" Value="public object _PasteSpecial (Microsoft.Office.Interop.Excel.XlPasteType Paste = Microsoft.Office.Interop.Excel.XlPasteType.xlPasteAll, Microsoft.Office.Interop.Excel.XlPasteSpecialOperation Operation = Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationNone, object SkipBlanks, object Transpose);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _PasteSpecial([in]valuetype Microsoft.Office.Interop.Excel.XlPasteType Paste, [in]valuetype Microsoft.Office.Interop.Excel.XlPasteSpecialOperation Operation, [in]object SkipBlanks, [in]object Transpose) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range._PasteSpecial(Microsoft.Office.Interop.Excel.XlPasteType,Microsoft.Office.Interop.Excel.XlPasteSpecialOperation,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _PasteSpecial (Optional Paste As XlPasteType = Microsoft.Office.Interop.Excel.XlPasteType.xlPasteAll, Optional Operation As XlPasteSpecialOperation = Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationNone, Optional SkipBlanks As Object, Optional Transpose As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1027)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Paste" Type="Microsoft.Office.Interop.Excel.XlPasteType" />
        <Parameter Name="Operation" Type="Microsoft.Office.Interop.Excel.XlPasteSpecialOperation" />
        <Parameter Name="SkipBlanks" Type="System.Object" />
        <Parameter Name="Transpose" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Paste">To be added.</param>
        <param name="Operation">To be added.</param>
        <param name="SkipBlanks">To be added.</param>
        <param name="Transpose">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_PrintOut">
      <MemberSignature Language="C#" Value="public object _PrintOut (object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _PrintOut([in]object From, [in]object To, [in]object Copies, [in]object Preview, [in]object ActivePrinter, [in]object PrintToFile, [in]object Collate) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range._PrintOut(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _PrintOut (Optional From As Object, Optional To As Object, Optional Copies As Object, Optional Preview As Object, Optional ActivePrinter As Object, Optional PrintToFile As Object, Optional Collate As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(905)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="From" Type="System.Object" />
        <Parameter Name="To" Type="System.Object" />
        <Parameter Name="Copies" Type="System.Object" />
        <Parameter Name="Preview" Type="System.Object" />
        <Parameter Name="ActivePrinter" Type="System.Object" />
        <Parameter Name="PrintToFile" Type="System.Object" />
        <Parameter Name="Collate" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="From">To be added.</param>
        <param name="To">To be added.</param>
        <param name="Copies">To be added.</param>
        <param name="Preview">To be added.</param>
        <param name="ActivePrinter">To be added.</param>
        <param name="PrintToFile">To be added.</param>
        <param name="Collate">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public object Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Activate() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Activate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(304)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktiviert eine einzelne Zelle, die innerhalb der aktuellen Markierung sein muss.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Um einen Zellbereich ausgewählt haben, verwenden Sie die <see cref="M:Microsoft.Office.Interop.Excel.Range.Select" /> Methode.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddComment">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Comment AddComment (object Text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Comment AddComment([in]object Text) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AddComment(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddComment (Optional Text As Object) As Comment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1389)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Comment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Text" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Text">Optionales- <b>Objekt</b>. Der Kommentartext.</param>
        <summary>Fügt dem Bereich einen Kommentar hinzu.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIndent">
      <MemberSignature Language="C#" Value="public object AddIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AddIndent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.AddIndent" />
      <MemberSignature Language="VB.NET" Value="Public Property AddIndent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AddIndent { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1063)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1063)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1063)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob Text automatisch eingezogen wird, wenn die Ausrichtung des Texts in einer Zelle auf gleiche Verteilung, horizontal oder vertikal festgelegt ist.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft gibt <b>True</b> zurück, wenn Text automatisch eingezogen wird, wenn die Ausrichtung des Texts in einer Zelle auf gleiche Verteilung, horizontal oder vertikal festgelegt ist.</para>
          <para>Textausrichtung auf gleiche Verteilung, festgelegt lassen sich die <see cref="P:Microsoft.Office.Interop.Excel.Range.VerticalAlignment" /> -Eigenschaft auf <b>XlVAlignDistributed</b> beim der Wert der der <see cref="P:Microsoft.Office.Interop.Excel.Range.Orientation" /> -Eigenschaft ist <b>XlVertical</b>, und Sie können festlegen der <see cref="P:Microsoft.Office.Interop.Excel.Range.HorizontalAlignment" /> -Eigenschaft auf <b>XlHAlignDistributed</b> beim der Wert der Orientation-Eigenschaft ist <b>XlHorizontal</b>.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public string Address[object RowAbsolute, object ColumnAbsolute, Microsoft.Office.Interop.Excel.XlReferenceStyle ReferenceStyle = Microsoft.Office.Interop.Excel.XlReferenceStyle.xlA1, object External, object RelativeTo] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Address(object, object, valuetype Microsoft.Office.Interop.Excel.XlReferenceStyle, object, object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Address(System.Object,System.Object,Microsoft.Office.Interop.Excel.XlReferenceStyle,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address(Optional RowAbsolute As Object, Optional ColumnAbsolute As Object, Optional ReferenceStyle As XlReferenceStyle = Microsoft.Office.Interop.Excel.XlReferenceStyle.xlA1, Optional External As Object, Optional RelativeTo As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Address[System::Object ^, System::Object ^, Microsoft::Office::Interop::Excel::XlReferenceStyle, System::Object ^, System::Object ^] { System::String ^ get(System::Object ^ RowAbsolute, System::Object ^ ColumnAbsolute, Microsoft::Office::Interop::Excel::XlReferenceStyle ReferenceStyle, System::Object ^ External, System::Object ^ RelativeTo); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(236)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(236)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowAbsolute" Type="System.Object" />
        <Parameter Name="ColumnAbsolute" Type="System.Object" />
        <Parameter Name="ReferenceStyle" Type="Microsoft.Office.Interop.Excel.XlReferenceStyle" />
        <Parameter Name="External" Type="System.Object" />
        <Parameter Name="RelativeTo" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowAbsolute">Optionales- <b>Objekt</b>. <b>True</b> , wenn den Zeile Teil des Verweises als absoluter Bezug zurückgegeben. Der Standardwert ist <b>True</b>.</param>
        <param name="ColumnAbsolute">Optionales- <b>Objekt</b>. <b>True</b> , wenn den Spaltenteil des Verweises als absoluter Bezug zurückgegeben. Der Standardwert ist <b>True</b>.</param>
        <param name="ReferenceStyle">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlReferenceStyle" />.</param>
        <param name="External">Optionales- <b>Objekt</b>. <b>True</b> , wenn ein externer Bezug zurückgegeben; <b>False</b> , wenn ein lokaler Bezug zurückgegeben. Der Standardwert lautet <b>False</b>.</param>
        <param name="RelativeTo">Optionales- <b>Objekt</b>. Wenn <paramref name="RowAbsolute" /> und <paramref name="ColumnAbsolute" /> , <b>False</b>, und <paramref name="ReferenceStyle" /><b>xlR1C1</b>, müssen Sie einen Ausgangspunkt für den relativen Bezug enthalten. Dieses Argument ist ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das den Anfangspunkt definiert.</param>
        <summary>Gibt den Bereichsbezug zurück.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Enthält der Bezug mehrere Zellen, <paramref name="RowAbsolute" /> und <paramref name="ColumnAbsolute" /> gelten für alle Zeilen und Spalten.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddressLocal">
      <MemberSignature Language="C#" Value="public string AddressLocal[object RowAbsolute, object ColumnAbsolute, Microsoft.Office.Interop.Excel.XlReferenceStyle ReferenceStyle = Microsoft.Office.Interop.Excel.XlReferenceStyle.xlA1, object External, object RelativeTo] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AddressLocal(object, object, valuetype Microsoft.Office.Interop.Excel.XlReferenceStyle, object, object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.AddressLocal(System.Object,System.Object,Microsoft.Office.Interop.Excel.XlReferenceStyle,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddressLocal(Optional RowAbsolute As Object, Optional ColumnAbsolute As Object, Optional ReferenceStyle As XlReferenceStyle = Microsoft.Office.Interop.Excel.XlReferenceStyle.xlA1, Optional External As Object, Optional RelativeTo As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AddressLocal[System::Object ^, System::Object ^, Microsoft::Office::Interop::Excel::XlReferenceStyle, System::Object ^, System::Object ^] { System::String ^ get(System::Object ^ RowAbsolute, System::Object ^ ColumnAbsolute, Microsoft::Office::Interop::Excel::XlReferenceStyle ReferenceStyle, System::Object ^ External, System::Object ^ RelativeTo); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(437)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(437)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowAbsolute" Type="System.Object" />
        <Parameter Name="ColumnAbsolute" Type="System.Object" />
        <Parameter Name="ReferenceStyle" Type="Microsoft.Office.Interop.Excel.XlReferenceStyle" />
        <Parameter Name="External" Type="System.Object" />
        <Parameter Name="RelativeTo" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowAbsolute">Optionales- <b>Objekt</b>. <b>True</b> , wenn den Zeile Teil des Verweises als absoluter Bezug zurückgegeben. Der Standardwert ist <b>True</b>.</param>
        <param name="ColumnAbsolute">Optionales- <b>Objekt</b>. <b>True</b> , wenn den Spaltenteil des Verweises als absoluter Bezug zurückgegeben. Der Standardwert ist <b>True</b>.</param>
        <param name="ReferenceStyle">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlReferenceStyle" />.</param>
        <param name="External">Optionales- <b>Objekt</b>. <b>True</b> , wenn ein externer Bezug zurückgegeben. <b>False</b> , wenn ein lokaler Bezug zurückgegeben. Der Standardwert lautet <b>False</b>.</param>
        <param name="RelativeTo">Optionales- <b>Objekt</b>. Wenn <paramref name="RowAbsolute" /> und <paramref name="ColumnAbsolute" /> sind auf <b>False</b> festgelegt und <paramref name="ReferenceStyle" /> ist festgelegt auf <b>xlR1C1</b>, müssen Sie einen Ausgangspunkt für den relativen Bezug enthalten. Dieses Argument ist ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das den Ausgangspunkt für den Verweis definiert.</param>
        <summary>Gibt den Bereichsbezug für den angegebenen Bereich in der Sprache des Benutzers zurück.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Enthält der Bezug mehrere Zellen, <paramref name="RowAbsolute" /> und <paramref name="ColumnAbsolute" /> gelten für alle Zeilen und alle Spalten fest.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancedFilter">
      <MemberSignature Language="C#" Value="public object AdvancedFilter (Microsoft.Office.Interop.Excel.XlFilterAction Action, object CriteriaRange, object CopyToRange, object Unique);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AdvancedFilter([in]valuetype Microsoft.Office.Interop.Excel.XlFilterAction Action, [in]object CriteriaRange, [in]object CopyToRange, [in]object Unique) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AdvancedFilter(Microsoft.Office.Interop.Excel.XlFilterAction,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancedFilter (Action As XlFilterAction, Optional CriteriaRange As Object, Optional CopyToRange As Object, Optional Unique As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(876)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Action" Type="Microsoft.Office.Interop.Excel.XlFilterAction" />
        <Parameter Name="CriteriaRange" Type="System.Object" />
        <Parameter Name="CopyToRange" Type="System.Object" />
        <Parameter Name="Unique" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Action">Erforderliche <see cref="T:Microsoft.Office.Interop.Excel.XlFilterAction" />. Kann eine der folgenden <b>XlFilterAction</b> -Konstanten sein:<b>den Wert XlFilterCopy</b><b>XlFilterInPlace</b></param>
        <param name="CriteriaRange">Optionales- <b>Objekt</b>. Der Kriterienbereich. Wenn dieses Argument nicht angegeben ist, sind keine Kriterien.</param>
        <param name="CopyToRange">Optionales- <b>Objekt</b>. Der Zielbereich für die kopierten Zeilen, wenn Aktion <paramref name="xlFilterCopy" />. Andernfalls wird dieses Argument ignoriert.</param>
        <param name="Unique">Optionales- <b>Objekt</b>. <b>True</b> , wenn keine Duplikate filtern; <b>False</b> , wenn alle Datensätze zu filtern, die die Kriterien erfüllen. Der Standardwert lautet <b>False</b>.</param>
        <summary>Filtert oder kopiert Daten aus einer Liste basierend auf einem Kriterienbereich.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn die ursprüngliche Auswahl eine einzelne Zelle ist, wird diese Zelle aktuellen Bereich verwendet.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllocateChanges">
      <MemberSignature Language="C#" Value="public void AllocateChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AllocateChanges() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AllocateChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllocateChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllocateChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2855)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt einen Rückschreibevorgang für alle bearbeiteten Zellen in einem auf einer OLAP-Datenquelle basierenden Bereich aus.</summary>
        <remarks>
          <para>Die <see cref="M:Microsoft.Office.Interop.Excel.Range.AllocateChanges" /> -Methode wird eine UPDATE CUBE-Anweisung für alle seit der letzte Änderungen übernehmen Vorgang zugesichert wurde im Bereich vorgenommenen Änderungen ausgeführt. Diese Methode generiert einen Laufzeitfehler, wenn sie für einen Bereich basierend auf einer nicht-OLAP-Datenquelle ausgeführt wird.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowEdit">
      <MemberSignature Language="C#" Value="public bool AllowEdit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowEdit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.AllowEdit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowEdit { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2020)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2020)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob der Bereich in einem geschützten Arbeitsblatt bearbeitet werden kann.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft gibt <b>True</b> zurück, wenn der Bereich in einem geschützten Arbeitsblatt bearbeitet werden kann.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Application" /> -Objekt, das die Anwendung Microsoft Excel darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyNames">
      <MemberSignature Language="C#" Value="public object ApplyNames (object Names, object IgnoreRelativeAbsolute, object UseRowColumnNames, object OmitColumn, object OmitRow, Microsoft.Office.Interop.Excel.XlApplyNamesOrder Order = Microsoft.Office.Interop.Excel.XlApplyNamesOrder.xlRowThenColumn, object AppendLast);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ApplyNames([in]object Names, [in]object IgnoreRelativeAbsolute, [in]object UseRowColumnNames, [in]object OmitColumn, [in]object OmitRow, [in]valuetype Microsoft.Office.Interop.Excel.XlApplyNamesOrder Order, [in]object AppendLast) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ApplyNames(System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlApplyNamesOrder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyNames (Optional Names As Object, Optional IgnoreRelativeAbsolute As Object, Optional UseRowColumnNames As Object, Optional OmitColumn As Object, Optional OmitRow As Object, Optional Order As XlApplyNamesOrder = Microsoft.Office.Interop.Excel.XlApplyNamesOrder.xlRowThenColumn, Optional AppendLast As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(441)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Names" Type="System.Object" />
        <Parameter Name="IgnoreRelativeAbsolute" Type="System.Object" />
        <Parameter Name="UseRowColumnNames" Type="System.Object" />
        <Parameter Name="OmitColumn" Type="System.Object" />
        <Parameter Name="OmitRow" Type="System.Object" />
        <Parameter Name="Order" Type="Microsoft.Office.Interop.Excel.XlApplyNamesOrder" />
        <Parameter Name="AppendLast" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Names">Optionales- <b>Objekt</b>. Ein Array mit den Namen angewendet werden soll. Wenn dieses Argument ausgelassen wird, werden alle Namen auf dem Blatt auf den Bereich angewendet.</param>
        <param name="IgnoreRelativeAbsolute">Optionales- <b>Objekt</b>. <b>True,</b> ersetzen Sie Verweise mit Namen, entweder den Namen oder Bezüge unabhängig von den Verweis. <b>False</b> , wenn absolute Bezüge nur durch absolute Namen, relative Bezüge nur durch relative Namen und gemischte Bezüge nur durch kombinierte Namen ersetzt. Der Standardwert ist <b>True</b>.</param>
        <param name="UseRowColumnNames">Optionales- <b>Objekt</b>. <b>True,</b> verwenden Sie die Namen der Zeilen- und Bereiche, die den angegebenen Bereich enthalten, sofern Namen für diesen Bereich nicht gefunden werden können. <b>False</b> , wenn ignorieren die <paramref name="OmitColumn" /> und <paramref name="OmitRow" /> Argumente. Der Standardwert ist <b>True</b>.</param>
        <param name="OmitColumn">Optionales- <b>Objekt</b>. <b>True</b> , wenn der gesamte Bezug mit dem zeilenorientierten Namen ersetzt. Der Name spaltenorientierten kann weggelassen werden, nur, wenn die referenzierte Zelle befindet sich in derselben Spalte wie die Formel und innerhalb eines zeilenorientierten benannten Bereich ist. Der Standardwert ist <b>True</b>.</param>
        <param name="OmitRow">Optionales- <b>Objekt</b>. <b>True</b> , wenn der gesamte Bezug mit dem spaltenorientierten Namen ersetzt. Der Name zeilenorientierten kann weggelassen werden, nur, wenn die referenzierte Zelle befindet sich in derselben Zeile wie die Formel und innerhalb eines spaltenorientierten benannten Bereich ist. Der Standardwert ist <b>True</b>.</param>
        <param name="Order">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlApplyNamesOrder" />. Legt fest, welcher Bereichsname zuerst aufgeführt wird, wenn ein Zellbezug durch einen zeilenorientierten und spaltenorientierten Bereichsnamen ersetzt wird. Kann eine der folgenden <b>XlApplyNamesOrder</b> -Konstanten sein:<b>XlColumnThenRow</b><b>XlRowThenColumn</b><paramref name="default" /></param>
        <param name="AppendLast">Optionales- <b>Objekt</b>. <b>True</b> , wenn die Definitionen der Namen in ersetzt <paramref name="Names" /> , und Ersetzen Sie auch die Definitionen der den Nachnamen, die definiert wurden. <b>False</b> , wenn die Definitionen der Namen in ersetzt <paramref name="Names" /> nur. Der Standardwert lautet <b>False</b>.</param>
        <summary>Weist den Zellen im angegebenen Bereich Namen zu.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Sie können die <b>Array</b> -Funktion zum Erstellen der Liste der Namen für die <paramref name="Names" /> Argument.</para>
          <para>Wenn Sie den Namen auf das gesamte Arbeitsblatt anwenden möchten, verwenden Sie Cells.ApplyNames.</para>
          <para>Sie können nicht "Rückgängig" Namen; um Namen zu löschen, verwenden Sie die <see cref="M:Microsoft.Office.Interop.Excel.Name.Delete" /> -Methode.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyOutlineStyles">
      <MemberSignature Language="C#" Value="public object ApplyOutlineStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ApplyOutlineStyles() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ApplyOutlineStyles" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyOutlineStyles () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ApplyOutlineStyles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(448)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wendet auf den angegebenen Bereich eine Formatvorlage für eine Gliederung an.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Areas">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Areas Areas { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Areas Areas" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Areas" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Areas As Areas" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Areas ^ Areas { Microsoft::Office::Interop::Excel::Areas ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(568)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(568)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Areas</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Areas" /> -Auflistung, die alle Bereiche in einer Mehrfachauswahl Auswahl darstellt.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <b>Areas</b> -Eigenschaft gibt für eine einzelne Auswahl, eine Auflistung, die ein Objekt enthält, den ursprünglichen <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekt selbst. Für eine mehrfachmarkierung gibt die <b>Areas</b> -Eigenschaft eine Auflistung, die ein Objekt für jeden ausgewählten Bereich enthält.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoComplete">
      <MemberSignature Language="C#" Value="public string AutoComplete (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string AutoComplete([in]string String) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AutoComplete(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ AutoComplete(System::String ^ String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1185)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">
          <b>String</b> erforderlich. Die Zeichenfolge, die vervollständigt werden soll.</param>
        <summary>Gibt eine AutoVervollständigen-Übereinstimmung aus der Liste zurück.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn keine AutoVervollständigen-Übereinstimmung vorhanden ist oder wenn mehr als ein Eintrag in der Liste die Zeichenfolge für die Durchführung entspricht, gibt diese Methode eine leere Zeichenfolge zurückgegeben.</para>
          <para>Diese Methode funktioniert auch, wenn AutoComplete deaktiviert ist.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFill">
      <MemberSignature Language="C#" Value="public object AutoFill (Microsoft.Office.Interop.Excel.Range Destination, Microsoft.Office.Interop.Excel.XlAutoFillType Type = Microsoft.Office.Interop.Excel.XlAutoFillType.xlFillDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoFill([in]class Microsoft.Office.Interop.Excel.Range Destination, [in]valuetype Microsoft.Office.Interop.Excel.XlAutoFillType Type) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AutoFill(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.XlAutoFillType)" />
      <MemberSignature Language="VB.NET" Value="Public Function AutoFill (Destination As Range, Optional Type As XlAutoFillType = Microsoft.Office.Interop.Excel.XlAutoFillType.xlFillDefault) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(449)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Destination" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlAutoFillType" />
      </Parameters>
      <Docs>
        <param name="Destination">Erforderliche <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekt. Die Zellen gefüllt werden soll. Das Ziel muss den Quellbereich einschließen.</param>
        <param name="Type">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlAutoFillType" />. Gibt den Fülltyp an. Kann eine der folgenden <b>XlAutoFillType</b> -Konstanten sein:<b>XlFillDays</b><b>XlFillFormats</b><b>XlFillSeries</b><b>XlFillWeekdays</b><b>XlGrowthTrend</b><b>XlFillCopy</b><b>XlFillDefault</b><paramref name="default" /><b>XlFillMonths </b><b>XlFillValues</b><b>XlFillYears</b><b>XlLinearTrend</b>Wenn dieses Argument ausgelassen oder <b>XlFillDefault</b> angegeben wird, Microsoft Excel den am besten geeigneten Füllungstyp wählt basierend auf dem Quellbereich.</param>
        <summary>Füllt die Zellen in einem angegebenen Bereich automatisch aus.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFilter">
      <MemberSignature Language="C#" Value="public object AutoFilter (object Field, object Criteria1, Microsoft.Office.Interop.Excel.XlAutoFilterOperator Operator = Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlAnd, object Criteria2, object VisibleDropDown);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoFilter([in]object Field, [in]object Criteria1, [in]valuetype Microsoft.Office.Interop.Excel.XlAutoFilterOperator Operator, [in]object Criteria2, [in]object VisibleDropDown) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AutoFilter(System.Object,System.Object,Microsoft.Office.Interop.Excel.XlAutoFilterOperator,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AutoFilter (Optional Field As Object, Optional Criteria1 As Object, Optional Operator As XlAutoFilterOperator = Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlAnd, Optional Criteria2 As Object, Optional VisibleDropDown As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(793)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Field" Type="System.Object" />
        <Parameter Name="Criteria1" Type="System.Object" />
        <Parameter Name="Operator" Type="Microsoft.Office.Interop.Excel.XlAutoFilterOperator" />
        <Parameter Name="Criteria2" Type="System.Object" />
        <Parameter Name="VisibleDropDown" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Field">Optionales- <b>Objekt</b>. Der Ganzzahloffset des Felds, auf dem der Filter basieren soll (von der linken Seite der Liste ist das Feld ganz links eins).</param>
        <param name="Criteria1">Optionales- <b>Objekt</b>. Die Kriterien (eine Zeichenfolge, z. B. "101"). Verwenden Sie "=", um leere Felder zu suchen, oder verwenden Sie "&lt;&gt;" nicht leere Felder zu suchen. Wenn dieses Argument ausgelassen wird, ist die Kriterien <b>Alle</b>. Wenn <paramref name="Operator" /> ist <b>xlTop10Items</b>, <paramref name="Criteria1" /> gibt die Anzahl der Elemente (beispielsweise "10").</param>
        <param name="Operator">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlAutoFilterOperator" />. Kann eine der folgenden <b>XlAutoFilterOperator</b> -Konstanten sein:<b>XlAnd</b><paramref name="default" /><b>xlBottom10Items</b><b>xlBottom10Percent</b><b>XlOr</b><b>xlTop10Items</b><b>xlTop10Percent</b>Verwendung <b>XlAnd</b> und <b>XlOr</b> mit <paramref name="Criteria1" /> und <paramref name="Criteria2" /> um Kriterien.</param>
        <param name="Criteria2">Optionales- <b>Objekt</b>. Das zweite Kriterium (eine Zeichenfolge). Wird mit Criteria1 und Operator verwendet, um Kriterien.</param>
        <param name="VisibleDropDown">Optionales- <b>Objekt</b>. <b>True</b> , wenn den AutoFilter-Dropdownpfeil für das gefilterte Feld angezeigt; <b>False</b> , den AutoFilter-Dropdownpfeil für das gefilterte Feld ausgeblendet. Standardmäßig auf <b>"true"</b> .</param>
        <summary>Filtert eine Liste mithilfe von AutoFilter.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Übernehmen die <see cref="P:Microsoft.Office.Interop.Excel._Worksheet.AutoFilter" /> -Eigenschaft auf eine <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> zurückzugebenden-Objekts ein <see cref="T:Microsoft.Office.Interop.Excel.AutoFilter" /> Objekt.</para>
          <para>Wenn Sie alle Argumente auslassen, wechselt diese Methode einfach die Anzeige der Dropdownpfeile von AutoFilter im angegebenen Bereich.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFit">
      <MemberSignature Language="C#" Value="public object AutoFit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoFit() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AutoFit" />
      <MemberSignature Language="VB.NET" Value="Public Function AutoFit () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AutoFit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(237)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ändert die Breite der Spalten oder die Höhe der Zeilen in dem jeweiligen Bereich, um sie optimal anzupassen.</summary>
        <returns>To be added.</returns>
        <remarks>Der Ausdruck <para>muss eine Zeile oder einen Bereich von Zeilen, oder eine Spalte oder einen Bereich von Spalten an. Andernfalls wird diese Methode generiert einen Fehler.</para><para>Eine Einheit der Spaltenbreite entspricht der Breite eines Zeichens in der Standardformatvorlage.</para><para /></remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFormat">
      <MemberSignature Language="C#" Value="public object AutoFormat (Microsoft.Office.Interop.Excel.XlRangeAutoFormat Format = Microsoft.Office.Interop.Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic1, object Number, object Font, object Alignment, object Border, object Pattern, object Width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoFormat([in]valuetype Microsoft.Office.Interop.Excel.XlRangeAutoFormat Format, [in]object Number, [in]object Font, [in]object Alignment, [in]object Border, [in]object Pattern, [in]object Width) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AutoFormat(Microsoft.Office.Interop.Excel.XlRangeAutoFormat,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AutoFormat (Optional Format As XlRangeAutoFormat = Microsoft.Office.Interop.Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic1, Optional Number As Object, Optional Font As Object, Optional Alignment As Object, Optional Border As Object, Optional Pattern As Object, Optional Width As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(114)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Format" Type="Microsoft.Office.Interop.Excel.XlRangeAutoFormat" />
        <Parameter Name="Number" Type="System.Object" />
        <Parameter Name="Font" Type="System.Object" />
        <Parameter Name="Alignment" Type="System.Object" />
        <Parameter Name="Border" Type="System.Object" />
        <Parameter Name="Pattern" Type="System.Object" />
        <Parameter Name="Width" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Format">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlRangeAutoFormat" />. Die angegebene AutoFormat.Some der <b>XlRangeAutoFormat</b> -Konstanten möglicherweise nicht zur Verfügung, abhängig von der Unterstützung der Sprache (Englisch USA), beispielsweise), die Sie ausgewählt oder installiert haben.</param>
        <param name="Number">Optionales- <b>Objekt</b>. <b>True</b> , wenn Zahl in AutoFormat formatiert. Der Standardwert ist <b>True.</b></param>
        <param name="Font">Optionales- <b>Objekt</b>. <b>True</b> , wenn Schriftartformate in AutoFormat einzuschließen. Der Standardwert ist <b>True</b>.</param>
        <param name="Alignment">Optionales- <b>Objekt</b>. <b>True</b> , wenn Ausrichtung in AutoFormat einzuschließen. Der Standardwert ist <b>True</b>.</param>
        <param name="Border">Optionales- <b>Objekt</b>. <b>True</b> , wenn Rahmenformate in AutoFormat einzuschließen. Der Standardwert ist <b>True</b>.</param>
        <param name="Pattern">Optionales- <b>Objekt</b>. <b>True</b> , wenn Musterformate in AutoFormat einzuschließen. Der Standardwert ist <b>True</b>.</param>
        <param name="Width">Optionales- <b>Objekt</b>. <b>True</b> , wenn Spalte Spaltenbreite und Zeilenhöhe in AutoFormat einzuschließen. Der Standardwert ist <b>True</b>.</param>
        <summary>Automatisch formatiert den angegebenen Bereich, die Verwendung eines vordefinierten Formats ein.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn der Bereich eine einzelne Zelle ist, formatiert diese Methode auch den aktiven Bereich, der die Zelle umgibt.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoOutline">
      <MemberSignature Language="C#" Value="public object AutoOutline ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoOutline() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AutoOutline" />
      <MemberSignature Language="VB.NET" Value="Public Function AutoOutline () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AutoOutline();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1036)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt automatisch eine Gliederung für den angegebenen Bereich.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn der Bereich eine einzelne Zelle ist, erstellt Microsoft Excel eine Gliederung für das gesamte Blatt. Die neue Kontur ersetzt alle vorhandenen Konturen.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderAround">
      <MemberSignature Language="C#" Value="public object BorderAround (object LineStyle, Microsoft.Office.Interop.Excel.XlBorderWeight Weight = Microsoft.Office.Interop.Excel.XlBorderWeight.xlThin, Microsoft.Office.Interop.Excel.XlColorIndex ColorIndex = Microsoft.Office.Interop.Excel.XlColorIndex.xlColorIndexAutomatic, object Color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BorderAround([in]object LineStyle, [in]valuetype Microsoft.Office.Interop.Excel.XlBorderWeight Weight, [in]valuetype Microsoft.Office.Interop.Excel.XlColorIndex ColorIndex, [in]object Color) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.BorderAround(System.Object,Microsoft.Office.Interop.Excel.XlBorderWeight,Microsoft.Office.Interop.Excel.XlColorIndex,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BorderAround (Optional LineStyle As Object, Optional Weight As XlBorderWeight = Microsoft.Office.Interop.Excel.XlBorderWeight.xlThin, Optional ColorIndex As XlColorIndex = Microsoft.Office.Interop.Excel.XlColorIndex.xlColorIndexAutomatic, Optional Color As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1067)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="LineStyle" Type="System.Object" />
        <Parameter Name="Weight" Type="Microsoft.Office.Interop.Excel.XlBorderWeight" />
        <Parameter Name="ColorIndex" Type="Microsoft.Office.Interop.Excel.XlColorIndex" />
        <Parameter Name="Color" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="LineStyle">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlLineStyle" />. Die Linienart für den Rahmen. Kann eine der folgenden <b>XlLineStyle</b> -Konstanten sein:<b>XlContinuous</b><paramref name="default" /><b>XlDash</b><b>XlDashDot</b><b>XlDashDotDot</b><b>XlDot</b><b>XlDouble</b><b>XlLineStlyeNone</b><b>XlSlantDashDot</b><b> XlLineStlyeNone</b></param>
        <param name="Weight">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlBorderWeight" />. Die Rahmenstärke. Kann eine der folgenden <b>XlBorderWeight</b> -Konstanten sein:<b>XlHairline</b><b>XlMedium</b><b>XlThick</b><b>XlThin</b><paramref name="default" /></param>
        <param name="ColorIndex">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlColorIndex" />. Die Rahmenfarbe als Farbindex in der aktuellen Farbpalette oder als <b>XlColorIndex</b> -Konstante. Kann eine der folgenden <b>XlColorIndex</b> -Konstanten sein:<b>XlColorIndexAutomatic</b><paramref name="default" /><b>XlColorIndexNone</b></param>
        <param name="Color">Optionales- <b>Objekt</b>. Die Rahmenfarbe als RGB-Wert (Rot, Grün, Blau).</param>
        <summary>Fügt einen Rahmen auf einen Bereich hinzu und legt die <see cref="P:Microsoft.Office.Interop.Excel.Border.Color" />, <see cref="P:Microsoft.Office.Interop.Excel.Border.LineStyle" />, und <see cref="P:Microsoft.Office.Interop.Excel.Border.Weight" /> Eigenschaften für den neuen Rahmen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Geben Sie entweder <paramref name="ColorIndex" /> oder <paramref name="Color" />, jedoch nicht beide.</para> Sie können angeben, entweder 
          <para><paramref name="LineStyle" /> oder <paramref name="Weight" />, jedoch nicht beide. Wenn Sie ein Argument nicht angeben, verwendet Microsoft Excel die Standardlinienart und Weight.</para><para>Diese Methode wird der gesamte Bereich, ohne ihn auszufüllen. Um Ränder aller Zellen zu bestimmen, legen Sie die <see cref="P:Microsoft.Office.Interop.Excel.Borders.Color" />, <see cref="P:Microsoft.Office.Interop.Excel.Borders.LineStyle" />, und <see cref="P:Microsoft.Office.Interop.Excel.Borders.Weight" /> Eigenschaften für die Borders-Auflistung. Sie müssen die <b>LineStyle</b> -Eigenschaft auf <b>XlLineStyleNone</b> für alle Zellen im Bereich festlegen, um die Rahmen zu löschen,.</para><para /></remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderAround2">
      <MemberSignature Language="C#" Value="public object BorderAround2 (object LineStyle, Microsoft.Office.Interop.Excel.XlBorderWeight Weight = Microsoft.Office.Interop.Excel.XlBorderWeight.xlThin, Microsoft.Office.Interop.Excel.XlColorIndex ColorIndex = Microsoft.Office.Interop.Excel.XlColorIndex.xlColorIndexAutomatic, object Color, object ThemeColor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BorderAround2([in]object LineStyle, [in]valuetype Microsoft.Office.Interop.Excel.XlBorderWeight Weight, [in]valuetype Microsoft.Office.Interop.Excel.XlColorIndex ColorIndex, [in]object Color, [in]object ThemeColor) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.BorderAround2(System.Object,Microsoft.Office.Interop.Excel.XlBorderWeight,Microsoft.Office.Interop.Excel.XlColorIndex,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BorderAround2 (Optional LineStyle As Object, Optional Weight As XlBorderWeight = Microsoft.Office.Interop.Excel.XlBorderWeight.xlThin, Optional ColorIndex As XlColorIndex = Microsoft.Office.Interop.Excel.XlColorIndex.xlColorIndexAutomatic, Optional Color As Object, Optional ThemeColor As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2771)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="LineStyle" Type="System.Object" />
        <Parameter Name="Weight" Type="Microsoft.Office.Interop.Excel.XlBorderWeight" />
        <Parameter Name="ColorIndex" Type="Microsoft.Office.Interop.Excel.XlColorIndex" />
        <Parameter Name="Color" Type="System.Object" />
        <Parameter Name="ThemeColor" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="LineStyle">To be added.</param>
        <param name="Weight">To be added.</param>
        <param name="ColorIndex">To be added.</param>
        <param name="Color">To be added.</param>
        <param name="ThemeColor">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>Gibt <see cref="T:System.Object" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Borders">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Borders Borders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Borders Borders" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Borders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Borders As Borders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Borders ^ Borders { Microsoft::Office::Interop::Excel::Borders ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(435)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(435)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Borders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Borders" /> -Auflistung, die den Rahmen einer Formatvorlage oder eines Zellbereichs (einschließlich eines Bereichs, der als Teil eines bedingten Formats definiert) darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Calculate">
      <MemberSignature Language="C#" Value="public object Calculate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Calculate() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Calculate" />
      <MemberSignature Language="VB.NET" Value="Public Function Calculate () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Calculate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(279)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Berechnet einen angegebenen Zellbereich in einem Arbeitsblatt.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateRowMajorOrder">
      <MemberSignature Language="C#" Value="public object CalculateRowMajorOrder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CalculateRowMajorOrder() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.CalculateRowMajorOrder" />
      <MemberSignature Language="VB.NET" Value="Public Function CalculateRowMajorOrder () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CalculateRowMajorOrder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2364)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Berechnet einen angegebenen Zellbereich.</summary>
        <returns>
          <b>Objekt</b>
        </returns>
        <remarks>
          <para>Die <see cref="M:Microsoft.Office.Interop.Excel.Range.CalculateRowMajorOrder" /> -Methode berechnet die angegebenen Bereich Bereich--Zelle in der linken oberen Ecke auf die rechts unten im zeilenweise. Dies ist dem Prozess, der von Excel 2000 und früheren Versionen zur Berechnung eines Bereichs verwendet wird.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cells">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Cells { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Cells" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Cells" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Cells As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Cells { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(238)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(238)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <b>Range</b> -Objekt, das die Zellen im angegebenen Bereich darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Characters">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Characters Characters[object Start, object Length] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Characters Characters(object, object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Characters(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Characters(Optional Start As Object, Optional Length As Object) As Characters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Characters ^ Characters[System::Object ^, System::Object ^] { Microsoft::Office::Interop::Excel::Characters ^ get(System::Object ^ Start, System::Object ^ Length); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(603)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(603)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Characters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Object" />
        <Parameter Name="Length" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Start">Optionales- <b>Objekt</b>. Das erste Zeichen, das zurückgegeben werden. Wenn dieses Argument entweder 1 oder nicht angegeben ist, gibt diese Eigenschaft einen Bereich von Zeichen, beginnend mit dem ersten Zeichen.</param>
        <param name="Length">Optionales- <b>Objekt</b>. Die Anzahl der zurückzugebenden Zeichen. Wenn dieses Argument ausgelassen wird, gibt diese Eigenschaft den Rest der Zeichenfolge zurück (Alles hinter der <paramref name="Start" /> Zeichen).</param>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Characters" /> -Objekt, das einen Bereich von Zeichen im Text Objekt darstellt.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Das <b>Characters</b> -Objekt Zeichen innerhalb einer Zeichenfolge formatieren können.</para>
          <para>Das <b>Characters</b> -Objekt ist keine Auflistung.</para>
          <para>Für die <see cref="T:Microsoft.Office.Interop.Excel.TextFrame" /> -Objekt <see cref="M:Microsoft.Office.Interop.Excel.TextFrame.Characters(System.Object,System.Object)" /> ist eine Methode.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckSpelling">
      <MemberSignature Language="C#" Value="public object CheckSpelling (object CustomDictionary, object IgnoreUppercase, object AlwaysSuggest, object SpellLang);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CheckSpelling([in]object CustomDictionary, [in]object IgnoreUppercase, [in]object AlwaysSuggest, [in]object SpellLang) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.CheckSpelling(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSpelling (Optional CustomDictionary As Object, Optional IgnoreUppercase As Object, Optional AlwaysSuggest As Object, Optional SpellLang As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(505)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CustomDictionary" Type="System.Object" />
        <Parameter Name="IgnoreUppercase" Type="System.Object" />
        <Parameter Name="AlwaysSuggest" Type="System.Object" />
        <Parameter Name="SpellLang" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="CustomDictionary">Optionales- <b>Objekt</b>. Eine Zeichenfolge, die angibt, der Dateiname des Benutzerwörterbuchs untersucht werden, wenn das Wort im Hauptwörterbuch nicht gefunden wird. Wenn dieses Argument ausgelassen wird, wird das derzeit angegebene Wörterbuch verwendet.</param>
        <param name="IgnoreUppercase">Optionales- <b>Objekt</b>. <b>True</b> , damit Microsoft Excel Wörter, die vollständig in Großbuchstaben ignoriert werden sollen. <b>False</b> , wenn Microsoft Excel-Kontrollkästchen Wörter, die vollständig in Großbuchstaben sind. Wenn dieses Argument ausgelassen wird, wird die aktuelle Einstellung verwendet werden.</param>
        <param name="AlwaysSuggest">Optionales- <b>Objekt</b>. <b>True</b> , damit Microsoft Excel eine Liste der alternativen Schreibweisen angezeigt wird, wenn eine falsche Schreibweise gefunden wird. <b>False</b> , wenn Microsoft Excel anhalten, während Sie die korrekte Schreibweise eingeben. Wenn dieses Argument ausgelassen wird, wird die aktuelle Einstellung verwendet werden.</param>
        <param name="SpellLang">Optionales- <b>Objekt</b>. Die Sprache des verwendeten Wörterbuchs an. Kann eine der <b>MsoLanguageID</b> -Werte verwendet werden, indem die <see cref="P:Microsoft.Office.Core.LanguageSettings.LanguageID(Microsoft.Office.Core.MsoAppLanguageID)" /> Eigenschaft.</param>
        <summary>Prüft die Rechtschreibung eines Objekts.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Dieser Methode wird kein Wert zurückgegeben; Microsoft Excel zeigt das Dialogfeld Rechtschreibung.</para>
          <para>Um Kopfzeilen, Fußzeilen sowie Objekte auf einem Arbeitsblatt überprüfen möchten, verwenden Sie diese Methode auf eine <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> -Objekt.</para>
          <para>, Um nur Zellen und Hinweise überprüfen möchten, verwenden Sie diese Methode mit dem zurückgegebenen Objekt die <see cref="P:Microsoft.Office.Interop.Excel.Range.Cells" /> -Eigenschaft.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public object Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clear() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(111)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht das gesamte Objekt.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearComments">
      <MemberSignature Language="C#" Value="public void ClearComments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearComments() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ClearComments" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearComments ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearComments();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1390)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht alle Zellkommentare aus dem angegebenen Bereich.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearContents">
      <MemberSignature Language="C#" Value="public object ClearContents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ClearContents() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ClearContents" />
      <MemberSignature Language="VB.NET" Value="Public Function ClearContents () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ClearContents();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(113)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht die Formeln aus dem Bereich.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Diese Methode die Daten aus einem Diagramm gelöscht, während die Formatierung.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearFormats">
      <MemberSignature Language="C#" Value="public object ClearFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ClearFormats() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ClearFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function ClearFormats () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ClearFormats();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(112)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht die Formatierung des Objekts.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearHyperlinks">
      <MemberSignature Language="C#" Value="public void ClearHyperlinks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearHyperlinks() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ClearHyperlinks" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearHyperlinks ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearHyperlinks();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2854)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt alle Hyperlinks aus dem angegebenen Bereich.</summary>
        <remarks>
          <para>Aufrufen der <see cref="M:Microsoft.Office.Interop.Excel.Range.ClearHyperlinks" /> -Methode für den angegebenen Bereich ist entspricht der Verwendung des Befehls Hyperlinks löschen aus der Clear Dropdown-Liste im Abschnitt Bearbeiten der Registerkarte Start. Nur Hyperlinks werden entfernt; Alle anderen Zelle Inhalte, wie Text und die Formatierung bleibt davon unberührt.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearNotes">
      <MemberSignature Language="C#" Value="public object ClearNotes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ClearNotes() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ClearNotes" />
      <MemberSignature Language="VB.NET" Value="Public Function ClearNotes () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ClearNotes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(239)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löscht Notizen und Audionotizen aus allen Zellen des angegebenen Bereichs.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOutline">
      <MemberSignature Language="C#" Value="public object ClearOutline ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ClearOutline() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ClearOutline" />
      <MemberSignature Language="VB.NET" Value="Public Function ClearOutline () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ClearOutline();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1037)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt die Gliederung für den angegebenen Bereich.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public int Column { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Column" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Column" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Column As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Column { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(240)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(240)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die Anzahl der ersten Spalte im ersten Bereich des angegebenen Bereichs zurück.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Spalte A gibt 1 zurück, Spalte B dem Wert 2 usw..</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnDifferences">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range ColumnDifferences (object Comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range ColumnDifferences([in]object Comparison) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ColumnDifferences(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ColumnDifferences (Comparison As Object) As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Office::Interop::Excel::Range ^ ColumnDifferences(System::Object ^ Comparison);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(510)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Comparison" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Comparison">
          <b>Objekt</b>erforderlich. Eine einzelne Zelle, die mit dem angegebenen Bereich zu vergleichen ist.</param>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das alle Zellen darstellt, deren Inhalt sich von der Vergleichszelle in jeder Spalte unterscheidet.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Columns" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Columns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Columns As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Columns { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(241)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(241)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das die Spalten im angegebenen Bereich darstellt.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Wenn Sie auf ein <b>Range</b> -Objekt angewendet wird, die eine mehrfachmarkierung ist, gibt diese Eigenschaft Spalten aus dem ersten Bereich des Bereichs. Das <b>Range</b> -Objekt besitzt zwei Bereiche beispielsweise – a1: B2 und C3: D4 – der <see cref="P:Microsoft.Office.Interop.Excel.Range.Count" /> -Eigenschaft gibt 2, nicht 4 zurück. Testen Sie zur Verwendung dieser Eigenschaft für einen Bereich, die möglicherweise eine mehrfachmarkierung enthalten, die <see cref="P:Microsoft.Office.Interop.Excel.Areas.Count" /> -Eigenschaft des der <see cref="T:Microsoft.Office.Interop.Excel.Areas" /> Objekts, um festzustellen, ob der Bereich mehr als einem Bereich enthält. Wenn dies der Fall ist, müssen Sie jeden Bereich im Bereich durchlaufen.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidth">
      <MemberSignature Language="C#" Value="public object ColumnWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ColumnWidth" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.ColumnWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnWidth As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ColumnWidth { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(242)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(242)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(242)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zurückgeben oder festlegen die Breite aller Spalten im angegebenen Bereich.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Eine Einheit der Spaltenbreite entspricht der Breite eines Zeichens in der Standardformatvorlage. Für proportionale Schriftarten wird die Breite des Zeichens 0 (null) verwendet.</para>
          <para>Verwendung der <see cref="P:Microsoft.Office.Interop.Excel.Range.Width" /> -Eigenschaft auf die Breite einer Spalte in Punkt zurückgeben.</para>
          <para>, Wenn alle Spalten in dem Bereich dieselbe Breite aufweisen, gibt die <b>ColumnWidth</b> -Eigenschaft die Breite an. Wenn die Spalten im Bereich verschiedene Breiten haben, gibt diese Eigenschaft <b>Null</b>zurück.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Comment Comment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Comment Comment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Comment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comment As Comment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Comment ^ Comment { Microsoft::Office::Interop::Excel::Comment ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(910)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(910)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Comment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Comment" /> -Objekt, das den mit der Zelle in der oberen linken Ecke des Bereichs verknüpft ist Kommentar darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Consolidate">
      <MemberSignature Language="C#" Value="public object Consolidate (object Sources, object Function, object TopRow, object LeftColumn, object CreateLinks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Consolidate([in]object Sources, [in]object Function, [in]object TopRow, [in]object LeftColumn, [in]object CreateLinks) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Consolidate(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Consolidate (Optional Sources As Object, Optional Function As Object, Optional TopRow As Object, Optional LeftColumn As Object, Optional CreateLinks As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(482)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Sources" Type="System.Object" />
        <Parameter Name="Function" Type="System.Object" />
        <Parameter Name="TopRow" Type="System.Object" />
        <Parameter Name="LeftColumn" Type="System.Object" />
        <Parameter Name="CreateLinks" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Sources">Optionales- <b>Objekt</b>. Die Quellen der Konsolidierung als ein Array von Zeichenfolgen, die Verweis in der Z1S1-Schreibweise. Die Bezüge müssen den vollständigen Pfad der Blätter konsolidiert werden enthalten.</param>
        <param name="Function">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlConsolidationFunction" />. Kann eine der folgenden <b>XlConsilidationFunction</b> -Konstanten sein:<b>XlAverage</b><paramref name="default" /><b>XlCount</b><b>XlCountNums</b><b>XlMax</b><b>XlMin</b><b>XlProduct</b><b>XlStDev</b><b>XlStDevP</b><b>XlSum</b><b>xlVar</b><b>xlVarP</b></param>
        <param name="TopRow">Optionales- <b>Objekt</b>. <b>True</b> , wenn Daten basierend auf Spaltentitel in der obersten Zeile der Konsolidierungsbereiche konsolidieren; <b>False</b> , wenn Daten nach Position konsolidieren. Der Standardwert lautet <b>False</b>.</param>
        <param name="LeftColumn">Optionales- <b>Objekt</b>. <b>True</b> , wenn Daten basierend auf den Zeilentitel in der linken Spalte der Konsolidierungsbereiche konsolidieren; <b>False</b> , wenn Daten nach Position konsolidieren. Der Standardwert lautet <b>False</b>.</param>
        <param name="CreateLinks">Optionales- <b>Objekt</b>. <b>True</b> , wenn die Konsolidierung Verwendung Arbeitsblattlinks; <b>False</b> , wenn die Konsolidierung die Daten kopiert. Der Standardwert lautet <b>False</b>.</param>
        <summary>Konsolidiert Daten aus mehreren Bereichen auf mehreren Arbeitsblättern in einem einzigen Bereich in einem einzelnen Arbeitsblatt.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public object Copy (object Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Copy([in]object Destination) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Copy(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy (Optional Destination As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(551)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Destination">Optionales- <b>Objekt</b>. Gibt den neuen Bereich an, dem in der angegebene Bereich kopiert wird. Wenn dieses Argument ausgelassen wird, kopiert Microsoft Excel den Bereich in die Zwischenablage.</param>
        <summary>Kopiert den Bereich in den angegebenen Bereich oder in die Zwischenablage.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyFromRecordset">
      <MemberSignature Language="C#" Value="public int CopyFromRecordset (object Data, object MaxRows, object MaxColumns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CopyFromRecordset([in]object Data, [in]object MaxRows, [in]object MaxColumns) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.CopyFromRecordset(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyFromRecordset (Data As Object, Optional MaxRows As Object, Optional MaxColumns As Object) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1152)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Data" Type="System.Object" />
        <Parameter Name="MaxRows" Type="System.Object" />
        <Parameter Name="MaxColumns" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Data">
          <b>Objekt</b>erforderlich. <b>Recordset</b> -Objekts, das in den Bereich kopiert.</param>
        <param name="MaxRows">Optionales- <b>Objekt</b>. Die maximale Anzahl von Datensätzen, die in das Arbeitsblatt kopieren. Wenn dieses Argument ausgelassen wird, werden alle Datensätze im <b>Recordset</b> -Objekt kopiert.</param>
        <param name="MaxColumns">Optionales- <b>Objekt</b>. Die maximale Anzahl der Felder, die in das Arbeitsblatt kopiert. Wenn dieses Argument ausgelassen wird, werden alle Felder im <b>Recordset</b> -Objekt kopiert.</param>
        <summary>Kopiert den Inhalt eines ADO oder DAO- <b>Recordset</b> -Objekts in ein Arbeitsblatt, beginnend bei der oberen linken Ecke des angegebenen Bereichs.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Diese Methode schlägt fehl, wenn das <b>Recordset</b> -Objekt Felder mit OLE-Objekten enthält,.</para>
          <para>Beginnt kopieren an der aktuellen Zeile des <b>Recordset</b> -Objekts. Nach Abschluss des Kopiervorgangs ist die <b>EOF</b> -Eigenschaft des <b>Recordset</b> -Objekts <b>True</b>.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyPicture">
      <MemberSignature Language="C#" Value="public object CopyPicture (Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, Microsoft.Office.Interop.Excel.XlCopyPictureFormat Format = Microsoft.Office.Interop.Excel.XlCopyPictureFormat.xlPicture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CopyPicture([in]valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance, [in]valuetype Microsoft.Office.Interop.Excel.XlCopyPictureFormat Format) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.CopyPicture(Microsoft.Office.Interop.Excel.XlPictureAppearance,Microsoft.Office.Interop.Excel.XlCopyPictureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyPicture (Optional Appearance As XlPictureAppearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, Optional Format As XlCopyPictureFormat = Microsoft.Office.Interop.Excel.XlCopyPictureFormat.xlPicture) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(213)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Appearance" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="Format" Type="Microsoft.Office.Interop.Excel.XlCopyPictureFormat" />
      </Parameters>
      <Docs>
        <param name="Appearance">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlPictureAppearance" />. Gibt an, wie das Bild kopiert werden soll. Kann eine der folgenden <b>XlCopyPictureFormat</b> -Konstanten sein:<b>XlBitmap</b><b>XlPicture</b><paramref name="default" /></param>
        <param name="Format">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlCopyPictureFormat" />. Das Format des Bilds. Kann eine der folgenden <b>XlPictureAppearance</b> -Konstanten sein:<b>XlPrinter</b>. Das Bild wird so kopiert, wie es aussieht, wenn es gedruckt wird. <b>xlScreen</b><paramref name="default" />. Das Bild wird so kopiert, dass es seiner Darstellung auf dem Bildschirm so weit wie möglich entspricht.</param>
        <summary>Kopiert das ausgewählte Objekt als Bild in die Zwischenablage.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(118)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(118)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die Anzahl der Objekte in der Auflistung zurück.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountLarge">
      <MemberSignature Language="C#" Value="public object CountLarge { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CountLarge" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.CountLarge" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CountLarge As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CountLarge { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2499)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2499)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ermittelt den größten Wert in einem bestimmten Wertebereich. Schreibgeschützt.</summary>
        <value>
          <b>Objekt</b>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNames">
      <MemberSignature Language="C#" Value="public object CreateNames (object Top, object Left, object Bottom, object Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateNames([in]object Top, [in]object Left, [in]object Bottom, [in]object Right) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.CreateNames(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateNames (Optional Top As Object, Optional Left As Object, Optional Bottom As Object, Optional Right As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(457)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Top" Type="System.Object" />
        <Parameter Name="Left" Type="System.Object" />
        <Parameter Name="Bottom" Type="System.Object" />
        <Parameter Name="Right" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Top">Optionales- <b>Objekt</b>. <b>True,</b> um Namen mithilfe von Beschriftungen in der obersten Zeile zu erstellen. Der Standardwert lautet <b>False</b>.</param>
        <param name="Left">Optionales- <b>Objekt</b>. <b>True</b> , wenn Bezeichnungen in der linken Spalte mit Namen zu erstellen. Der Standardwert lautet <b>False</b>.</param>
        <param name="Bottom">Optionales- <b>Objekt</b>. <b>True,</b> um Namen mithilfe von Beschriftungen in der unteren Zeile zu erstellen. Der Standardwert lautet <b>False</b>.</param>
        <param name="Right">Optionales- <b>Objekt</b>. <b>True</b> , wenn Bezeichnungen in der rechten Spalte mit Namen zu erstellen. Der Standardwert lautet <b>False</b>.</param>
        <summary>Diese Methode übernimmt Beschriftungen des Arbeitsblatts als Namen für den angegebenen Bereich.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn Sie eine der keinen <paramref name="Top" />, <paramref name="Left" />, <paramref name="Bottom" />, oder <paramref name="Right" />, Microsoft Excel schätzt die Position von Beschriftungen, die entsprechend der Form des angegebenen Bereichs.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePublisher">
      <MemberSignature Language="C#" Value="public object CreatePublisher (object Edition, Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, object ContainsPICT, object ContainsBIFF, object ContainsRTF, object ContainsVALU);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreatePublisher([in]object Edition, [in]valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance, [in]object ContainsPICT, [in]object ContainsBIFF, [in]object ContainsRTF, [in]object ContainsVALU) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.CreatePublisher(System.Object,Microsoft.Office.Interop.Excel.XlPictureAppearance,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreatePublisher (Optional Edition As Object, Optional Appearance As XlPictureAppearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, Optional ContainsPICT As Object, Optional ContainsBIFF As Object, Optional ContainsRTF As Object, Optional ContainsVALU As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(458)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Edition" Type="System.Object" />
        <Parameter Name="Appearance" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="ContainsPICT" Type="System.Object" />
        <Parameter Name="ContainsBIFF" Type="System.Object" />
        <Parameter Name="ContainsRTF" Type="System.Object" />
        <Parameter Name="ContainsVALU" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Edition">Dieser Parameter ist nur für Macintosh gedacht und sollte nicht verwendet werden.</param>
        <param name="Appearance">Dieser Parameter ist nur für Macintosh gedacht und sollte nicht verwendet werden.</param>
        <param name="ContainsPICT">Dieser Parameter ist nur für Macintosh gedacht und sollte nicht verwendet werden.</param>
        <param name="ContainsBIFF">Dieser Parameter ist nur für Macintosh gedacht und sollte nicht verwendet werden.</param>
        <param name="ContainsRTF">Dieser Parameter ist nur für Macintosh gedacht und sollte nicht verwendet werden.</param>
        <param name="ContainsVALU">Dieser Parameter ist nur für Macintosh gedacht und sollte nicht verwendet werden.</param>
        <summary>Sie haben Hilfe zu einem Schlüsselwort nur auf dem Macintosh verwendet wird. Informationen zu diesem Schlüsselwort finden Sie in der Sprachreferenzhilfe von Microsoft Office Macintosh Edition enthalten.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt eine 32-Bit-Ganzzahl, die die Anwendung angibt, in der das Objekt erstellt wurde.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Wenn das angegebene Objekt in Microsoft Excel erstellt wurde, gibt diese Eigenschaft die Zeichenfolge XCEL zurück, die die hexadezimale Zahl 5843454 c entspricht</para>
          <para>Die <b>Creator</b> -Eigenschaft wurde in Microsoft Excel für den Macintosh verwendet werden, in dem jede Anwendung einen Erstellercode aus vier Zeichen verfügt über entwickelt. Microsoft Excel verfügt beispielsweise über den erstellten Code XCEL.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentArray">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range CurrentArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range CurrentArray" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.CurrentArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentArray As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ CurrentArray { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(501)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(501)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wenn die angegebene Zelle Teil einer Arrayformel ist, gibt eine <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das das gesamte Array darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentRegion">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range CurrentRegion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range CurrentRegion" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.CurrentRegion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentRegion As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ CurrentRegion { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(243)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(243)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das den aktuellen Bereich darstellt.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Der aktuelle Bereich ist ein Bereich, der durch eine beliebige Kombination leere Zeilen und leere Spalten begrenzt.</para>
          <para>Diese Eigenschaft eignet sich für zahlreiche Vorgänge, die automatisch erweitern die Auswahl auf den gesamten aktuellen Bereich, wie die <see cref="M:Microsoft.Office.Interop.Excel.Range.AutoFormat(Microsoft.Office.Interop.Excel.XlRangeAutoFormat,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> -Methode.</para>
          <para>Diese Eigenschaft kann nicht in einem geschützten Arbeitsblatt verwendet werden.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cut">
      <MemberSignature Language="C#" Value="public object Cut (object Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Cut([in]object Destination) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Cut(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cut (Optional Destination As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(565)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Destination">Optionales- <b>Objekt</b>. Der Bereich, in dem das Objekt eingefügt werden soll. Wenn dieses Argument ausgelassen wird, wird das Objekt in der Zwischenablage abgelegt.</param>
        <summary>Schneidet das Objekt aus, legt es in die Zwischenablage oder fügt es an einer angegebenen Stelle ein.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Der ausgeschnittene Bereich muss aus angrenzenden Zellen bestehen.</para>
          <para>Können nur eingebettete Diagramme ausgeschnitten werden.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSeries">
      <MemberSignature Language="C#" Value="public object DataSeries (object Rowcol, Microsoft.Office.Interop.Excel.XlDataSeriesType Type = Microsoft.Office.Interop.Excel.XlDataSeriesType.xlDataSeriesLinear, Microsoft.Office.Interop.Excel.XlDataSeriesDate Date = Microsoft.Office.Interop.Excel.XlDataSeriesDate.xlDay, object Step, object Stop, object Trend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DataSeries([in]object Rowcol, [in]valuetype Microsoft.Office.Interop.Excel.XlDataSeriesType Type, [in]valuetype Microsoft.Office.Interop.Excel.XlDataSeriesDate Date, [in]object Step, [in]object Stop, [in]object Trend) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.DataSeries(System.Object,Microsoft.Office.Interop.Excel.XlDataSeriesType,Microsoft.Office.Interop.Excel.XlDataSeriesDate,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DataSeries (Optional Rowcol As Object, Optional Type As XlDataSeriesType = Microsoft.Office.Interop.Excel.XlDataSeriesType.xlDataSeriesLinear, Optional Date As XlDataSeriesDate = Microsoft.Office.Interop.Excel.XlDataSeriesDate.xlDay, Optional Step As Object, Optional Stop As Object, Optional Trend As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(464)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rowcol" Type="System.Object" />
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlDataSeriesType" />
        <Parameter Name="Date" Type="Microsoft.Office.Interop.Excel.XlDataSeriesDate" />
        <Parameter Name="Step" Type="System.Object" />
        <Parameter Name="Stop" Type="System.Object" />
        <Parameter Name="Trend" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Rowcol">Optionales- <b>Objekt</b>. Ist die <b>XlRows</b> oder <b>XlColumns</b> -Konstante, um die Datenreihen in Zeilen oder Spalten, einzugeben. Wenn dieses Argument ausgelassen wird, wird die Größe und die Form des Bereichs verwendet.</param>
        <param name="Type">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlDataSeriesType" />. Kann eine der folgenden <b>XlDataSeriesType</b> -Konstanten sein:<b>XlAutoFill</b><b>XlDataSeriesLinear</b><paramref name="default" /><b>XlChronological</b><b>XlGrowth</b></param>
        <param name="Date">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlDataSeriesDate" />. Wenn das Argument Type <b>XlChronological</b>ist, gibt das Argument <b>Date</b> die Einheit an. Kann eine der folgenden <b>XlDataSeriesDate</b> -Konstanten sein:<b>XlDay</b><paramref name="default" /><b>XlWeekday</b><b>XlMonth</b><b>XlYear</b></param>
        <param name="Step">Optionales- <b>Objekt</b>. Der Schrittwert für die Datenreihe. Der Standardwert ist 1.</param>
        <param name="Stop">Optionales- <b>Objekt</b>. Der Endwert für die Datenreihe. Wenn dieses Argument ausgelassen wird, füllt Microsoft Excel bis zum Ende des Bereichs.</param>
        <param name="Trend">Optionales- <b>Objekt</b>. <b>True,</b> um einen linearen Trend oder exponentiellen Trend zu erstellen. <b>False</b> , eine Reihe von Standarddaten erstellt. Der Standardwert lautet <b>False</b>.</param>
        <summary>Erstellt eine Datenreihe im angegebenen Bereich.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public object Delete (object Shift);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Delete([in]object Shift) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Delete(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (Optional Shift As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(117)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Shift" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Shift">Optionales- <b>Objekt</b>. Gibt an, wie Zellen so verschoben werden, dass sie gelöschte Zellen ersetzen. Kann eine der folgenden <see cref="T:Microsoft.Office.Interop.Excel.XlDeleteShiftDirection" /> Konstanten: <b>XlShiftToLeft</b> oder <b>XlShiftUp</b>. Wenn dieses Argument nicht angegeben ist, wählt Microsoft Excel auf die Form des Bereichs.</param>
        <summary>Löscht das Objekt.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependents">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Dependents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Dependents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Dependents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dependents As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Dependents { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(543)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(543)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das den Bereich, der alle Nachfolgerzellen einer Zelle darstellt.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Dies kann eine Mehrfachauswahl (eine Vereinigung von <b>Range</b> -Objekten) sein, wenn es mehr als eine abhängige.</para>
          <para>
            <b>Dependents</b> -Eigenschaft funktioniert nur für das aktive Blatt und kann keine Remoteverweise.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DialogBox">
      <MemberSignature Language="C#" Value="public object DialogBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DialogBox() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.DialogBox" />
      <MemberSignature Language="VB.NET" Value="Public Function DialogBox () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DialogBox();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(245)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zeigt ein Dialogfeld, das durch eine Dialogfeld-Definitionstabelle in einer Microsoft Excel 4.0-Makrovorlage definiert.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Diese Methode gibt die Nummer des ausgewählten Steuerelements, oder gibt <b>False</b> zurück, wenn der Benutzer auf die Schaltfläche zum Abbrechen klickt.</para>
          <para>Zurückgegebenen <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekt muss auf eine Dialogfelddefinitionstabelle in einer Microsoft Excel 4.0-Makrovorlage verweisen.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectDependents">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range DirectDependents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range DirectDependents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.DirectDependents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DirectDependents As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ DirectDependents { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(545)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(545)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das den Bereich der direkten Nachfolgerzellen einer Zelle darstellt.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Dies kann eine Mehrfachauswahl (eine Vereinigung von <b>Range</b> -Objekten) sein, wenn es mehr als eine abhängige.</para>
          <para>Die <b>Direct Dependents</b> -Eigenschaft funktioniert nur für das aktive Blatt und kann keine Remoteverweise.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectPrecedents">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range DirectPrecedents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range DirectPrecedents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.DirectPrecedents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DirectPrecedents As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ DirectPrecedents { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(546)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(546)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das den Bereich der direkten Vorgängerzellen einer Zelle darstellt.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Die <b>DirectPrecedents</b> -Eigenschaft funktioniert nur für das aktive Blatt und kann keine Remoteverweise nachverfolgen.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dirty">
      <MemberSignature Language="C#" Value="public void Dirty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dirty() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Dirty" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dirty ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dirty();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2014)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bestimmt einen Bereich, der bei der nächsten Neuberechnung erneut berechnet werden soll.</summary>
        <remarks>
          <para>Die <see cref="M:Microsoft.Office.Interop.Excel.Range.Calculate" /> -Methode erzwingt, dass des angegebenen Bereichs neu berechnet werden, für Zellen Microsoft Excel eine benötigte neuberechnung versteht.</para>
          <para>, Wenn die Anwendung im manuellen Berechnungsmodus ist mit der <see cref="M:Microsoft.Office.Interop.Excel.Range.Dirty" /> Methode weist Excel zum Identifizieren der angegebenen Zelle neu berechnet werden. Wenn die Anwendung im Modus automatische Berechnung befindet, wird mithilfe der <b>Dirty</b> -Methode Excel zum Ausführen einer neuberechnung.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscardChanges">
      <MemberSignature Language="C#" Value="public void DiscardChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DiscardChanges() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.DiscardChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub DiscardChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DiscardChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2856)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verwirft alle Änderungen an den bearbeiteten Zellen des Bereichs.</summary>
        <remarks>
          <para>Für einen Bereich basierend auf einer OLAP-Datenquelle diese Methode entfernt alle eingegebenen Werte und Formeln in den Zellen und führt dann einen aktualisieren-Vorgang, um die aktuellen Werte aus der Datenquelle abzurufen. Den Datenwert Quelle festgelegt mit einem Nullverweis (Nothing in Visual Basic) für alle Zellen mit Werten, die bearbeitet werden, und auch führt eine ROLLBACK TRANSACTION-Anweisung für die OLAP-Server. Für Bereiche auf nicht-OLAP-Datenquellen basieren löscht diese Methode einfach alle bearbeitete Zellen.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayFormat">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.DisplayFormat DisplayFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.DisplayFormat DisplayFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.DisplayFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayFormat As DisplayFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::DisplayFormat ^ DisplayFormat { Microsoft::Office::Interop::Excel::DisplayFormat ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(666)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(666)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DisplayFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:Microsoft.Office.Interop.Excel.DisplayFormat" /> -Objekt, das die Anzeigeeinstellungen für den angegebenen Bereich darstellt.</summary>
        <value>Ein <see cref="T:Microsoft.Office.Interop.Excel.DisplayFormat" /> -Objekt, das die Anzeigeeinstellungen für den angegebenen Bereich darstellt.</value>
        <remarks>
          <para>Schreibgeschützt.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditionOptions">
      <MemberSignature Language="C#" Value="public object EditionOptions (Microsoft.Office.Interop.Excel.XlEditionType Type, Microsoft.Office.Interop.Excel.XlEditionOptionsOption Option, object Name, object Reference, Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, Microsoft.Office.Interop.Excel.XlPictureAppearance ChartSize = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, object Format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EditionOptions([in]valuetype Microsoft.Office.Interop.Excel.XlEditionType Type, [in]valuetype Microsoft.Office.Interop.Excel.XlEditionOptionsOption Option, [in]object Name, [in]object Reference, [in]valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance, [in]valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance ChartSize, [in]object Format) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.EditionOptions(Microsoft.Office.Interop.Excel.XlEditionType,Microsoft.Office.Interop.Excel.XlEditionOptionsOption,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlPictureAppearance,Microsoft.Office.Interop.Excel.XlPictureAppearance,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EditionOptions (Type As XlEditionType, Option As XlEditionOptionsOption, Optional Name As Object, Optional Reference As Object, Optional Appearance As XlPictureAppearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, Optional ChartSize As XlPictureAppearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, Optional Format As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1131)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlEditionType" />
        <Parameter Name="Option" Type="Microsoft.Office.Interop.Excel.XlEditionOptionsOption" />
        <Parameter Name="Name" Type="System.Object" />
        <Parameter Name="Reference" Type="System.Object" />
        <Parameter Name="Appearance" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="ChartSize" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="Format" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">Dieser Parameter ist nur für Macintosh gedacht und sollte nicht verwendet werden.</param>
        <param name="Option">Dieser Parameter ist nur für Macintosh gedacht und sollte nicht verwendet werden.</param>
        <param name="Name">Dieser Parameter ist nur für Macintosh gedacht und sollte nicht verwendet werden.</param>
        <param name="Reference">Dieser Parameter ist nur für Macintosh gedacht und sollte nicht verwendet werden.</param>
        <param name="Appearance">Dieser Parameter ist nur für Macintosh gedacht und sollte nicht verwendet werden.</param>
        <param name="ChartSize">Dieser Parameter ist nur für Macintosh gedacht und sollte nicht verwendet werden.</param>
        <param name="Format">Dieser Parameter ist nur für Macintosh gedacht und sollte nicht verwendet werden.</param>
        <summary>Sie haben Hilfe zu einem Schlüsselwort nur auf dem Macintosh verwendet wird. Informationen zu diesem Schlüsselwort finden Sie in der Sprachreferenzhilfe von Microsoft Office Macintosh Edition enthalten.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range End[Microsoft.Office.Interop.Excel.XlDirection Direction] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range End(valuetype Microsoft.Office.Interop.Excel.XlDirection)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.End(Microsoft.Office.Interop.Excel.XlDirection)" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property End(Direction As XlDirection) As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ End[Microsoft::Office::Interop::Excel::XlDirection] { Microsoft::Office::Interop::Excel::Range ^ get(Microsoft::Office::Interop::Excel::XlDirection Direction); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(500)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(500)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Direction" Type="Microsoft.Office.Interop.Excel.XlDirection" />
      </Parameters>
      <Docs>
        <param name="Direction">Erforderliche <see cref="T:Microsoft.Office.Interop.Excel.XlDirection" />. Die Richtung, in die gewechselt werden soll.</param>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das die Zelle am Ende des Bereichs darstellt, die den Quellbereich enthält.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Entspricht dem Drücken von Ende + nach-oben, Ende + nach-unten-Pfeil, Ende + nach-links oder Ende + nach-rechts-Pfeil.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntireColumn">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range EntireColumn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range EntireColumn" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.EntireColumn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntireColumn As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ EntireColumn { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(246)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(246)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das die gesamte Spalte (oder Spalten) darstellt, die den angegebenen Bereich enthält.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntireRow">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range EntireRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range EntireRow" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.EntireRow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntireRow As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ EntireRow { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(247)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(247)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das die gesamte Zeile (oder Zeilen) darstellt, die den angegebenen Bereich enthält.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Errors">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Errors Errors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Errors Errors" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Errors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Errors As Errors" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Errors ^ Errors { Microsoft::Office::Interop::Excel::Errors ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2015)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2015)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Errors</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ermöglicht es dem Benutzer, die Optionen zur fehlerprüfung zuzugreifen.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Referenz der <see cref="T:Microsoft.Office.Interop.Excel.Errors" /> Objekt um eine Liste der Indexwerte anzuzeigen von Optionen zur fehlerprüfung zugeordnet.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportAsFixedFormat">
      <MemberSignature Language="C#" Value="public void ExportAsFixedFormat (Microsoft.Office.Interop.Excel.XlFixedFormatType Type, object Filename, object Quality, object IncludeDocProperties, object IgnorePrintAreas, object From, object To, object OpenAfterPublish, object FixedFormatExtClassPtr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExportAsFixedFormat([in]valuetype Microsoft.Office.Interop.Excel.XlFixedFormatType Type, [in]object Filename, [in]object Quality, [in]object IncludeDocProperties, [in]object IgnorePrintAreas, [in]object From, [in]object To, [in]object OpenAfterPublish, [in]object FixedFormatExtClassPtr) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ExportAsFixedFormat(Microsoft.Office.Interop.Excel.XlFixedFormatType,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExportAsFixedFormat (Type As XlFixedFormatType, Optional Filename As Object, Optional Quality As Object, Optional IncludeDocProperties As Object, Optional IgnorePrintAreas As Object, Optional From As Object, Optional To As Object, Optional OpenAfterPublish As Object, Optional FixedFormatExtClassPtr As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2493)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlFixedFormatType" />
        <Parameter Name="Filename" Type="System.Object" />
        <Parameter Name="Quality" Type="System.Object" />
        <Parameter Name="IncludeDocProperties" Type="System.Object" />
        <Parameter Name="IgnorePrintAreas" Type="System.Object" />
        <Parameter Name="From" Type="System.Object" />
        <Parameter Name="To" Type="System.Object" />
        <Parameter Name="OpenAfterPublish" Type="System.Object" />
        <Parameter Name="FixedFormatExtClassPtr" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">Erforderliche <see cref="T:Microsoft.Office.Interop.Excel.XlFixedFormatType" /> den Typ des Dateiformats exportiert.</param>
        <param name="Filename">Optional- <b>Objekts</b> den Dateinamen der Datei gespeichert werden soll. Sie können einen vollständigen Pfad einschließen, oder short_Excel2007 speichert die Datei im aktuellen Ordner.</param>
        <param name="Quality">Optionales- <b>Objekt</b> in der Regel als formatiert eine <see cref="T:Microsoft.Office.Interop.Excel.XlFixedFormatQuality" />. Gibt die Qualität der veröffentlichten Datei.</param>
        <param name="IncludeDocProperties">Optionales- <b>Objekts</b> festgelegt auf <b>True</b> , um die Dokumenteigenschaften einzufügen; andernfalls <b>False</b>.</param>
        <param name="IgnorePrintAreas">Optionales- <b>Objekt</b> festgelegt auf <b>true fest,</b> um alle festgelegten Druckbereiche beim Veröffentlichen zu ignorieren. andernfalls <b>False</b>.</param>
        <param name="From">Optionales- <b>Objekts</b> die Anzahl der Seiten, für die Veröffentlichung zu starten. Wenn dieses Argument ausgelassen wird, beginnt die Veröffentlichung am Anfang.</param>
        <param name="To">Optional- <b>Objekt</b> die Nummer der letzten Seite zu veröffentlichen. Wenn dieses Argument ausgelassen wird, wird mit der letzten Seite Veröffentlichung beendet.</param>
        <param name="OpenAfterPublish">Optionales- <b>Objekt</b> festgelegt auf <b>true fest,</b> um die Datei nach der Veröffentlichung im Viewer anzuzeigen. andernfalls <b>False</b>.</param>
        <param name="FixedFormatExtClassPtr">
          <b>Optional Zeiger zur Klasse <b>FixedFormatExt</b> .</b>
        </param>
        <summary>Exportiert in eine Datei mit dem angegebenen Format.</summary>
        <remarks>
          <para>Diese Methode unterstützt auch die Initialisierung ein Add-in, um eine Datei in eine Datei mit festem Format zu exportieren. Beispielsweise führt Excel Datei Format konvertieren, wenn der Konverter vorhanden sind. Die Konvertierung wird normalerweise vom Benutzer initiiert.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillDown">
      <MemberSignature Language="C#" Value="public object FillDown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FillDown() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.FillDown" />
      <MemberSignature Language="VB.NET" Value="Public Function FillDown () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FillDown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(248)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Füllt von der oberen Zelle oder die Zellen im angegebenen Bereich am unteren Rand des Bereichs.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Inhalt und Formatierung der Zelle oder Zellen in der obersten Zeile eines Bereichs werden in die übrigen Zeilen im Bereich kopiert.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillLeft">
      <MemberSignature Language="C#" Value="public object FillLeft ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FillLeft() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.FillLeft" />
      <MemberSignature Language="VB.NET" Value="Public Function FillLeft () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FillLeft();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(249)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Füllt nach links von der äußersten rechten Zelle oder die Zellen im angegebenen Bereich.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Inhalt und Formatierung der Zelle oder Zellen in der Spalte ganz rechts eines Bereichs werden in die übrigen Spalten im Bereich kopiert.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillRight">
      <MemberSignature Language="C#" Value="public object FillRight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FillRight() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.FillRight" />
      <MemberSignature Language="VB.NET" Value="Public Function FillRight () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FillRight();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(250)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Füllt rechts von der am weitesten links stehende Zelle oder die Zellen im angegebenen Bereich.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Inhalt und Formatierung der Zelle oder Zellen in der am weitesten links stehende Spalte eines Bereichs werden in die übrigen Spalten im Bereich kopiert.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillUp">
      <MemberSignature Language="C#" Value="public object FillUp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FillUp() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.FillUp" />
      <MemberSignature Language="VB.NET" Value="Public Function FillUp () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FillUp();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(251)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Voll aus dem unteren Zelle oder die Zellen im angegebenen Bereich an den Anfang des Bereichs.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Inhalt und Formatierung der Zelle oder Zellen in der unteren Zeile eines Bereichs werden in die übrigen Zeilen im Bereich kopiert.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Find (object What, object After, object LookIn, object LookAt, object SearchOrder, Microsoft.Office.Interop.Excel.XlSearchDirection SearchDirection = Microsoft.Office.Interop.Excel.XlSearchDirection.xlNext, object MatchCase, object MatchByte, object SearchFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range Find([in]object What, [in]object After, [in]object LookIn, [in]object LookAt, [in]object SearchOrder, [in]valuetype Microsoft.Office.Interop.Excel.XlSearchDirection SearchDirection, [in]object MatchCase, [in]object MatchByte, [in]object SearchFormat) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Find(System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSearchDirection,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (What As Object, Optional After As Object, Optional LookIn As Object, Optional LookAt As Object, Optional SearchOrder As Object, Optional SearchDirection As XlSearchDirection = Microsoft.Office.Interop.Excel.XlSearchDirection.xlNext, Optional MatchCase As Object, Optional MatchByte As Object, Optional SearchFormat As Object) As Range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(398)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="What" Type="System.Object" />
        <Parameter Name="After" Type="System.Object" />
        <Parameter Name="LookIn" Type="System.Object" />
        <Parameter Name="LookAt" Type="System.Object" />
        <Parameter Name="SearchOrder" Type="System.Object" />
        <Parameter Name="SearchDirection" Type="Microsoft.Office.Interop.Excel.XlSearchDirection" />
        <Parameter Name="MatchCase" Type="System.Object" />
        <Parameter Name="MatchByte" Type="System.Object" />
        <Parameter Name="SearchFormat" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="What">
          <b>Objekt</b>erforderlich. Die zu suchenden Daten. Kann eine Zeichenfolge oder eine beliebige Microsoft Excel-Datentyp.</param>
        <param name="After">Optionales- <b>Objekt</b>. Die Zelle, nach der die Suche beginnen soll. Dies entspricht der Position der aktiven Zelle, wenn eine Suche über die Benutzeroberfläche durchgeführt wird. Beachten Sie, dass <b>After</b> eine einzelne Zelle im Bereich sein muss. Beachten Sie, dass die Suche beginnt <paramref name="after" /> diese Zelle; die angegebene Zelle ist nicht durchsucht, bis die Methode wieder auf diese Zelle umfließt. Wenn das Argument nicht angegeben wird, beginnt die Suche nach der Zelle in der oberen linken Ecke des Bereichs.</param>
        <param name="LookIn">Optionales- <b>Objekt</b>. Der Typ der Informationen.</param>
        <param name="LookAt">Optionales- <b>Objekt</b>. Kann eine der folgenden <see cref="T:Microsoft.Office.Interop.Excel.XlLookAt" /> -Konstanten sein: <b>XlWhole</b> oder <b>XlPart</b>.</param>
        <param name="SearchOrder">Optionales- <b>Objekt</b>. Kann eine der folgenden <see cref="T:Microsoft.Office.Interop.Excel.XlSearchOrder" /> -Konstanten sein: <b>XlByRows</b> oder <b>XlByColumns</b>.</param>
        <param name="SearchDirection">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSearchDirection" />. Die Suchrichtung. Kann eine der folgenden XlSearchDirection-Konstanten sein:<b>XlNext</b><paramref name="default" /><b>XlPrevious</b></param>
        <param name="MatchCase">Optionales- <b>Objekt</b>. Mit  <b>True</b> wird die Groß- und Kleinschreibung bei der Suche berücksichtigt. Der Standardwert lautet <b>False</b>.</param>
        <param name="MatchByte">Optionales- <b>Objekt</b>. Nur verwendet, wenn Sie ausgewählt oder Doppelbyte-sprachunterstützung installiert haben. <b>True,</b> Double-Byte-Zeichen Übereinstimmung nur Doppelbyte-Zeichen enthalten. <b>False</b> , wenn Doppelbytezeichen entsprechenden Einzel-Byte-Zeichen übereinstimmen.</param>
        <param name="SearchFormat">Optionales- <b>Objekt</b>. Das Format für die Suche.</param>
        <summary>Sucht bestimmte Informationen in einem Bereich und gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das die erste Zelle darstellt, in dem die Informationen gefunden wird.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Diese Methode gibt <b>Nothing zurück</b> , wenn keine Übereinstimmung gefunden wird.</para>
          <para>Diese Methode hat keinen Einfluss auf die Auswahl oder die aktive Zelle.</para>
          <para>Die Einstellungen für <paramref name="LookIn" />, <paramref name="LookAt" />, <paramref name="SearchOrder" />, und <paramref name="MatchByte" /> jedes Mal, die Sie mit dieser Methode werden gespeichert. Wenn Sie Werte für die Argumente das nächste Mal die-Methode aufrufen angeben, werden die gespeicherten Werte verwendet. Dieser Argumente Ändern der Einstellungen im Dialogfeld Suchen und ändern die Einstellungen im Dialogfeld Suchen ändert die gespeicherten Werte, die verwendet werden, wenn Sie die Argumente auslassen. Um Probleme zu vermeiden, diese Argumente explizit festlegen jedes Mal Sie diese Methode verwenden.</para>
          <para>Können Sie die <see cref="M:Microsoft.Office.Interop.Excel.Range.FindNext(System.Object)" /> und <see cref="M:Microsoft.Office.Interop.Excel.Range.FindPrevious(System.Object)" /> Methoden verwenden, um die Suche zu wiederholen.</para>
          <para>, Wenn die Suche das Ende des angegebenen Suchbereichs erreicht, Umbruch an den Anfang des Bereichs. Um eine Suche bei einem Umbruch zu beenden, speichern Sie die Adresse der ersten gefundenen Zelle, und Testen Sie voneinander gefunden Zelle aufeinander folgenden gegen diese Adresse gespeicherte.</para>
          <para>Zellen, die kompliziertere Muster übereinstimmen, verwenden eine <b>Suchen... Nächste</b> Anweisung <b>Like</b> -Operator.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNext">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range FindNext (object After);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range FindNext([in]object After) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.FindNext(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindNext (Optional After As Object) As Range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(399)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="After">Optionales- <b>Objekt</b>. Die Zelle, nach der Sie suchen möchten. Dies entspricht der Position der aktiven Zelle, wenn eine Suche über die Benutzeroberfläche durchgeführt wird. Beachten Sie, dass <paramref name="After" /> muss eine einzelne Zelle im Bereich. Beachten Sie, dass die Suche beginnt <paramref name="after" /> diese Zelle; die angegebene Zelle ist nicht durchsucht, bis die Methode wieder auf diese Zelle umfließt. Wenn dieses Argument nicht angegeben wird, beginnt die Suche nach der Zelle in der oberen linken Ecke des Bereichs.</param>
        <summary>Weiterhin eine Suche, die mit begonnen wurde die <see cref="M:Microsoft.Office.Interop.Excel.Range.Find(System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSearchDirection,System.Object,System.Object,System.Object)" /> Methode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Findet die nächste Zelle, die dieselben conditions und gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das diese Zelle darstellt.</para>
          <para>Diese Methode hat keinen Einfluss auf die Auswahl oder die aktive Zelle.</para>
          <para>, Wenn die Suche das Ende des angegebenen Suchbereichs erreicht, Umbruch an den Anfang des Bereichs. Um eine Suche bei einem Umbruch zu beenden, speichern Sie die Adresse der ersten gefundenen Zelle, und Testen Sie voneinander gefunden Zelle aufeinander folgenden gegen diese Adresse gespeicherte.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindPrevious">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range FindPrevious (object After);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range FindPrevious([in]object After) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.FindPrevious(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindPrevious (Optional After As Object) As Range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(400)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="After">Optionales- <b>Objekt</b>. Die Zelle vor der Sie suchen möchten. Dies entspricht der Position der aktiven Zelle, wenn eine Suche über die Benutzeroberfläche durchgeführt wird. Beachten Sie, dass <paramref name="After" /> muss eine einzelne Zelle im Bereich. Beachten Sie, dass die Suche beginnt <paramref name="before" /> diese Zelle; die angegebene Zelle ist nicht durchsucht, bis die Methode wieder auf diese Zelle umfließt. Wenn dieses Argument nicht angegeben wird, beginnt die Suche vor der linke obere Zelle im Bereich.</param>
        <summary>Weiterhin eine Suche, die mit begonnen wurde die <see cref="M:Microsoft.Office.Interop.Excel.Range.Find(System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSearchDirection,System.Object,System.Object,System.Object)" /> Methode.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Sucht die vorherige Zelle, entspricht die gleiche conditions und gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das diese Zelle darstellt.</para>
          <para>Diese Methode hat keinen Einfluss auf die Auswahl oder die aktive Zelle.</para>
          <para>, Wenn die Suche den Anfang des angegebenen Suchbereichs erreicht, erfolgt ein Umbruch zum Ende des Bereichs. Um eine Suche bei einem Umbruch zu beenden, speichern Sie die Adresse der ersten gefundenen Zelle, und Testen Sie voneinander gefunden Zelle aufeinander folgenden gegen diese Adresse gespeicherte.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlashFill">
      <MemberSignature Language="C#" Value="public void FlashFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FlashFill() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.FlashFill" />
      <MemberSignature Language="VB.NET" Value="Public Sub FlashFill ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FlashFill();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2996)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>TRUE gibt an, dass das Feature Excel Flash füllen und aktiviert wurde.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Font Font { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Font Font" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Font" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Font ^ Font { Microsoft::Office::Interop::Excel::Font ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(146)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(146)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Font" /> -Objekt, das die Schriftart des angegebenen Objekts darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatConditions">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.FormatConditions FormatConditions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.FormatConditions FormatConditions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.FormatConditions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FormatConditions As FormatConditions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::FormatConditions ^ FormatConditions { Microsoft::Office::Interop::Excel::FormatConditions ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1392)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1392)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.FormatConditions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> -Auflistung, die bedingten Formate für den angegebenen Bereich darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Formula">
      <MemberSignature Language="C#" Value="public object Formula { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Formula" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Formula" />
      <MemberSignature Language="VB.NET" Value="Public Property Formula As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Formula { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(261)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(261)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(261)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt zurück oder legt die Formel des Objekts in der A1-Schreibweise und in der Sprache des Makros.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft ist nicht verfügbar für OLAP-Datenquellen.</para>
          <para>, Wenn die Zelle eine Konstante enthält, gibt diese Eigenschaft die Konstante. Wenn die Zelle leer ist, gibt diese <b>Formel</b> -Eigenschaft eine leere Zeichenfolge. Wenn die Zelle eine Formel enthält, gibt die <b>Formula</b> -Eigenschaft die Formel als Zeichenfolge in demselben Format, die in der Bearbeitungsleiste (einschließlich Gleichheitszeichen) dargestellt werden würde.</para>
          <para>, Wenn Sie den Wert oder die Formel einer Zelle auf ein Datum festlegen, überprüft Microsoft Excel, ob diese Zelle bereits in einem der Zahlenformate für Datum oder Uhrzeit formatiert ist. Wenn nicht, Microsoft Excel das Zahlenformat in das Zahlenformat für die standardmäßige kurzes Datumsformat ändert.</para>
          <para>, Wenn der Bereich einen ein- oder zweidimensionalen Bereich ist, können Sie die Formel auf ein Array mit denselben Dimensionen festlegen. In ähnlicher Weise können Sie die Formel in ein grundlegende Array eingefügt.</para>
          <para>Durch Festlegen der Formel für ein Bereich von mehreren Zellen alle Zellen im Bereich mit der Formel gefüllt.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaArray">
      <MemberSignature Language="C#" Value="public object FormulaArray { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaArray" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.FormulaArray" />
      <MemberSignature Language="VB.NET" Value="Public Property FormulaArray As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ FormulaArray { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(586)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(586)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(586)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zurückgeben oder festlegen die Arrayformel eines Bereichs.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft gibt (oder auf festgelegt werden kann) eine einzelne Formel oder ein Array.</para>
          <para>Wenn der angegebene Bereich keine Arrayformel enthält, gibt diese Eigenschaft <b>Null</b>zurück.</para>
          <para>Wenn Sie diese Eigenschaft zum Eingabe einer Matrixformel verwenden, muss die Formel die Z1S1-Bezugsart nicht die A1-Bezugsart verwenden (Siehe zweites Beispiel) formatieren.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaHidden">
      <MemberSignature Language="C#" Value="public object FormulaHidden { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaHidden" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.FormulaHidden" />
      <MemberSignature Language="VB.NET" Value="Public Property FormulaHidden As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ FormulaHidden { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(262)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(262)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(262)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob die Formel ausgeblendet ist, wenn das Arbeitsblatt geschützt ist.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft gibt <b>True</b> zurück, wenn die Formel ausgeblendet ist, wenn das Arbeitsblatt geschützt ist. Es gibt <b>Null</b> zurück, wenn der angegebene Bereich einige Zellen mit <b>FormulaHidden</b> gleich <b>True</b> enthält, und einige Zellen mit <b>FormulaHidden</b><b>False gleich</b>.</para>
          <para>Nicht Verwechseln Sie diese Eigenschaft mit der <see cref="P:Microsoft.Office.Interop.Excel.Range.Hidden" /> Eigenschaft. Die Formel wird nicht ausgeblendet werden, wenn die Arbeitsmappe geschützt ist, und das Arbeitsblatt jedoch nicht, aber nur, wenn das Arbeitsblatt geschützt ist.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaLabel">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlFormulaLabel FormulaLabel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlFormulaLabel FormulaLabel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.FormulaLabel" />
      <MemberSignature Language="VB.NET" Value="Public Property FormulaLabel As XlFormulaLabel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlFormulaLabel FormulaLabel { Microsoft::Office::Interop::Excel::XlFormulaLabel get(); void set(Microsoft::Office::Interop::Excel::XlFormulaLabel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1380)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1380)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1380)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlFormulaLabel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zurück oder legt den Typ der formelbeschriftung für den angegebenen Bereich.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Der Rückgabewert dieser Eigenschaft kann <b>XlNone</b> sein, wenn der Bereich, keine Etiketten oder eine der folgenden <b>XlFormulaLabel</b> -Konstanten sein enthält:</para>
          <list type="bullet">
            <item>
              <description>
                <b>XlColumnLabels</b>
              </description>
            </item>
            <item>
              <description>
                <b>XlMixedLabels</b>
              </description>
            </item>
            <item>
              <description>
                <b>XlNoLabels</b>
              </description>
            </item>
            <item>
              <description>
                <b>XlRowLabels</b>
              </description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaLocal">
      <MemberSignature Language="C#" Value="public object FormulaLocal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaLocal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.FormulaLocal" />
      <MemberSignature Language="VB.NET" Value="Public Property FormulaLocal As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ FormulaLocal { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(263)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(263)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(263)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt zurück oder legt die Formel für das Objekt unter Verwendung der A1-Bezugsart in der Sprache des Benutzers.</summary>
        <value>To be added.</value>
        <remarks>
          <para>, Wenn die Zelle eine Konstante enthält, gibt diese Eigenschaft Konstanten. Wenn die Zelle leer ist, gibt die Eigenschaft eine leere Zeichenfolge. Wenn die Zelle eine Formel enthält, gibt die Eigenschaft die Formel als Zeichenfolge in demselben Format, in dem sie in der Bearbeitungsleiste (einschließlich Gleichheitszeichen) dargestellt werden würde.</para>
          <para>, Wenn Sie den Wert oder die Formel einer Zelle auf ein Datum festlegen, überprüft Microsoft Excel, ob diese Zelle bereits in einem der Zahlenformate für Datum oder Uhrzeit formatiert ist. Wenn nicht, das Zahlenformat in das standardmäßige kurzes Datumsformat Zahlenformat geändert wird.</para>
          <para>, Wenn der Bereich einen ein- oder zweidimensionalen Bereich ist, können Sie die Formel auf ein Array mit denselben Dimensionen festlegen. In ähnlicher Weise können Sie die Formel in ein Array versetzen.</para>
          <para>Durch Festlegen der Formel eines mehrere Zellen Bereichs alle Zellen im Bereich mit der Formel aufgefüllt.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaR1C1">
      <MemberSignature Language="C#" Value="public object FormulaR1C1 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaR1C1" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.FormulaR1C1" />
      <MemberSignature Language="VB.NET" Value="Public Property FormulaR1C1 As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ FormulaR1C1 { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(264)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(264)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(264)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt zurück oder legt die Formel für das Objekt unter Verwendung der Z1S1-Schreibweise in der Sprache des Makros.</summary>
        <value>To be added.</value>
        <remarks>
          <para>, Wenn die Zelle eine Konstante enthält, gibt diese Eigenschaft die Konstante. Wenn die Zelle leer ist, gibt die Eigenschaft eine leere Zeichenfolge. Wenn die Zelle eine Formel enthält, gibt die Eigenschaft die Formel als Zeichenfolge in demselben Format, in dem sie in der Bearbeitungsleiste (einschließlich Gleichheitszeichen) dargestellt werden würde.</para>
          <para>, Wenn Sie den Wert oder die Formel einer Zelle auf ein Datum festlegen, überprüft Microsoft Excel, ob diese Zelle bereits in einem der Zahlenformate für Datum oder Uhrzeit formatiert ist. Wenn nicht, das Zahlenformat in das standardmäßige kurzes Datumsformat Zahlenformat geändert wird.</para>
          <para>, Wenn der Bereich einen ein- oder zweidimensionalen Bereich ist, können Sie die Formel auf ein Array mit denselben Dimensionen festlegen. In ähnlicher Weise können Sie die Formel in ein Array versetzen.</para>
          <para>Durch Festlegen der Formel eines mehrere Zellen Bereichs alle Zellen im Bereich mit der Formel aufgefüllt.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaR1C1Local">
      <MemberSignature Language="C#" Value="public object FormulaR1C1Local { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaR1C1Local" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.FormulaR1C1Local" />
      <MemberSignature Language="VB.NET" Value="Public Property FormulaR1C1Local As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ FormulaR1C1Local { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(265)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(265)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(265)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt zurück oder legt die Formel für das Objekt unter Verwendung der Z1S1-Schreibweise in der Sprache des Benutzers.</summary>
        <value>To be added.</value>
        <remarks>
          <para>, Wenn die Zelle eine Konstante enthält, gibt diese Eigenschaft Konstanten. Wenn die Zelle leer ist, gibt die Eigenschaft eine leere Zeichenfolge. Wenn die Zelle eine Formel enthält, gibt die Eigenschaft die Formel als Zeichenfolge in demselben Format, in dem sie in der Bearbeitungsleiste (einschließlich Gleichheitszeichen) dargestellt werden würde.</para>
          <para>, Wenn Sie den Wert oder die Formel einer Zelle auf ein Datum festlegen, überprüft Microsoft Excel, ob diese Zelle bereits in einem der Zahlenformate für Datum oder Uhrzeit formatiert ist. Wenn nicht, das Zahlenformat in das standardmäßige kurzes Datumsformat Zahlenformat geändert wird.</para>
          <para>, Wenn der Bereich einen ein- oder zweidimensionalen Bereich ist, können Sie die Formel auf ein Array mit denselben Dimensionen festlegen. In ähnlicher Weise können Sie die Formel in ein Array versetzen.</para>
          <para>Durch Festlegen der Formel eines mehrere Zellen Bereichs alle Zellen im Bereich mit der Formel aufgefüllt.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionWizard">
      <MemberSignature Language="C#" Value="public object FunctionWizard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FunctionWizard() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.FunctionWizard" />
      <MemberSignature Language="VB.NET" Value="Public Function FunctionWizard () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FunctionWizard();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(571)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktiviert den Funktions-Assistenten für die linke obere Zelle des Bereichs.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-4)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoalSeek">
      <MemberSignature Language="C#" Value="public bool GoalSeek (object Goal, Microsoft.Office.Interop.Excel.Range ChangingCell);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GoalSeek([in]object Goal, [in]class Microsoft.Office.Interop.Excel.Range ChangingCell) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.GoalSeek(System.Object,Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function GoalSeek (Goal As Object, ChangingCell As Range) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GoalSeek(System::Object ^ Goal, Microsoft::Office::Interop::Excel::Range ^ ChangingCell);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(472)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Goal" Type="System.Object" />
        <Parameter Name="ChangingCell" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Goal">
          <b>Objekt</b>erforderlich. Der Wert, der in dieser Zelle zurückgegeben werden soll.</param>
        <param name="ChangingCell">Erforderliche <see cref="T:Microsoft.Office.Interop.Excel.Range" />. In diesem Argument wird die Zelle angegeben, die zum Erreichen des gewünschten Zielwerts geändert werden soll.</param>
        <summary>Berechnet die Werte, die erforderlich sind, um ein bestimmtes Ziel zu erreichen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn das Ziel einer Menge von einer Formel zurückgegeben wird, ein Wert berechnet, wenn für die Formel angegeben, wird die Formel, die die gewünschte Rufnummer zurückzugeben.</para>
          <para>Diese Methode gibt <b>True</b> zurück, wenn das Ziel erreicht wurde.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public object Group (object Start, object End, object By, object Periods);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Group([in]object Start, [in]object End, [in]object By, [in]object Periods) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Group(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Group (Optional Start As Object, Optional End As Object, Optional By As Object, Optional Periods As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(46)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Object" />
        <Parameter Name="End" Type="System.Object" />
        <Parameter Name="By" Type="System.Object" />
        <Parameter Name="Periods" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Start">Optionales- <b>Objekt</b>. Der erste Wert gruppiert werden. Wenn dieses Argument nicht angegeben ist, oder <b>"true"</b>, der erste Wert im Feld verwendet wird.</param>
        <param name="End">Optionales- <b>Objekt</b>. Der letzte Wert gruppiert werden. Wenn dieses Argument nicht angegeben ist, oder <b>"true"</b>, der letzte Wert in das Feld verwendet wird.</param>
        <param name="By">Optionales- <b>Objekt</b>. Wenn das Feld numerisch ist, gibt dieses Argument die Größe jeder Gruppe. Wenn das Feld ein Datum angegeben wird, dieses Argument gibt die Anzahl der Tage in jeder Gruppe Wenn 4-Element in der <paramref name="Periods" /> Array ist <b>true,</b> und alle anderen Elemente sind <b>falsch</b>. Andernfalls wird dieses Argument ignoriert. Wenn dieses Argument nicht angegeben ist, wählt Microsoft Excel automatisch eine Gruppe Standardgröße.</param>
        <param name="Periods">Optionales- <b>Objekt</b>. Ein Array von boolesche Werte, die den Zeitraum für die Gruppe angeben, wie in der folgenden Tabelle dargestellt. Wenn ein Element im Array auf <b>True</b>festgelegt ist, wird eine Gruppe für die entsprechende Zeit erstellt. Wenn das Element auf <b>"false"</b>festgelegt ist, wird keine Gruppe erstellt. Wenn das Feld ein Date-Feld nicht, wird dieses Argument ignoriert.</param>
        <summary>Wenn die <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt eine einzelne Zelle im Datenbereich des PivotTable-Felds darstellt, die <b>Group</b> -Methode führt eine Gruppierung nach Zahlen oder Datum-basierten in diesem Feld.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Das <b>Range</b> -Objekt muss eine einzelne Zelle im Datenbereich des PivotTable-Felds. Wenn Sie versuchen, diese Methode auf mehrere Zellen anwenden, fehl und eine Fehlermeldung wird nicht angezeigt.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasArray">
      <MemberSignature Language="C#" Value="public object HasArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object HasArray" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.HasArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasArray As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ HasArray { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(266)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(266)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob die angegebene Zelle Teil einer Arrayformel ist.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft gibt <b>True</b> zurück, wenn die angegebene Zelle Teil einer Arrayformel ist.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasFormula">
      <MemberSignature Language="C#" Value="public object HasFormula { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object HasFormula" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.HasFormula" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFormula As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ HasFormula { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(267)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(267)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob alle Zellen im Bereich Formeln enthalten.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft gibt <b>True</b> zurück, wenn alle Zellen im Bereich Formeln enthalten, <b>False,</b> Wenn keine der Zellen im Bereich enthält eine Formel, und <b>Null andernfalls</b> .</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public object Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Height" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Height" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Height As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Height { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(123)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(123)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Die Höhe des Bereichs.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hidden">
      <MemberSignature Language="C#" Value="public object Hidden { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Hidden" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Hidden" />
      <MemberSignature Language="VB.NET" Value="Public Property Hidden As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Hidden { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(268)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(268)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(268)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob die Zeilen oder Spalten ausgeblendet sind.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft gibt <b>True</b> zurück, wenn die Zeilen oder Spalten ausgeblendet sind. Der angegebene Bereich muss eine ganze Spalte oder Zeile umfassen.</para>
          <para>Nicht Verwechseln Sie diese Eigenschaft mit der <see cref="P:Microsoft.Office.Interop.Excel.Range.FormulaHidden" /> -Eigenschaft.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public object HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.HorizontalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalAlignment As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ HorizontalAlignment { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(136)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(136)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(136)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zurückgeben oder festlegen die horizontale Ausrichtung für das angegebene Objekt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hyperlinks">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Hyperlinks Hyperlinks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Hyperlinks Hyperlinks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Hyperlinks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hyperlinks As Hyperlinks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Hyperlinks ^ Hyperlinks { Microsoft::Office::Interop::Excel::Hyperlinks ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1393)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1393)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Hyperlinks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Hyperlinks" /> -Auflistung, die die Hyperlinks für den Bereich darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1813)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1813)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1813)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zurückgeben oder festlegen die identifizierende Beschriftung für die angegebene Zelle aus, wenn die Seite als Webseite gespeichert wird.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Sie können eine ID-Beschriftung als einen Hyperlinkverweis in anderen HTML-Dokumenten oder auf derselben Webseite verwenden.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentLevel">
      <MemberSignature Language="C#" Value="public object IndentLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object IndentLevel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.IndentLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentLevel As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ IndentLevel { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(201)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(201)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(201)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zurück oder legt die Einzugsebene für die Zelle oder einen Bereich.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Die Einzugsebene kann eine ganze Zahl zwischen 0 und 15.</para>
          <para>Die Verwendung dieser Eigenschaft die Einzugsebene auf eine Zahl kleiner als 0 (null) festgelegt oder größer als 15 einen Fehler verursacht.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public object Insert (object Shift, object CopyOrigin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Insert([in]object Shift, [in]object CopyOrigin) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Insert(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (Optional Shift As Object, Optional CopyOrigin As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(252)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Shift" Type="System.Object" />
        <Parameter Name="CopyOrigin" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Shift">Optionales- <b>Objekt</b>. Gibt an, wie die Zellen verschoben. Kann eine der folgenden <see cref="T:Microsoft.Office.Interop.Excel.XlInsertShiftDirection" /> Konstanten: <b>XlShiftToRight</b> oder <b>XlShiftDown</b>. Wenn dieses Argument nicht angegeben ist, wählt Microsoft Excel auf die Form des Bereichs.</param>
        <param name="CopyOrigin">Optionales- <b>Objekt</b>. Der Ursprung des Kopiervorgangs.</param>
        <summary>Fügt eine Zelle oder einen Zellbereich in das Arbeitsblatt oder die Makrovorlage ein und verschiebt die anderen Zellen entsprechend.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertIndent">
      <MemberSignature Language="C#" Value="public void InsertIndent (int InsertAmount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertIndent([in]int32 InsertAmount) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.InsertIndent(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertIndent (InsertAmount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertIndent(int InsertAmount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1381)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InsertAmount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="InsertAmount">
          <b>Integer</b>erforderlich. Der Betrag, der dem aktuellen Einzug hinzugefügt wird.</param>
        <summary>Fügt dem angegebenen Bereich einen Einzug hinzu.</summary>
        <remarks>
          <para>Mit dieser Methode die Einzugsebene auf eine Zahl kleiner als 0 (null) festgelegt oder größer als 15 einen Fehler verursacht.</para>
          <para>Verwendung der<b /><see cref="P:Microsoft.Office.Interop.Excel.Range.IndentLevel" /> Eigenschaft, um die Einzugsebene für einen Bereich zurückzugeben.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interior">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Interior Interior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Interior Interior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Interior" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Interior As Interior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Interior ^ Interior { Microsoft::Office::Interop::Excel::Interior ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(129)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(129)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Interior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Interior" /> -Objekt, das den Innenbereich des angegebenen Objekts darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object Item[object RowIndex, object ColumnIndex] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object, object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Item(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Property Item(RowIndex As Object, Optional ColumnIndex As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Item[System::Object ^, System::Object ^] { System::Object ^ get(System::Object ^ RowIndex, System::Object ^ ColumnIndex); void set(System::Object ^ RowIndex, System::Object ^ ColumnIndex, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowIndex" Type="System.Object" />
        <Parameter Name="ColumnIndex" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowIndex">
          <b>Objekt</b>erforderlich. Die Indexnummer der Zelle, auf die Sie zugreifen möchten, von links nach rechts, dann nach unten. Range.Item(1) gibt die linke obere Zelle im Bereich zurück. Range.Item(2) gibt die Zelle unmittelbar rechts neben der linken oberen Zelle zurück.</param>
        <param name="ColumnIndex">Optionales- <b>Objekt</b>. Eine Zahl oder eine Zeichenfolge, die die Spaltennummer der Zelle angibt, auf die Sie zugreifen möchten, beginnend mit 1 bzw. "A" für die erste Spalte des Bereichs.</param>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das einen versetzten Bereich in Bezug zum angegebenen Bereich darstellt.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Die <paramref name="RowIndex" /> und <paramref name="ColumnIndex" /> -Argument sind relative Offsets. Anders ausgedrückt, Angeben einer <paramref name="RowIndex" /> Zellen in der ersten Zeile des Bereichs, nicht die erste Zeile des Arbeitsblatts 1 zurückgegeben.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Justify">
      <MemberSignature Language="C#" Value="public object Justify ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Justify() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Justify" />
      <MemberSignature Language="VB.NET" Value="Public Function Justify () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Justify();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(495)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ordnet den Text in einem Bereich neu an, sodass er den Bereich gleichmäßig ausfüllt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn der Bereich nicht groß genug ist, zeigt Microsoft Excel eine Meldung angezeigt, dass Text unter dem Bereich erweitert wird. Wenn Sie auf die Schaltfläche OK klicken, wird der Inhalt in Zellen unterhalb des markierten Bereichs durch im Blocksatz Text ersetzt. Damit diese Meldung angezeigt wird, legen die <see cref="P:Microsoft.Office.Interop.Excel._Application.DisplayAlerts" /> -Eigenschaft auf <b>false festgelegt</b>. Nachdem Sie diese Eigenschaft festgelegt wird, wird Text immer den Inhalt in den Zellen unterhalb des Bereichs ersetzt.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public object Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Left" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Left" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Left As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Left { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(127)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(127)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Der Abstand vom linken Rand der Spalte A zum linken Rand des Bereichs.</summary>
        <value>To be added.</value>
        <remarks>
          <para>, Wenn der Bereich nicht zusammenhängend ist, wird der erste Bereich verwendet. Wenn der Bereich mehr als eine Spalte breit ist, wird die äußersten linken Spalte im Bereich verwendet.</para>
          <para>, Wenn das Fenster maximiert ist, gibt diese Eigenschaft die Breite des Fensterrahmens eine negative Zahl, die variiert, entsprechend. Durch Festlegen dieser Eigenschaft auf 0 (null) wird, das Fenster ein wenig kleiner, als wäre, wenn das Anwendungsfenster maximiert wurden. Anders ausgedrückt, wenn diese Eigenschaft 0 (null) ist, der linke Rand des Hauptfensters von Microsoft Excel kaum werden auf dem Bildschirm angezeigt.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListHeaderRows">
      <MemberSignature Language="C#" Value="public int ListHeaderRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ListHeaderRows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.ListHeaderRows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ListHeaderRows As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ListHeaderRows { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1187)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1187)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die Anzahl der Zeilen für Kopfzeilen für den angegebenen Bereich zurück.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Bevor Sie diese Eigenschaft verwenden, verwenden Sie die <see cref="P:Microsoft.Office.Interop.Excel.Range.CurrentRegion" /> Eigenschaft, um die Grenzen des Bereichs zu finden.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListNames">
      <MemberSignature Language="C#" Value="public object ListNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ListNames() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ListNames" />
      <MemberSignature Language="VB.NET" Value="Public Function ListNames () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ListNames();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(253)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fügt eine Liste aller angezeigten Namen in das Arbeitsblatt, beginnend mit der ersten Zelle im Bereich.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwendung der <see cref="P:Microsoft.Office.Interop.Excel._Application.Names" /> -Eigenschaft auf eine Auflistung aller Namen in einem Arbeitsblatt zurückgeben.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListObject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ListObject ListObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ListObject ListObject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.ListObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ListObject As ListObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::ListObject ^ ListObject { Microsoft::Office::Interop::Excel::ListObject ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2257)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2257)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ListObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> -Objekts für die <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekt oder <see cref="T:Microsoft.Office.Interop.Excel.QueryTable" /> Objekt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationInTable">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlLocationInTable LocationInTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlLocationInTable LocationInTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.LocationInTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocationInTable As XlLocationInTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlLocationInTable LocationInTable { Microsoft::Office::Interop::Excel::XlLocationInTable get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(691)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(691)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlLocationInTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt eine Konstante, die den Teil des beschreibt die <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" /> Bericht, der die linke obere Ecke des angegebenen Bereichs enthält.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <b>XlLocationInTable</b> kann eine der folgenden <see cref="T:Microsoft.Office.Interop.Excel.XlLocationInTable" /> Konstanten:</para>
          <list type="bullet">
            <item>
              <description>
                <b>XlRowHeader</b>
              </description>
            </item>
            <item>
              <description>
                <b>XlColumnHeader</b>
              </description>
            </item>
            <item>
              <description>
                <b>XlPageHeader</b>
              </description>
            </item>
            <item>
              <description>
                <b>XlDataHeader</b>
              </description>
            </item>
            <item>
              <description>
                <b>XlRowItem</b>
              </description>
            </item>
            <item>
              <description>
                <b>XlColumnItem</b>
              </description>
            </item>
            <item>
              <description>
                <b>XlPageItem </b>
              </description>
            </item>
            <item>
              <description>
                <b>XlDataItem</b>
              </description>
            </item>
            <item>
              <description>
                <b>XlTableBody</b>
              </description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Locked">
      <MemberSignature Language="C#" Value="public object Locked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Locked" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Locked" />
      <MemberSignature Language="VB.NET" Value="Public Property Locked As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Locked { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(269)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(269)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(269)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob das Objekt gesperrt ist.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft gibt <b>true,</b> Wenn das Objekt gesperrt ist, <b>False,</b> Wenn das Objekt geändert werden kann, wenn das Blatt geschützt ist, und <b>Null</b> , wenn der angegebene Bereich gesperrte und nicht gesperrte Zellen enthält.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MDX">
      <MemberSignature Language="C#" Value="public string MDX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MDX" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.MDX" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MDX As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MDX { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2123)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2123)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den MDX-Namen für den angegebenen <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekt. Schreibgeschützt.</summary>
        <value>Zeichenfolge</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (object Across);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Merge([in]object Across) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Merge(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (Optional Across As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(564)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Across" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Across">Optionales- <b>Objekt</b>. <b>True</b> , wenn Zellen in jeder Zeile des angegebenen Bereichs als separate zusammengeführte Zellen zusammenzuführen. Der Standardwert lautet <b>False</b>.</param>
        <summary>Erstellt eine verbundene Zelle aus dem angegebenen <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekt.</summary>
        <remarks>
          <para>Der Wert eines zusammengeführten Bereichs wird in der Zelle die linke obere Ecke des Bereichs angegeben.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeArea">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range MergeArea { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range MergeArea" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.MergeArea" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MergeArea As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ MergeArea { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1385)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1385)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das den zusammengeführten Bereich mit der angegebenen Zelle darstellt.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Wenn Sie nicht die angegebene Zelle in einem zusammengeführten Bereich befindet, gibt diese Eigenschaft die angegebene Zelle.</para>
          <para>
            <b>MergeArea</b> -Eigenschaft funktioniert nur für einen einzelligen Bereich.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeCells">
      <MemberSignature Language="C#" Value="public object MergeCells { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object MergeCells" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.MergeCells" />
      <MemberSignature Language="VB.NET" Value="Public Property MergeCells As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ MergeCells { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(208)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(208)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(208)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob der Bereich oder die Formatvorlage zusammengeführte Zellen enthält.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft gibt <b>True</b> zurück, wenn der Bereich oder die Formatvorlage zusammengeführte Zellen enthält.</para>
          <para>, Wenn Sie einen Bereich auswählen, der verbundene Zellen enthält, kann die resultierende Auswahl von der beabsichtigten Markierung anders lauten. Verwendung der <see cref="P:Microsoft.Office.Interop.Excel.Range.Address(System.Object,System.Object,Microsoft.Office.Interop.Excel.XlReferenceStyle,System.Object,System.Object)" /> -Eigenschaft auf Prüfen Sie die Adresse des markierten Bereichs.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public object Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Name { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(110)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(110)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(110)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den Namen des Objekts zurück oder legt ihn fest.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Der Name der ein <b>Range</b> -Objekt ist ein <see cref="T:Microsoft.Office.Interop.Excel.Name" /> Objekt. Für jeden anderen Typ des Objekts ist der Name einer <b>Zeichenfolge</b>.</para>
          <para>Die folgende Tabelle zeigt Beispielwerte der <b>Name</b> -Eigenschaft und verwandter Eigenschaften eine OLAP-Datenquelle mit dem eindeutigen Namen "[Europa]. [Frankreich]. [Paris] "und eine nicht-OLAP-Datenquelle mit dem Element"Paris"nennen.</para>
          <list type="table">
            <item>
              <term>Beschriftung</term>
              <description>Paris</description>
              <description>Paris</description>
            </item>
            <item>
              <term>Namen</term>
              <description>[Europa]. [ Frankreich]. [Paris] (schreibgeschützt)</description>
              <description>Paris</description>
            </item>
            <item>
              <term>SourceName</term>
              <description>[Europa]. [ Frankreich]. [Paris] (schreibgeschützt)</description>
              <description>(Identisch mit SQL-Eigenschaftenwert, schreibgeschützt)</description>
            </item>
            <item>
              <term>Wert</term>
              <description>[Europa]. [ Frankreich]. [Paris] (schreibgeschützt)</description>
              <description>Paris</description>
            </item>
          </list>
          <para>Beim angeben als Farbindex in der <see cref="T:Microsoft.Office.Interop.Excel.PivotItems" /> -Auflistung verwenden Sie die Syntax in der folgenden Tabelle dargestellt.</para>
          <list type="table">
            <item>
              <term>Ausdruck. PivotItems ("[Europa]. [ Frankreich]. [Paris] ")</term>
              <description>Ausdruck. PivotItems("Paris")</description>
            </item>
          </list>
          <para>bei Verwendung der <see cref="M:Microsoft.Office.Interop.Excel.PivotItems.Item(System.Object)" /> -Eigenschaft so verweisen Sie auf ein bestimmtes Element einer Auflistung, können Sie den Textindexnamen wie in der folgenden Tabelle gezeigt verwenden.</para>
          <list type="table">
            <item>
              <term>[Europa]. [ Frankreich]. [Paris]</term>
              <description>Paris</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NavigateArrow">
      <MemberSignature Language="C#" Value="public object NavigateArrow (object TowardPrecedent, object ArrowNumber, object LinkNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object NavigateArrow([in]object TowardPrecedent, [in]object ArrowNumber, [in]object LinkNumber) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.NavigateArrow(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NavigateArrow (Optional TowardPrecedent As Object, Optional ArrowNumber As Object, Optional LinkNumber As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1032)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TowardPrecedent" Type="System.Object" />
        <Parameter Name="ArrowNumber" Type="System.Object" />
        <Parameter Name="LinkNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="TowardPrecedent">Optionales- <b>Objekt</b>. Gibt die Richtung der Bewegung an: <b>True</b> , wenn Vorgängerzellen; <b>False</b> zu Nachfolgerzellen gewechselt.</param>
        <param name="ArrowNumber">Optionales- <b>Objekt</b>. Gibt die Nummer des Spurpfeils entsprechend dem nummerierten Bezug in der Zellformel an.</param>
        <param name="LinkNumber">Optionales- <b>Objekt</b>. Wenn der Pfeil ein externer Verweis Pfeil ist, gibt dieses Argument welche externen Bezug, denen Sie folgen. Wenn dieses Argument ausgelassen wird, wird dem erste externe Bezug gefolgt.</param>
        <summary>Folgt einem Spurpfeil für den angegebenen Bereich auf Spur zum Vorgänger, abhängige oder Fehler verursacht Zelle(n).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Markiert die Vorgänger-, abhängige oder Fehler Zellen und gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das die neue Markierung darstellt. Diese Methode verursacht einen Fehler, wenn sie auf eine Zelle ohne sichtbare Spurpfeile angewendet wird.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Next { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Next" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Next" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Next As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Next { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(502)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(502)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das die nächste Zelle darstellt.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft emuliert die TAB-Taste, obwohl die-Eigenschaft, das die nächste Zelle zurückgibt ohne vorherige darauf verweisen</para>
          <para>Auf einem geschützten Arbeitsblatt gibt diese Eigenschaft die nächste nicht gesperrte Zelle zurück. In einem ungeschützten Blatt, gibt diese Eigenschaft immer die Zelle unmittelbar rechts von der angegebenen Zelle.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NoteText">
      <MemberSignature Language="C#" Value="public string NoteText (object Text, object Start, object Length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string NoteText([in]object Text, [in]object Start, [in]object Length) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.NoteText(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NoteText (Optional Text As Object, Optional Start As Object, Optional Length As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1127)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Text" Type="System.Object" />
        <Parameter Name="Start" Type="System.Object" />
        <Parameter Name="Length" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Text">Optionales- <b>Objekt</b>. Der Text, der auf die Notiz (bis zu 255 Zeichen) hinzugefügt. Wird der Text eingefügt, wobei die Ausgangsposition <paramref name="Start" />, und Ersetzen <paramref name="Length" /> Zeichen des vorhandenen Hinweises. Wenn dieses Argument nicht angegeben ist, gibt diese Methode den aktuellen Text des Hinweises beginnend an Position <paramref name="Start" />, für <paramref name="Length" /> Zeichen.</param>
        <param name="Start">Optionales- <b>Objekt</b>. Die Anfangsposition für den Text, der festgelegt oder zurückgegeben. Wenn dieses Argument ausgelassen wird, wird diese Methode mit dem ersten Zeichen gestartet. Um Text auf die Notiz anzufügen, geben Sie eine Zahl größer als die Anzahl der Zeichen in der vorhandenen Notiz ein.</param>
        <param name="Length">Optionales- <b>Objekt</b>. Die Anzahl der Zeichen festgelegt oder zurückgegeben werden. Wenn dieses Argument ausgelassen wird, wird Microsoft Excel festgelegt oder zurückgegeben von Zeichen von der Anfangsposition bis zum Ende der Notiz (bis zu 255 Zeichen). Wenn mehr als 255 Zeichen aus <paramref name="Start" /> bis zum Ende der Notiz, gibt diese Methode lediglich die ersten 255 Zeichen.</param>
        <summary>Zurückgeben oder festlegen die Zelle Notiz mit der Zelle in der oberen linken Ecke des Bereichs verknüpft ist.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Zelle Notizen wurden durch Bereichskommentare ersetzt. Weitere Informationen finden Sie unter der <see cref="T:Microsoft.Office.Interop.Excel.Comment" /> -Objekt.</para>
          <para>, Um eine Notiz hinzufügen, die mehr als 255 Zeichen enthält, verwenden Sie diese Methode einmal, um die ersten 255 Zeichen anzugeben, und verwenden Sie es erneut, die den Rest der Notiz (nicht mehr als 255 Zeichen zu einem Zeitpunkt) angefügt.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public object NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NumberFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberFormat As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NumberFormat { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(193)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(193)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(193)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zurückgeben oder festlegen den Formatierungscode für das Objekt.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft gibt <b>Null</b> zurück, wenn alle Zellen im angegebenen Bereich dasselbe Zahlenformat besitzen.</para> Das Format 
          <para>Code ist dieselbe Zeichenfolge wie die Option Formatierungscode im Dialogfeld Zellen formatieren. Die <b>Format</b> -Funktion verwendet andere Zeichenfolgen im Formatierungscode als die <b>NumberFormat</b> und <see cref="P:Microsoft.Office.Interop.Excel.Range.NumberFormatLocal" /> Eigenschaften.</para><para /></remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberFormatLocal">
      <MemberSignature Language="C#" Value="public object NumberFormatLocal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NumberFormatLocal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.NumberFormatLocal" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberFormatLocal As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NumberFormatLocal { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1097)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1097)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1097)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zurückgeben oder festlegen den Formatierungscode des Objekts als Zeichenfolge in der Sprache des Benutzers.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Die <b>Format</b> -Funktion verwendet andere Zeichenfolgen im Formatierungscode als die <see cref="P:Microsoft.Office.Interop.Excel.Range.NumberFormat" /> und <b>NumberFormatLocal</b> -Eigenschaften.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Offset[object RowOffset, object ColumnOffset] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Offset(object, object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Offset(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset(Optional RowOffset As Object, Optional ColumnOffset As Object) As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Offset[System::Object ^, System::Object ^] { Microsoft::Office::Interop::Excel::Range ^ get(System::Object ^ RowOffset, System::Object ^ ColumnOffset); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(254)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(254)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowOffset" Type="System.Object" />
        <Parameter Name="ColumnOffset" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowOffset">Optionales- <b>Objekt</b>. Die Anzahl der Zeilen (positiv, negativ oder 0 (null)) um die der Bereich versetzt werden soll. Positive Werte Versatz nach unten, und negative Werte nach oben versetzt. Der Standardwert ist 0.</param>
        <param name="ColumnOffset">Optionales- <b>Objekt</b>. Die Anzahl der Spalten (positiv, negativ oder 0 (null)) um die der Bereich versetzt werden soll. Positive Werte werden rechts versetzt, und negative Werte werden auf der linken Seite versetzt. Der Standardwert ist 0.</param>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das einen Bereich darstellt, der gegenüber dem angegebenen Bereich versetzt ist.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Orientation">
      <MemberSignature Language="C#" Value="public object Orientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Orientation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Orientation" />
      <MemberSignature Language="VB.NET" Value="Public Property Orientation As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Orientation { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(134)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(134)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(134)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die Ausrichtung von Text zurück.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese zurückgegeben Ausrichtungswert kann eine Ganzzahl zwischen 90 und 90 Grad.</para>
          <para>Für OLAP-Datenquellen wird durch Festlegen dieser Eigenschaft für ein Feld in einer Hierarchie die Ausrichtung für die anderen Felder in der gleichen Hierarchie. Dimensionsfelder können nur in der Zeile, Spalte und Seite Feld Bereichen des PivotTable-Berichts angeordnet werden. Felder der Maßeinheiten können nur im Datenbereich angeordnet werden. Die Hierarchie oder das Feld aus dem PivotTable-Bericht entfernt wird eine Hierarchie oder ein Datenfeld auf <b>xlHidden eingestellt</b> .</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutlineLevel">
      <MemberSignature Language="C#" Value="public object OutlineLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OutlineLevel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.OutlineLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property OutlineLevel As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OutlineLevel { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(271)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(271)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(271)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zurückgeben oder festlegen die aktuellen Gliederungsebene der angegebenen Zeile oder Spalte.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Ebene 1 ist die äußerste Gliederungsebene.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageBreak">
      <MemberSignature Language="C#" Value="public int PageBreak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PageBreak" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.PageBreak" />
      <MemberSignature Language="VB.NET" Value="Public Property PageBreak As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PageBreak { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(255)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(255)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(255)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt zurück oder legt den Speicherort des ein Seitenumbruch.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Der Rückgabewert kann eine der folgenden <see cref="T:Microsoft.Office.Interop.Excel.XlPageBreak" /><b />Konstanten:</para>
          <list type="bullet">
            <item>
              <description>
                <b>XlPageBreakAutomatic</b>
              </description>
            </item>
            <item>
              <description>
                <b>XlPageBreakManual</b>
              </description>
            </item>
            <item>
              <description>
                <b>XlPageBreakNone</b>
              </description>
            </item>
          </list>
          <para>Diese Eigenschaft gibt den Speicherort der Seite Automatische oder manuelle zurück Breaks, aber es kann nur den Speicherort der manuelle Seitenumbrüche (es kann nur festgelegt werden auf <b>XlPageBreakManual</b> oder <b>XlPageBreakNone</b>) festgelegt.</para>
          <para>, Um alle manuellen Seitenumbrüche in einem Arbeitsblatt entfernen möchten, weisen Sie Cells.PageBreak den <b>Wert XlPageBreakNone</b>.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt das übergeordnete Objekt für das angegebene Objekt zurück.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public object Parse (object ParseLine, object Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Parse([in]object ParseLine, [in]object Destination) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Parse(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Parse (Optional ParseLine As Object, Optional Destination As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(477)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ParseLine" Type="System.Object" />
        <Parameter Name="Destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ParseLine">Optionales- <b>Objekt</b>. Eine Zeichenfolge mit linken und rechten Klammern, um anzugeben, wo die Zellen aufgeteilt werden sollen. Beispielsweise "[Xxx] [Xxx]" würde die ersten drei Zeichen in die erste Spalte des Zielbereichs eingefügt, und die nächsten drei Zeichen in die zweite Spalte eingefügt. Wenn dieses Argument ausgelassen wird, schätzt Microsoft Excel, wo die basierend auf den Abstand der linken oberen Zelle im Bereich Spalten aufgeteilt. Wenn Sie einen anderen Bereich verwenden, um die Zeile analysieren erraten möchten, verwenden Sie ein <b>Range</b> -Objekt als das <paramref name="ParseLine" /> Argument. Dieses Bereichs muss einer der Zellen, die analysiert wird. Die <paramref name="ParseLine" /> Argument darf nicht länger als 255 Zeichen enthalten, einschließlich der Klammern und Leerzeichen.</param>
        <param name="Destination">Optionales- <b>Objekt</b>. Ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das die linke obere Ecke des Zielbereichs für die analysierten Daten darstellt. Wenn dieses Argument ausgelassen wird, analysiert Microsoft Excel direkt.</param>
        <summary>Analysiert einen Datenbereich und teilt ihn in mehrere Zellen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verteilt den Inhalt des Bereichs, der mehrere benachbarte Spalten auszufüllen. Der Bereich kann nicht mehr als eine Spalte breit sein.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PasteSpecial">
      <MemberSignature Language="C#" Value="public object PasteSpecial (Microsoft.Office.Interop.Excel.XlPasteType Paste = Microsoft.Office.Interop.Excel.XlPasteType.xlPasteAll, Microsoft.Office.Interop.Excel.XlPasteSpecialOperation Operation = Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationNone, object SkipBlanks, object Transpose);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object PasteSpecial([in]valuetype Microsoft.Office.Interop.Excel.XlPasteType Paste, [in]valuetype Microsoft.Office.Interop.Excel.XlPasteSpecialOperation Operation, [in]object SkipBlanks, [in]object Transpose) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.PasteSpecial(Microsoft.Office.Interop.Excel.XlPasteType,Microsoft.Office.Interop.Excel.XlPasteSpecialOperation,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PasteSpecial (Optional Paste As XlPasteType = Microsoft.Office.Interop.Excel.XlPasteType.xlPasteAll, Optional Operation As XlPasteSpecialOperation = Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationNone, Optional SkipBlanks As Object, Optional Transpose As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1928)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Paste" Type="Microsoft.Office.Interop.Excel.XlPasteType" />
        <Parameter Name="Operation" Type="Microsoft.Office.Interop.Excel.XlPasteSpecialOperation" />
        <Parameter Name="SkipBlanks" Type="System.Object" />
        <Parameter Name="Transpose" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Paste">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlPasteType" />. Der Teil des Bereichs, der eingefügt werden soll. Kann eine der folgenden <b>XlPasteType</b> -Konstanten sein:<b>Standard XlPasteAll</b><b>XlPasteAllExceptBorders</b><b>XlPasteColumnWidths</b><b>XlPasteComments</b><b>XlPasteFormats</b><b>XlPasteFormulas</b><b> XlPasteFormulasAndNumberFormats</b><b>XlPasteValidation</b><b>XlPasteValues</b><b>XlPasteValuesAndNumberFormats</b></param>
        <param name="Operation">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlPasteSpecialOperation" />. Der Einfügevorgang. Kann eine der folgenden <b>XlPasteSpecialOperation</b> -Konstanten sein:<b>XlPasteSpecialOperationAdd</b><b>XlPasteSpecialOperationDivide</b><b>XlPasteSpecialOperationMultiply</b><b>XlPasteSpecialOperationNone</b><paramref name="default" /><b>xlPasteSpecialOperationSubtract</b></param>
        <param name="SkipBlanks">Optionales- <b>Objekt</b>. <b>True</b> , wenn keine leeren Zellen im Bereich in der Zwischenablage in den Zielbereich eingefügt werden sollen. Der Standardwert lautet <b>False</b>.</param>
        <param name="Transpose">Optionales- <b>Objekt</b>. <b>True</b> , wenn Zeilen und Spalten vertauschen, wenn der Bereich eingefügt wird. Der Standardwert lautet <b>False</b>.</param>
        <summary>Fügt eine <see cref="T:Microsoft.Office.Interop.Excel.Range" /> aus der Zwischenablage in den angegebenen Bereich.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetic">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Phonetic Phonetic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Phonetic Phonetic" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Phonetic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Phonetic As Phonetic" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Phonetic ^ Phonetic { Microsoft::Office::Interop::Excel::Phonetic ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1391)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1391)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Phonetic</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die <see cref="T:Microsoft.Office.Interop.Excel.Phonetic" /> Objekt, das Informationen zu einer bestimmten phonetischen Textzeichenfolge in einer Zelle enthält.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft bietet Kompatibilität mit früheren Versionen von Microsoft Excel. Verwenden Sie <b>Phonetics</b>(<paramref name="index" />), wobei Index die Indexnummer des phonetischen Texts ist, zur Rückgabe eines einzelnen <see cref="T:Microsoft.Office.Interop.Excel.Phonetic" /> Objekt.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetics">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Phonetics Phonetics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Phonetics Phonetics" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Phonetics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Phonetics As Phonetics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Phonetics ^ Phonetics { Microsoft::Office::Interop::Excel::Phonetics ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1811)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1811)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Phonetics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die <see cref="T:Microsoft.Office.Interop.Excel.Phonetics" /> Auflistung des Bereichs.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotCell">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotCell PivotCell { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PivotCell PivotCell" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.PivotCell" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PivotCell As PivotCell" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::PivotCell ^ PivotCell { Microsoft::Office::Interop::Excel::PivotCell ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2013)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2013)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotCell</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.PivotCell" /> -Objekt, das eine Zelle in einem PivotTable-Bericht darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotField">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotField PivotField { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PivotField PivotField" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.PivotField" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PivotField As PivotField" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::PivotField ^ PivotField { Microsoft::Office::Interop::Excel::PivotField ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(731)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(731)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotField</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.PivotField" /> -Objekt, das das PivotTable-Feld mit der oberen linken Ecke des angegebenen Bereichs darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotItem">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotItem PivotItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PivotItem PivotItem" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.PivotItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PivotItem As PivotItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::PivotItem ^ PivotItem { Microsoft::Office::Interop::Excel::PivotItem ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(740)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(740)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.PivotItem" /> -Objekt, das das PivotTable-Element mit der oberen linken Ecke des angegebenen Bereichs darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotTable">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotTable PivotTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PivotTable PivotTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.PivotTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PivotTable As PivotTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::PivotTable ^ PivotTable { Microsoft::Office::Interop::Excel::PivotTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(716)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(716)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" /> -Objekt, das die linke obere Ecke des den angegebenen Bereich oder dem PivotChart-Bericht zugeordneten PivotTable-Bericht enthält PivotTable-Bericht darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Precedents">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Precedents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Precedents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Precedents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Precedents As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Precedents { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(544)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(544)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das alle Vorgänger einer Zelle darstellt.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Dies kann eine Mehrfachauswahl (eine Vereinigung von <b>Range</b> -Objekten) sein, wenn mehr als ein Vorgänger vorhanden ist.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrefixCharacter">
      <MemberSignature Language="C#" Value="public object PrefixCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object PrefixCharacter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.PrefixCharacter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrefixCharacter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ PrefixCharacter { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(504)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt das Präfix für die Zelle zurück.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Wenn die <see cref="P:Microsoft.Office.Interop.Excel._Application.TransitionNavigKeys" /> -Eigenschaft <b>False</b>ist, ist dieses Präfixzeichen ' für eine Beschriftung oder leer. Wenn die <b>TransitionNavigKeys</b> -Eigenschaft auf <b>True</b>festgelegt ist, werden diese Zeichen ' für eine Beschriftung links ausgerichtet "für eine rechts ausgerichtete Bezeichnung, ^ für zentrierter bezeichnen \ für eine wiederholte Bezeichnung oder leer.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Previous">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Previous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Previous" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Previous" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Previous As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Previous { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(503)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(503)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das die vorherige Zelle darstellt.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Wenn das Objekt einen Bereich ist diese Eigenschaft emuliert Drücken von UMSCHALT + TAB, im Gegensatz zu der Tastenkombination jedoch die-Eigenschaft gibt die vorherige Zelle ohne vorherige darauf verweisen</para>
          <para>Auf einem geschützten Arbeitsblatt gibt diese Eigenschaft die vorhergehende nicht gesperrte Zelle zurück. In einem ungeschützten Blatt, gibt diese Eigenschaft immer die Zelle unmittelbar links von der angegebenen Zelle.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintOut">
      <MemberSignature Language="C#" Value="public object PrintOut (object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate, object PrToFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object PrintOut([in]object From, [in]object To, [in]object Copies, [in]object Preview, [in]object ActivePrinter, [in]object PrintToFile, [in]object Collate, [in]object PrToFileName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.PrintOut(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PrintOut (Optional From As Object, Optional To As Object, Optional Copies As Object, Optional Preview As Object, Optional ActivePrinter As Object, Optional PrintToFile As Object, Optional Collate As Object, Optional PrToFileName As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1772)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="From" Type="System.Object" />
        <Parameter Name="To" Type="System.Object" />
        <Parameter Name="Copies" Type="System.Object" />
        <Parameter Name="Preview" Type="System.Object" />
        <Parameter Name="ActivePrinter" Type="System.Object" />
        <Parameter Name="PrintToFile" Type="System.Object" />
        <Parameter Name="Collate" Type="System.Object" />
        <Parameter Name="PrToFileName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="From">Optionales- <b>Objekt</b>. Die Anzahl der ersten Seite der Druckvorgang gestartet werden soll. Wenn dieses Argument ausgelassen wird, beginnt der Druck am Anfang.</param>
        <param name="To">Optionales- <b>Objekt</b>. Die Anzahl der letzten Seite gedruckt. Wenn dieses Argument ausgelassen wird, endet der Druckvorgang mit der letzten Seite.</param>
        <param name="Copies">Optionales- <b>Objekt</b>. Die Anzahl der zu druckenden Exemplare. Wenn dieses Argument ausgelassen wird, wird eine Kopie gedruckt.</param>
        <param name="Preview">Optionales- <b>Objekt</b>. <b>True,</b> damit Microsoft Excel vor dem Drucken des Objekts die Seitenansicht aufruft. <b>"False"</b> (oder weggelassen), wenn das Objekt sofort gedruckt.</param>
        <param name="ActivePrinter">Optionales- <b>Objekt</b>. Legt den Namen des aktiven Druckers fest.</param>
        <param name="PrintToFile">Optionales- <b>Objekt</b>. <b>True</b> , wenn in eine Datei gedruckt. Wenn <b>PrToFileName</b> nicht angegeben ist, fordert Microsoft Excel den Benutzer zur Eingabe des Namens der Ausgabedatei an.</param>
        <param name="Collate">Optionales- <b>Objekt</b>. <b>True</b> zum Sortieren mehrerer Kopien.</param>
        <param name="PrToFileName">Optionales- <b>Objekt</b>. Wenn <b>PrintToFile</b> auf <b>True</b>festgelegt ist, gibt dieses Argument den Namen der Datei, der Sie drucken möchten.</param>
        <summary>Druckt das Objekt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>"Seiten" in den Beschreibungen des <paramref name="From" /> und <paramref name="To" /> bezieht sich auf gedruckte Seiten – nicht auf sämtliche Seiten des Arbeitsblatts oder der Arbeitsmappe.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintOutEx">
      <MemberSignature Language="C#" Value="public object PrintOutEx (object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate, object PrToFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object PrintOutEx([in]object From, [in]object To, [in]object Copies, [in]object Preview, [in]object ActivePrinter, [in]object PrintToFile, [in]object Collate, [in]object PrToFileName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.PrintOutEx(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PrintOutEx (Optional From As Object, Optional To As Object, Optional Copies As Object, Optional Preview As Object, Optional ActivePrinter As Object, Optional PrintToFile As Object, Optional Collate As Object, Optional PrToFileName As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2361)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="From" Type="System.Object" />
        <Parameter Name="To" Type="System.Object" />
        <Parameter Name="Copies" Type="System.Object" />
        <Parameter Name="Preview" Type="System.Object" />
        <Parameter Name="ActivePrinter" Type="System.Object" />
        <Parameter Name="PrintToFile" Type="System.Object" />
        <Parameter Name="Collate" Type="System.Object" />
        <Parameter Name="PrToFileName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="From">To be added.</param>
        <param name="To">To be added.</param>
        <param name="Copies">To be added.</param>
        <param name="Preview">To be added.</param>
        <param name="ActivePrinter">To be added.</param>
        <param name="PrintToFile">To be added.</param>
        <param name="Collate">To be added.</param>
        <param name="PrToFileName">To be added.</param>
        <summary>Für die interne Verwendung reserviert.</summary>
        <returns>Gibt <see cref="T:System.Object" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintPreview">
      <MemberSignature Language="C#" Value="public object PrintPreview (object EnableChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object PrintPreview([in]object EnableChanges) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.PrintPreview(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PrintPreview (Optional EnableChanges As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(281)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="EnableChanges" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="EnableChanges">
          <b>True,</b> um Änderungen zu aktivieren.</param>
        <summary>Zeigt ein Objekt so an, wie es gedruckt wird.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryTable">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.QueryTable QueryTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.QueryTable QueryTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.QueryTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueryTable As QueryTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::QueryTable ^ QueryTable { Microsoft::Office::Interop::Excel::QueryTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1386)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1386)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.QueryTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.QueryTable" /> -Objekt, das die Abfragetabelle darstellt, die dem angegebenen überschneidet <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Range[object Cell1, object Cell2] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Range(object, object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Range(System.Object,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Range[System::Object ^, System::Object ^] { Microsoft::Office::Interop::Excel::Range ^ get(System::Object ^ Cell1, System::Object ^ Cell2); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(197)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(197)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cell1" Type="System.Object" />
        <Parameter Name="Cell2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Cell1">
          <b>Objekt</b>erforderlich. Der Name des Bereichs. Dies muss eine A1-Bezugsart in der Sprache des Makros. Sie können den Bereichsoperator (Doppelpunkt), der Schnittmengenoperator (ein Leerzeichen) oder der union-Operator (Komma) enthalten. Es kann auch Dollarzeichen enthalten werden, jedoch ignoriert. Sie können einen lokalen, definierten Namen in einem beliebigen Teil des Bereichs. Wenn Sie einen Namen verwenden, wird davon ausgegangen, dass der Name in der Sprache des Makros werden.</param>
        <param name="Cell2">Optionales- <b>Objekt</b>. Die Zelle in der linken oberen und unteren rechten Ecke des Bereichs. Kann ein <b>Range</b> -Objekt, das eine einzelne Zelle, eine ganze Spalte oder eine ganze Zeile enthält, oder es kann eine Zeichenfolge, die den Namen einer einzelne Zelle in der Sprache des Makros.</param>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das eine Zelle oder einen Zellbereich darstellt.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft ist relativ zu der <b>Range</b> -Objekt. Beispielsweise, wenn die Auswahl Zelle C3 befindet, klicken Sie dann Selection.Range("B1") Zelle D3 zurück, da es relativ zur das zurückgegebene <b>Range</b> -Objekt ist die <see cref="P:Microsoft.Office.Interop.Excel._Application.Selection" /> Eigenschaft. Andererseits, gibt ActiveSheet.Range("B1") immer die Zelle B1 zurück.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadingOrder">
      <MemberSignature Language="C#" Value="public int ReadingOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadingOrder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.ReadingOrder" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadingOrder As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReadingOrder { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(975)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(975)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(975)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt zurück oder legt die leserichtung für das angegebene Objekt fest.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Der Rückgabewert kann eine der folgenden Konstanten sein: <b>XlRTL</b> (rechts-nach-links), <b>XlLTR</b> (von links nach rechts) oder <b>XlContext</b>.</para>
          <para>Einige der folgenden Konstanten können möglicherweise nicht zur Verfügung, abhängig von der Unterstützung der Sprache (Englisch USA), beispielsweise), die Sie ausgewählt oder installiert haben.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDuplicates">
      <MemberSignature Language="C#" Value="public void RemoveDuplicates (object Columns, Microsoft.Office.Interop.Excel.XlYesNoGuess Header = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveDuplicates([in]object Columns, [in]valuetype Microsoft.Office.Interop.Excel.XlYesNoGuess Header) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.RemoveDuplicates(System.Object,Microsoft.Office.Interop.Excel.XlYesNoGuess)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveDuplicates (Optional Columns As Object, Optional Header As XlYesNoGuess = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2492)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Columns" Type="System.Object" />
        <Parameter Name="Header" Type="Microsoft.Office.Interop.Excel.XlYesNoGuess" />
      </Parameters>
      <Docs>
        <param name="Columns">Optionales <b>Objekt</b> -Array von Indizes der Spalten, die doppelte Informationen enthalten.  Wenn kein Wert übergeben wird, wird vorausgesetzt, dass alle Spalten doppelten Informationen enthalten.</param>
        <param name="Header">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlYesNoGuess" /> gibt an, ob die erste Zeile Headerinformationen enthält.  <see cref="F:Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo" />Der Standardwert ist. Geben Sie <see cref="F:Microsoft.Office.Interop.Excel.XlYesNoGuess.xlGuess" /> Wenn Excel die Kopfzeile bestimmt werden soll.</param>
        <summary>Entfernt doppelt vorhandene Werte aus einem Wertebereich.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveSubtotal">
      <MemberSignature Language="C#" Value="public object RemoveSubtotal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RemoveSubtotal() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.RemoveSubtotal" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveSubtotal () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ RemoveSubtotal();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(883)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt Teilergebnisse aus einer Liste.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (object What, object Replacement, object LookAt, object SearchOrder, object MatchCase, object MatchByte, object SearchFormat, object ReplaceFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Replace([in]object What, [in]object Replacement, [in]object LookAt, [in]object SearchOrder, [in]object MatchCase, [in]object MatchByte, [in]object SearchFormat, [in]object ReplaceFormat) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Replace(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (What As Object, Replacement As Object, Optional LookAt As Object, Optional SearchOrder As Object, Optional MatchCase As Object, Optional MatchByte As Object, Optional SearchFormat As Object, Optional ReplaceFormat As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(226)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="What" Type="System.Object" />
        <Parameter Name="Replacement" Type="System.Object" />
        <Parameter Name="LookAt" Type="System.Object" />
        <Parameter Name="SearchOrder" Type="System.Object" />
        <Parameter Name="MatchCase" Type="System.Object" />
        <Parameter Name="MatchByte" Type="System.Object" />
        <Parameter Name="SearchFormat" Type="System.Object" />
        <Parameter Name="ReplaceFormat" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="What">
          <b>Objekt</b>erforderlich. Die Zeichenfolge, die in Microsoft Excel gesucht werden soll.</param>
        <param name="Replacement">
          <b>Objekt</b>erforderlich. Die ersetzende Zeichenfolge.</param>
        <param name="LookAt">Optionales- <b>Objekt</b>. Kann eine der folgenden <see cref="T:Microsoft.Office.Interop.Excel.XlLookAt" /> -Konstanten sein: <b>XlWhole</b> oder <b>XlPart</b>.</param>
        <param name="SearchOrder">Optionales- <b>Objekt</b>. Kann eine der folgenden <see cref="T:Microsoft.Office.Interop.Excel.XlSearchOrder" /> -Konstanten sein: <b>XlByRows</b> oder <b>XlByColumns</b>.</param>
        <param name="MatchCase">Optionales- <b>Objekt</b>. Mit  <b>True</b> wird die Groß- und Kleinschreibung bei der Suche berücksichtigt.</param>
        <param name="MatchByte">Optionales- <b>Objekt</b>. Sie können dieses Argument nur, wenn Sie ausgewählt oder mit Doppelbyte-sprachunterstützung in Microsoft Excel installiert haben. <b>True,</b> Double-Byte-Zeichen Übereinstimmung nur Doppelbyte-Zeichen enthalten. <b>False</b> , wenn Doppelbytezeichen entsprechenden Einzel-Byte-Zeichen übereinstimmen.</param>
        <param name="SearchFormat">Optionales- <b>Objekt</b>. Das Suchformat für die Methode.</param>
        <param name="ReplaceFormat">Optionales- <b>Objekt</b>. Das Ersetzungsformat für die Methode.</param>
        <summary>Gibt einen Wert <b>vom Typ Boolean</b> zurück, der Zeichen in Zellen des angegebenen Bereichs angibt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Mit dieser Methode ändert sich die Markierung oder die aktive Zelle.</para>
          <para>Die Einstellungen für <paramref name="LookAt" />, <paramref name="SearchOrder" />, <paramref name="MatchCase" />, und <paramref name="MatchByte" /> jedes Mal, die Sie mit dieser Methode werden gespeichert. Wenn Sie Werte für die Argumente das nächste Mal die-Methode aufrufen angeben, werden die gespeicherten Werte verwendet. Dieser Argumente Ändern der Einstellungen im Dialogfeld Suchen und ändern die Einstellungen im Dialogfeld Suchen ändert die gespeicherten Werte, die verwendet werden, wenn Sie die Argumente auslassen. Um Probleme zu vermeiden, diese Argumente explizit festlegen jedes Mal Sie diese Methode verwenden.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Resize[object RowSize, object ColumnSize] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Resize(object, object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Resize(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Resize(Optional RowSize As Object, Optional ColumnSize As Object) As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Resize[System::Object ^, System::Object ^] { Microsoft::Office::Interop::Excel::Range ^ get(System::Object ^ RowSize, System::Object ^ ColumnSize); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(256)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(256)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowSize" Type="System.Object" />
        <Parameter Name="ColumnSize" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowSize">Optionales- <b>Objekt</b>. Die Anzahl der Zeilen im neuen Bereich. Wenn dieses Argument ausgelassen wird, bleibt die Anzahl der Zeilen im Bereich identisch.</param>
        <param name="ColumnSize">Optionales- <b>Objekt</b>. Die Anzahl der Spalten im neuen Bereich. Wenn dieses Argument ausgelassen wird, bleibt die Anzahl der Spalten im Bereich identisch.</param>
        <summary>Ändert die Größe des angegebenen Bereichs.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Row">
      <MemberSignature Language="C#" Value="public int Row { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Row" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Row" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Row As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Row { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(257)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(257)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die Anzahl der ersten Zeile im ersten Bereich des Bereichs zurück.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowDifferences">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range RowDifferences (object Comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range RowDifferences([in]object Comparison) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.RowDifferences(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RowDifferences (Comparison As Object) As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Office::Interop::Excel::Range ^ RowDifferences(System::Object ^ Comparison);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(511)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Comparison" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Comparison">
          <b>Objekt</b>erforderlich. Eine einzelne Zelle, die mit dem angegebenen Bereich zu vergleichen ist.</param>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das alle Zellen darstellt, deren Inhalt sich von der Vergleichszelle in jeder Zeile unterscheidet.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHeight">
      <MemberSignature Language="C#" Value="public object RowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object RowHeight" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.RowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property RowHeight As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ RowHeight { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(272)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(272)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(272)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die Höhe aller Zeilen im Bereich angegeben, gemessen in Punkten.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft gibt <b>Null</b> zurück, wenn die Zeilen im angegebenen Bereich nicht alle dieselbe Höhe sind.</para>
          <para>Für eine einzelne Zeile, die den Wert der <see cref="P:Microsoft.Office.Interop.Excel.Range.Height" /> -Eigenschaft ist gleich dem Wert der <b>RowHeight</b> -Eigenschaft. Sie können auch die <b>Height</b> -Eigenschaft verwenden, um die Gesamthöhe eines Zellbereichs zurückzugeben.</para>
          <para>Weitere Unterschiede zwischen <b>RowHeight</b> und <b>Height</b> lauten wie folgt:</para>
          <list type="bullet">
            <item>
              <description>
                <b>Höhe</b> ist schreibgeschützt.</description>
            </item>
            <item>
              <description>, Wenn Sie die <b>RowHeight</b> -Eigenschaft der mehrere Zeilen zurück, entweder erhalten Sie die Zeilenhöhe der einzelnen Zeilen (wenn alle Zeilen die gleiche Höhe sind) oder <b>Null</b> (wenn unterschiedlich ist). Wenn Sie die <b>Height</b> -Eigenschaft der mehrere Zeilen zurückgeben, erhalten Sie die Gesamthöhe aller Zeilen.</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rows">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Rows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Rows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Rows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rows As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Rows { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(258)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(258)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das die Zeilen im angegebenen Bereich darstellt.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Wenn ein <b>Range</b> -Objekt zugewiesen, die eine Mehrfachauswahl ist, gibt diese Eigenschaft Zeilen aus dem ersten Bereich des Bereichs.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public object Run (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Run([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Run(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Run (Optional Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(259)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg2">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg3">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg4">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg5">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg6">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg7">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg8">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg9">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg10">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg11">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg12">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg13">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg14">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg15">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg16">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg17">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg18">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg19">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg20">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg21">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg22">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg23">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg24">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg25">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg26">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg27">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg28">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg29">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <param name="Arg30">Optionales- <b>Objekt</b>. Die Argumente, die an die Funktion übergeben werden sollen.</param>
        <summary>Führt das Makro Microsoft Excel an folgendem Speicherort.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Der Bereich muss sich in einer Makrovorlage.</para>
          <para>Sie diese Methode benannte Argumenten verwendet werden können. Argumente müssen nach Position übergeben werden.</para>
          <para>Die <b>Run</b> -Methode gibt den Rückgabewert des aufgerufenen Makros zurück.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public object Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Select() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Select" />
      <MemberSignature Language="VB.NET" Value="Public Function Select () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Select();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(235)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Markiert das Objekt.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Um eine Zelle oder einen Zellbereich ausgewählt haben, verwenden Sie die Select-Methode. Um einer einzelnen Zelle als aktive Zelle festzulegen, verwenden Sie die <see cref="M:Microsoft.Office.Interop.Excel.Range.Activate" /> Methode.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerActions">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Actions ServerActions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Actions ServerActions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.ServerActions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServerActions As Actions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Actions ^ ServerActions { Microsoft::Office::Interop::Excel::Actions ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2491)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2491)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Actions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die Aktionen an, die auf dem SharePoint-Server für ausgeführt werden können einen <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekt.</summary>
        <value>
          <see cref="T:Microsoft.Office.Interop.Excel.Actions" />
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPhonetic">
      <MemberSignature Language="C#" Value="public void SetPhonetic ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPhonetic() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.SetPhonetic" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPhonetic ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetPhonetic();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1812)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt <see cref="T:Microsoft.Office.Interop.Excel.Phonetic" /> -Objekte für alle Zellen im angegebenen Bereich.</summary>
        <remarks>
          <para>Alle vorhandenen <b>Phonetic</b> -Objekte im angegebenen Bereich werden automatisch überschrieben (gelöscht) von den neuen Objekten, die Sie mithilfe dieser Methode hinzugefügt.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public object Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Show() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Show" />
      <MemberSignature Language="VB.NET" Value="Public Function Show () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Show();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(496)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Führt einen Bildlauf durch den Inhalt des aktiven Fensters um den Bereich anzuzeigen.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Der Bereich muss aus einer einzelnen Zelle im aktiven Dokument bestehen.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDependents">
      <MemberSignature Language="C#" Value="public object ShowDependents (object Remove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ShowDependents([in]object Remove) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ShowDependents(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowDependents (Optional Remove As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(877)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Remove" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Remove">Optionales- <b>Objekt</b>. <b>True</b> , wenn eine Ebene der Spurpfeile zu den direkten Nachfolgerzellen entfernt; <b>False</b> , wenn eine Ebene der Spurpfeile zu erweitern. Der Standardwert lautet <b>False</b>.</param>
        <summary>Zeichnet Spurpfeile zu den direkten Nachfolgern des Bereichs.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDetail">
      <MemberSignature Language="C#" Value="public object ShowDetail { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ShowDetail" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.ShowDetail" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowDetail As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ShowDetail { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(585)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(585)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(585)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt <b>True</b> zurück, wenn die Gliederung für den angegebenen Bereich erweitert wird (sodass das Detail der Spalte oder Zeile sichtbar wird).</summary>
        <value>To be added.</value>
        <remarks>
          <para>Der angegebene Bereich muss eine einzelne Hauptspalte oder einer Zeile in einer Gliederung.</para>
          <para>Ist der Bereich in einem PivotTable-Bericht, wird diese Eigenschaft auf <b>True</b> festgelegt, wenn das Element mit Details angezeigt wird.</para>
          <para>Wenn nicht um der angegebene Bereich in einem PivotTable-Bericht handelt, sind die folgenden Aussagen true:</para>
          <list type="bullet">
            <item>
              <description>Muss der Bereich in einer einzelnen Hauptzeile oder Spalte sein.</description>
            </item>
            <item>
              <description>Diese Eigenschaft gibt <b>False</b> zurück, wenn alle untergeordneten Zellen der Zeile oder Spalte ausgeblendet sind.</description>
            </item>
            <item>
              <description>Durch Festlegen dieser Eigenschaft auf <b>True</b> entspricht und der Anzeige aller untergeordneten Zellen der Hauptzeile oder -Spalte.</description>
            </item>
            <item>
              <description>Durch Festlegen dieser Eigenschaft auf <b>false festgelegt</b> ist gleichbedeutend mit dem Ausblenden aller untergeordneten Zellen der Hauptzeile oder -Spalte.</description>
            </item>
            <item>
              <description>, Wenn der angegebene Bereich in einem PivotTable-Bericht ist, es ist möglich, diese Eigenschaft für mehrere Zellen gleichzeitig festlegen, wenn der Bereich zusammenhängend ist. Diese Eigenschaft kann nur verwendet werden, wenn der Bereich eine einzelne Zelle ist zurückgegeben werden.</description>
            </item>
          </list>
          <para>Diese Eigenschaft steht für OLAP-Datenquellen nicht.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowErrors">
      <MemberSignature Language="C#" Value="public object ShowErrors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ShowErrors() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ShowErrors" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowErrors () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ShowErrors();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(878)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zeichnet Spurpfeile durch die Struktur auf die Zelle, die die Fehlerquelle ist und der Bereich zurückgegeben, der die Zelle enthält.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowPrecedents">
      <MemberSignature Language="C#" Value="public object ShowPrecedents (object Remove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ShowPrecedents([in]object Remove) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ShowPrecedents(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowPrecedents (Optional Remove As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(879)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Remove" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Remove">Optionales- <b>Objekt</b>. <b>True</b> , wenn eine Ebene der Spurpfeile zu den direkten Vorgängerzellen entfernt; <b>False</b> , wenn eine Ebene der Spurpfeile zu erweitern. Der Standardwert lautet <b>False</b>.</param>
        <summary>Zeichnet Spurpfeile zu den direkten Vorgängerzellen des Bereichs.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShrinkToFit">
      <MemberSignature Language="C#" Value="public object ShrinkToFit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ShrinkToFit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.ShrinkToFit" />
      <MemberSignature Language="VB.NET" Value="Public Property ShrinkToFit As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ShrinkToFit { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(209)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(209)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(209)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob Text automatisch an die verfügbare Spaltenbreite angepasst wird.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft gibt <b>True</b> zurück, wenn Text automatisch angepasst in die verfügbare Spaltenbreite und <b>Null</b> , wenn diese Eigenschaft nicht, auf den gleichen Wert für alle Zellen im angegebenen Bereich festgelegt ist an.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartTags">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SmartTags SmartTags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SmartTags SmartTags" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.SmartTags" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SmartTags As SmartTags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::SmartTags ^ SmartTags { Microsoft::Office::Interop::Excel::SmartTags ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2016)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2016)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SmartTags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.SmartTags" /> -Objekt, das den Bezeichner für die angegebene Zelle darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public object Sort (object Key1, Microsoft.Office.Interop.Excel.XlSortOrder Order1 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, object Key2, object Type, Microsoft.Office.Interop.Excel.XlSortOrder Order2 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, object Key3, Microsoft.Office.Interop.Excel.XlSortOrder Order3 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Microsoft.Office.Interop.Excel.XlYesNoGuess Header = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo, object OrderCustom, object MatchCase, Microsoft.Office.Interop.Excel.XlSortOrientation Orientation = Microsoft.Office.Interop.Excel.XlSortOrientation.xlSortRows, Microsoft.Office.Interop.Excel.XlSortMethod SortMethod = Microsoft.Office.Interop.Excel.XlSortMethod.xlPinYin, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption1 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption2 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption3 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Sort([in]object Key1, [in]valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order1, [in]object Key2, [in]object Type, [in]valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order2, [in]object Key3, [in]valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order3, [in]valuetype Microsoft.Office.Interop.Excel.XlYesNoGuess Header, [in]object OrderCustom, [in]object MatchCase, [in]valuetype Microsoft.Office.Interop.Excel.XlSortOrientation Orientation, [in]valuetype Microsoft.Office.Interop.Excel.XlSortMethod SortMethod, [in]valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption1, [in]valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption2, [in]valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Sort(System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,Microsoft.Office.Interop.Excel.XlYesNoGuess,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSortOrientation,Microsoft.Office.Interop.Excel.XlSortMethod,Microsoft.Office.Interop.Excel.XlSortDataOption,Microsoft.Office.Interop.Excel.XlSortDataOption,Microsoft.Office.Interop.Excel.XlSortDataOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort (Optional Key1 As Object, Optional Order1 As XlSortOrder = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Optional Key2 As Object, Optional Type As Object, Optional Order2 As XlSortOrder = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Optional Key3 As Object, Optional Order3 As XlSortOrder = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Optional Header As XlYesNoGuess = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo, Optional OrderCustom As Object, Optional MatchCase As Object, Optional Orientation As XlSortOrientation = Microsoft.Office.Interop.Excel.XlSortOrientation.xlSortRows, Optional SortMethod As XlSortMethod = Microsoft.Office.Interop.Excel.XlSortMethod.xlPinYin, Optional DataOption1 As XlSortDataOption = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Optional DataOption2 As XlSortDataOption = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Optional DataOption3 As XlSortDataOption = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(880)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key1" Type="System.Object" />
        <Parameter Name="Order1" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Key2" Type="System.Object" />
        <Parameter Name="Type" Type="System.Object" />
        <Parameter Name="Order2" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Key3" Type="System.Object" />
        <Parameter Name="Order3" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Header" Type="Microsoft.Office.Interop.Excel.XlYesNoGuess" />
        <Parameter Name="OrderCustom" Type="System.Object" />
        <Parameter Name="MatchCase" Type="System.Object" />
        <Parameter Name="Orientation" Type="Microsoft.Office.Interop.Excel.XlSortOrientation" />
        <Parameter Name="SortMethod" Type="Microsoft.Office.Interop.Excel.XlSortMethod" />
        <Parameter Name="DataOption1" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
        <Parameter Name="DataOption2" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
        <Parameter Name="DataOption3" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
      </Parameters>
      <Docs>
        <param name="Key1">Optionales- <b>Objekt</b>. Das erste Sortierfeld, entweder als Text (ein PivotTable-Feld oder den Bereich Name) oder ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt ("Abteilung" oder Cells (1, 1), beispielsweise).</param>
        <param name="Order1">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" />. Die Sortierreihenfolge für das Feld oder im angegebenen Bereich <paramref name="Key1" />. Kann eine der folgenden <b>XlSortOrder</b> -Konstanten sein:<b>XlDescending</b>. Sortiert die <paramref name="Key1" /> in absteigender Reihenfolge. <b>xlAscending</b><paramref name="default" />. Sortiert die <paramref name="Key1" /> in aufsteigender Reihenfolge.</param>
        <param name="Key2">Optionales- <b>Objekt</b>. Das zweite Sortierfeld, entweder als Text (ein PivotTable-Feld oder den Bereich Name) oder ein <b>Range</b> -Objekt. Wenn Sie dieses Argument auslassen, ist es kein zweites Sortierfeld. Kann beim Sortieren von PivotTable-Berichten verwendet werden.</param>
        <param name="Type">Optionales- <b>Objekt</b>. Gibt an, welche Elemente sortiert werden sollen. Verwenden Sie dieses Argument nur beim Sortieren von PivotTable-Berichten. Kann eine der folgenden <b>XlSortType</b> -Konstanten sein:<b>XlSortLabels</b>. Sortiert den PivotTable-Bericht nach Beschriftungen. <b>XlSortValues</b>. Sortiert den PivotTable-Bericht nach Werten.</param>
        <param name="Order2">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" />. Die Sortierreihenfolge für das Feld oder im angegebenen Bereich <paramref name="Key2" />. Kann beim Sortieren von PivotTable-Berichten verwendet werden. Kann eine der folgenden <b>XlSortOrder</b> -Konstanten sein:<b>XlDescending</b>. Sortiert die <paramref name="Key2" /> in absteigender Reihenfolge. <b>xlAscending</b><paramref name="default" />. Sortiert die <paramref name="Key2" /> in aufsteigender Reihenfolge.</param>
        <param name="Key3">Optionales- <b>Objekt</b>. Das dritte Sortierfeld, entweder als Text (ein Bereichsname) oder ein <b>Range</b> -Objekt. Wenn Sie dieses Argument auslassen, ist es kein drittes Sortierfeld. Kann beim Sortieren von PivotTable-Berichten verwendet werden.</param>
        <param name="Order3">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" />. Die Sortierreihenfolge für das Feld oder im angegebenen Bereich <paramref name="Key3" />. Kann beim Sortieren von PivotTable-Berichten verwendet werden. Kann eine der folgenden <b>XlSortOrder</b> -Konstanten sein:<b>XlDescending</b>. Sortiert die <paramref name="Key3" /> in absteigender Reihenfolge. <b>xlAscending</b><paramref name="default" />. Sortiert die <paramref name="Key3" /> in aufsteigender Reihenfolge.</param>
        <param name="Header">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlYesNoGuess" />. Gibt an, ob die erste Zeile Kopfzeilen enthält. Kann beim Sortieren von PivotTable-Berichten verwendet werden. Kann eine der folgenden <b>XlYesNoGuess</b> -Konstanten sein:<b>XlGuess</b>. Lassen Sie Microsoft Excel zu bestimmen, ob eine Überschrift vorhanden ist, und wo sofern vorhanden. <b>xlNo</b><paramref name="default" />. (Der gesamte Bereich soll sortiert werden). <b>XlYes</b>. (Der gesamte Bereich soll nicht sortiert werden).</param>
        <param name="OrderCustom">Optionales- <b>Objekt</b>. Dieses Argument ist ein 1 basierendes ganzzahliges Offset für die Liste der benutzerdefinierten Sortierreihenfolgen an. Wenn Sie weglassen <paramref name="OrderCustom" />, wird eine normale Sortierung verwendet.</param>
        <param name="MatchCase">Optionales- <b>Objekt</b>. <b>True</b> , wenn eine Sortierung Groß-/Kleinschreibung beachtet werden; <b>False</b> , wenn eine Sortierung durchzuführen, die Groß-/ Kleinschreibung nicht beachtet wird. Kann beim Sortieren von PivotTable-Berichten verwendet werden.</param>
        <param name="Orientation">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrientation" />. Die Ausrichtung der Sortierung. Kann eine der folgenden <b>XlSortOrientation</b> -Konstanten sein:<b>XlSortRows</b><paramref name="default" />. Sortiert nach Zeilen. <b>XlSortColumns</b>. Sortiert nach Spalten.</param>
        <param name="SortMethod">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSortMethod" />. Der Typ der Sortierung. Einige dieser Konstanten stehen Ihnen, abhängig von der ausgewählten oder installierten Sprachunterstützung (z. B. Deutsch), möglicherweise nicht zur Verfügung. Kann eine der folgenden <b>XlSortMethod</b> -Konstanten sein:<b>XlStroke</b> Sortierung nach der Anzahl der Striche in jedem Zeichen. <b>xlPinYin</b><paramref name="default" />. Phonetische chinesische Sortierreihenfolge für Zeichen.</param>
        <param name="DataOption1">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" />. Gibt an, wie Text in sortiert <paramref name="Key 1" />. Kann beim Sortieren von PivotTable-Berichten verwendet werden. Kann eine der folgenden <b>XlSortDataOption</b> -Konstanten sein:<b>xlSortTextAsNumbers verwendet</b>. Text für die Sortierung als numerische Daten zu behandeln. <b>xlSortNormal</b><paramref name="default" />. Numerische Daten und Textdaten sortiert separat.</param>
        <param name="DataOption2">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" />. Gibt an, wie Text in sortiert <paramref name="Key 2" />. Kann beim Sortieren von PivotTable-Berichten verwendet werden. Kann eine der folgenden <b>XlSortDataOption</b> -Konstanten sein:<b>xlSortTextAsNumbers verwendet</b>. Text behandeln für die Sortierung als numerische Daten. <b>xlSortNormal</b><paramref name="default" />. Numerische Daten und Textdaten sortiert separat.</param>
        <param name="DataOption3">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" />. Gibt an, wie Text in Schlüssel 3 sortiert. Kann beim Sortieren von PivotTable-Berichten verwendet werden. Kann eine der folgenden <b>XlSortDataOption</b> -Konstanten sein:<b>xlSortTextAsNumbers verwendet</b>. Text behandeln für die Sortierung als numerische Daten. <b>xlSortNormal</b><paramref name="default" />. Numerische Daten und Textdaten sortiert separat.</param>
        <summary>Sortiert einen PivotTable-Bericht, einem Bereich oder der aktiven Region, wenn der angegebene Bereich nur eine Zelle enthält.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Die Einstellungen für <paramref name="Header" />, <paramref name="Order1" />, <paramref name="Order2" />, <paramref name="Order3" />, <paramref name="OrderCustom" />, und <paramref name="Orientation" /> werden gespeichert, für die bestimmte Arbeitsmappe, jedes Mal Sie diese Methode verwenden. Wenn Sie Werte für die Argumente das nächste Mal die-Methode aufrufen angeben, werden die gespeicherten Werte verwendet. Diese Argumente explizit jedes Mal, wenn Sie nicht die gespeicherten Werte verwenden, verwenden <b>Sort</b> -Methode, festlegen.</para>
          <para>Sind Textzeichenfolgen, die nicht in numerische Daten umgewandelt werden normalerweise sortiert.</para>
          <para>Wenn mit der <b>Sort</b> -Methode keine Argumente definiert werden, sortiert Microsoft Excel die Auswahl in aufsteigender Reihenfolge sortiert werden,.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SortSpecial">
      <MemberSignature Language="C#" Value="public object SortSpecial (Microsoft.Office.Interop.Excel.XlSortMethod SortMethod = Microsoft.Office.Interop.Excel.XlSortMethod.xlPinYin, object Key1, Microsoft.Office.Interop.Excel.XlSortOrder Order1 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, object Type, object Key2, Microsoft.Office.Interop.Excel.XlSortOrder Order2 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, object Key3, Microsoft.Office.Interop.Excel.XlSortOrder Order3 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Microsoft.Office.Interop.Excel.XlYesNoGuess Header = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo, object OrderCustom, object MatchCase, Microsoft.Office.Interop.Excel.XlSortOrientation Orientation = Microsoft.Office.Interop.Excel.XlSortOrientation.xlSortRows, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption1 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption2 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption3 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object SortSpecial([in]valuetype Microsoft.Office.Interop.Excel.XlSortMethod SortMethod, [in]object Key1, [in]valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order1, [in]object Type, [in]object Key2, [in]valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order2, [in]object Key3, [in]valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order3, [in]valuetype Microsoft.Office.Interop.Excel.XlYesNoGuess Header, [in]object OrderCustom, [in]object MatchCase, [in]valuetype Microsoft.Office.Interop.Excel.XlSortOrientation Orientation, [in]valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption1, [in]valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption2, [in]valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.SortSpecial(Microsoft.Office.Interop.Excel.XlSortMethod,System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,Microsoft.Office.Interop.Excel.XlYesNoGuess,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSortOrientation,Microsoft.Office.Interop.Excel.XlSortDataOption,Microsoft.Office.Interop.Excel.XlSortDataOption,Microsoft.Office.Interop.Excel.XlSortDataOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function SortSpecial (Optional SortMethod As XlSortMethod = Microsoft.Office.Interop.Excel.XlSortMethod.xlPinYin, Optional Key1 As Object, Optional Order1 As XlSortOrder = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Optional Type As Object, Optional Key2 As Object, Optional Order2 As XlSortOrder = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Optional Key3 As Object, Optional Order3 As XlSortOrder = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Optional Header As XlYesNoGuess = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo, Optional OrderCustom As Object, Optional MatchCase As Object, Optional Orientation As XlSortOrientation = Microsoft.Office.Interop.Excel.XlSortOrientation.xlSortRows, Optional DataOption1 As XlSortDataOption = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Optional DataOption2 As XlSortDataOption = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Optional DataOption3 As XlSortDataOption = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(881)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SortMethod" Type="Microsoft.Office.Interop.Excel.XlSortMethod" />
        <Parameter Name="Key1" Type="System.Object" />
        <Parameter Name="Order1" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Type" Type="System.Object" />
        <Parameter Name="Key2" Type="System.Object" />
        <Parameter Name="Order2" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Key3" Type="System.Object" />
        <Parameter Name="Order3" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Header" Type="Microsoft.Office.Interop.Excel.XlYesNoGuess" />
        <Parameter Name="OrderCustom" Type="System.Object" />
        <Parameter Name="MatchCase" Type="System.Object" />
        <Parameter Name="Orientation" Type="Microsoft.Office.Interop.Excel.XlSortOrientation" />
        <Parameter Name="DataOption1" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
        <Parameter Name="DataOption2" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
        <Parameter Name="DataOption3" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
      </Parameters>
      <Docs>
        <param name="SortMethod">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSortMethod" />. Der Typ der Sortierung. Einige dieser Konstanten stehen Ihnen, abhängig von der ausgewählten oder installierten Sprachunterstützung (z. B. Deutsch), möglicherweise nicht zur Verfügung. Kann eine der folgenden <b>XlSortMethod</b> -Konstanten sein:<b>XlStroke</b>. Sortierung nach der Anzahl der Striche in jedem Zeichen. <b>xlPinYin</b><paramref name="default" />. Phonetische chinesische Sortierreihenfolge für Zeichen.</param>
        <param name="Key1">Optionales- <b>Objekt</b>. Das erste Sortierfeld, entweder als Text (ein PivotTable-Feld oder den Bereich Name) oder ein <b>Range</b> -Objekt ("Abteilung" oder Cells (1, 1), beispielsweise).</param>
        <param name="Order1">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" />. Die Sortierreihenfolge für das Feld oder im angegebenen Bereich der <paramref name="Key1" /> Argument. Kann eine der folgenden <b>XlSortOrder</b> -Konstanten sein:<b>XlDescending</b>. Sortiert die <paramref name="Key1" /> in absteigender Reihenfolge. <b>xlAscending</b><paramref name="default" />. Sortiert die <paramref name="Key1" /> in aufsteigender Reihenfolge.</param>
        <param name="Type">Optionales- <b>Objekt</b>. Gibt an, welche Elemente sortiert werden sollen. Verwenden Sie dieses Argument nur beim Sortieren von PivotTable-Berichten.</param>
        <param name="Key2">Optionales- <b>Objekt</b>. Das zweite Sortierfeld, entweder als Text (ein PivotTable-Feld oder den Bereich Name) oder ein <b>Range</b> -Objekt. Wenn Sie dieses Argument auslassen, ist es kein zweites Sortierfeld. Kann beim Sortieren von PivotTable-Berichten verwendet werden. Kann eine der folgenden <b>XlSortType</b> -Konstanten sein:<b>XlSortLabels</b>. Sortiert den PivotTable-Bericht nach Beschriftungen. <b>XlSortValues</b>. Sortiert den PivotTable-Bericht nach Werten.</param>
        <param name="Order2">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" />. Die Sortierreihenfolge für das Feld oder im angegebenen Bereich der <paramref name="Key2" /> Argument. Kann beim Sortieren von PivotTable-Berichten verwendet werden. Kann eine der folgenden <b>XlSortOrder</b> -Konstanten sein:<b>XlDescending</b>. Sortiert die <paramref name="Key2" /> in absteigender Reihenfolge <b>XlAscending</b> Standardwert. Sortiert die <paramref name="Key2" /> in aufsteigender Reihenfolge.</param>
        <param name="Key3">Optionales- <b>Objekt</b>. Das dritte Sortierfeld, entweder als Text (ein Bereichsname) oder ein <b>Range</b> -Objekt. Wenn Sie dieses Argument auslassen, ist es kein drittes Sortierfeld. Kann beim Sortieren von PivotTable-Berichten verwendet werden.</param>
        <param name="Order3">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" />. Die Sortierreihenfolge für das Feld oder im angegebenen Bereich der <paramref name="Key3" /> Argument. Kann beim Sortieren von PivotTable-Berichten verwendet werden. Kann eine der folgenden <b>XlSortOrder</b> -Konstanten sein: <b>XlDescending</b>. Sortiert die <paramref name="Key3" /> in absteigender Reihenfolge. <b>xlAscending</b><paramref name="default" />. Sortiert die <paramref name="Key3" /> in aufsteigender Reihenfolge.</param>
        <param name="Header">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlYesNoGuess" />. Gibt an, ob die erste Zeile Kopfzeilen enthält. Kann beim Sortieren von PivotTable-Berichten verwendet werden. Kann eine der folgenden <b>XlYesNoGuess</b> -Konstanten sein:<b>XlGuess</b>. Können Sie in Microsoft Excel zu bestimmen, ob eine Überschrift vorhanden ist, und wo sofern vorhanden. <b>xlNo</b><paramref name="default" />. Der gesamte Bereich soll sortiert werden. <b>XlYes</b>. Der gesamte Bereich soll nicht sortiert werden.</param>
        <param name="OrderCustom">Optionales- <b>Objekt</b>. Dieses Argument ist ein 1 basierendes ganzzahliges Offset für die Liste der benutzerdefinierten Sortierreihenfolgen an. Wenn Sie weglassen <paramref name="OrderCustom" />, (normale Sortierreihenfolge) wird verwendet.</param>
        <param name="MatchCase">Optionales- <b>Objekt</b>. <b>True</b> , wenn eine Sortierung Groß-/Kleinschreibung beachtet werden; <b>False</b> , wenn eine Sortierung durchzuführen, die Groß-/ Kleinschreibung nicht beachtet wird. Kann beim Sortieren von PivotTable-Berichten verwendet werden.</param>
        <param name="Orientation">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrientation" />. Die Ausrichtung der Sortierung. Kann eine der folgenden <b>XlSortOrientation</b> -Konstanten sein:<b>XlSortRows</b><paramref name="default" />. Die Sortierung erfolgt nach Zeile. <b>XlSortColumns</b>. Die Sortierung erfolgt nach Spalte.</param>
        <param name="DataOption1">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" />. Gibt an, wie Text in sortiert <paramref name="Key1" />. Kann beim Sortieren von PivotTable-Berichten verwendet werden. Kann eine der folgenden <b>XlSortDataOption</b> -Konstanten sein:<b>xlSortTextAsNumbers verwendet</b>. Text behandeln für die Sortierung als numerische Daten. <b>xlSortNormal</b><paramref name="default" />. Numerische Daten und Textdaten sortiert separat.</param>
        <param name="DataOption2">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" />. Gibt an, wie Text in sortiert <paramref name="Key 2" />. Kann beim Sortieren von PivotTable-Berichten verwendet werden. Kann eine der folgenden <b>XlSortDataOption</b> -Konstanten sein:<b>xlSortTextAsNumbers verwendet</b>. Text behandeln für die Sortierung als numerische Daten. <b>xlSortNormal</b><paramref name="default" />. Numerische Daten und Textdaten sortiert separat.</param>
        <param name="DataOption3">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" />. Gibt an, wie Text in sortiert <paramref name="Key 3" />. Kann beim Sortieren von PivotTable-Berichten verwendet werden. Kann eine der folgenden <b>XlSortDataOption</b> -Konstanten sein:<b>xlSortTextAsNumbers verwendet</b>. Numerische Textdaten behandeln für die Sortierung. <b>xlSortNormal</b><paramref name="default" />. Numerische Daten und Textdaten sortiert separat.</param>
        <summary>Verwendet ostasiatischen Sortiermethoden sortiert den Bereich oder einem PivotTable-Bericht oder die Methode für die aktuelle Region verwendet, wenn der Bereich nur eine Zelle enthält. Beispielsweise werden Japanisch in der Reihenfolge der Kana-Silbenschrift sortiert.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Wenn mit der <b>SortSpecial</b> -Methode keine Argumente definiert werden, sortiert Microsoft Excel die Auswahl in aufsteigender Reihenfolge sortiert werden.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SoundNote">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SoundNote SoundNote { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SoundNote SoundNote" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.SoundNote" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SoundNote As SoundNote" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::SoundNote ^ SoundNote { Microsoft::Office::Interop::Excel::SoundNote ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(916)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(916)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SoundNote</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Diese Eigenschaft sollte nicht verwendet werden. Audionotizen wurden aus Microsoft Excel entfernt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SparklineGroups">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SparklineGroups SparklineGroups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SparklineGroups SparklineGroups" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.SparklineGroups" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SparklineGroups As SparklineGroups" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::SparklineGroups ^ SparklineGroups { Microsoft::Office::Interop::Excel::SparklineGroups ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2853)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2853)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SparklineGroups</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein <see cref="T:Microsoft.Office.Interop.Excel.SparklineGroups" /> -Objekt, das eine vorhandene Gruppe von Sparklines aus dem angegebenen Bereich darstellt.</summary>
        <value>Ein <see cref="T:Microsoft.Office.Interop.Excel.SparklineGroups" /> -Objekt, das eine vorhandene Gruppe von Sparklines aus dem angegebenen Bereich darstellt.</value>
        <remarks>
          <para>Schreibgeschützt.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (object SpeakDirection, object SpeakFormulas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak([in]object SpeakDirection, [in]object SpeakFormulas) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Speak(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Speak (Optional SpeakDirection As Object, Optional SpeakFormulas As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2017)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SpeakDirection" Type="System.Object" />
        <Parameter Name="SpeakFormulas" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="SpeakDirection">Optionales- <b>Objekt</b>. Die sprachliche Ausgaberichtung nach Zeilen oder Spalten.</param>
        <param name="SpeakFormulas">Optionales- <b>Objekt</b>. <b>True</b> bewirkt Formeln auf die Sprachsynthese (TTS) Engine für Zellen, die Formeln enthalten gesendet werden. Der Wert wird gesendet, wenn die Zellen nicht mit Formeln verfügen. <b>"False"</b> (Standardeinstellung) bewirkt, dass Werte immer an das TTS-Modul gesendet werden.</param>
        <summary>Führt dazu, dass die Zellen des Bereichs in Zeilen- oder Spaltenreihenfolge sprachlich ausgegeben werden.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecialCells">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range SpecialCells (Microsoft.Office.Interop.Excel.XlCellType Type, object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range SpecialCells([in]valuetype Microsoft.Office.Interop.Excel.XlCellType Type, [in]object Value) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.SpecialCells(Microsoft.Office.Interop.Excel.XlCellType,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpecialCells (Type As XlCellType, Optional Value As Object) As Range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(410)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlCellType" />
        <Parameter Name="Value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">Erforderliche <see cref="T:Microsoft.Office.Interop.Excel.XlCellType" />. Die einzubeziehenden Zellen. Kann eine der folgenden <b>XlCellType</b> -Konstanten sein:<b>XlCellTypeAllFormatConditions</b>. Zellen mit beliebigem Format. <b>XlCellTypeAllValidation</b>. Zellen mit Gültigkeitskriterien. <b>XlCellTypeBlanks</b>. Leere Zellen. <b>XlCellTypeComments</b>. Zellen mit Hinweisen. <b>XlCellTypeConstants</b>. Zellen mit Konstanten. <b>XlCellTypeFormulas</b>. Zellen mit Formeln <b>XlCellTypeLastCell</b>. Die letzte Zelle im verwendeten Bereich. <b>XlCellTypeSameFormatConditions</b>. Zellen mit gleichem Format. <b>XlCellTypeSameValidation</b>. Zellen mit gleichen Gültigkeitskriterien. <b>XlCellTypeVisible</b>. Alle sichtbaren Zellen</param>
        <param name="Value">Optionales- <b>Objekt</b>. Wenn <paramref name="Type" /><b>XlCellTypeConstants</b> oder <b>XlCellTypeFormulas</b>, ist dieses Argument wird verwendet, um welche Typen von Zellen im Ergebnis mit eingeschlossen werden. Diese Werte können hinzugefügt werden zusammen, um mehr als einen Typ zurückzugeben. Standardmäßig werden alle Konstanten oder Formeln, unabhängig davon, welche den Typ auswählen. Kann eine der folgenden <see cref="T:Microsoft.Office.Interop.Excel.XlSpecialCellsValue" /> Konstanten:<b>XlErrors</b><b>XlLogical</b><b>XlNumbers</b><b>XlTextValues</b></param>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Range" /> -Objekt, das alle Zellen darstellt, die dem angegebenen Wert übereinstimmen.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public object Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Style" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Style { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(260)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(260)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(260)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Style" /> -Objekt, das die Formatvorlage des angegebenen Bereichs darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeTo">
      <MemberSignature Language="C#" Value="public object SubscribeTo (string Edition, Microsoft.Office.Interop.Excel.XlSubscribeToFormat Format = Microsoft.Office.Interop.Excel.XlSubscribeToFormat.xlSubscribeToText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object SubscribeTo([in]string Edition, [in]valuetype Microsoft.Office.Interop.Excel.XlSubscribeToFormat Format) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.SubscribeTo(System.String,Microsoft.Office.Interop.Excel.XlSubscribeToFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function SubscribeTo (Edition As String, Optional Format As XlSubscribeToFormat = Microsoft.Office.Interop.Excel.XlSubscribeToFormat.xlSubscribeToText) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(481)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Edition" Type="System.String" />
        <Parameter Name="Format" Type="Microsoft.Office.Interop.Excel.XlSubscribeToFormat" />
      </Parameters>
      <Docs>
        <param name="Edition">Dieser Parameter ist nur für Macintosh gedacht und sollte nicht verwendet werden.</param>
        <param name="Format">Dieser Parameter ist nur für Macintosh gedacht und sollte nicht verwendet werden.</param>
        <summary>Sie haben Hilfe zu einem Schlüsselwort nur auf dem Macintosh verwendet wird. Informationen zu diesem Schlüsselwort finden Sie in der Sprachreferenzhilfe von Microsoft Office Macintosh Edition enthalten.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtotal">
      <MemberSignature Language="C#" Value="public object Subtotal (int GroupBy, Microsoft.Office.Interop.Excel.XlConsolidationFunction Function, object TotalList, object Replace, object PageBreaks, Microsoft.Office.Interop.Excel.XlSummaryRow SummaryBelowData = Microsoft.Office.Interop.Excel.XlSummaryRow.xlSummaryBelow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Subtotal([in]int32 GroupBy, [in]valuetype Microsoft.Office.Interop.Excel.XlConsolidationFunction Function, [in]object TotalList, [in]object Replace, [in]object PageBreaks, [in]valuetype Microsoft.Office.Interop.Excel.XlSummaryRow SummaryBelowData) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Subtotal(System.Int32,Microsoft.Office.Interop.Excel.XlConsolidationFunction,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSummaryRow)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtotal (GroupBy As Integer, Function As XlConsolidationFunction, TotalList As Object, Optional Replace As Object, Optional PageBreaks As Object, Optional SummaryBelowData As XlSummaryRow = Microsoft.Office.Interop.Excel.XlSummaryRow.xlSummaryBelow) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(882)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="GroupBy" Type="System.Int32" />
        <Parameter Name="Function" Type="Microsoft.Office.Interop.Excel.XlConsolidationFunction" />
        <Parameter Name="TotalList" Type="System.Object" />
        <Parameter Name="Replace" Type="System.Object" />
        <Parameter Name="PageBreaks" Type="System.Object" />
        <Parameter Name="SummaryBelowData" Type="Microsoft.Office.Interop.Excel.XlSummaryRow" />
      </Parameters>
      <Docs>
        <param name="GroupBy">
          <b>Integer</b>erforderlich. Das Feld, nach dem gruppiert werden, als 1 basierendes ganzzahliges Offset. Weitere Informationen finden Sie im Beispiel.</param>
        <param name="Function">Erforderliche <see cref="T:Microsoft.Office.Interop.Excel.XlConsolidationFunction" />. Die subtotal-Funktion. Kann eine der folgenden <b>XlConsolidationFunction</b> -Konstanten sein:<b>XlAverage</b><b>XlCount</b><b>XlCountNums</b><b>XlMax</b><b>XlMin</b><b>XlProduct</b><b>XlStDev</b><b>XlStDevP</b><b>XlSum</b><b>XlUnknown </b><b>XlVar</b><b>XlVarP</b></param>
        <param name="TotalList">
          <b>Objekt</b>erforderlich. Ein Array von Feld 1-basierter offsets, d. h. der Felder, die Teilergebnisse hinzugefügt werden. Weitere Informationen finden Sie im Beispiel.</param>
        <param name="Replace">Optionales- <b>Objekt</b>. <b>True</b> , wenn bereits vorhandene Teilergebnisse. Der Standardwert lautet <b>False</b>.</param>
        <param name="PageBreaks">Optionales- <b>Objekt</b>. <b>True</b> , wenn Seite hinzugefügt nach jeder Gruppe einen Seitenumbruch. Der Standardwert lautet <b>False</b>.</param>
        <param name="SummaryBelowData">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlSummaryRow" />. Platziert die Zusammenfassungsdaten relativ zum Teilergebnis. Kann eine der folgenden <b>XlSummaryRow</b> -Konstanten sein:<b>XlSummaryAbove</b><b>XlSummaryBelow</b><paramref name="default" /></param>
        <summary>Erstellt Teilergebnisse für den Bereich (bzw. für die aktuelle Region, wenn der Bereich nur aus einer Zelle besteht).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Summary">
      <MemberSignature Language="C#" Value="public object Summary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Summary" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Summary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Summary As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Summary { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(273)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(273)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob der Bereich eine Gliederung Hauptzeile oder Hauptspalte ist.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft gibt <b>True</b> zurück, wenn der Bereich eine Gliederung Hauptzeile oder Hauptspalte.</para>
          <para>Des Bereichs sollte eine Zeile oder Spalte.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public object Table (object RowInput, object ColumnInput);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Table([in]object RowInput, [in]object ColumnInput) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Table(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Table (Optional RowInput As Object, Optional ColumnInput As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(497)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowInput" Type="System.Object" />
        <Parameter Name="ColumnInput" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowInput">Optionales- <b>Objekt</b>. Eine einzelne Zelle, die als Eingabe für die Zeilen der Tabelle verwendet wird.</param>
        <param name="ColumnInput">Optionales- <b>Objekt</b>. Eine einzelne Zelle, die als Eingabe für die Spalten der Tabelle verwendet wird.</param>
        <summary>Erstellt eine Datentabelle basierend auf Eingabewerten und Formeln, die in einem Arbeitsblatt definiert sind.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Verwenden Sie Datentabellen zum Ausführen einer Was-Wenn-Analysis durch bestimmte Konstantenwerte auf einem Arbeitsblatt zu finden Sie unter Auswirkungen von Werten in anderen Zellen ändern.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public object Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Text" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Text { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(138)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(138)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den Text des angegebenen Objekts zurück oder legt ihn fest.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Für die <see cref="T:Microsoft.Office.Interop.Excel.Phonetic" /> -Objekt, diese Eigenschaft gibt zurück oder legt ihren phonetischen Text. Diese Eigenschaft kann nicht auf <b>Null</b>festgelegt werden.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextToColumns">
      <MemberSignature Language="C#" Value="public object TextToColumns (object Destination, Microsoft.Office.Interop.Excel.XlTextParsingType DataType = Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited, Microsoft.Office.Interop.Excel.XlTextQualifier TextQualifier = Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierDoubleQuote, object ConsecutiveDelimiter, object Tab, object Semicolon, object Comma, object Space, object Other, object OtherChar, object FieldInfo, object DecimalSeparator, object ThousandsSeparator, object TrailingMinusNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object TextToColumns([in]object Destination, [in]valuetype Microsoft.Office.Interop.Excel.XlTextParsingType DataType, [in]valuetype Microsoft.Office.Interop.Excel.XlTextQualifier TextQualifier, [in]object ConsecutiveDelimiter, [in]object Tab, [in]object Semicolon, [in]object Comma, [in]object Space, [in]object Other, [in]object OtherChar, [in]object FieldInfo, [in]object DecimalSeparator, [in]object ThousandsSeparator, [in]object TrailingMinusNumbers) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.TextToColumns(System.Object,Microsoft.Office.Interop.Excel.XlTextParsingType,Microsoft.Office.Interop.Excel.XlTextQualifier,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TextToColumns (Optional Destination As Object, Optional DataType As XlTextParsingType = Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited, Optional TextQualifier As XlTextQualifier = Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierDoubleQuote, Optional ConsecutiveDelimiter As Object, Optional Tab As Object, Optional Semicolon As Object, Optional Comma As Object, Optional Space As Object, Optional Other As Object, Optional OtherChar As Object, Optional FieldInfo As Object, Optional DecimalSeparator As Object, Optional ThousandsSeparator As Object, Optional TrailingMinusNumbers As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1040)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Destination" Type="System.Object" />
        <Parameter Name="DataType" Type="Microsoft.Office.Interop.Excel.XlTextParsingType" />
        <Parameter Name="TextQualifier" Type="Microsoft.Office.Interop.Excel.XlTextQualifier" />
        <Parameter Name="ConsecutiveDelimiter" Type="System.Object" />
        <Parameter Name="Tab" Type="System.Object" />
        <Parameter Name="Semicolon" Type="System.Object" />
        <Parameter Name="Comma" Type="System.Object" />
        <Parameter Name="Space" Type="System.Object" />
        <Parameter Name="Other" Type="System.Object" />
        <Parameter Name="OtherChar" Type="System.Object" />
        <Parameter Name="FieldInfo" Type="System.Object" />
        <Parameter Name="DecimalSeparator" Type="System.Object" />
        <Parameter Name="ThousandsSeparator" Type="System.Object" />
        <Parameter Name="TrailingMinusNumbers" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Destination">Optionales- <b>Objekt</b>. Eine <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekt, das angibt, in dem Microsoft Excel die Ergebnisse einfügen soll. Wenn der Bereich größer als eine einzelne Zelle ist, wird die linke obere Zelle verwendet.</param>
        <param name="DataType">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlTextParsingType" />. Das Format des Texts, der in Spalten aufgeteilt werden soll. Kann eine der folgenden <b>XlTextParsingType</b> -Konstanten sein:<b>XlDelimited </b><paramref name="default" /><b>XlFixedWidth</b></param>
        <param name="TextQualifier">Optionale <see cref="T:Microsoft.Office.Interop.Excel.XlTextQualifier" />. Kann eine der folgenden <b>XlTextQualifier</b> -Konstanten sein:<b>XlTextQualifierDoubleQuote</b><paramref name="default" /><b>XlTextQualifierNone</b><b>XlTextQualifierSingleQuote</b></param>
        <param name="ConsecutiveDelimiter">Optionales- <b>Objekt</b>. <b>True</b> , wenn Microsoft Excel aufeinander folgende Trennzeichen als ein Trennzeichen interpretieren. Der Standardwert lautet <b>False</b>.</param>
        <param name="Tab">Optionales- <b>Objekt</b>. <b>True</b> , wenn <paramref name="DataType" /><b>xlDelimited</b> und das Tabstoppzeichen Zeichen als Trennzeichen verwendet. Der Standardwert lautet <b>False</b>.</param>
        <param name="Semicolon">Optionales- <b>Objekt</b>. <b>True</b> , wenn <paramref name="DataType" /><b>xlDelimited</b> und das Semikolon als Trennzeichen verwendet wird. Der Standardwert lautet <b>False</b>.</param>
        <param name="Comma">Optionales- <b>Objekt</b>. <b>True</b> , wenn <paramref name="DataType" /><b>xlDelimited</b> und das Komma als Trennzeichen verwendet wird. Der Standardwert lautet <b>False</b>.</param>
        <param name="Space">Optionales- <b>Objekt</b>. <b>True</b> , wenn <paramref name="DataType" /><b>xlDelimited</b> hat und das Leerzeichen als Trennzeichen angesehen werden. Der Standardwert lautet <b>False</b>.</param>
        <param name="Other">Optionales- <b>Objekt</b>. <b>True</b> , wenn <paramref name="DataType" /><b>xlDelimited</b> und die angegebene Zeichen von der <paramref name="OtherChar" /> Argument als Trennzeichen verwendet werden. Der Standardwert lautet <b>False</b>.</param>
        <param name="OtherChar">Optionales- <b>Objekt</b> (erforderlich, wenn <paramref name="Other" /><b>True</b>ist). Das Trennzeichen Zeichen wann <paramref name="Other" /> ist <b>True</b>. Wenn mehr als ein Zeichen angegeben wird nur das erste Zeichen der Zeichenfolge; die verbleibenden Zeichen werden ignoriert.</param>
        <param name="FieldInfo">Optionales- <b>Objekt</b>. Ein Array mit Informationen für die einzelnen Spalten des Daten analysieren. Die Interpretation hängt vom Wert der <paramref name="DataType" />. Wenn die Daten getrennt sind, ist dieses Argument ein Array von Arrays mit jeder Matrix mit zwei Elementen, die Konvertierungsoptionen für eine bestimmte Spalte angibt. Das erste Element ist die Spaltennummer (1-basiert), und das zweite Element ist eine von der <see cref="T:Microsoft.Office.Interop.Excel.XlColumnDataType" /> Konstanten, die angeben, wie die Spalte analysiert wird. Kann eine der folgenden <b>XlColumnDataType</b> -Konstanten sein:<b>XlGeneralFormat</b>. Allgemein. <b>XlTextFormat</b>. Text. <b>XlMDYFormat</b>. MTJ Datum. <b>XlDMYFormat</b>. TMJ Datum. <b>XlYMDFormat</b>. JMT Datum. <b>XlMYDFormat</b>. MJT Datum. <b>XlDYMFormat</b>. TJM Datum. <b>XlYDMFormat</b>. JTM Datum. <b>XlEMDFormat</b>. Datum im Emd-Format. <b>XlSkipColumn</b>. Skip Column.You können <b>XlEMDFormat</b> nur, wenn Taiwan sprachunterstützung installiert und aktiviert ist. Die <b>XlEMDFormat</b> -Konstante gibt an, dass Kalenderangaben verwendet werden. Der Spaltenbezeichner können in beliebiger Reihenfolge entsprechen. Wenn Sie ein Bezeichner für die angegebene Spalte nicht in den Eingabedaten für eine bestimmte Spalte vorhanden ist, wird die Spalte mit der Einstellung <b>Standard</b> analysiert. Wenn die Quelldaten Spalten mit fester Breite aufweist, gibt das erste Element der jedes Array mit zwei Elementen die Position des Startzeichens in der Spalte (als ganze Zahl; 0 (null) ist das erste Zeichen). Das zweite Element des Arrays zwei Elementen gibt die Parse-Option für die Spalte als Zahl von 1 bis 9, wie oben aufgelisteten.</param>
        <param name="DecimalSeparator">Optionale <b>Zeichenfolge</b>. Das Dezimaltrennzeichen, das Microsoft Excel beim Erkennen von Zahlen verwendet. Die Standardeinstellung ist die Systemeinstellung.</param>
        <param name="ThousandsSeparator">Optionale <b>Zeichenfolge</b>. Das Tausendertrennzeichen Trennzeichen, das Excel beim Erkennen von Zahlen verwendet. Die Standardeinstellung ist die Systemeinstellung.</param>
        <param name="TrailingMinusNumbers">Optionales- <b>Objekt</b>. Zahlen, denen ein Minuszeichen vorangestellt ist.</param>
        <summary>Analysiert eine Spalte mit Zellen, die Text enthalten, und gibt das Ergebnis in mehreren Spalten aus.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>In der folgenden Tabelle sind die Ergebnisse des Importierens von Text in Excel für verschiedene importeinstellungen. Numerische Ergebnisse werden angezeigt, in der Spalte ganz rechts.</para>
          <list type="table">
            <item>
              <term>Zeitraum</term>
              <description>durch Trennzeichen</description>
              <description>Komma</description>
              <description>Zeitraum</description>
              <description>123.123,45</description>
              <description>123,123.45 (numerisch)</description>
            </item>
            <item>
              <term>Zeitraum</term>
              <description>durch Trennzeichen</description>
              <description>Komma</description>
              <description>Komma</description>
              <description>123.123,45</description>
              <description>123.123,45) Text)</description>
            </item>
            <item>
              <term>Komma</term>
              <description>Zeitraum</description>
              <description>Komma</description>
              <description>Zeitraum</description>
              <description>123,123.45</description>
              <description>123,123.45 (numerisch)</description>
            </item>
            <item>
              <term>Zeitraum</term>
              <description>Komma</description>
              <description>Zeitraum</description>
              <description>Komma</description>
              <description>123 123,45</description>
              <description>123 123,45 (Text)</description>
            </item>
            <item>
              <term>Zeitraum</term>
              <description>Komma</description>
              <description>Zeitraum</description>
              <description>Speicherplatz</description>
              <description>123 123,45</description>
              <description>123,123.45 (numerisch)</description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public object Top { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Top" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Top" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Top As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Top { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(126)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(126)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den Abstand in Punkt vom oberen Rand der Zeile 1 zum oberen Rand des Bereichs zurück.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Wenn der Bereich nicht zusammenhängende ist, wird der erste Bereich verwendet. Wenn der Bereich mehr als eine Zeile hoch ist, wird die oberste niedrigsten (nummerierte) Zeile im Bereich verwendet.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ungroup">
      <MemberSignature Language="C#" Value="public object Ungroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Ungroup() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Ungroup" />
      <MemberSignature Language="VB.NET" Value="Public Function Ungroup () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Ungroup();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(244)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stuft einen Bereich in einer Gliederung (d. h., seine Gliederungsebene wird verringert).</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Der angegebene Bereich muss eine Zeile oder Spalte oder einen Bereich von Zeilen oder Spalten. Wenn der Bereich in einem PivotTable-Bericht ist, diese Methode hebt die Gruppierung im Bereich enthaltenen Elemente.</para>
          <para>, Wenn die aktive Zelle in einem Feld Header eines übergeordneten Felds befindet, die alle Gruppen in diesem Feld werden aufgehoben, und das Feld aus dem PivotTable-Bericht entfernt. Wenn die letzte Gruppe in einem übergeordneten Feld aufgehoben wird, wird das gesamte Feld aus dem Bericht entfernt.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnMerge">
      <MemberSignature Language="C#" Value="public void UnMerge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnMerge() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.UnMerge" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnMerge ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnMerge();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1384)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Löst einen zusammengeführten Bereich in einzelne Zellen auf.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseStandardHeight">
      <MemberSignature Language="C#" Value="public object UseStandardHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UseStandardHeight" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.UseStandardHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStandardHeight As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UseStandardHeight { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(274)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(274)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(274)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob die Zeilenhöhe von der <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekt gleich die Standardhöhe des Blatts.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft gibt <b>True</b> zurück, wenn die Zeilenhöhe des <b>Range</b> -Objekts ist der Standardhöhe des Blatts gleich und <b>Null,</b> Wenn der Bereich mehr als eine Zeile und die Zeilen enthält nicht alle dieselbe Höhe.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseStandardWidth">
      <MemberSignature Language="C#" Value="public object UseStandardWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UseStandardWidth" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.UseStandardWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStandardWidth As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UseStandardWidth { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(275)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(275)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(275)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob die Breite der <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekt entspricht die Standardbreite des Blatts.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft gibt <b>True</b> zurück, wenn die Spaltenbreite des <b>Range</b> -Objekts der Standardbreite des Blatts entspricht und <b>Null,</b> Wenn der Bereich mehr als eine Spalte und die Spalten enthält nicht alle die gleiche Breite.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validation">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Validation Validation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Validation Validation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Validation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Validation As Validation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Validation ^ Validation { Microsoft::Office::Interop::Excel::Validation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1387)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1387)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Validation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt die <see cref="T:Microsoft.Office.Interop.Excel.Validation" /> -Objekt, das die datenüberprüfung für den angegebenen Bereich darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value[object RangeValueDataType] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Value(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Property Value(Optional RangeValueDataType As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value[System::Object ^] { System::Object ^ get(System::Object ^ RangeValueDataType); void set(System::Object ^ RangeValueDataType, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RangeValueDataType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RangeValueDataType">Optionales- <b>Objekt</b>. Der Datentyp des Bereichs. Kann eine der folgenden <see cref="T:Microsoft.Office.Interop.Excel.XlRangeValueDataType" /> Konstanten:<b>XlRangeValueDefault</b><paramref name="default" /> Wenn das angegebene <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekt leer ist, gibt den Wert <b>leer</b> (die <b>IsEmpty</b> -Funktion zum Testen für in diesem Fall verwenden). Wenn das <b>Range</b> -Objekt mehrere Zellen enthält, gibt ein Array von Werten (verwenden die <b>IsArray</b> -Funktion, um diesen Fall zum Testen) zurück. <b>xlRangeValueMSPersistXML</b>    Gibt die Recordset-Darstellung des angegebenen <b>Range</b> -Objekts in einem XML-Format zurück. <b>xlRangeValueXMLSpreadsheet</b>    Gibt die Werte, Formatierungen, Formeln und Namen des angegebenen <b>Range</b> -Objekts im XML-Tabellenformat zurück.</param>
        <summary>Gibt zurück oder legt den Wert des angegebenen Bereichs.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Wenn Sie einen Zellbereich mit dem Inhalt der XML-Kalkulationstabellendatei festlegen, werden nur die Werte für das erste Arbeitsblatt in der Arbeitsmappe verwendet. Sie können nicht festlegen oder Abrufen ein nicht zusammenhängenden Bereichs von Zellen in dem Format XML-Kalkulationstabelle.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value2">
      <MemberSignature Language="C#" Value="public object Value2 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value2" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Value2" />
      <MemberSignature Language="VB.NET" Value="Public Property Value2 As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value2 { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1388)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1388)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1388)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zurückgeben oder Festlegen der Wert der Zelle.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Der einzige Unterschied zwischen dieser Eigenschaft und die <b>Value</b> -Eigenschaft ist, dass die <b>Value2</b> -Eigenschaft die Datentypen <b>Currency</b> und <b>Date</b> nicht verwendet. Sie können mithilfe den Datentyp <b>Double</b> mit diesen Datentypen als Gleitkommawerte formatierten Werte zurückgeben.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public object VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.VerticalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalAlignment As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ VerticalAlignment { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(137)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(137)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(137)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt zurück oder legt die vertikale Ausrichtung des angegebenen Objekts.</summary>
        <value>.</value>
        <remarks>
          <para>Die vertikale Ausrichtung: zurückgegebene Bezeichner kann eine der folgenden Lese-/Schreibzugriff <b>Objektwerte</b> :</para>
          <list type="bullet">
            <item>
              <description>
                <b>XlBottom</b>
              </description>
            </item>
            <item>
              <description>
                <b>XlCenter</b>
              </description>
            </item>
            <item>
              <description>
                <b>XlDistributed</b>
              </description>
            </item>
            <item>
              <description>
                <b>XlJustify</b>
              </description>
            </item>
            <item>
              <description>
                <b>XlTop</b>
              </description>
            </item>
          </list>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public object Width { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Width" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Width" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Width As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Width { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(122)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(122)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Die Breite des Bereichs in Punkten.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Worksheet">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Worksheet Worksheet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Worksheet Worksheet" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Worksheet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Worksheet As Worksheet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Worksheet ^ Worksheet { Microsoft::Office::Interop::Excel::Worksheet ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(348)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(348)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Worksheet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> -Objekt, das das Arbeitsblatt mit dem angegebenen Bereich darstellt.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WrapText">
      <MemberSignature Language="C#" Value="public object WrapText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object WrapText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.WrapText" />
      <MemberSignature Language="VB.NET" Value="Public Property WrapText As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ WrapText { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(276)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(276)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(276)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bestimmt, ob den Text im Objekt Microsoft Excel umbrochen wird.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Diese Eigenschaft gibt <b>True</b> zurück, wenn Microsoft Excel umbrochen des Texts im Objekt wird und <b>Null,</b> Wenn der angegebene Bereich einige Zellen mit Textumbruch enthält und andere, die Zellen nicht.</para>
          <para>Microsoft Excel wird die Zeilenhöhe im Bereich ändern, falls erforderlich, um den Text in dem Bereich unterzubringen.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XPath XPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.XPath XPath" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.XPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property XPath As XPath" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XPath ^ XPath { Microsoft::Office::Interop::Excel::XPath ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2258)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2258)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt ein <see cref="T:Microsoft.Office.Interop.Excel.XPath" /> -Objekt, das den XPath-Ausdruck des zugeordneten auf den angegebenen Elements darstellt <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Objekt.</summary>
        <value>To be added.</value>
        <remarks>
          <para>XML-Features, außer das Speichern von Dateien im XML-Tabellenformat stehen nur in Microsoft Office Professional Edition 2003 und Microsoft Office Excel 2003.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>